{"version":3,"file":"static/js/2438.38a27741.chunk.js","mappings":"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","sources":["webpack://hub/./src/components/TrackingDashboard.css?c838","webpack://hub/./src/components/TrainingHub.css?45c0","config/trainingModules.ts","components/TrainingHub.tsx","components/TrackingDashboard.tsx","webpack://hub/./src/components/CoachSelection.css?dc0e","components/CoachSelection.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// Training Module Configuration for Each Dating Coach\n\nexport interface TrackingMetric {\n  id: string;\n  name: string;\n  description: string;\n  unit: string; // percentage, count, seconds, etc.\n  idealRange?: { min: number; max: number };\n  weight: number; // importance in overall score (0-1)\n}\n\nexport interface TrainingModule {\n  id: string;\n  name: string;\n  coachId: string;\n  description: string;\n  duration: number; // in minutes\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  prerequisites?: string[]; // module IDs\n  objectives: string[];\n  exercises: Exercise[];\n  trackingMetrics: TrackingMetric[];\n  successCriteria: SuccessCriteria;\n}\n\nexport interface Exercise {\n  id: string;\n  name: string;\n  type: 'conversation' | 'scenario' | 'mirroring' | 'freestyle' | 'reaction';\n  instructions: string;\n  duration: number; // seconds\n  prompts?: string[];\n  expectedBehaviors: string[];\n}\n\nexport interface SuccessCriteria {\n  minimumScore: number; // 0-100\n  requiredMetrics: { metricId: string; minimumValue: number }[];\n  bonusObjectives?: string[];\n}\n\n// GRACE'S TRAINING MODULES - Charm & Conversation\nexport const GRACE_MODULES: TrainingModule[] = [\n  {\n    id: 'grace-intro-charm',\n    name: 'Introduction to Charm',\n    coachId: 'grace',\n    description: 'Master the fundamentals of charming conversation and social grace',\n    duration: 15,\n    difficulty: 'beginner',\n    objectives: [\n      'Deliver sincere compliments naturally',\n      'Maintain engaging eye contact',\n      'Use open-ended questions effectively',\n      'Practice active listening'\n    ],\n    exercises: [\n      {\n        id: 'compliment-craft',\n        name: 'Compliment Crafting',\n        type: 'conversation',\n        instructions: 'Practice giving specific, sincere compliments that go beyond appearance',\n        duration: 180,\n        prompts: [\n          'Your date just told you about their passion project',\n          'You notice your date has excellent taste in wine',\n          'Your date shares a personal achievement'\n        ],\n        expectedBehaviors: ['Specificity', 'Sincerity', 'Follow-up questions']\n      },\n      {\n        id: 'conversation-flow',\n        name: 'Conversation Flow',\n        type: 'freestyle',\n        instructions: 'Keep a natural conversation going for 3 minutes without awkward pauses',\n        duration: 180,\n        expectedBehaviors: ['Smooth transitions', 'Balanced speaking time', 'Natural follow-ups']\n      }\n    ],\n    trackingMetrics: [\n      {\n        id: 'conversation-flow-score',\n        name: 'Conversation Flow',\n        description: 'Smoothness of topic transitions and lack of awkward pauses',\n        unit: 'percentage',\n        idealRange: { min: 70, max: 100 },\n        weight: 0.3\n      },\n      {\n        id: 'compliment-quality',\n        name: 'Compliment Quality',\n        description: 'Specificity and sincerity of compliments',\n        unit: 'score',\n        idealRange: { min: 7, max: 10 },\n        weight: 0.2\n      },\n      {\n        id: 'question-ratio',\n        name: 'Question Ratio',\n        description: 'Balance of questions asked vs statements made',\n        unit: 'ratio',\n        idealRange: { min: 0.3, max: 0.5 },\n        weight: 0.2\n      },\n      {\n        id: 'active-listening',\n        name: 'Active Listening Score',\n        description: 'References to previous conversation points',\n        unit: 'count',\n        idealRange: { min: 3, max: 10 },\n        weight: 0.3\n      }\n    ],\n    successCriteria: {\n      minimumScore: 70,\n      requiredMetrics: [\n        { metricId: 'conversation-flow-score', minimumValue: 65 },\n        { metricId: 'active-listening', minimumValue: 3 }\n      ]\n    }\n  },\n  {\n    id: 'grace-advanced-etiquette',\n    name: 'Advanced Social Etiquette',\n    coachId: 'grace',\n    description: 'Navigate formal settings and high-stakes social situations with elegance',\n    duration: 20,\n    difficulty: 'advanced',\n    prerequisites: ['grace-intro-charm'],\n    objectives: [\n      'Master formal dining etiquette',\n      'Handle introductions gracefully',\n      'Navigate controversial topics diplomatically',\n      'Demonstrate cultural awareness'\n    ],\n    exercises: [\n      {\n        id: 'formal-dining',\n        name: 'Formal Dining Simulation',\n        type: 'scenario',\n        instructions: 'Navigate a formal dinner date while maintaining conversation',\n        duration: 300,\n        prompts: ['Wine selection', 'Utensil usage', 'Napkin etiquette', 'Toast giving'],\n        expectedBehaviors: ['Proper etiquette', 'Confidence', 'Teaching without condescending']\n      }\n    ],\n    trackingMetrics: [\n      {\n        id: 'etiquette-violations',\n        name: 'Etiquette Violations',\n        description: 'Number of social faux pas committed',\n        unit: 'count',\n        idealRange: { min: 0, max: 2 },\n        weight: 0.4\n      },\n      {\n        id: 'grace-under-pressure',\n        name: 'Grace Under Pressure',\n        description: 'Composure during challenging moments',\n        unit: 'percentage',\n        idealRange: { min: 80, max: 100 },\n        weight: 0.6\n      }\n    ],\n    successCriteria: {\n      minimumScore: 80,\n      requiredMetrics: [\n        { metricId: 'etiquette-violations', minimumValue: 0 },\n        { metricId: 'grace-under-pressure', minimumValue: 75 }\n      ]\n    }\n  }\n];\n\n// POSIE'S TRAINING MODULES - Body Language & Engagement\nexport const POSIE_MODULES: TrainingModule[] = [\n  {\n    id: 'posie-body-basics',\n    name: 'Body Language Basics',\n    coachId: 'posie',\n    description: 'Understand and master the fundamentals of attractive body language',\n    duration: 20,\n    difficulty: 'beginner',\n    objectives: [\n      'Maintain appropriate eye contact',\n      'Use open body posture',\n      'Mirror partner naturally',\n      'Understand personal space dynamics'\n    ],\n    exercises: [\n      {\n        id: 'eye-contact-practice',\n        name: 'Eye Contact Calibration',\n        type: 'mirroring',\n        instructions: 'Practice maintaining eye contact: 70% during listening, 50% while speaking',\n        duration: 120,\n        expectedBehaviors: ['Natural breaks', 'Triangle technique', 'Smiling with eyes']\n      },\n      {\n        id: 'mirroring-exercise',\n        name: 'Natural Mirroring',\n        type: 'mirroring',\n        instructions: 'Subtly mirror your partner\\'s gestures and energy level',\n        duration: 180,\n        expectedBehaviors: ['Delayed mirroring', 'Partial matching', 'Energy synchronization']\n      }\n    ],\n    trackingMetrics: [\n      {\n        id: 'eye-contact-duration',\n        name: 'Eye Contact Duration',\n        description: 'Percentage of appropriate eye contact maintained',\n        unit: 'percentage',\n        idealRange: { min: 50, max: 70 },\n        weight: 0.3\n      },\n      {\n        id: 'posture-openness',\n        name: 'Posture Openness',\n        description: 'Openness and invitation of body positioning',\n        unit: 'score',\n        idealRange: { min: 7, max: 10 },\n        weight: 0.2\n      },\n      {\n        id: 'mirroring-naturalness',\n        name: 'Mirroring Naturalness',\n        description: 'How naturally you mirror without being obvious',\n        unit: 'score',\n        idealRange: { min: 6, max: 9 },\n        weight: 0.3\n      },\n      {\n        id: 'proximity-comfort',\n        name: 'Proximity Comfort',\n        description: 'Appropriate use of personal space',\n        unit: 'score',\n        idealRange: { min: 7, max: 10 },\n        weight: 0.2\n      }\n    ],\n    successCriteria: {\n      minimumScore: 65,\n      requiredMetrics: [\n        { metricId: 'eye-contact-duration', minimumValue: 40 },\n        { metricId: 'posture-openness', minimumValue: 6 }\n      ]\n    }\n  },\n  {\n    id: 'posie-chemistry-creation',\n    name: 'Creating Chemistry Through Presence',\n    coachId: 'posie',\n    description: 'Advanced techniques for building romantic tension and connection',\n    duration: 25,\n    difficulty: 'intermediate',\n    prerequisites: ['posie-body-basics'],\n    objectives: [\n      'Create tension through proximity',\n      'Use touch appropriately',\n      'Build anticipation with pauses',\n      'Synchronize breathing and energy'\n    ],\n    exercises: [\n      {\n        id: 'tension-building',\n        name: 'Tension Building',\n        type: 'scenario',\n        instructions: 'Create romantic tension without words, using only presence and positioning',\n        duration: 240,\n        prompts: ['Lean in moment', 'Almost touch', 'Meaningful pause', 'Energy spike'],\n        expectedBehaviors: ['Gradual escalation', 'Reading signals', 'Creating anticipation']\n      }\n    ],\n    trackingMetrics: [\n      {\n        id: 'tension-level',\n        name: 'Romantic Tension Level',\n        description: 'Measured chemistry and attraction indicators',\n        unit: 'score',\n        idealRange: { min: 6, max: 9 },\n        weight: 0.4\n      },\n      {\n        id: 'touch-appropriateness',\n        name: 'Touch Appropriateness',\n        description: 'Timing and placement of physical contact',\n        unit: 'score',\n        idealRange: { min: 8, max: 10 },\n        weight: 0.3\n      },\n      {\n        id: 'energy-synchronization',\n        name: 'Energy Sync',\n        description: 'How well you match and lead energy levels',\n        unit: 'percentage',\n        idealRange: { min: 70, max: 90 },\n        weight: 0.3\n      }\n    ],\n    successCriteria: {\n      minimumScore: 75,\n      requiredMetrics: [\n        { metricId: 'tension-level', minimumValue: 6 },\n        { metricId: 'touch-appropriateness', minimumValue: 7 }\n      ]\n    }\n  }\n];\n\n// RIZZO'S TRAINING MODULES - Confidence & Charisma\nexport const RIZZO_MODULES: TrainingModule[] = [\n  {\n    id: 'rizzo-confidence-101',\n    name: 'Confidence Bootcamp',\n    coachId: 'rizzo',\n    description: 'Build unshakeable confidence and magnetic presence',\n    duration: 18,\n    difficulty: 'beginner',\n    objectives: [\n      'Project confidence through voice and posture',\n      'Handle rejection with style',\n      'Make bold first moves',\n      'Own your sexuality'\n    ],\n    exercises: [\n      {\n        id: 'rejection-recovery',\n        name: 'Rejection Recovery',\n        type: 'reaction',\n        instructions: 'Practice handling rejection with humor and grace',\n        duration: 150,\n        prompts: [\n          'They say they have a partner',\n          'They\\'re not interested',\n          'They give you a fake number'\n        ],\n        expectedBehaviors: ['Graceful acceptance', 'Humor', 'Quick recovery', 'No bitterness']\n      },\n      {\n        id: 'bold-opener',\n        name: 'Bold Openers',\n        type: 'conversation',\n        instructions: 'Deliver confident opening lines that stand out',\n        duration: 120,\n        prompts: ['Bar approach', 'Coffee shop', 'Gym encounter', 'Bookstore browse'],\n        expectedBehaviors: ['Confidence', 'Originality', 'Follow-through', 'Reading the room']\n      }\n    ],\n    trackingMetrics: [\n      {\n        id: 'confidence-projection',\n        name: 'Confidence Projection',\n        description: 'Overall confidence in voice, posture, and delivery',\n        unit: 'score',\n        idealRange: { min: 7, max: 10 },\n        weight: 0.4\n      },\n      {\n        id: 'recovery-speed',\n        name: 'Recovery Speed',\n        description: 'How quickly you bounce back from awkward moments',\n        unit: 'seconds',\n        idealRange: { min: 1, max: 5 },\n        weight: 0.2\n      },\n      {\n        id: 'boldness-score',\n        name: 'Boldness Score',\n        description: 'Willingness to take risks and make moves',\n        unit: 'score',\n        idealRange: { min: 7, max: 9 },\n        weight: 0.4\n      }\n    ],\n    successCriteria: {\n      minimumScore: 70,\n      requiredMetrics: [\n        { metricId: 'confidence-projection', minimumValue: 6 },\n        { metricId: 'boldness-score', minimumValue: 6 }\n      ]\n    }\n  },\n  {\n    id: 'rizzo-banter-master',\n    name: 'Banter & Sexual Tension',\n    coachId: 'rizzo',\n    description: 'Master the art of flirty banter and building sexual tension',\n    duration: 22,\n    difficulty: 'intermediate',\n    prerequisites: ['rizzo-confidence-101'],\n    objectives: [\n      'Deliver witty comebacks',\n      'Use innuendo tastefully',\n      'Create push-pull dynamics',\n      'Build sexual tension verbally'\n    ],\n    exercises: [\n      {\n        id: 'witty-banter',\n        name: 'Witty Banter Tennis',\n        type: 'conversation',\n        instructions: 'Engage in playful verbal sparring with increasing intensity',\n        duration: 240,\n        prompts: ['Tease response', 'Double entendre', 'Playful challenge', 'Flirty comeback'],\n        expectedBehaviors: ['Quick wit', 'Playfulness', 'Calibration', 'Escalation']\n      }\n    ],\n    trackingMetrics: [\n      {\n        id: 'wit-speed',\n        name: 'Response Speed',\n        description: 'How quickly you deliver comebacks',\n        unit: 'seconds',\n        idealRange: { min: 0.5, max: 3 },\n        weight: 0.3\n      },\n      {\n        id: 'banter-quality',\n        name: 'Banter Quality',\n        description: 'Cleverness and appropriateness of responses',\n        unit: 'score',\n        idealRange: { min: 7, max: 10 },\n        weight: 0.4\n      },\n      {\n        id: 'sexual-tension',\n        name: 'Sexual Tension Level',\n        description: 'Ability to create and maintain attraction',\n        unit: 'score',\n        idealRange: { min: 6, max: 8 },\n        weight: 0.3\n      }\n    ],\n    successCriteria: {\n      minimumScore: 75,\n      requiredMetrics: [\n        { metricId: 'banter-quality', minimumValue: 7 },\n        { metricId: 'sexual-tension', minimumValue: 5 }\n      ]\n    }\n  }\n];\n\n// Progress tracking interface\nexport interface UserProgress {\n  userId: string;\n  moduleId: string;\n  completionDate?: Date;\n  score: number;\n  metricScores: { [metricId: string]: number };\n  attempts: number;\n  timeSpent: number; // in seconds\n  notes?: string;\n}\n\n// Helper functions\nexport function getAllModules(): TrainingModule[] {\n  return [...GRACE_MODULES, ...POSIE_MODULES, ...RIZZO_MODULES];\n}\n\nexport function getModulesByCoach(coachId: string): TrainingModule[] {\n  return getAllModules().filter(module => module.coachId === coachId);\n}\n\nexport function getModuleById(moduleId: string): TrainingModule | undefined {\n  return getAllModules().find(module => module.id === moduleId);\n}\n\nexport function calculateModuleScore(\n  metricScores: { [metricId: string]: number },\n  module: TrainingModule\n): number {\n  let totalScore = 0;\n  let totalWeight = 0;\n\n  module.trackingMetrics.forEach(metric => {\n    const score = metricScores[metric.id] || 0;\n    const normalizedScore = metric.idealRange\n      ? Math.min(100, (score / metric.idealRange.max) * 100)\n      : score;\n    \n    totalScore += normalizedScore * metric.weight;\n    totalWeight += metric.weight;\n  });\n\n  return totalWeight > 0 ? Math.round(totalScore / totalWeight) : 0;\n}\n\nexport function isModuleUnlocked(\n  moduleId: string,\n  userProgress: UserProgress[]\n): boolean {\n  const module = getModuleById(moduleId);\n  if (!module || !module.prerequisites) return true;\n\n  return module.prerequisites.every(prereqId => {\n    const progress = userProgress.find(p => p.moduleId === prereqId);\n    return progress && progress.score >= module.successCriteria.minimumScore;\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport { COACHES, CoachProfile, getCoachById } from '../config/coachConfig';\nimport { getModulesByCoach, TrainingModule, UserProgress, isModuleUnlocked } from '../config/trainingModules';\nimport CoachSelection from './CoachSelection';\nimport TrainingModuleCard from './TrainingModuleCard';\nimport TrackingDashboard from './TrackingDashboard';\nimport './TrainingHub.css';\nimport { useNavigate } from 'react-router-dom';\nimport BasicNPCScenarios from './BasicNPCScenarios';\nimport { PerformanceAnalytics } from '../utils/performanceAnalytics';\n\n// Mock user progress - in production this would come from a database\nconst mockUserProgress: UserProgress[] = [];\n\ninterface TrainingHubProps {\n  onStartModule?: (module: TrainingModule, coach: CoachProfile) => void;\n}\n\nconst TrainingHub: React.FC<TrainingHubProps> = ({ onStartModule }) => {\n  const [selectedCoach, setSelectedCoach] = useState<CoachProfile | null>(null);\n  const [selectedModule, setSelectedModule] = useState<TrainingModule | null>(null);\n  const [userProgress, setUserProgress] = useState<UserProgress[]>(mockUserProgress);\n  const [showDashboard, setShowDashboard] = useState(false);\n  const [showNPCScenarios, setShowNPCScenarios] = useState(false);\n  const [performanceAnalytics] = useState(new PerformanceAnalytics());\n  const navigate = useNavigate();\n\n  const handleCoachSelect = (coach: CoachProfile) => {\n    setSelectedCoach(coach);\n    setSelectedModule(null);\n    setShowDashboard(false);\n  };\n\n  const handleModuleStart = (module: TrainingModule) => {\n    setSelectedModule(module);\n    if (onStartModule && selectedCoach) {\n      onStartModule(module, selectedCoach);\n    }\n  };\n\n  const modules = selectedCoach ? getModulesByCoach(selectedCoach.id) : [];\n\n  // Mock tracking data for demo\n  const mockMetrics = selectedModule ? selectedModule.trackingMetrics.map(metric => ({\n    metric,\n    currentValue: Math.random() * (metric.idealRange?.max || 10),\n    history: []\n  })) : [];\n\n  return (\n    <div className=\"training-hub\">\n      <div className=\"hub-header\">\n        <h1>XRCupid Training Hub</h1>\n        <p className=\"hub-subtitle\">Master the art of romance with personalized coaching</p>\n        <button \n          className=\"hume-test-btn\"\n          onClick={() => navigate('/hume-test')}\n          style={{\n            position: 'absolute',\n            top: '20px',\n            right: '20px',\n            background: 'linear-gradient(135deg, #7c3aed 0%, #ec4899 100%)',\n            border: 'none',\n            color: 'white',\n            padding: '10px 20px',\n            borderRadius: '8px',\n            cursor: 'pointer',\n            fontWeight: '600',\n            fontSize: '14px'\n          }}\n        >\n          🧪 Hume AI Test\n        </button>\n      </div>\n\n      {!selectedCoach ? (\n        <CoachSelection \n          onSelectCoach={handleCoachSelect}\n          selectedCoachId={undefined}\n        />\n      ) : (\n        <div className=\"training-content\">\n          <div className=\"selected-coach-header\">\n            <div className=\"coach-info\">\n              <h2>Training with {selectedCoach.name}</h2>\n              <p>{selectedCoach.personality} coach</p>\n            </div>\n            <div className=\"coach-actions\">\n              <button \n                className=\"live-session-btn\"\n                onClick={() => navigate(`/coach-call/${selectedCoach.id}`)}\n              >\n                Start Live Session\n              </button>\n              <button \n                className=\"change-coach-btn\"\n                onClick={() => setSelectedCoach(null)}\n              >\n                Change Coach\n              </button>\n            </div>\n          </div>\n\n          <div className=\"training-layout\">\n            <div className=\"training-sections\">\n              <div \n                className=\"training-section modules\" \n                onClick={() => setShowDashboard(true)}\n              >\n                <div className=\"section-icon\">📚</div>\n                <h3>Training Modules</h3>\n                <p>Learn the fundamentals of romance and relationships</p>\n                <div className=\"section-features\">\n                  <span>• Emotional Intelligence</span>\n                  <span>• Communication Skills</span>\n                  <span>• Conflict Resolution</span>\n                </div>\n              </div>\n              <div \n                className=\"training-section npc-practice\" \n                onClick={() => setShowNPCScenarios(true)}\n              >\n                <div className=\"section-icon\">🎭</div>\n                <h3>Practice Dating Scenarios</h3>\n                <p>Safe practice with AI dates to build confidence</p>\n                <div className=\"section-features\">\n                  <span>• Rejection handling</span>\n                  <span>• Emotional regulation</span>\n                  <span>• Reading interest levels</span>\n                </div>\n              </div>\n              <div className=\"training-section analytics\">\n                <div className=\"section-icon\">📊</div>\n                <h3>Your Progress</h3>\n                <div className=\"progress-summary\">\n                  <div className=\"progress-item\">\n                    <span>Sessions Completed:</span>\n                    <span>{performanceAnalytics.getUserHistory('current_user').length}</span>\n                  </div>\n                  <div className=\"progress-item\">\n                    <span>Current Level:</span>\n                    <span>Foundation</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {selectedModule && (\n              <div className=\"module-details\">\n                <div className=\"details-header\">\n                  <h3>Module: {selectedModule.name}</h3>\n                  <button \n                    className=\"dashboard-toggle\"\n                    onClick={() => setShowDashboard(!showDashboard)}\n                  >\n                    {showDashboard ? 'Hide' : 'Show'} Live Tracking\n                  </button>\n                </div>\n\n                <div className=\"module-exercises\">\n                  <h4>Exercises in this module:</h4>\n                  {selectedModule.exercises.map((exercise, index) => (\n                    <div key={exercise.id} className=\"exercise-item\">\n                      <span className=\"exercise-number\">{index + 1}</span>\n                      <div className=\"exercise-info\">\n                        <h5>{exercise.name}</h5>\n                        <p>{exercise.instructions}</p>\n                        <span className=\"exercise-duration\">{exercise.duration}s</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {showDashboard && (\n                  <TrackingDashboard\n                    metrics={mockMetrics}\n                    coachColor={selectedCoach.color}\n                    sessionActive={false}\n                  />\n                )}\n\n                <div className=\"module-actions\">\n                  <button \n                    className=\"start-training-btn\"\n                    style={{ backgroundColor: selectedCoach.color }}\n                    onClick={() => {\n                      // This would navigate to the actual training session\n                      console.log('Starting training:', selectedModule.name);\n                      if (onStartModule && selectedCoach) {\n                        onStartModule(selectedModule, selectedCoach);\n                      }\n                    }}\n                  >\n                    Start Training Session\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      {showNPCScenarios && (\n        <div className=\"modal-overlay\" onClick={() => setShowNPCScenarios(false)}>\n          <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n            <button \n              className=\"close-button\" \n              onClick={() => setShowNPCScenarios(false)}\n            >\n              ×\n            </button>\n            <BasicNPCScenarios />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TrainingHub;\n","import React, { useState } from 'react';\nimport { TrackingMetric } from '../config/trainingModules';\nimport './TrackingDashboard.css';\n\ninterface MetricData {\n  metric: TrackingMetric;\n  currentValue: number;\n  history: { timestamp: Date; value: number }[];\n}\n\ninterface TrackingDashboardProps {\n  metrics: MetricData[];\n  coachColor: string;\n  sessionActive: boolean;\n}\n\nconst TrackingDashboard: React.FC<TrackingDashboardProps> = ({\n  metrics,\n  coachColor,\n  sessionActive\n}) => {\n  const [expandedMetric, setExpandedMetric] = useState<string | null>(null);\n\n  const getMetricStatus = (metric: TrackingMetric, value: number): 'excellent' | 'good' | 'needs-work' => {\n    if (!metric.idealRange) return 'good';\n    \n    if (value >= metric.idealRange.min && value <= metric.idealRange.max) {\n      return 'excellent';\n    } else if (\n      value >= metric.idealRange.min * 0.8 && \n      value <= metric.idealRange.max * 1.2\n    ) {\n      return 'good';\n    }\n    return 'needs-work';\n  };\n\n  const getStatusColor = (status: string): string => {\n    switch (status) {\n      case 'excellent': return '#4CAF50';\n      case 'good': return '#FFC107';\n      case 'needs-work': return '#F44336';\n      default: return '#666';\n    }\n  };\n\n  const formatValue = (value: number, unit: string): string => {\n    switch (unit) {\n      case 'percentage':\n        return `${Math.round(value)}%`;\n      case 'seconds':\n        return `${value.toFixed(1)}s`;\n      case 'ratio':\n        return value.toFixed(2);\n      case 'count':\n        return Math.round(value).toString();\n      case 'score':\n        return `${value.toFixed(1)}/10`;\n      default:\n        return value.toString();\n    }\n  };\n\n  return (\n    <div className=\"tracking-dashboard\">\n      <div className=\"dashboard-header\">\n        <h3>Real-time Performance Tracking</h3>\n        <div className={`session-indicator ${sessionActive ? 'active' : ''}`}>\n          <span className=\"indicator-dot\" />\n          {sessionActive ? 'Recording' : 'Paused'}\n        </div>\n      </div>\n\n      <div className=\"metrics-grid\">\n        {metrics.map((metricData) => {\n          const status = getMetricStatus(metricData.metric, metricData.currentValue);\n          const isExpanded = expandedMetric === metricData.metric.id;\n          \n          return (\n            <div\n              key={metricData.metric.id}\n              className={`metric-card ${status} ${isExpanded ? 'expanded' : ''}`}\n              onClick={() => setExpandedMetric(isExpanded ? null : metricData.metric.id)}\n            >\n              <div className=\"metric-header\">\n                <h4>{metricData.metric.name}</h4>\n                <div \n                  className=\"metric-value\"\n                  style={{ color: getStatusColor(status) }}\n                >\n                  {formatValue(metricData.currentValue, metricData.metric.unit)}\n                </div>\n              </div>\n\n              <div className=\"metric-body\">\n                <p className=\"metric-description\">{metricData.metric.description}</p>\n                \n                {metricData.metric.idealRange && (\n                  <div className=\"ideal-range\">\n                    <span className=\"range-label\">Ideal Range:</span>\n                    <span className=\"range-value\">\n                      {formatValue(metricData.metric.idealRange.min, metricData.metric.unit)}\n                      {' - '}\n                      {formatValue(metricData.metric.idealRange.max, metricData.metric.unit)}\n                    </span>\n                  </div>\n                )}\n\n                <div className=\"metric-progress\">\n                  <div className=\"progress-track\">\n                    <div \n                      className=\"progress-indicator\"\n                      style={{\n                        left: `${Math.min(100, Math.max(0, (metricData.currentValue / 10) * 100))}%`,\n                        backgroundColor: getStatusColor(status)\n                      }}\n                    />\n                  </div>\n                </div>\n\n                {isExpanded && metricData.history.length > 0 && (\n                  <div className=\"metric-history\">\n                    <h5>Recent History</h5>\n                    <div className=\"history-items\">\n                      {metricData.history.slice(-5).map((item, index) => (\n                        <div key={index} className=\"history-item\">\n                          <span className=\"history-time\">\n                            {new Date(item.timestamp).toLocaleTimeString()}\n                          </span>\n                          <span className=\"history-value\">\n                            {formatValue(item.value, metricData.metric.unit)}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"metric-weight\">\n                <div \n                  className=\"weight-bar\"\n                  style={{ \n                    width: `${metricData.metric.weight * 100}%`,\n                    backgroundColor: coachColor\n                  }}\n                />\n                <span className=\"weight-label\">\n                  {Math.round(metricData.metric.weight * 100)}% weight\n                </span>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"dashboard-footer\">\n        <div className=\"overall-score\">\n          <span className=\"score-label\">Overall Module Score:</span>\n          <span className=\"score-value\" style={{ color: coachColor }}>\n            {Math.round(\n              metrics.reduce((sum, m) => {\n                const status = getMetricStatus(m.metric, m.currentValue);\n                const score = status === 'excellent' ? 100 : status === 'good' ? 75 : 50;\n                return sum + (score * m.metric.weight);\n              }, 0) / metrics.reduce((sum, m) => sum + m.metric.weight, 0)\n            )}%\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TrackingDashboard;\n","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport { COACHES, CoachProfile } from '../config/coachConfig';\nimport RisographAngel from './RisographAngel';\nimport RisographHeart from './RisographHeart';\nimport './CoachSelection.css';\n\ninterface CoachSelectionProps {\n  onSelectCoach: (coach: CoachProfile) => void;\n  selectedCoachId?: string;\n}\n\nconst CoachSelection: React.FC<CoachSelectionProps> = ({ onSelectCoach, selectedCoachId }) => {\n  const coaches = Object.values(COACHES);\n\n  return (\n    <div className=\"coach-selection-container risograph-container\">\n      <div className=\"selection-hero\">\n        <RisographAngel size={100} className=\"hero-angel-small\" />\n        <h2 className=\"coach-selection-title offset-text\">\n          <span className=\"title-main\">Choose Your Dating Coach</span>\n          <RisographHeart size={35} className=\"title-heart\" animated />\n        </h2>\n        <p className=\"coach-selection-subtitle\">Each coach specializes in different aspects of romance</p>\n      </div>\n      \n      <div className=\"coach-cards\">\n        {coaches.map((coach) => (\n          <div \n            key={coach.id} \n            className={`coach-card riso-card ${selectedCoachId === coach.id ? 'selected' : ''}`}\n            onClick={() => onSelectCoach(coach)}\n            style={{ borderColor: coach.color }}\n          >\n            <div className=\"coach-card-decoration\">\n              <RisographHeart size={20} />\n            </div>\n            <div className=\"coach-card-header\" style={{ backgroundColor: coach.color }}>\n              <h3>{coach.name}</h3>\n            </div>\n            \n            <div className=\"coach-card-body\">\n              <p className=\"coach-description\">{coach.description}</p>\n              \n              <div className=\"coach-specialties\">\n                <h4>Specializes in:</h4>\n                <div className=\"specialty-tags\">\n                  {coach.specialty.slice(0, 3).map((spec, index) => (\n                    <span key={index} className=\"specialty-tag\" style={{ backgroundColor: `${coach.color}20`, color: coach.color }}>\n                      {spec}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"coach-personality\">\n                <span className=\"personality-badge\" style={{ color: coach.color }}>\n                  {coach.personality} personality\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"coach-card-footer\">\n              <button \n                className=\"select-coach-btn\"\n                style={{ \n                  backgroundColor: selectedCoachId === coach.id ? coach.color : 'transparent',\n                  borderColor: coach.color,\n                  color: selectedCoachId === coach.id ? 'white' : coach.color\n                }}\n              >\n                {selectedCoachId === coach.id ? 'Selected' : 'Select Coach'}\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CoachSelection;\n"],"names":["GRACE_MODULES","id","name","coachId","description","duration","difficulty","objectives","exercises","type","instructions","prompts","expectedBehaviors","trackingMetrics","unit","idealRange","min","max","weight","successCriteria","minimumScore","requiredMetrics","metricId","minimumValue","prerequisites","POSIE_MODULES","RIZZO_MODULES","getAllModules","mockUserProgress","_ref","onStartModule","selectedCoach","setSelectedCoach","useState","selectedModule","setSelectedModule","userProgress","setUserProgress","showDashboard","setShowDashboard","showNPCScenarios","setShowNPCScenarios","performanceAnalytics","PerformanceAnalytics","navigate","useNavigate","filter","module","mockMetrics","map","metric","_metric$idealRange","currentValue","Math","random","history","_jsxs","className","children","_jsx","onClick","style","position","top","right","background","border","color","padding","borderRadius","cursor","fontWeight","fontSize","personality","concat","getUserHistory","length","exercise","index","TrackingDashboard","metrics","coachColor","sessionActive","backgroundColor","console","log","CoachSelection","onSelectCoach","coach","selectedCoachId","undefined","e","stopPropagation","BasicNPCScenarios","expandedMetric","setExpandedMetric","getMetricStatus","value","getStatusColor","status","formatValue","round","toFixed","toString","metricData","isExpanded","left","slice","item","Date","timestamp","toLocaleTimeString","width","reduce","sum","m","coaches","Object","values","COACHES","RisographAngel","size","RisographHeart","animated","borderColor","specialty","spec"],"sourceRoot":""}