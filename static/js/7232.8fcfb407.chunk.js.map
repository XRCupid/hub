{"version":3,"file":"static/js/7232.8fcfb407.chunk.js","mappings":"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","sources":["components/ConferenceSetup.tsx","webpack://hub/./src/components/ConferenceSetup.css?587e"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { database } from '../firebase';\nimport AudienceAnalyticsDashboard from './AudienceAnalyticsDashboard';\nimport QRCode from 'qrcode';\nimport './ConferenceSetup.css';\n\ninterface ConferenceSetupProps {\n  mode: 'host-display' | 'mobile';\n}\n\nexport const ConferenceSetup: React.FC<ConferenceSetupProps> = ({ mode }) => {\n  const [roomId, setRoomId] = useState<string>('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [localStream, setLocalStream] = useState<MediaStream | null>(null);\n  const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);\n  const [participantName, setParticipantName] = useState<string>('');\n  const [hostName, setHostName] = useState<string>('Host');\n  const [mobileName, setMobileName] = useState<string>('Mobile User');\n  const [showAnalytics, setShowAnalytics] = useState(false);\n  const [showPresenceAvatars, setShowPresenceAvatars] = useState(true);\n  const [qrCode, setQrCode] = useState<string>('');\n\n  const localVideoRef = useRef<HTMLVideoElement>(null);\n\n  const generateRoomId = () => {\n    return Math.random().toString(36).substring(2, 8).toUpperCase();\n  };\n\n  // Update video element when stream changes\n  useEffect(() => {\n    if (localVideoRef.current && localStream) {\n      localVideoRef.current.srcObject = localStream;\n    }\n  }, [localStream]);\n\n  // Check for room ID in URL params for mobile mode\n  useEffect(() => {\n    if (mode === 'mobile') {\n      const urlParams = new URLSearchParams(window.location.search);\n      const roomFromUrl = urlParams.get('room');\n      if (roomFromUrl) {\n        setRoomId(roomFromUrl);\n      }\n    }\n  }, [mode]);\n\n  const handleSetupRoom = async () => {\n    try {\n      const newRoomId = generateRoomId();\n      setRoomId(newRoomId);\n      \n      // Create room in database\n      if (database) {\n        const roomRef = database.ref(`conference-rooms/${newRoomId}`);\n        await roomRef.set({\n          createdAt: new Date().toISOString(),\n          hostName: participantName || 'Host',\n          status: 'waiting'\n        });\n      }\n      \n      // Start local video\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: true, \n        audio: true \n      });\n      setLocalStream(stream);\n      \n      // Generate QR code for mobile joining\n      const mobileUrl = `${window.location.origin}/conference-mobile?room=${newRoomId}`;\n      try {\n        const qrDataUrl = await QRCode.toDataURL(mobileUrl, {\n          width: 256,\n          margin: 2,\n          color: {\n            dark: '#000000',\n            light: '#FFFFFF'\n          }\n        });\n        setQrCode(qrDataUrl);\n      } catch (err) {\n        console.error('Error generating QR code:', err);\n      }\n      \n      // Listen for mobile participant\n      if (database) {\n        const roomRef = database.ref(`conference-rooms/${newRoomId}`);\n        roomRef.on('value', (snapshot: any) => {\n          const data = snapshot.val();\n          if (data?.mobileConnected) {\n            setIsConnected(true);\n            setMobileName(data.mobileName || 'Mobile User');\n            // When mobile connects, switch to analytics view\n            setShowAnalytics(true);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error setting up room:', error);\n    }\n  };\n\n  const handleJoinRoom = async () => {\n    try {\n      // Start local video\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: true, \n        audio: true \n      });\n      setLocalStream(stream);\n      \n      // Check if room exists\n      if (database) {\n        const roomRef = database.ref(`conference-rooms/${roomId}`);\n        const snapshot = await new Promise<any>((resolve) => {\n          roomRef.once('value', resolve);\n        });\n        \n        if (!snapshot.exists()) {\n          alert('Room not found. Please check the room code.');\n          return;\n        }\n        \n        // Get existing data and merge with new data\n        const existingData = snapshot.val();\n        await roomRef.set({\n          ...existingData,\n          mobileConnected: true,\n          mobileName: participantName || 'Mobile User',\n          status: 'connected'\n        });\n      }\n      \n      setIsConnected(true);\n    } catch (error) {\n      console.error('Error joining room:', error);\n    }\n  };\n\n  return (\n    <div className=\"conference-setup\">\n      <div className=\"setup-header\">\n        <h1>XRCupid Conference Booth</h1>\n        <p className=\"mode-indicator\">Mode: {mode === 'host-display' ? 'HOST + DISPLAY' : 'MOBILE PARTICIPANT'}</p>\n      </div>\n\n      {!showAnalytics ? (\n        <div className=\"setup-form\">\n          {mode === 'host-display' ? (\n            <div className=\"host-setup\">\n              <h2>Host Computer Setup</h2>\n              <p className=\"setup-description\">\n                This computer will capture webcam video AND display the audience analytics\n              </p>\n              <input\n                type=\"text\"\n                placeholder=\"Host participant name\"\n                value={participantName}\n                onChange={(e) => setParticipantName(e.target.value)}\n                className=\"name-input\"\n              />\n              <button onClick={handleSetupRoom} className=\"setup-button\">\n                Create Room & Start Webcam\n              </button>\n              {roomId && !isConnected && (\n                <div className=\"room-info\">\n                  <h3>Room Created!</h3>\n                  <div className=\"room-code\">{roomId}</div>\n                  \n                  {qrCode && (\n                    <div className=\"qr-section\">\n                      <p className=\"qr-instruction\">Scan with mobile device:</p>\n                      <img src={qrCode} alt=\"QR Code\" className=\"qr-code\" />\n                      <p className=\"mobile-scan-info\">Or enter code: <strong>{roomId}</strong></p>\n                    </div>\n                  )}\n                  \n                  <p className=\"waiting-status\">Waiting for mobile participant...</p>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"mobile-setup\">\n              <h2>Mobile Participant Setup</h2>\n              <input\n                type=\"text\"\n                placeholder=\"Your name\"\n                value={participantName}\n                onChange={(e) => setParticipantName(e.target.value)}\n                className=\"name-input\"\n              />\n              <input\n                type=\"text\"\n                placeholder=\"Enter Room Code\"\n                value={roomId}\n                onChange={(e) => setRoomId(e.target.value.toUpperCase())}\n                className=\"room-input\"\n                maxLength={6}\n              />\n              <button onClick={handleJoinRoom} className=\"setup-button\">\n                Join Room with Camera\n              </button>\n              {isConnected && (\n                <div className=\"mobile-connected\">\n                  <h3>Connected to Room: {roomId}</h3>\n                  <video\n                    ref={localVideoRef}\n                    autoPlay\n                    muted\n                    playsInline\n                    className=\"mobile-preview\"\n                  />\n                  <p className=\"mobile-status\">Your video is being shared with the audience display</p>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"analytics-view\">\n          <div className=\"analytics-header\">\n            <h2>Live Speed Dating Analytics</h2>\n            <div className=\"room-badge\">Room: {roomId}</div>\n          </div>\n          <AudienceAnalyticsDashboard\n            participant1Stream={localStream || null}\n            participant2Stream={remoteStream || null}\n            participant1Name={hostName}\n            participant2Name={mobileName}\n            roomId={roomId}\n            showPresenceAvatars={showPresenceAvatars}\n            enableRealTimeCoaching={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["ConferenceSetup","_ref","mode","roomId","setRoomId","useState","isConnected","setIsConnected","localStream","setLocalStream","remoteStream","setRemoteStream","participantName","setParticipantName","hostName","setHostName","mobileName","setMobileName","showAnalytics","setShowAnalytics","showPresenceAvatars","setShowPresenceAvatars","qrCode","setQrCode","localVideoRef","useRef","useEffect","current","srcObject","roomFromUrl","URLSearchParams","window","location","search","get","_jsxs","className","children","_jsx","AudienceAnalyticsDashboard","participant1Stream","participant2Stream","participant1Name","participant2Name","enableRealTimeCoaching","type","placeholder","value","onChange","e","target","onClick","async","newRoomId","Math","random","toString","substring","toUpperCase","database","roomRef","ref","concat","set","createdAt","Date","toISOString","status","stream","navigator","mediaDevices","getUserMedia","video","audio","mobileUrl","origin","qrDataUrl","QRCode","width","margin","color","dark","light","err","console","error","on","snapshot","data","val","mobileConnected","src","alt","maxLength","Promise","resolve","once","exists","alert","existingData","_objectSpread","autoPlay","muted","playsInline"],"sourceRoot":""}