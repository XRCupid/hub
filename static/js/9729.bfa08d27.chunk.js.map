{"version":3,"file":"static/js/9729.bfa08d27.chunk.js","mappings":"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","sources":["utils/rpmAvatars.ts","components/RPMAvatarCreator.tsx"],"sourcesContent":["// Ready Player Me Avatar Utilities\n// This file contains sample RPM avatar URLs and utilities for avatar generation\n\nexport interface RPMAvatarConfig {\n  id: string;\n  name: string;\n  gender: 'male' | 'female';\n  style: 'realistic' | 'cartoon';\n  avatarUrl: string;\n}\n\n// Demo RPM Avatars - Using official Ready Player Me demo URLs\nexport const DEMO_RPM_AVATARS: RPMAvatarConfig[] = [\n  {\n    id: 'demo-male-1',\n    name: 'Alex',\n    gender: 'male',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5d.glb' // Official RPM demo male\n  },\n  {\n    id: 'demo-female-1', \n    name: 'Jordan',\n    gender: 'female',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5e.glb' // Official RPM demo female\n  },\n  {\n    id: 'demo-female-2',\n    name: 'Sam',\n    gender: 'female',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5f.glb' // Official RPM demo female\n  },\n  {\n    id: 'demo-male-2',\n    name: 'River',\n    gender: 'male',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d60.glb' // Official RPM demo male\n  },\n  {\n    id: 'haseeb-avatar',\n    name: 'Haseeb',\n    gender: 'male',\n    style: 'realistic',\n    avatarUrl: '/avatars/Haseeb.glb' // Local custom avatar\n  },\n  {\n    id: 'dougie-avatar',\n    name: 'Dougie',\n    gender: 'male',\n    style: 'realistic',\n    avatarUrl: '/avatars/Dougie.glb' // Local custom avatar\n  }\n];\n\n// Instructions for getting real RPM avatars\nexport const RPM_SETUP_INSTRUCTIONS = `\nðŸŽ­ HOW TO GET REAL RPM AVATARS:\n\n1. CREATE AVATARS:\n   â€¢ Visit https://readyplayer.me\n   â€¢ Create free avatars for your NPCs\n   â€¢ Copy the .glb URLs (e.g., https://models.readyplayer.me/your-avatar-id.glb)\n\n2. UPDATE AVATAR URLS:\n   â€¢ Replace empty URLs in DEMO_RPM_AVATARS with your real avatar URLs\n   â€¢ Or use the RPMAvatarCreator component to let users input custom URLs\n\n3. CURRENT STATUS:\n   â€¢ Fallback geometric avatars are showing (blue 3D shapes with simple faces)\n   â€¢ These demonstrate the 3D avatar positioning and emotion system\n   â€¢ Replace URLs to see actual RPM avatars with realistic faces and bodies\n\n4. WHERE TO SEE AVATARS:\n   â€¢ Dating Simulation â†’ Match with someone â†’ Chat â†’ Video Date\n   â€¢ The 3D avatar appears in the video call interface\n   â€¢ Emotions change based on conversation (via Hume AI)\n`;\n\n// RPM Avatar Generator Integration\nexport class RPMAvatarGenerator {\n  private static readonly RPM_SUBDOMAIN = 'demo'; // Replace with your subdomain\n  private static readonly RPM_API_BASE = 'https://api.readyplayer.me/v1';\n  \n  /**\n   * Generate Avatar Creator URL for custom avatar creation\n   * Users can create their own avatars using this URL\n   */\n  static getAvatarCreatorUrl(config?: {\n    bodyType?: 'halfbody' | 'fullbody';\n    quickStart?: boolean;\n    clearCache?: boolean;\n  }): string {\n    const params = new URLSearchParams();\n    \n    if (config?.bodyType) params.set('bodyType', config.bodyType);\n    if (config?.quickStart) params.set('quickStart', 'true');\n    if (config?.clearCache) params.set('clearCache', 'true');\n    \n    const queryString = params.toString();\n    const baseUrl = `https://${this.RPM_SUBDOMAIN}.readyplayer.me/avatar`;\n    \n    return queryString ? `${baseUrl}?${queryString}` : baseUrl;\n  }\n  \n  /**\n   * Validate if an avatar URL is properly formatted\n   */\n  static isValidAvatarUrl(url: string): boolean {\n    const rpmUrlPattern = /^https:\\/\\/(models\\.readyplayer\\.me|d1a370nemizbjq\\.cloudfront\\.net)\\/.+\\.glb$/;\n    return rpmUrlPattern.test(url);\n  }\n  \n  /**\n   * Get a random demo avatar for testing\n   */\n  static getRandomDemoAvatar(): RPMAvatarConfig {\n    const avatars = DEMO_RPM_AVATARS;\n    return avatars[Math.floor(Math.random() * avatars.length)];\n  }\n  \n  /**\n   * Get avatar by character name\n   */\n  static getAvatarByName(name: string): RPMAvatarConfig | null {\n    return DEMO_RPM_AVATARS.find(avatar => \n      avatar.name.toLowerCase() === name.toLowerCase()\n    ) || null;\n  }\n\n  /**\n   * Log setup instructions to console\n   */\n  static logSetupInstructions(): void {\n    console.log(RPM_SETUP_INSTRUCTIONS);\n  }\n}\n\n// Avatar URL validation and fallback\nexport const getValidAvatarUrl = (url?: string): string | undefined => {\n  if (!url) return undefined;\n  \n  // If it's a valid RPM URL, return it\n  if (RPMAvatarGenerator.isValidAvatarUrl(url)) {\n    return url;\n  }\n  \n  // Otherwise return undefined to use fallback\n  return undefined;\n};\n\nexport default {\n  DEMO_RPM_AVATARS,\n  RPMAvatarGenerator,\n  getValidAvatarUrl,\n  RPM_SETUP_INSTRUCTIONS\n};\n","import React, { useState, useEffect } from 'react';\nimport { RPMAvatarGenerator, DEMO_RPM_AVATARS, RPMAvatarConfig } from '../utils/rpmAvatars';\n\ninterface RPMAvatarCreatorProps {\n  onAvatarSelect: (avatarUrl: string) => void;\n  onClose: () => void;\n  currentAvatarUrl?: string;\n}\n\nconst RPMAvatarCreator: React.FC<RPMAvatarCreatorProps> = ({\n  onAvatarSelect,\n  onClose,\n  currentAvatarUrl\n}) => {\n  const [selectedAvatar, setSelectedAvatar] = useState<string>(currentAvatarUrl || '');\n  const [customUrl, setCustomUrl] = useState<string>('');\n  const [activeTab, setActiveTab] = useState<'presets' | 'custom' | 'create'>('presets');\n\n  const handleAvatarSelect = (avatar: RPMAvatarConfig) => {\n    setSelectedAvatar(avatar.avatarUrl);\n    onAvatarSelect?.(avatar.avatarUrl);\n  };\n\n  const handleCustomUrlSubmit = () => {\n    if (RPMAvatarGenerator.isValidAvatarUrl(customUrl)) {\n      setSelectedAvatar(customUrl);\n    } else {\n      alert('Please enter a valid Ready Player Me avatar URL (.glb file)');\n    }\n  };\n\n  const handleConfirm = () => {\n    if (selectedAvatar) {\n      onAvatarSelect(selectedAvatar);\n      onClose();\n    }\n  };\n\n  const openAvatarCreator = () => {\n    const creatorUrl = RPMAvatarGenerator.getAvatarCreatorUrl({\n      bodyType: 'halfbody',\n      quickStart: true\n    });\n    window.open(creatorUrl, '_blank', 'width=800,height=600');\n  };\n\n  return (\n    <div className=\"rpm-avatar-creator-overlay\">\n      <div className=\"rpm-avatar-creator\">\n        <div className=\"creator-header\">\n          <h2>Choose Your Avatar</h2>\n          <button className=\"close-btn\" onClick={onClose}>Ã—</button>\n        </div>\n\n        <div className=\"creator-tabs\">\n          <button \n            className={`tab ${activeTab === 'presets' ? 'active' : ''}`}\n            onClick={() => setActiveTab('presets')}\n          >\n            Preset Avatars\n          </button>\n          <button \n            className={`tab ${activeTab === 'custom' ? 'active' : ''}`}\n            onClick={() => setActiveTab('custom')}\n          >\n            Custom URL\n          </button>\n          <button \n            className={`tab ${activeTab === 'create' ? 'active' : ''}`}\n            onClick={() => setActiveTab('create')}\n          >\n            Create New\n          </button>\n        </div>\n\n        <div className=\"creator-content\">\n          {activeTab === 'presets' && (\n            <div className=\"preset-avatars\">\n              <p className=\"section-description\">\n                Choose from our curated selection of Ready Player Me avatars:\n              </p>\n              <div className=\"avatar-grid\">\n                {DEMO_RPM_AVATARS.map((avatar) => (\n                  <div \n                    key={avatar.id}\n                    className={`avatar-option ${selectedAvatar === avatar.avatarUrl ? 'selected' : ''}`}\n                    onClick={() => handleAvatarSelect(avatar)}\n                  >\n                    <div className=\"avatar-preview\">\n                      <div className=\"avatar-placeholder\">\n                        {avatar.name[0]}\n                      </div>\n                      <div className=\"avatar-info\">\n                        <span className=\"avatar-name\">{avatar.name}</span>\n                        <span className=\"avatar-type\">{avatar.gender} â€¢ {avatar.style}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'custom' && (\n            <div className=\"custom-url-section\">\n              <p className=\"section-description\">\n                Enter a Ready Player Me avatar URL (.glb file):\n              </p>\n              <div className=\"url-input-group\">\n                <input\n                  type=\"url\"\n                  value={customUrl}\n                  onChange={(e) => setCustomUrl(e.target.value)}\n                  placeholder=\"https://models.readyplayer.me/your-avatar-id.glb\"\n                  className=\"url-input\"\n                />\n                <button \n                  onClick={handleCustomUrlSubmit}\n                  className=\"validate-btn\"\n                  disabled={!customUrl}\n                >\n                  Validate\n                </button>\n              </div>\n              <div className=\"url-help\">\n                <p><strong>How to get your avatar URL:</strong></p>\n                <ol>\n                  <li>Create an avatar at <a href=\"https://readyplayer.me\" target=\"_blank\" rel=\"noopener noreferrer\">readyplayer.me</a></li>\n                  <li>Copy the .glb URL from the avatar page</li>\n                  <li>Paste it above and click \"Validate\"</li>\n                </ol>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'create' && (\n            <div className=\"create-avatar-section\">\n              <p className=\"section-description\">\n                Create a new avatar using Ready Player Me's Avatar Creator:\n              </p>\n              <div className=\"create-steps\">\n                <div className=\"step\">\n                  <span className=\"step-number\">1</span>\n                  <div className=\"step-content\">\n                    <h4>Open Avatar Creator</h4>\n                    <p>Click below to open Ready Player Me's avatar creation tool in a new window.</p>\n                    <button onClick={openAvatarCreator} className=\"create-btn\">\n                      ðŸŽ¨ Create Avatar\n                    </button>\n                  </div>\n                </div>\n                <div className=\"step\">\n                  <span className=\"step-number\">2</span>\n                  <div className=\"step-content\">\n                    <h4>Customize Your Avatar</h4>\n                    <p>Use the creator to design your perfect avatar with facial features, hair, clothing, and more.</p>\n                  </div>\n                </div>\n                <div className=\"step\">\n                  <span className=\"step-number\">3</span>\n                  <div className=\"step-content\">\n                    <h4>Copy the URL</h4>\n                    <p>Once created, copy the .glb URL and paste it in the \"Custom URL\" tab above.</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"creator-footer\">\n          <div className=\"selected-info\">\n            {selectedAvatar && (\n              <span className=\"selected-url\">\n                Selected: {selectedAvatar.substring(0, 50)}...\n              </span>\n            )}\n          </div>\n          <div className=\"creator-actions\">\n            <button onClick={onClose} className=\"cancel-btn\">\n              Cancel\n            </button>\n            <button \n              onClick={handleConfirm} \n              className=\"confirm-btn\"\n              disabled={!selectedAvatar}\n            >\n              Use This Avatar\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <style>{`\n        .rpm-avatar-creator-overlay {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(0, 0, 0, 0.8);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          z-index: 1000;\n        }\n\n        .rpm-avatar-creator {\n          background: white;\n          border-radius: 16px;\n          width: 90%;\n          max-width: 600px;\n          max-height: 80vh;\n          overflow: hidden;\n          display: flex;\n          flex-direction: column;\n        }\n\n        .creator-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 20px;\n          border-bottom: 1px solid #eee;\n        }\n\n        .creator-header h2 {\n          margin: 0;\n          color: #333;\n        }\n\n        .close-btn {\n          background: none;\n          border: none;\n          font-size: 24px;\n          cursor: pointer;\n          color: #666;\n          padding: 0;\n          width: 32px;\n          height: 32px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .creator-tabs {\n          display: flex;\n          border-bottom: 1px solid #eee;\n        }\n\n        .tab {\n          flex: 1;\n          padding: 12px 16px;\n          border: none;\n          background: none;\n          cursor: pointer;\n          font-weight: 500;\n          color: #666;\n          transition: all 0.2s;\n        }\n\n        .tab.active {\n          color: #4A90E2;\n          border-bottom: 2px solid #4A90E2;\n        }\n\n        .creator-content {\n          flex: 1;\n          padding: 20px;\n          overflow-y: auto;\n        }\n\n        .section-description {\n          margin: 0 0 16px 0;\n          color: #666;\n        }\n\n        .avatar-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n          gap: 12px;\n        }\n\n        .avatar-option {\n          border: 2px solid #eee;\n          border-radius: 12px;\n          padding: 12px;\n          cursor: pointer;\n          transition: all 0.2s;\n          text-align: center;\n        }\n\n        .avatar-option:hover {\n          border-color: #4A90E2;\n        }\n\n        .avatar-option.selected {\n          border-color: #4A90E2;\n          background: #f0f7ff;\n        }\n\n        .avatar-placeholder {\n          width: 60px;\n          height: 60px;\n          border-radius: 50%;\n          background: #4A90E2;\n          color: white;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 24px;\n          font-weight: bold;\n          margin: 0 auto 8px;\n        }\n\n        .avatar-name {\n          display: block;\n          font-weight: 600;\n          color: #333;\n        }\n\n        .avatar-type {\n          display: block;\n          font-size: 12px;\n          color: #666;\n          margin-top: 2px;\n        }\n\n        .url-input-group {\n          display: flex;\n          gap: 8px;\n          margin-bottom: 16px;\n        }\n\n        .url-input {\n          flex: 1;\n          padding: 12px;\n          border: 1px solid #ddd;\n          border-radius: 8px;\n          font-size: 14px;\n        }\n\n        .validate-btn {\n          padding: 12px 20px;\n          background: #4A90E2;\n          color: white;\n          border: none;\n          border-radius: 8px;\n          cursor: pointer;\n          font-weight: 500;\n        }\n\n        .validate-btn:disabled {\n          background: #ccc;\n          cursor: not-allowed;\n        }\n\n        .url-help {\n          background: #f8f9fa;\n          padding: 16px;\n          border-radius: 8px;\n          border-left: 4px solid #4A90E2;\n        }\n\n        .url-help p {\n          margin: 0 0 8px 0;\n          font-weight: 600;\n        }\n\n        .url-help ol {\n          margin: 0;\n          padding-left: 20px;\n        }\n\n        .url-help a {\n          color: #4A90E2;\n          text-decoration: none;\n        }\n\n        .create-steps {\n          space-y: 16px;\n        }\n\n        .step {\n          display: flex;\n          gap: 16px;\n          margin-bottom: 20px;\n        }\n\n        .step-number {\n          width: 32px;\n          height: 32px;\n          border-radius: 50%;\n          background: #4A90E2;\n          color: white;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-weight: bold;\n          flex-shrink: 0;\n        }\n\n        .step-content h4 {\n          margin: 0 0 8px 0;\n          color: #333;\n        }\n\n        .step-content p {\n          margin: 0 0 12px 0;\n          color: #666;\n          line-height: 1.5;\n        }\n\n        .create-btn {\n          background: #4A90E2;\n          color: white;\n          border: none;\n          padding: 12px 20px;\n          border-radius: 8px;\n          cursor: pointer;\n          font-weight: 500;\n          font-size: 16px;\n        }\n\n        .creator-footer {\n          padding: 20px;\n          border-top: 1px solid #eee;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n\n        .selected-url {\n          font-size: 12px;\n          color: #666;\n          font-family: monospace;\n        }\n\n        .creator-actions {\n          display: flex;\n          gap: 12px;\n        }\n\n        .cancel-btn {\n          padding: 12px 20px;\n          border: 1px solid #ddd;\n          background: white;\n          border-radius: 8px;\n          cursor: pointer;\n          font-weight: 500;\n        }\n\n        .confirm-btn {\n          padding: 12px 20px;\n          background: #4A90E2;\n          color: white;\n          border: none;\n          border-radius: 8px;\n          cursor: pointer;\n          font-weight: 500;\n        }\n\n        .confirm-btn:disabled {\n          background: #ccc;\n          cursor: not-allowed;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default RPMAvatarCreator;\n"],"names":["DEMO_RPM_AVATARS","id","name","gender","style","avatarUrl","RPM_SETUP_INSTRUCTIONS","RPMAvatarGenerator","getAvatarCreatorUrl","config","params","URLSearchParams","bodyType","set","quickStart","clearCache","queryString","toString","baseUrl","concat","this","RPM_SUBDOMAIN","isValidAvatarUrl","url","test","getRandomDemoAvatar","avatars","Math","floor","random","length","getAvatarByName","find","avatar","toLowerCase","logSetupInstructions","console","log","RPM_API_BASE","_ref","onAvatarSelect","onClose","currentAvatarUrl","selectedAvatar","setSelectedAvatar","useState","customUrl","setCustomUrl","activeTab","setActiveTab","_jsxs","className","children","_jsx","onClick","map","handleAvatarSelect","type","value","onChange","e","target","placeholder","handleCustomUrlSubmit","alert","disabled","href","rel","openAvatarCreator","creatorUrl","window","open","substring","handleConfirm"],"sourceRoot":""}