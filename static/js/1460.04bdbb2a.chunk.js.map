{"version":3,"file":"static/js/1460.04bdbb2a.chunk.js","mappings":"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","sources":["webpack://hub/./src/components/TrackingModeSelector.css?7828","components/TrackingModeSelector.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, { useState } from 'react';\nimport { TrackingMode, TRACKING_MODES } from '../services/UnifiedTrackingCoordinator';\nimport './TrackingModeSelector.css';\n\ninterface TrackingModeSelectorProps {\n  currentMode?: TrackingMode;\n  onModeSelect: (mode: TrackingMode) => void;\n  onClose: () => void;\n}\n\nconst TrackingModeSelector: React.FC<TrackingModeSelectorProps> = ({\n  currentMode,\n  onModeSelect,\n  onClose\n}) => {\n  const [selectedMode, setSelectedMode] = useState<TrackingMode>(\n    currentMode || TRACKING_MODES.casual\n  );\n\n  const handleModeChange = (mode: TrackingMode) => {\n    setSelectedMode(mode);\n  };\n\n  const handleConfirm = () => {\n    onModeSelect(selectedMode);\n    onClose();\n  };\n\n  const getModeIcon = (modeId: string) => {\n    switch (modeId) {\n      case 'casual': return '💬';\n      case 'eye-contact': return '👁️';\n      case 'presence': return '🧍';\n      case 'expression': return '🤲';\n      default: return '📊';\n    }\n  };\n\n  const getBatteryIcon = (impact: string) => {\n    switch (impact) {\n      case 'low': return '🟢';\n      case 'medium': return '🟡';\n      case 'high': return '🔴';\n      default: return '⚪';\n    }\n  };\n\n  return (\n    <div className=\"tracking-mode-selector-overlay\">\n      <div className=\"tracking-mode-selector\">\n        <div className=\"mode-selector-header\">\n          <h2>Choose Tracking Focus</h2>\n          <p>Select what you want to work on (2 models max for performance)</p>\n          <button className=\"close-btn\" onClick={onClose}>×</button>\n        </div>\n\n        <div className=\"mode-grid\">\n          {Object.values(TRACKING_MODES).map((mode) => (\n            <div\n              key={mode.id}\n              className={`mode-card ${selectedMode.id === mode.id ? 'selected' : ''}`}\n              onClick={() => handleModeChange(mode)}\n            >\n              <div className=\"mode-icon\">{getModeIcon(mode.id)}</div>\n              \n              <div className=\"mode-info\">\n                <h3>{mode.displayName}</h3>\n                <p className=\"mode-description\">{mode.description}</p>\n                \n                <div className=\"mode-details\">\n                  <div className=\"detail-row\">\n                    <span className=\"detail-label\">Focus:</span>\n                    <span className=\"detail-value\">{mode.focusArea}</span>\n                  </div>\n                  \n                  <div className=\"detail-row\">\n                    <span className=\"detail-label\">Models:</span>\n                    <span className=\"detail-value\">\n                      Emotions + {mode.secondary.replace('-', ' ')}\n                    </span>\n                  </div>\n                  \n                  <div className=\"detail-row\">\n                    <span className=\"detail-label\">Battery:</span>\n                    <span className=\"detail-value\">\n                      {getBatteryIcon(mode.batteryImpact)} {mode.batteryImpact}\n                    </span>\n                  </div>\n                  \n                  <div className=\"detail-row\">\n                    <span className=\"detail-label\">Duration:</span>\n                    <span className=\"detail-value\">{mode.recommendedDuration} min</span>\n                  </div>\n                  \n                  {mode.disables && (\n                    <div className=\"detail-row\">\n                      <span className=\"detail-label\">Disables:</span>\n                      <span className=\"detail-value disabled-features\">\n                        {mode.disables.join(', ')}\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              {selectedMode.id === mode.id && (\n                <div className=\"selected-indicator\">✓</div>\n              )}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"mode-selector-footer\">\n          <div className=\"performance-note\">\n            <strong>🎯 Smart Performance:</strong> Only 2 CV models run simultaneously for optimal performance.\n            Facial emotions always active for Hume analytics.\n          </div>\n          \n          <div className=\"action-buttons\">\n            <button className=\"cancel-btn\" onClick={onClose}>\n              Cancel\n            </button>\n            <button className=\"confirm-btn\" onClick={handleConfirm}>\n              Start {selectedMode.displayName}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TrackingModeSelector;\n"],"names":["_ref","currentMode","onModeSelect","onClose","selectedMode","setSelectedMode","useState","TRACKING_MODES","casual","getModeIcon","modeId","getBatteryIcon","impact","_jsx","className","children","_jsxs","onClick","Object","values","map","mode","concat","id","handleModeChange","displayName","description","focusArea","secondary","replace","batteryImpact","recommendedDuration","disables","join","handleConfirm"],"sourceRoot":""}