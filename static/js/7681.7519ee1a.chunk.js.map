{"version":3,"file":"static/js/7681.7519ee1a.chunk.js","mappings":"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","sources":["components/BasicNPCScenarios.tsx","webpack://hub/./src/components/BasicNPCScenarios.css?299f","utils/performanceAnalytics.ts"],"sourcesContent":["// Basic NPC Dating Scenarios - Phase 1 Implementation\n// 3 simple but effective scenarios that provide immediate value\n\nimport React, { useState, useEffect } from 'react';\nimport { PerformanceAnalytics } from '../utils/performanceAnalytics';\nimport './BasicNPCScenarios.css';\n\ninterface BasicNPCScenario {\n  id: string;\n  name: string;\n  description: string;\n  difficulty: 'easy' | 'medium' | 'hard';\n  learningObjective: string;\n  npcBehavior: NPCBehavior;\n  successCriteria: string[];\n  failurePatterns: string[];\n}\n\ninterface NPCBehavior {\n  responseSpeed: 'fast' | 'medium' | 'slow';\n  enthusiasm: number; // 0-1\n  interest_decline_rate: number; // How quickly interest drops if user makes mistakes\n  rejection_style: 'polite' | 'direct' | 'gradual_fade';\n  conversation_depth: number; // 0-1\n}\n\nconst BasicNPCScenarios: React.FC = () => {\n  const [currentScenario, setCurrentScenario] = useState<BasicNPCScenario | null>(null);\n  const [conversationHistory, setConversationHistory] = useState<any[]>([]);\n  const [userMessage, setUserMessage] = useState('');\n  const [npcInterestLevel, setNpcInterestLevel] = useState(0.7);\n  const [sessionStartTime, setSessionStartTime] = useState(Date.now());\n  \n  const analytics = new PerformanceAnalytics();\n\n  // 3 CORE SCENARIOS FOR IMMEDIATE IMPLEMENTATION\n  const scenarios: BasicNPCScenario[] = [\n    {\n      id: 'polite_rejection',\n      name: 'Learning to Handle Polite Rejection',\n      description: 'Practice responding gracefully when someone isn\\'t interested',\n      difficulty: 'medium',\n      learningObjective: 'Accept rejection without taking it personally or trying to convince',\n      npcBehavior: {\n        responseSpeed: 'medium',\n        enthusiasm: 0.3, // Low interest from start\n        interest_decline_rate: 0.1,\n        rejection_style: 'polite',\n        conversation_depth: 0.4\n      },\n      successCriteria: [\n        'Accept the \"no\" gracefully',\n        'Don\\'t try to convince or negotiate',\n        'End conversation positively',\n        'Don\\'t take it personally'\n      ],\n      failurePatterns: [\n        'Arguing or trying to convince',\n        'Getting defensive or hurt',\n        'Asking \"why\" repeatedly',\n        'Making it about their loss'\n      ]\n    },\n    \n    {\n      id: 'slow_responder',\n      name: 'Patience with Slow Communication',\n      description: 'Learn emotional regulation when someone takes time to respond',\n      difficulty: 'easy',\n      learningObjective: 'Maintain composure and avoid over-texting when responses are delayed',\n      npcBehavior: {\n        responseSpeed: 'slow', // 2-5 minute delays\n        enthusiasm: 0.7, // Actually interested, just busy\n        interest_decline_rate: 0.3, // Interest drops if user gets impatient\n        rejection_style: 'gradual_fade',\n        conversation_depth: 0.8\n      },\n      successCriteria: [\n        'Wait patiently for responses',\n        'Don\\'t send follow-up messages',\n        'Maintain message quality despite delays',\n        'Stay positive and relaxed'\n      ],\n      failurePatterns: [\n        'Double/triple texting',\n        'Getting anxious about delays',\n        'Sending \"???\" or \"hello?\" messages',\n        'Assuming they\\'re not interested'\n      ]\n    },\n    \n    {\n      id: 'interest_mismatch',\n      name: 'Recognizing Interest Mismatch',\n      description: 'Learn to recognize when someone is being polite but not truly engaged',\n      difficulty: 'hard',\n      learningObjective: 'Identify and gracefully exit when interest isn\\'t mutual',\n      npcBehavior: {\n        responseSpeed: 'medium',\n        enthusiasm: 0.4, // Polite but not engaged\n        interest_decline_rate: 0.05, // Very gradual decline\n        rejection_style: 'gradual_fade',\n        conversation_depth: 0.2 // Surface level only\n      },\n      successCriteria: [\n        'Recognize the low engagement signs',\n        'Stop investing heavily in conversation',\n        'Exit gracefully without confrontation',\n        'Don\\'t take it personally'\n      ],\n      failurePatterns: [\n        'Over-investing in one-sided conversation',\n        'Trying to force engagement',\n        'Missing the subtle disinterest signals',\n        'Getting frustrated or pushy'\n      ]\n    }\n  ];\n\n  // NPC MESSAGE GENERATION\n  const generateNPCResponse = (userMsg: string, scenario: BasicNPCScenario, context: any): string => {\n    const behavior = scenario.npcBehavior;\n    \n    switch (scenario.id) {\n      case 'polite_rejection':\n        return handlePoliteRejectionScenario(userMsg, context, behavior);\n      case 'slow_responder':\n        return handleSlowResponderScenario(userMsg, context, behavior);\n      case 'interest_mismatch':\n        return handleInterestMismatchScenario(userMsg, context, behavior);\n      default:\n        return \"I'm not sure how to respond to that.\";\n    }\n  };\n\n  const handlePoliteRejectionScenario = (userMsg: string, context: any, behavior: NPCBehavior): string => {\n    const messageCount = conversationHistory.length;\n    \n    if (messageCount < 2) {\n      return \"Hi! Thanks for reaching out. How has your day been?\";\n    } else if (messageCount < 4) {\n      return \"That's nice! I've been pretty busy with work lately.\";\n    } else if (messageCount === 4) {\n      // Time for polite rejection\n      return \"I appreciate you asking, but I don't think we're a romantic match. I hope you find someone wonderful though!\";\n    } else {\n      // If user continues after rejection\n      if (userMsg.toLowerCase().includes('why') || userMsg.toLowerCase().includes('chance')) {\n        return \"I just don't feel that connection, and that's okay! These things happen.\";\n      } else {\n        return \"I hope you understand. Take care!\";\n      }\n    }\n  };\n\n  const handleSlowResponderScenario = (userMsg: string, context: any, behavior: NPCBehavior): string => {\n    // Simulate delays with actual setTimeout in real implementation\n    const responses = [\n      \"Hey! Sorry for the delay, I was in a meeting. How's your evening going?\",\n      \"That sounds really interesting! I love hearing about people's passions. Tell me more!\",\n      \"Haha, that's so funny! I have a similar story actually...\",\n      \"I'm really enjoying our conversation! What do you like to do on weekends?\",\n      \"That's so cool! I'd love to hear more about that sometime.\"\n    ];\n    \n    return responses[Math.min(conversationHistory.length, responses.length - 1)];\n  };\n\n  const handleInterestMismatchScenario = (userMsg: string, context: any, behavior: NPCBehavior): string => {\n    const responses = [\n      \"Hi there.\",\n      \"Yeah, it's fine.\",\n      \"Oh okay.\",\n      \"That's nice.\",\n      \"Cool.\",\n      \"Mm hmm.\",\n      \"Right.\"\n    ];\n    \n    // Get progressively shorter and less engaged\n    const responseIndex = Math.min(conversationHistory.length, responses.length - 1);\n    return responses[responseIndex];\n  };\n\n  // PERFORMANCE TRACKING INTEGRATION\n  const analyzeUserPerformance = (scenario: BasicNPCScenario, userMessages: string[]): any => {\n    const performance = {\n      scenario_id: scenario.id,\n      total_messages: userMessages.length,\n      over_pursuit: false,\n      graceful_handling: false,\n      emotional_regulation: 0.5,\n      lesson_learned: false\n    };\n\n    switch (scenario.id) {\n      case 'polite_rejection':\n        performance.over_pursuit = userMessages.some(msg => \n          msg.toLowerCase().includes('why') || \n          msg.toLowerCase().includes('please') ||\n          msg.toLowerCase().includes('chance')\n        );\n        performance.graceful_handling = !performance.over_pursuit && userMessages.some(msg =>\n          msg.toLowerCase().includes('understand') ||\n          msg.toLowerCase().includes('thanks') ||\n          msg.toLowerCase().includes('good luck')\n        );\n        break;\n        \n      case 'slow_responder':\n        const impatientMessages = userMessages.filter(msg => \n          msg.includes('??') || \n          msg.toLowerCase().includes('hello?') ||\n          msg.toLowerCase().includes('there?')\n        );\n        performance.over_pursuit = impatientMessages.length > 0;\n        performance.emotional_regulation = Math.max(0, 1 - (impatientMessages.length / userMessages.length));\n        break;\n        \n      case 'interest_mismatch':\n        const longMessages = userMessages.filter(msg => msg.length > 100);\n        performance.over_pursuit = longMessages.length > userMessages.length * 0.5;\n        performance.graceful_handling = userMessages.length < 5; // Recognized and stopped early\n        break;\n    }\n\n    return performance;\n  };\n\n  const handleSendMessage = () => {\n    if (!userMessage.trim() || !currentScenario) return;\n\n    // Add user message to conversation\n    const newHistory = [...conversationHistory, { sender: 'user', message: userMessage, timestamp: Date.now() }];\n    \n    // Generate NPC response\n    const npcResponse = generateNPCResponse(userMessage, currentScenario, { conversationHistory: newHistory });\n    \n    // Add NPC response with slight delay for realism\n    setTimeout(() => {\n      setConversationHistory(prev => [...prev, { sender: 'npc', message: npcResponse, timestamp: Date.now() }]);\n    }, currentScenario.npcBehavior.responseSpeed === 'slow' ? 3000 : 1000);\n    \n    setConversationHistory(newHistory);\n    setUserMessage('');\n    \n    // Check if scenario should end\n    if (newHistory.length >= 8) {\n      endScenario();\n    }\n  };\n\n  const endScenario = () => {\n    if (!currentScenario) return;\n    \n    const userMessages = conversationHistory.filter(msg => msg.sender === 'user').map(msg => msg.message);\n    const performance = analyzeUserPerformance(currentScenario, userMessages);\n    \n    // Use the analytics system\n    const sessionData = {\n      emotionData: [{ stress: performance.over_pursuit ? 0.8 : 0.3, confidence: performance.graceful_handling ? 0.8 : 0.4 }],\n      conversationData: conversationHistory,\n      coachId: 'grace', // Default to Grace for emotional intelligence scenarios\n      duration: (Date.now() - sessionStartTime) / 1000\n    };\n    \n    const analytics = new PerformanceAnalytics();\n    const sessionAnalytics = analytics.trackSessionPerformance(sessionData);\n    \n    // Show results\n    alert(`Scenario Complete!\\nPerformance: ${JSON.stringify(performance, null, 2)}`);\n  };\n\n  return (\n    <div className=\"basic-npc-scenarios\">\n      <h2>Practice Dating Scenarios</h2>\n      \n      {!currentScenario ? (\n        <div className=\"scenario-selection\">\n          <h3>Choose a scenario to practice:</h3>\n          {scenarios.map(scenario => (\n            <div key={scenario.id} className=\"scenario-card\" onClick={() => {\n              setCurrentScenario(scenario);\n              setSessionStartTime(Date.now());\n              setConversationHistory([]);\n              setNpcInterestLevel(scenario.npcBehavior.enthusiasm);\n            }}>\n              <h4>{scenario.name}</h4>\n              <p>{scenario.description}</p>\n              <div className=\"difficulty\">Difficulty: {scenario.difficulty}</div>\n              <div className=\"objective\">Goal: {scenario.learningObjective}</div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"active-scenario\">\n          <div className=\"scenario-header\">\n            <h3>{currentScenario.name}</h3>\n            <p>Goal: {currentScenario.learningObjective}</p>\n            <button onClick={() => setCurrentScenario(null)}>← Back to Scenarios</button>\n          </div>\n          \n          <div className=\"conversation-area\">\n            {conversationHistory.map((msg, index) => (\n              <div key={index} className={`message ${msg.sender}`}>\n                <strong>{msg.sender === 'user' ? 'You' : 'Alex'}:</strong> {msg.message}\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"input-area\">\n            <input\n              type=\"text\"\n              value={userMessage}\n              onChange={(e) => setUserMessage(e.target.value)}\n              placeholder=\"Type your message...\"\n              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n            />\n            <button onClick={handleSendMessage}>Send</button>\n          </div>\n          \n          <div className=\"coaching-hints\">\n            <h4>Success Criteria:</h4>\n            <ul>\n              {currentScenario.successCriteria.map((criteria, index) => (\n                <li key={index}>{criteria}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BasicNPCScenarios;\n","// extracted by mini-css-extract-plugin\nexport default {};","// Performance Analytics - Foundation for Adaptive Curriculum\n// Integrates with existing coach sessions and tracks key metrics\n\ninterface PerformanceMetrics {\n  // Basic metrics that work with existing infrastructure\n  conversationFlow: number;        // 0-1 score\n  emotionalRegulation: number;     // 0-1 score  \n  boundaryRespect: number;         // 0-1 score\n  rejectionHandling: number;       // 0-1 score\n  confidenceLevel: number;         // 0-1 score\n  attachmentAnxiety: number;       // 0-1 score (higher = more anxious)\n}\n\ninterface SessionAnalytics {\n  sessionId: string;\n  userId: string;\n  coachId: 'grace' | 'posie' | 'rizzo';\n  sessionType: 'lesson' | 'npc_date' | 'practice';\n  startTime: number;\n  endTime: number;\n  metrics: PerformanceMetrics;\n  criticalEvents: CriticalEvent[];\n  improvementAreas: string[];\n  strengths: string[];\n}\n\ninterface CriticalEvent {\n  timestamp: number;\n  type: 'red_flag_missed' | 'over_pursuit' | 'boundary_violation' | 'rejection_poor_handling' | 'confidence_spike' | 'regulation_success';\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  context: any;\n}\n\nclass PerformanceAnalytics {\n  \n  // INTEGRATE WITH EXISTING EMOTION TRACKING\n  analyzeCoachSession(\n    emotionData: any[], // Your existing emotion tracking data\n    conversationData: any[], // Your existing conversation data\n    coachId: string,\n    sessionDuration: number\n  ): SessionAnalytics {\n    \n    const metrics = this.calculateBaseMetrics(emotionData, conversationData, sessionDuration);\n    const criticalEvents = this.identifyCriticalEvents(emotionData, conversationData);\n    const areas = this.identifyLearningAreas(metrics, criticalEvents, coachId);\n    \n    return {\n      sessionId: this.generateSessionId(),\n      userId: this.getCurrentUserId(),\n      coachId: coachId as 'grace' | 'posie' | 'rizzo',\n      sessionType: 'lesson',\n      startTime: Date.now() - sessionDuration * 1000,\n      endTime: Date.now(),\n      metrics,\n      criticalEvents,\n      improvementAreas: areas.improvements,\n      strengths: areas.strengths\n    };\n  }\n  \n  private calculateBaseMetrics(emotionData: any[], conversationData: any[], duration: number): PerformanceMetrics {\n    // Use your existing emotion tracking data\n    const avgStress = this.calculateAverageStress(emotionData);\n    const stressSpikes = this.countStressSpikes(emotionData);\n    const recoveryTime = this.calculateRecoveryTime(emotionData);\n    \n    return {\n      conversationFlow: this.assessConversationFlow(conversationData),\n      emotionalRegulation: Math.max(0, 1 - (stressSpikes / 10)), // Fewer spikes = better regulation\n      boundaryRespect: 0.8, // Placeholder - will enhance with boundary detection\n      rejectionHandling: Math.max(0, 1 - (recoveryTime / 300)), // Faster recovery = better handling\n      confidenceLevel: this.assessConfidenceFromPosture(emotionData),\n      attachmentAnxiety: Math.min(1, avgStress) // Higher stress = more anxiety\n    };\n  }\n  \n  private identifyCriticalEvents(emotionData: any[], conversationData: any[]): CriticalEvent[] {\n    const events: CriticalEvent[] = [];\n    \n    // Detect stress spikes (potential overwhelm or rejection sensitivity)\n    emotionData.forEach((dataPoint, index) => {\n      if (dataPoint.stress > 0.8 && dataPoint.timestamp) {\n        events.push({\n          timestamp: dataPoint.timestamp,\n          type: 'rejection_poor_handling',\n          description: 'High stress response detected',\n          severity: dataPoint.stress > 0.9 ? 'high' : 'medium',\n          context: { stressLevel: dataPoint.stress }\n        });\n      }\n    });\n    \n    // Detect confidence patterns\n    const confidencePattern = this.analyzeConfidencePattern(emotionData);\n    if (confidencePattern.hasSignificantBoost) {\n      events.push({\n        timestamp: confidencePattern.timestamp,\n        type: 'confidence_spike',\n        description: 'Significant confidence improvement detected',\n        severity: 'low',\n        context: { improvement: confidencePattern.improvement }\n      });\n    }\n    \n    return events;\n  }\n\n  // ADD ALL MISSING HELPER METHODS\n  private generateSessionId(): string {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  private getCurrentUserId(): string {\n    // In production, get from auth system\n    return 'user_' + (localStorage.getItem('currentUserId') || 'anonymous');\n  }\n\n  private calculateAverageStress(emotionData: any[]): number {\n    if (!emotionData || emotionData.length === 0) return 0.3;\n    const stressValues = emotionData.map(d => d.stress || d.anxiety || 0.3);\n    return stressValues.reduce((sum, val) => sum + val, 0) / stressValues.length;\n  }\n\n  private countStressSpikes(emotionData: any[]): number {\n    if (!emotionData || emotionData.length === 0) return 0;\n    return emotionData.filter(d => (d.stress || 0) > 0.7).length;\n  }\n\n  private calculateRecoveryTime(emotionData: any[]): number {\n    // Find stress spikes and measure recovery time\n    if (!emotionData || emotionData.length === 0) return 60; // Default 1 minute\n    \n    let maxRecoveryTime = 0;\n    let inStressSpike = false;\n    let spikeStartTime = 0;\n    \n    emotionData.forEach(point => {\n      const stress = point.stress || 0;\n      const timestamp = point.timestamp || Date.now();\n      \n      if (!inStressSpike && stress > 0.7) {\n        inStressSpike = true;\n        spikeStartTime = timestamp;\n      } else if (inStressSpike && stress < 0.4) {\n        const recoveryTime = (timestamp - spikeStartTime) / 1000; // seconds\n        maxRecoveryTime = Math.max(maxRecoveryTime, recoveryTime);\n        inStressSpike = false;\n      }\n    });\n    \n    return maxRecoveryTime || 60;\n  }\n\n  private assessConversationFlow(conversationData: any[]): number {\n    if (!conversationData || conversationData.length === 0) return 0.5;\n    \n    // Simple metric: balance of speaking vs listening\n    const userMessages = conversationData.filter(msg => msg.role === 'user').length;\n    const totalMessages = conversationData.length;\n    const userRatio = userMessages / totalMessages;\n    \n    // Ideal ratio is around 0.4-0.6 (user speaks 40-60% of time)\n    return Math.max(0, 1 - Math.abs(userRatio - 0.5) * 2);\n  }\n\n  private assessConfidenceFromPosture(emotionData: any[]): number {\n    if (!emotionData || emotionData.length === 0) return 0.5;\n    \n    // Look for confidence indicators in emotion data\n    const confidenceValues = emotionData.map(d => \n      (d.confidence || d.posture?.upright || d.eye_contact || 0.5)\n    );\n    \n    return confidenceValues.reduce((sum, val) => sum + val, 0) / confidenceValues.length;\n  }\n\n  private analyzeConfidencePattern(emotionData: any[]): { hasSignificantBoost: boolean; timestamp: number; improvement: number } {\n    if (!emotionData || emotionData.length < 2) {\n      return { hasSignificantBoost: false, timestamp: Date.now(), improvement: 0 };\n    }\n    \n    const startConfidence = emotionData[0].confidence || 0.5;\n    const endConfidence = emotionData[emotionData.length - 1].confidence || 0.5;\n    const improvement = endConfidence - startConfidence;\n    \n    return {\n      hasSignificantBoost: improvement > 0.2,\n      timestamp: emotionData[emotionData.length - 1].timestamp || Date.now(),\n      improvement\n    };\n  }\n\n  private identifyLearningAreas(metrics: PerformanceMetrics, events: CriticalEvent[], coachId: string): { improvements: string[]; strengths: string[] } {\n    const improvements: string[] = [];\n    const strengths: string[] = [];\n    \n    // Identify improvement areas\n    if (metrics.emotionalRegulation < 0.5) {\n      improvements.push('emotional_regulation');\n    }\n    if (metrics.rejectionHandling < 0.4) {\n      improvements.push('rejection_resilience');\n    }\n    if (metrics.conversationFlow < 0.4) {\n      improvements.push('conversation_balance');\n    }\n    if (metrics.attachmentAnxiety > 0.7) {\n      improvements.push('attachment_security');\n    }\n    \n    // Identify strengths\n    if (metrics.confidenceLevel > 0.7) {\n      strengths.push('natural_confidence');\n    }\n    if (metrics.boundaryRespect > 0.8) {\n      strengths.push('respectful_communication');\n    }\n    if (metrics.conversationFlow > 0.7) {\n      strengths.push('balanced_conversation');\n    }\n    \n    return { improvements, strengths };\n  }\n  \n  // ADAPTIVE LESSON RECOMMENDATION ENGINE\n  recommendNextLesson(userHistory: SessionAnalytics[]): LessonRecommendation {\n    const recentPerformance = userHistory.slice(-5); // Last 5 sessions\n    const weakestAreas = this.identifyWeakestAreas(recentPerformance);\n    const urgentIssues = this.identifyUrgentIssues(recentPerformance);\n    \n    if (urgentIssues.length > 0) {\n      return this.createUrgentIntervention(urgentIssues[0]);\n    }\n    \n    // Safety check: ensure we have weakest areas\n    if (weakestAreas.length === 0) {\n      // Return default lesson if no specific weaknesses identified\n      return {\n        lessonId: 'general_confidence_building',\n        coachId: 'grace',\n        urgency: 'normal',\n        focusAreas: ['self_confidence', 'social_skills', 'personal_growth'],\n        estimatedDuration: 30,\n        prerequisiteCheck: true\n      };\n    }\n    \n    return this.createTargetedLesson(weakestAreas[0]);\n  }\n  \n  private identifyWeakestAreas(sessions: SessionAnalytics[]): WeaknessArea[] {\n    const averageMetrics = this.calculateAverageMetrics(sessions);\n    const areas: WeaknessArea[] = [];\n    \n    if (averageMetrics.emotionalRegulation < 0.4) {\n      areas.push({\n        area: 'emotional_regulation',\n        severity: 'high',\n        coach: 'grace',\n        priority: 9\n      });\n    }\n    \n    if (averageMetrics.rejectionHandling < 0.3) {\n      areas.push({\n        area: 'rejection_resilience',\n        severity: 'critical',\n        coach: 'rizzo',\n        priority: 10\n      });\n    }\n    \n    if (averageMetrics.attachmentAnxiety > 0.7) {\n      areas.push({\n        area: 'attachment_security',\n        severity: 'medium',\n        coach: 'grace',\n        priority: 7\n      });\n    }\n    \n    return areas.sort((a, b) => b.priority - a.priority);\n  }\n\n  private calculateAverageMetrics(sessions: SessionAnalytics[]): PerformanceMetrics {\n    if (!sessions || sessions.length === 0) {\n      return {\n        conversationFlow: 0.5,\n        emotionalRegulation: 0.5,\n        boundaryRespect: 0.5,\n        rejectionHandling: 0.5,\n        confidenceLevel: 0.5,\n        attachmentAnxiety: 0.5\n      };\n    }\n    \n    const metricKeys: (keyof PerformanceMetrics)[] = [\n      'conversationFlow', 'emotionalRegulation', 'boundaryRespect', \n      'rejectionHandling', 'confidenceLevel', 'attachmentAnxiety'\n    ];\n    \n    const averages: Partial<PerformanceMetrics> = {};\n    \n    metricKeys.forEach(key => {\n      const values = sessions.map(s => s.metrics[key]).filter(v => v !== undefined);\n      averages[key] = values.length > 0 ? values.reduce((sum, val) => sum + val, 0) / values.length : 0.5;\n    });\n    \n    return averages as PerformanceMetrics;\n  }\n\n  private identifyUrgentIssues(sessions: SessionAnalytics[]): string[] {\n    const urgentIssues: string[] = [];\n    \n    sessions.forEach(session => {\n      // Check for critical events\n      const criticalEvents = session.criticalEvents.filter(e => e.severity === 'critical' || e.severity === 'high');\n      if (criticalEvents.length > 0) {\n        urgentIssues.push('safety_concern');\n      }\n      \n      // Check for very poor performance\n      if (session.metrics.rejectionHandling < 0.2) {\n        urgentIssues.push('rejection_crisis');\n      }\n      if (session.metrics.emotionalRegulation < 0.2) {\n        urgentIssues.push('emotional_dysregulation');\n      }\n    });\n    \n    return [...new Set(urgentIssues)]; // Remove duplicates\n  }\n\n  private createUrgentIntervention(issue: string): LessonRecommendation {\n    const interventions: { [key: string]: LessonRecommendation } = {\n      safety_concern: {\n        lessonId: 'urgent_safety_intervention',\n        coachId: 'grace',\n        urgency: 'critical',\n        focusAreas: ['safety_awareness', 'boundary_enforcement', 'red_flag_recognition'],\n        estimatedDuration: 30,\n        prerequisiteCheck: false\n      },\n      rejection_crisis: {\n        lessonId: 'rejection_resilience_intensive',\n        coachId: 'rizzo',\n        urgency: 'critical',\n        focusAreas: ['rejection_handling', 'self_worth', 'outcome_independence'],\n        estimatedDuration: 45,\n        prerequisiteCheck: false\n      },\n      emotional_dysregulation: {\n        lessonId: 'emotional_regulation_bootcamp',\n        coachId: 'posie',\n        urgency: 'high',\n        focusAreas: ['breathing_techniques', 'nervous_system_regulation', 'grounding'],\n        estimatedDuration: 25,\n        prerequisiteCheck: false\n      }\n    };\n    \n    return interventions[issue] || this.createTargetedLesson({ area: 'general_improvement', severity: 'medium', coach: 'grace', priority: 5 });\n  }\n\n  private createTargetedLesson(weakness: WeaknessArea): LessonRecommendation {\n    // Safety check for undefined weakness\n    if (!weakness || !weakness.area) {\n      return {\n        lessonId: 'general_confidence_building',\n        coachId: 'grace',\n        urgency: 'normal',\n        focusAreas: ['self_confidence', 'social_skills', 'personal_growth'],\n        estimatedDuration: 30,\n        prerequisiteCheck: true\n      };\n    }\n\n    const lessonMap: { [key: string]: LessonRecommendation } = {\n      emotional_regulation: {\n        lessonId: 'emotional_intelligence_foundation',\n        coachId: 'grace',\n        urgency: 'high',\n        focusAreas: ['emotional_awareness', 'regulation_techniques', 'self_compassion'],\n        estimatedDuration: 35,\n        prerequisiteCheck: true\n      },\n      rejection_resilience: {\n        lessonId: 'handling_rejection_gracefully',\n        coachId: 'rizzo',\n        urgency: 'high',\n        focusAreas: ['reframing_rejection', 'maintaining_dignity', 'moving_forward'],\n        estimatedDuration: 40,\n        prerequisiteCheck: true\n      },\n      attachment_security: {\n        lessonId: 'secure_attachment_building',\n        coachId: 'grace',\n        urgency: 'normal',\n        focusAreas: ['attachment_styles', 'anxiety_management', 'secure_relating'],\n        estimatedDuration: 45,\n        prerequisiteCheck: true\n      }\n    };\n    \n    return lessonMap[weakness.area] || {\n      lessonId: 'general_confidence_building',\n      coachId: 'rizzo',\n      urgency: 'normal',\n      focusAreas: ['self_confidence', 'social_skills', 'personal_growth'],\n      estimatedDuration: 30,\n      prerequisiteCheck: true\n    };\n  }\n\n  private assessCurrentLevel(userHistory: SessionAnalytics[]): 'foundation' | 'intermediate' | 'advanced' {\n    if (!userHistory || userHistory.length < 3) return 'foundation';\n    \n    const recentMetrics = this.calculateAverageMetrics(userHistory.slice(-5));\n    const overallScore = (\n      recentMetrics.conversationFlow + \n      recentMetrics.emotionalRegulation + \n      recentMetrics.rejectionHandling + \n      recentMetrics.confidenceLevel\n    ) / 4;\n    \n    if (overallScore >= 0.8) return 'advanced';\n    if (overallScore >= 0.6) return 'intermediate';\n    return 'foundation';\n  }\n\n  private assessAdvancedReadiness(userHistory: SessionAnalytics[]): boolean {\n    return this.assessCurrentLevel(userHistory) === 'advanced';\n  }\n\n  private identifySkillGaps(userHistory: SessionAnalytics[]): string[] {\n    const averageMetrics = this.calculateAverageMetrics(userHistory);\n    const gaps: string[] = [];\n    \n    if (averageMetrics.conversationFlow < 0.6) gaps.push('conversation_balance');\n    if (averageMetrics.emotionalRegulation < 0.6) gaps.push('emotional_regulation');\n    if (averageMetrics.rejectionHandling < 0.6) gaps.push('rejection_resilience');\n    if (averageMetrics.confidenceLevel < 0.6) gaps.push('confidence_building');\n    if (averageMetrics.attachmentAnxiety > 0.6) gaps.push('attachment_security');\n    \n    return gaps;\n  }\n  \n  // INTEGRATION HELPERS FOR EXISTING CODEBASE\n  \n  // Call this from your existing CoachSession component\n  trackSessionPerformance(sessionData: any) {\n    const analytics = this.analyzeCoachSession(\n      sessionData.emotionData,\n      sessionData.conversationData,\n      sessionData.coachId,\n      sessionData.duration\n    );\n    \n    this.saveAnalytics(analytics);\n    return analytics;\n  }\n  \n  // Call this to get next lesson recommendation\n  getAdaptiveLessonPlan(userId: string): LessonPlan {\n    const userHistory = this.getUserHistory(userId);\n    const recommendation = this.recommendNextLesson(userHistory);\n    \n    return {\n      nextLesson: recommendation,\n      currentLevel: this.assessCurrentLevel(userHistory),\n      readinessForAdvanced: this.assessAdvancedReadiness(userHistory),\n      criticalSkillGaps: this.identifySkillGaps(userHistory)\n    };\n  }\n  \n  private saveAnalytics(analytics: SessionAnalytics) {\n    // Save to your existing database/storage system\n    localStorage.setItem(`session_${analytics.sessionId}`, JSON.stringify(analytics));\n    \n    // Also save to user history\n    const userHistory = this.getUserHistory(analytics.userId);\n    userHistory.push(analytics);\n    localStorage.setItem(`user_history_${analytics.userId}`, JSON.stringify(userHistory));\n  }\n  \n  // MAKE PUBLIC FOR EXTERNAL ACCESS\n  getUserHistory(userId: string): SessionAnalytics[] {\n    const stored = localStorage.getItem(`user_history_${userId}`);\n    return stored ? JSON.parse(stored) : [];\n  }\n}\n\n// TYPES FOR INTEGRATION\ninterface WeaknessArea {\n  area: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  coach: 'grace' | 'posie' | 'rizzo';\n  priority: number;\n}\n\ninterface LessonRecommendation {\n  lessonId: string;\n  coachId: string;\n  urgency: 'normal' | 'high' | 'critical';\n  focusAreas: string[];\n  estimatedDuration: number;\n  prerequisiteCheck: boolean;\n}\n\ninterface LessonPlan {\n  nextLesson: LessonRecommendation;\n  currentLevel: 'foundation' | 'intermediate' | 'advanced';\n  readinessForAdvanced: boolean;\n  criticalSkillGaps: string[];\n}\n\nexport { PerformanceAnalytics, type SessionAnalytics, type PerformanceMetrics, type LessonPlan };\n"],"names":["BasicNPCScenarios","currentScenario","setCurrentScenario","useState","conversationHistory","setConversationHistory","userMessage","setUserMessage","npcInterestLevel","setNpcInterestLevel","sessionStartTime","setSessionStartTime","Date","now","handlePoliteRejectionScenario","PerformanceAnalytics","userMsg","context","behavior","messageCount","length","toLowerCase","includes","handleSlowResponderScenario","responses","Math","min","handleInterestMismatchScenario","handleSendMessage","trim","newHistory","sender","message","timestamp","npcResponse","generateNPCResponse","scenario","npcBehavior","id","setTimeout","prev","responseSpeed","endScenario","userMessages","filter","msg","map","performance","analyzeUserPerformance","scenario_id","total_messages","over_pursuit","graceful_handling","emotional_regulation","lesson_learned","some","impatientMessages","max","longMessages","sessionData","emotionData","stress","confidence","conversationData","coachId","duration","trackSessionPerformance","alert","concat","JSON","stringify","_jsxs","className","children","_jsx","name","learningObjective","onClick","index","type","value","onChange","e","target","placeholder","onKeyPress","key","successCriteria","criteria","description","difficulty","enthusiasm","interest_decline_rate","rejection_style","conversation_depth","failurePatterns","analyzeCoachSession","sessionDuration","metrics","this","calculateBaseMetrics","criticalEvents","identifyCriticalEvents","areas","identifyLearningAreas","sessionId","generateSessionId","userId","getCurrentUserId","sessionType","startTime","endTime","improvementAreas","improvements","strengths","avgStress","calculateAverageStress","stressSpikes","countStressSpikes","recoveryTime","calculateRecoveryTime","conversationFlow","assessConversationFlow","emotionalRegulation","boundaryRespect","rejectionHandling","confidenceLevel","assessConfidenceFromPosture","attachmentAnxiety","events","forEach","dataPoint","push","severity","stressLevel","confidencePattern","analyzeConfidencePattern","hasSignificantBoost","improvement","random","toString","substr","localStorage","getItem","stressValues","d","anxiety","reduce","sum","val","maxRecoveryTime","inStressSpike","spikeStartTime","point","userRatio","role","abs","confidenceValues","_d$posture","posture","upright","eye_contact","startConfidence","recommendNextLesson","userHistory","recentPerformance","slice","weakestAreas","identifyWeakestAreas","urgentIssues","identifyUrgentIssues","createUrgentIntervention","lessonId","urgency","focusAreas","estimatedDuration","prerequisiteCheck","createTargetedLesson","sessions","averageMetrics","calculateAverageMetrics","area","coach","priority","sort","a","b","averages","values","s","v","undefined","session","Set","issue","safety_concern","rejection_crisis","emotional_dysregulation","weakness","rejection_resilience","attachment_security","assessCurrentLevel","recentMetrics","overallScore","assessAdvancedReadiness","identifySkillGaps","gaps","analytics","saveAnalytics","getAdaptiveLessonPlan","getUserHistory","nextLesson","currentLevel","readinessForAdvanced","criticalSkillGaps","setItem","stored","parse"],"sourceRoot":""}