{"version":3,"file":"static/js/6814.a5aa761d.chunk.js","mappings":"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","sources":["../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","components/RisographPostProcessing.tsx"],"sourcesContent":["import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tname: ( shader.name !== undefined ) ? shader.name : 'unspecified',\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import React, { useRef, useMemo } from 'react';\nimport { useFrame, useThree, extend } from '@react-three/fiber';\nimport { EffectComposer } from '@react-three/postprocessing';\nimport { \n  ChromaticAberration, \n  Noise, \n  Vignette, \n  Bloom,\n  DotScreen,\n  HueSaturation,\n  BrightnessContrast,\n  ToneMapping,\n  DepthOfField\n} from '@react-three/postprocessing';\nimport { BlendFunction, KernelSize, ToneMappingMode } from 'postprocessing';\nimport * as THREE from 'three';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass';\n\n// Custom Risograph-style shader\nconst RisographShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    time: { value: 0 },\n    paperTexture: { value: 0.15 },\n    inkBleed: { value: 0.02 },\n    registration: { value: new THREE.Vector2(0.001, 0.001) },\n    colorSeparation: { value: 0.003 },\n    grainAmount: { value: 0.08 }\n  },\n  vertexShader: `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  fragmentShader: `\n    uniform sampler2D tDiffuse;\n    uniform float time;\n    uniform float paperTexture;\n    uniform float inkBleed;\n    uniform vec2 registration;\n    uniform float colorSeparation;\n    uniform float grainAmount;\n    \n    varying vec2 vUv;\n    \n    // Simple noise function\n    float random(vec2 st) {\n      return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n    }\n    \n    // Paper texture simulation\n    float paperNoise(vec2 uv) {\n      vec2 i = floor(uv * 300.0);\n      vec2 f = fract(uv * 300.0);\n      float a = random(i);\n      float b = random(i + vec2(1.0, 0.0));\n      float c = random(i + vec2(0.0, 1.0));\n      float d = random(i + vec2(1.0, 1.0));\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n    }\n    \n    // Halftone pattern\n    float halftone(vec2 uv, float size) {\n      vec2 p = mod(uv * size, 1.0);\n      float d = distance(p, vec2(0.5));\n      return smoothstep(0.3, 0.32, d);\n    }\n    \n    void main() {\n      // Misregistration effect\n      vec2 uvR = vUv + registration * sin(time * 0.5);\n      vec2 uvG = vUv;\n      vec2 uvB = vUv - registration * cos(time * 0.3);\n      \n      // Color separation\n      vec3 colorR = texture2D(tDiffuse, uvR + vec2(colorSeparation, 0.0)).rgb;\n      vec3 colorG = texture2D(tDiffuse, uvG).rgb;\n      vec3 colorB = texture2D(tDiffuse, uvB - vec2(colorSeparation, 0.0)).rgb;\n      \n      vec3 color = vec3(colorR.r, colorG.g, colorB.b);\n      \n      // Convert to limited color palette (risograph style)\n      vec3 risoColors[5];\n      risoColors[0] = vec3(1.0, 0.4, 0.6);  // Fluorescent Pink\n      risoColors[1] = vec3(0.0, 0.7, 0.9);  // Blue\n      risoColors[2] = vec3(1.0, 0.9, 0.0);  // Yellow\n      risoColors[3] = vec3(0.0, 0.6, 0.4);  // Green\n      risoColors[4] = vec3(1.0, 0.3, 0.0);  // Orange\n      \n      // Find closest riso color\n      float minDist = 999.0;\n      vec3 closestColor = risoColors[0];\n      for (int i = 0; i < 5; i++) {\n        float dist = distance(color, risoColors[i]);\n        if (dist < minDist) {\n          minDist = dist;\n          closestColor = risoColors[i];\n        }\n      }\n      \n      // Mix original with riso color\n      color = mix(color, closestColor, 0.3);\n      \n      // Add halftone effect\n      float lum = dot(color, vec3(0.299, 0.587, 0.114));\n      float pattern = halftone(vUv, 120.0);\n      color *= mix(0.8, 1.0, pattern * lum);\n      \n      // Ink bleeding simulation\n      vec2 bleedOffset = vec2(\n        sin(vUv.y * 200.0 + time) * inkBleed,\n        cos(vUv.x * 200.0 + time) * inkBleed\n      );\n      vec3 bleedColor = texture2D(tDiffuse, vUv + bleedOffset).rgb;\n      color = mix(color, bleedColor, 0.1);\n      \n      // Paper texture\n      float paper = paperNoise(vUv + time * 0.01);\n      color = mix(color, vec3(0.95, 0.93, 0.88), paper * paperTexture);\n      \n      // Film grain\n      float grain = random(vUv + time) * grainAmount;\n      color += vec3(grain) - grainAmount * 0.5;\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  `\n};\n\ninterface RisographPostProcessingProps {\n  intensity?: number;\n  preset?: 'subtle' | 'medium' | 'intense';\n}\n\nexport const RisographPostProcessing: React.FC<RisographPostProcessingProps> = ({ \n  intensity = 0.5,\n  preset = 'medium' \n}) => {\n  const { gl, size } = useThree();\n  const composer = useRef<any>();\n  \n  // Preset configurations\n  const presets = {\n    subtle: {\n      chromaticAberration: 0.0002,\n      bloom: 0.3,\n      noise: 0.02,\n      vignette: 0.3,\n      dotScreen: 0,\n      saturation: -0.1,\n      contrast: 0.1,\n      colorA: '#FF69B4',\n      colorB: '#34A85A',\n      colorC: '#FFC107',\n      halftoneScale: 120,\n      inkBleed: 0.02,\n      paperTexture: 0.15,\n      noiseAmount: 0.08\n    },\n    medium: {\n      chromaticAberration: 0.0005,\n      bloom: 0.5,\n      noise: 0.05,\n      vignette: 0.5,\n      dotScreen: 0.3,\n      saturation: -0.2,\n      contrast: 0.2,\n      colorA: '#FF69B4',\n      colorB: '#34A85A',\n      colorC: '#FFC107',\n      halftoneScale: 120,\n      inkBleed: 0.02,\n      paperTexture: 0.15,\n      noiseAmount: 0.08\n    },\n    intense: {\n      chromaticAberration: 0.001,\n      bloom: 0.7,\n      noise: 0.08,\n      vignette: 0.7,\n      dotScreen: 0.5,\n      saturation: -0.3,\n      contrast: 0.3,\n      colorA: '#FF69B4',\n      colorB: '#34A85A',\n      colorC: '#FFC107',\n      halftoneScale: 120,\n      inkBleed: 0.02,\n      paperTexture: 0.15,\n      noiseAmount: 0.08\n    }\n  };\n  \n  const config = presets[preset];\n  \n  const risographPass = useMemo(() => {\n    const pass = new ShaderPass(RisographShader);\n    pass.uniforms.resolution.value.set(size.width, size.height);\n    pass.uniforms.colorSeparation.value = 0.002 * intensity;\n    pass.uniforms.grainAmount.value = 0.05 * intensity;\n    pass.uniforms.paperTexture.value = config.paperTexture * intensity;\n    pass.uniforms.inkBleed.value = config.inkBleed * intensity;\n    return pass;\n  }, [size, intensity, config]);\n  \n  // Update time uniform\n  useFrame((state) => {\n    if (risographPass) {\n      risographPass.uniforms.time.value = state.clock.elapsedTime;\n    }\n  });\n  \n  return (\n    <EffectComposer ref={composer}>\n      <Bloom\n        intensity={config.bloom}\n        kernelSize={KernelSize.LARGE}\n        luminanceThreshold={0.9}\n        luminanceSmoothing={0.025}\n        mipmapBlur\n      />\n      \n      <ChromaticAberration\n        offset={[config.chromaticAberration, config.chromaticAberration * 0.5]}\n        radialModulation={true}\n        modulationOffset={0.15}\n      />\n      \n      <HueSaturation\n        hue={0}\n        saturation={config.saturation}\n        blendFunction={BlendFunction.NORMAL}\n      />\n      \n      <BrightnessContrast\n        brightness={0}\n        contrast={config.contrast}\n        blendFunction={BlendFunction.NORMAL}\n      />\n      \n      <Noise\n        premultiply\n        blendFunction={BlendFunction.ADD}\n        opacity={config.noise}\n      />\n      \n      <Vignette\n        darkness={config.vignette}\n        offset={0.3}\n        blendFunction={BlendFunction.NORMAL}\n      />\n      \n      <ToneMapping\n        mode={ToneMappingMode.ACES_FILMIC}\n        resolution={256}\n        whitePoint={4.0}\n        middleGrey={0.6}\n        minLuminance={0.01}\n        averageLuminance={1.0}\n        adaptationRate={1.0}\n        blendFunction={BlendFunction.NORMAL}\n      />\n    </EffectComposer>\n  );\n};\n\n// Export individual effect components for custom compositions\nexport { ChromaticAberration, Noise, Vignette, Bloom, DotScreen, HueSaturation, BrightnessContrast };\n"],"names":["ShaderPass","Pass","constructor","shader","textureID","super","this","undefined","ShaderMaterial","uniforms","material","UniformsUtils","clone","name","defines","Object","assign","vertexShader","fragmentShader","fsQuad","FullScreenQuad","render","renderer","writeBuffer","readBuffer","value","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil","dispose","RisographShader","tDiffuse","time","paperTexture","inkBleed","registration","THREE","colorSeparation","grainAmount","RisographPostProcessing","_ref","intensity","preset","gl","size","useThree","composer","useRef","config","subtle","chromaticAberration","bloom","noise","vignette","dotScreen","saturation","contrast","colorA","colorB","colorC","halftoneScale","noiseAmount","medium","intense","risographPass","useMemo","pass","resolution","set","width","height","useFrame","state","clock","elapsedTime","_jsxs","EffectComposer","ref","children","_jsx","Bloom","kernelSize","KernelSize","LARGE","luminanceThreshold","luminanceSmoothing","mipmapBlur","ChromaticAberration","offset","radialModulation","modulationOffset","HueSaturation","hue","blendFunction","BlendFunction","NORMAL","BrightnessContrast","brightness","Noise","premultiply","ADD","opacity","Vignette","darkness","ToneMapping","mode","ToneMappingMode","ACES_FILMIC","whitePoint","middleGrey","minLuminance","averageLuminance","adaptationRate"],"sourceRoot":""}