{"version":3,"file":"static/js/7981.24f1541e.chunk.js","mappings":"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","sources":["components/EyeContactGameGazeCloud.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport './EyeContactGame.css';\n\ninterface Distraction {\n  id: string;\n  type: 'person' | 'bird' | 'notification' | 'text';\n  position: { x: number; y: number };\n  content?: string;\n  emoji?: string;\n}\n\ninterface GazeData {\n  docX: number;\n  docY: number;\n  GazeX: number;\n  GazeY: number;\n  HeadX: number;\n  HeadY: number;\n  HeadZ: number;\n  HeadYaw: number;\n  HeadPitch: number;\n  HeadRoll: number;\n  state: number;\n}\n\ndeclare global {\n  interface Window {\n    GazeCloudAPI: {\n      StartEyeTracking: () => void;\n      StopEyeTracking: () => void;\n      OnResult: (callback: (data: GazeData) => void) => void;\n      OnCalibrationComplete: () => void;\n      OnCamDenied: () => void;\n      OnError: (msg: string) => void;\n      UseClickRecalibration: boolean;\n    };\n  }\n}\n\nconst EyeContactGameGazeCloud: React.FC = () => {\n  const [isCalibrated, setIsCalibrated] = useState(false);\n  const [isTracking, setIsTracking] = useState(false);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [feedback, setFeedback] = useState(\"Click Start to begin eye tracking setup\");\n  const [isLookingAtAvatar, setIsLookingAtAvatar] = useState(false);\n  const [distractions, setDistractions] = useState<Distraction[]>([]);\n  const [storyProgress, setStoryProgress] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [currentGaze, setCurrentGaze] = useState<{ x: number; y: number } | null>(null);\n  const [apiLoaded, setApiLoaded] = useState(false);\n  \n  const avatarAreaRef = useRef<HTMLDivElement>(null);\n  const distractionIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const scoreIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const gazeHistoryRef = useRef<{ x: number; y: number; timestamp: number }[]>([]);\n  \n  // Story segments\n  const storySegments = [\n    \"So there I was, at this amazing coffee shop in Paris...\",\n    \"The waiter came over, and you won't believe what happened next...\",\n    \"He started speaking in perfect English, but with the most charming accent...\",\n    \"And then he asked me if I wanted to see something special...\",\n    \"He led me to this hidden garden behind the café...\",\n    \"There were fairy lights everywhere, and live jazz music playing...\",\n    \"It was like stepping into a movie scene, absolutely magical!\",\n    \"That's when I realized... Paris really is the city of love!\"\n  ];\n\n  // Distraction templates\n  const distractionTemplates = {\n    person: [\n      { emoji: '👩‍🦰', content: 'Attractive redhead walks by' },\n      { emoji: '👨‍💼', content: 'Handsome businessman passes' },\n      { emoji: '👩‍🎤', content: 'Stylish woman struts past' },\n      { emoji: '🕺', content: 'Dancer moves through' }\n    ],\n    bird: [\n      { emoji: '🦅', content: 'Eagle soars by' },\n      { emoji: '🦜', content: 'Colorful parrot flies' },\n      { emoji: '🕊️', content: 'Dove glides past' },\n      { emoji: '🦆', content: 'Duck waddles by' }\n    ],\n    notification: [\n      { emoji: '💬', content: 'New match on XRCupid!' },\n      { emoji: '❤️', content: 'Someone liked your profile!' },\n      { emoji: '📸', content: 'Tagged in a photo' },\n      { emoji: '🔥', content: 'Your profile is on fire!' }\n    ],\n    text: [\n      { emoji: '📱', content: '\"Hey, are you free tonight?\"' },\n      { emoji: '💌', content: '\"Miss you! Call me?\"' },\n      { emoji: '🍕', content: '\"Pizza party at my place!\"' },\n      { emoji: '🎉', content: '\"You won\\'t believe what happened!\"' }\n    ]\n  };\n\n  // Load GazeCloudAPI script\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://api.gazerecorder.com/GazeCloudAPI.js';\n    script.async = true;\n    script.onload = () => {\n      console.log('GazeCloudAPI loaded');\n      setApiLoaded(true);\n    };\n    script.onerror = () => {\n      console.error('Failed to load GazeCloudAPI');\n      setFeedback(\"Failed to load eye tracking API\");\n    };\n    document.body.appendChild(script);\n\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, []);\n\n  // Initialize GazeCloudAPI\n  const initializeGazeTracking = useCallback(() => {\n    if (!window.GazeCloudAPI) {\n      console.error('GazeCloudAPI not available');\n      return;\n    }\n\n    // Set up callbacks\n    window.GazeCloudAPI.OnResult = (callback: (data: GazeData) => void) => {\n      callback({} as GazeData); // Stub implementation\n    };\n\n    window.GazeCloudAPI.OnCalibrationComplete = () => {\n      console.log('Calibration complete!');\n      setIsCalibrated(true);\n      setFeedback(\"Calibration complete! Look at the coach to start.\");\n    };\n\n    window.GazeCloudAPI.OnCamDenied = () => {\n      console.error('Camera access denied');\n      setFeedback(\"Camera access denied - please check permissions\");\n    };\n\n    window.GazeCloudAPI.OnError = (msg: string) => {\n      console.error('GazeCloudAPI error:', msg);\n      setFeedback(`Eye tracking error: ${msg}`);\n    };\n\n    // Enable click recalibration\n    window.GazeCloudAPI.UseClickRecalibration = true;\n\n    // Start eye tracking\n    window.GazeCloudAPI.StartEyeTracking();\n    setIsTracking(true);\n    setFeedback(\"Follow the red dots with your eyes for calibration\");\n  }, [isCalibrated]);\n\n  // Create distractions\n  const createDistraction = useCallback(() => {\n    const types: (keyof typeof distractionTemplates)[] = ['person', 'bird', 'notification', 'text'];\n    const type = types[Math.floor(Math.random() * types.length)];\n    const template = distractionTemplates[type][Math.floor(Math.random() * distractionTemplates[type].length)];\n    \n    const side = Math.random() > 0.5 ? 'left' : 'right';\n    const yPosition = 100 + Math.random() * (window.innerHeight - 300);\n    \n    const distraction: Distraction = {\n      id: Date.now().toString(),\n      type,\n      position: {\n        x: side === 'left' ? -100 : window.innerWidth + 100,\n        y: yPosition\n      },\n      emoji: template.emoji,\n      content: template.content\n    };\n    \n    setDistractions(prev => [...prev, distraction]);\n    \n    setTimeout(() => {\n      setDistractions(prev => prev.filter(d => d.id !== distraction.id));\n    }, 5000);\n  }, []);\n\n  // Scoring system\n  useEffect(() => {\n    if (gameStarted && isLookingAtAvatar) {\n      scoreIntervalRef.current = setInterval(() => {\n        setScore(prev => prev + 1);\n        setStreak(prev => prev + 1);\n      }, 100);\n      \n      setFeedback(storySegments[storyProgress]);\n    } else if (gameStarted && !isLookingAtAvatar) {\n      if (scoreIntervalRef.current) {\n        clearInterval(scoreIntervalRef.current);\n      }\n      \n      // Reset streak after looking away\n      setTimeout(() => {\n        if (!isLookingAtAvatar) {\n          setStreak(0);\n          setFeedback(\"Hey! Look at me, not the distractions!\");\n        }\n      }, 500);\n    }\n    \n    return () => {\n      if (scoreIntervalRef.current) {\n        clearInterval(scoreIntervalRef.current);\n      }\n    };\n  }, [gameStarted, isLookingAtAvatar, storyProgress]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (window.GazeCloudAPI && isTracking) {\n        window.GazeCloudAPI.StopEyeTracking();\n      }\n      \n      if (distractionIntervalRef.current) {\n        clearInterval(distractionIntervalRef.current);\n      }\n    };\n  }, [isTracking]);\n\n  // Start eye tracking\n  const startEyeTracking = () => {\n    if (!apiLoaded) {\n      setFeedback(\"API still loading, please wait...\");\n      return;\n    }\n    \n    initializeGazeTracking();\n  };\n\n  // Start game\n  const startGame = () => {\n    if (!isCalibrated) {\n      setFeedback(\"Please complete calibration first!\");\n      return;\n    }\n    \n    setGameStarted(true);\n    setScore(0);\n    setStreak(0);\n    setStoryProgress(0);\n    \n    // Start creating distractions\n    distractionIntervalRef.current = setInterval(createDistraction, 2000);\n    \n    // Progress story\n    const storyInterval = setInterval(() => {\n      setStoryProgress(prev => {\n        if (prev >= storySegments.length - 1) {\n          clearInterval(storyInterval);\n          if (distractionIntervalRef.current) {\n            clearInterval(distractionIntervalRef.current);\n          }\n          setFeedback(`Amazing! Final score: ${score} | Best streak: ${streak}`);\n          setGameStarted(false);\n          return prev;\n        }\n        return prev + 1;\n      });\n    }, 5000);\n  };\n\n  // Calculate performance\n  const getPerformanceEmoji = () => {\n    if (streak > 50) return '🌟';\n    if (streak > 30) return '😊';\n    if (streak > 10) return '🙂';\n    return '😕';\n  };\n\n  return (\n    <div className=\"eye-contact-game\">\n      {/* Game UI */}\n      <div className=\"game-container\">\n        {/* Score and status */}\n        <div className=\"game-header\">\n          <div className=\"score-display\">\n            <div>Score: {score}</div>\n            <div>Streak: {streak} {getPerformanceEmoji()}</div>\n          </div>\n          <div className=\"status\">\n            {!apiLoaded ? '⏳ Loading API...' :\n             !isTracking ? '🔌 Not tracking' :\n             !isCalibrated ? '🎯 Calibrating...' :\n             '👁️ Eye Tracking Active'}\n          </div>\n        </div>\n        \n        {/* Gaze indicator */}\n        {currentGaze && isCalibrated && (\n          <div \n            style={{\n              position: 'fixed',\n              left: currentGaze.x - 15,\n              top: currentGaze.y - 15,\n              width: '30px',\n              height: '30px',\n              borderRadius: '50%',\n              backgroundColor: isLookingAtAvatar ? 'rgba(0, 255, 0, 0.5)' : 'rgba(255, 0, 0, 0.5)',\n              border: '2px solid white',\n              pointerEvents: 'none',\n              zIndex: 9999,\n              transition: 'all 0.1s ease',\n              boxShadow: '0 0 10px rgba(0,0,0,0.3)'\n            }}\n          />\n        )}\n        \n        {/* Avatar area */}\n        <div \n          ref={avatarAreaRef}\n          className={`avatar-area ${isLookingAtAvatar ? 'gazing' : 'not-gazing'}`}\n          style={{ opacity: isCalibrated ? 1 : 0.3 }}\n        >\n          <div className=\"avatar-container\">\n            <div \n              className=\"coach-avatar\"\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontSize: '80px',\n                background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'\n              }}\n            >\n              👩‍🏫\n            </div>\n            <div className=\"speech-bubble\">\n              {feedback}\n            </div>\n          </div>\n        </div>\n        \n        {/* Control buttons */}\n        <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>\n          {!isTracking && (\n            <button onClick={startEyeTracking} className=\"start-button\">\n              Start Eye Tracking\n            </button>\n          )}\n          \n          {isTracking && isCalibrated && !gameStarted && (\n            <button onClick={startGame} className=\"start-button\">\n              Start Eye Contact Challenge\n            </button>\n          )}\n          \n          {isTracking && (\n            <button \n              onClick={() => {\n                window.GazeCloudAPI.StopEyeTracking();\n                setIsTracking(false);\n                setIsCalibrated(false);\n                setGameStarted(false);\n                setFeedback(\"Eye tracking stopped\");\n              }} \n              className=\"start-button\"\n              style={{ background: '#dc3545' }}\n            >\n              Stop Tracking\n            </button>\n          )}\n        </div>\n        \n        {/* Distractions */}\n        {gameStarted && distractions.map(distraction => (\n          <div\n            key={distraction.id}\n            className={`distraction distraction-${distraction.type}`}\n            style={{\n              left: distraction.position.x,\n              top: distraction.position.y,\n              animation: `move-distraction 5s linear`,\n              fontSize: distraction.type === 'bird' || distraction.type === 'person' ? '60px' : '16px'\n            }}\n          >\n            {distraction.emoji && (\n              <span style={{ fontSize: distraction.type === 'bird' || distraction.type === 'person' ? '60px' : '24px' }}>\n                {distraction.emoji}\n              </span>\n            )}\n            {distraction.content && (\n              <div className=\"distraction-content\" style={{ marginLeft: '10px' }}>\n                {distraction.content}\n              </div>\n            )}\n          </div>\n        ))}\n        \n        {/* Instructions */}\n        <div className=\"instructions\">\n          <h3>How to Play:</h3>\n          <ul>\n            <li>Click \"Start Eye Tracking\" to begin</li>\n            <li>Follow the red dots with your eyes for calibration</li>\n            <li>After calibration, keep your eyes on the coach</li>\n            <li>Don't get distracted by things moving on screen</li>\n            <li>Build up your streak for bonus points</li>\n            <li>You can click anywhere to recalibrate if needed</li>\n          </ul>\n          <p style={{ marginTop: '10px', fontSize: '12px', fontStyle: 'italic' }}>\n            Powered by GazeCloudAPI - High accuracy webcam eye tracking\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EyeContactGameGazeCloud;\n"],"names":["EyeContactGameGazeCloud","isCalibrated","setIsCalibrated","useState","isTracking","setIsTracking","score","setScore","streak","setStreak","feedback","setFeedback","isLookingAtAvatar","setIsLookingAtAvatar","distractions","setDistractions","storyProgress","setStoryProgress","gameStarted","setGameStarted","currentGaze","setCurrentGaze","apiLoaded","setApiLoaded","avatarAreaRef","useRef","distractionIntervalRef","scoreIntervalRef","storySegments","distractionTemplates","person","emoji","content","bird","notification","text","useEffect","script","document","createElement","src","async","onload","console","log","onerror","error","body","appendChild","removeChild","initializeGazeTracking","useCallback","window","GazeCloudAPI","OnResult","callback","OnCalibrationComplete","OnCamDenied","OnError","msg","concat","UseClickRecalibration","StartEyeTracking","createDistraction","types","type","Math","floor","random","length","template","side","yPosition","innerHeight","distraction","id","Date","now","toString","position","x","innerWidth","y","prev","setTimeout","filter","d","current","setInterval","clearInterval","StopEyeTracking","_jsx","className","children","_jsxs","style","left","top","width","height","borderRadius","backgroundColor","border","pointerEvents","zIndex","transition","boxShadow","ref","opacity","display","alignItems","justifyContent","fontSize","background","gap","marginTop","onClick","startEyeTracking","startGame","storyInterval","map","animation","marginLeft","fontStyle"],"sourceRoot":""}