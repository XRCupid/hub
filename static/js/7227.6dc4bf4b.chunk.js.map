{"version":3,"file":"static/js/7227.6dc4bf4b.chunk.js","mappings":"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","sources":["components/InteractiveCoachSession.tsx","webpack://hub/./src/components/InteractiveCoachSession.css?3f72"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport { ConversationAvatar } from './ConversationAvatar';\nimport { voiceService } from '../services/voiceService';\nimport './InteractiveCoachSession.css';\n\ninterface InteractiveCoachSessionProps {\n  coach: 'grace' | 'posie' | 'rizzo';\n  lessonContext?: string;\n}\n\ninterface ConversationMessage {\n  role: 'coach' | 'user';\n  text: string;\n}\n\nconst coachAvatarUrls = {\n  grace: '/avatars/coach_grace.glb',\n  posie: '/avatars/coach_posie.glb',\n  rizzo: '/avatars/coach_rizzo.glb'\n};\n\nexport const InteractiveCoachSession: React.FC<InteractiveCoachSessionProps> = ({ \n  coach, \n  lessonContext = \"practicing conversation skills\" \n}) => {\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const [conversation, setConversation] = useState<ConversationMessage[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [apiKey, setApiKey] = useState('');\n  const [showApiKeyInput, setShowApiKeyInput] = useState(false);\n  const [isCoachSpeaking, setIsCoachSpeaking] = useState(false);\n  const [audioData, setAudioData] = useState<Uint8Array>(new Uint8Array(128));\n  \n  const recognitionRef = useRef<any>(null);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n\n  const coachGreetings = {\n    grace: \"Hello darling! I'm so delighted we're working together today. Tell me, what's been on your mind about dating lately?\",\n    posie: \"Welcome, beautiful soul. Take a deep breath with me... *pause* ...now, what would you like to explore in your dating journey today?\",\n    rizzo: \"Hey hot stuff! Ready to level up your dating game? Don't hold back - what's really going on in your love life?\"\n  };\n\n  useEffect(() => {\n    // Initialize audio context for lip-sync\n    audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n    analyserRef.current = audioContextRef.current.createAnalyser();\n    analyserRef.current.fftSize = 256;\n    \n    // Check if API key is needed\n    const provider = voiceService.getAvailableProvider();\n    if (provider === 'openai' && !process.env.REACT_APP_OPENAI_API_KEY) {\n      setShowApiKeyInput(true);\n    }\n\n    // Initialize with greeting\n    const greeting = coachGreetings[coach];\n    setConversation([{ role: 'coach', text: greeting }]);\n    \n    // Setup speech recognition if available\n    if ('webkitSpeechRecognition' in window) {\n      const recognition = new (window as any).webkitSpeechRecognition();\n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n\n      recognition.onresult = (event: any) => {\n        const transcript = event.results[0][0].transcript;\n        handleUserInput(transcript);\n      };\n\n      recognition.onerror = (event: any) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n\n      recognition.onend = () => {\n        setIsListening(false);\n      };\n\n      recognitionRef.current = recognition;\n    }\n\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, [coach]);\n\n  const handleApiKeySubmit = () => {\n    if (apiKey) {\n      voiceService.setApiKey('openai', apiKey);\n      setShowApiKeyInput(false);\n      setError(null);\n    }\n  };\n\n  const handleUserInput = async (input: string) => {\n    if (!input.trim()) return;\n\n    // Add user message to conversation\n    setConversation(prev => [...prev, { role: 'user', text: input }]);\n    setUserInput('');\n\n    try {\n      // Get coach response\n      const response = await voiceService.getCoachResponse(coach, input, lessonContext);\n      \n      // Add coach response to conversation\n      setConversation(prev => [...prev, { role: 'coach', text: response }]);\n      \n      // Speak the response\n      speakResponse(response);\n    } catch (error: any) {\n      setError(error.message);\n      console.error('Coach interaction error:', error);\n    }\n  };\n\n  const speakResponse = async (text: string) => {\n    setIsCoachSpeaking(true);\n    \n    // Create audio analysis for lip-sync\n    const audioElement = await voiceService.speak(text, coach);\n    \n    if (audioElement && audioContextRef.current && analyserRef.current) {\n      const source = audioContextRef.current.createMediaElementSource(audioElement as HTMLAudioElement);\n      source.connect(analyserRef.current);\n      analyserRef.current.connect(audioContextRef.current.destination);\n      \n      // Update audio data for lip-sync\n      const updateAudioData = () => {\n        if (analyserRef.current && isCoachSpeaking) {\n          const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n          analyserRef.current.getByteFrequencyData(dataArray);\n          setAudioData(dataArray);\n          requestAnimationFrame(updateAudioData);\n        }\n      };\n      updateAudioData();\n    }\n    \n    // Wait for speech to complete\n    setTimeout(() => {\n      setIsCoachSpeaking(false);\n      setAudioData(new Uint8Array(128));\n    }, text.length * 50); // Rough estimate based on text length\n  };\n\n  const toggleListening = () => {\n    if (!recognitionRef.current) {\n      setError('Speech recognition not available in your browser');\n      return;\n    }\n\n    if (isListening) {\n      recognitionRef.current.stop();\n    } else {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n\n  const handleTextSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    handleUserInput(userInput);\n  };\n\n  const avatarUrl = coachAvatarUrls[coach];\n\n  const openAIKey = process.env.REACT_APP_OPENAI_API_KEY;\n  const isReady = !showApiKeyInput && openAIKey;\n\n  if (!isReady && !openAIKey) {\n    return (\n      <div className=\"api-key-setup\">\n        <h3>Setup OpenAI API Key</h3>\n        <p>To enable voice conversations with your coach, please enter your OpenAI API key:</p>\n        <form onSubmit={(e) => { e.preventDefault(); handleApiKeySubmit(); }}>\n          <input\n            type=\"password\"\n            placeholder=\"sk-...\"\n            value={apiKey}\n            onChange={(e) => setApiKey(e.target.value)}\n            className=\"api-key-input\"\n          />\n          <button type=\"submit\" className=\"submit-btn\">\n            Start Session\n          </button>\n        </form>\n        <p className=\"privacy-note\">\n          Your API key is only stored in this session and never sent to our servers.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"interactive-coach-session\">\n      <div className=\"coach-header\">\n        <div className=\"coach-avatar-container\">\n          <Canvas\n            camera={{ position: [0, 0, 3], fov: 40 }}\n            style={{ background: 'transparent' }}\n          >\n            <ambientLight intensity={0.5} />\n            <directionalLight position={[10, 10, 5]} intensity={1} />\n            <ConversationAvatar\n              avatarUrl={avatarUrl}\n              position={[0, -1, 0]}\n              scale={1.5}\n              isSpeaking={isCoachSpeaking}\n              audioContext={audioContextRef.current}\n              audioData={audioData}\n            />\n            <OrbitControls\n              enablePan={false}\n              enableZoom={false}\n              minPolarAngle={Math.PI / 3}\n              maxPolarAngle={Math.PI / 2}\n            />\n          </Canvas>\n        </div>\n        <div className=\"coach-info\">\n          <h3>{coach.charAt(0).toUpperCase() + coach.slice(1)}'s Coaching Session</h3>\n        </div>\n      </div>\n\n      <div className=\"conversation-container\">\n        {conversation.map((message, idx) => (\n          <div key={idx} className={`message ${message.role}`}>\n            {message.role === 'coach' && (\n              <span className=\"message-avatar\">{coachAvatarUrls[coach]}</span>\n            )}\n            <div className=\"message-content\">\n              <p>{message.text}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"input-controls\">\n        <form onSubmit={handleTextSubmit} className=\"text-input-form\">\n          <input\n            type=\"text\"\n            placeholder=\"Type your response...\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            className=\"text-input\"\n            disabled={isSpeaking}\n          />\n          <button type=\"submit\" disabled={isSpeaking || !userInput.trim()}>\n            Send\n          </button>\n        </form>\n\n        <div className=\"voice-controls\">\n          <button\n            className={`voice-btn ${isListening ? 'listening' : ''}`}\n            onClick={toggleListening}\n            disabled={isSpeaking}\n          >\n            {isListening ? '⏹️ Stop' : '🎤 Speak'}\n          </button>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n\n      <div className=\"session-tips\">\n        <p>💡 Try asking about first date ideas, conversation starters, or handling dating anxiety</p>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["coachAvatarUrls","grace","posie","rizzo","InteractiveCoachSession","_ref","coach","lessonContext","isListening","setIsListening","useState","isSpeaking","setIsSpeaking","userInput","setUserInput","conversation","setConversation","error","setError","apiKey","setApiKey","showApiKeyInput","setShowApiKeyInput","isCoachSpeaking","setIsCoachSpeaking","audioData","setAudioData","Uint8Array","recognitionRef","useRef","audioContextRef","analyserRef","coachGreetings","useEffect","current","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","voiceService","getAvailableProvider","role","text","recognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","transcript","results","handleUserInput","onerror","console","onend","stop","async","input","trim","prev","response","getCoachResponse","speakResponse","message","audioElement","speak","createMediaElementSource","connect","destination","updateAudioData","dataArray","frequencyBinCount","getByteFrequencyData","requestAnimationFrame","setTimeout","length","avatarUrl","_jsxs","className","children","_jsx","Canvas","camera","position","fov","style","background","intensity","ConversationAvatar","scale","audioContext","OrbitControls","enablePan","enableZoom","minPolarAngle","Math","PI","maxPolarAngle","charAt","toUpperCase","slice","map","idx","concat","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","disabled","onClick","toggleListening","start"],"sourceRoot":""}