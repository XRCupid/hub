{"version":3,"file":"static/js/5746.c99bfbd3.chunk.js","mappings":"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A+qD,eAAeG,IACf,EACA,KACA,KACA,EACA,GACA2nB,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeG,IACf,EACA,KACA,KACA,EACA,GACA2nB,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeG,IACf,EACA,KACA,MACA,EACA,GACA2nB,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeG,IACf,EACA,KACA,MACA,EACA,GACA2nB,EACAA,GACA,GACR,IAAK,gCACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAegoB,UACf,EACA,KACA,KACA,EACA,GACAF,EACAA,GACA,GAER,IAAK,2BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,IACA,KACA,EACA,GACA6nB,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,KACA,KACA,EACA,GACA6nB,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeE,MACf,EACA,IACA,IACA,EACA,EACA4nB,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,KACA,KACA,EACA,GACA6nB,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,KACA,KACA,EACA,GACA6nB,EACA,4BACA,GACR,IAAK,0BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,IACA,KACA,EACA,GACA6nB,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeI,SACf,EACA,KACA,KACA,EACA,GACA0nB,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeI,SACf,EACA,KACA,KACA,EACA,GACA0nB,EACAA,GACA,GACR,IAAK,2BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,KACA,KACA,EACA,GACA6nB,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,KACA,KACA,EACA,GACA6nB,EACA,4BACA,GACR,IAAK,kCACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeG,IACf,EACA,KACA,MACA,EACA,GACA2nB,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeG,IACf,EACA,KACA,MACA,EACA,GACA2nB,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeI,SACf,EACA,KACA,KACA,EACA,GACA0nB,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeK,UACf,EACA,KACA,IACA,EACA,GACAynB,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeK,UACf,EACA,KACA,IACA,EACA,GACAynB,EACAA,GACA,GACR,IAAK,oCACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeK,UACf,EACA,KACA,IACA,EACA,GACAynB,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeioB,KACf,EACA,KACA,IACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeioB,KACf,EACA,KACA,IACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeioB,KACf,EACA,KACA,IACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeO,KACf,EACA,KACA,KACA,EACA,GACAunB,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeO,KACf,EACA,KACA,IACA,EACA,GACAunB,EACAA,GACA,GACR,IAAK,gCACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAegoB,UACf,EACA,KACA,KACA,EACA,GACAF,EACAA,GACA,GACR,IAAK,0BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeM,KACf,EACA,IACA,IACA,EACA,EACAwnB,EACAA,GACA,GACR,IAAK,2BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeM,KACf,EACA,IACA,IACA,EACA,EACAwnB,EACA,2BACA,GACR,IAAK,6BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,MACA,MACA,EACA,GACA6nB,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,MACA,MACA,EACA,GACA6nB,EACA,8BACA,GACR,IAAK,6BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,MACA,MACA,EACA,GACA6nB,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,MACA,MACA,EACA,GACA6nB,EACA,8BACA,GACR,IAAK,gBACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeQ,OACf,EACA,KACA,KACA,EACA,GACAsnB,EACAA,GACA,GACR,IAAK,oBACD,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeS,KACf,EACA,KACA,IACA,EACA,GACAqnB,EACAA,GACA,GAER,QACI,OAAO,IAAI5sC,EACPjmC,EAAA+qD,eAAeC,IACf,EACA,KACA,KACA,EACA,GACA,4BACA,4BACA,GAEhB,CAEO,6BAAO2nB,GACV,OAAO1sC,EAAsBqV,sCACN,qBAAX6E,OAA0B,kCAAoC,4BAC9E,CAgBA,aAAWvP,GACP,OAAOttD,KAAKovF,YAChB,CAQA,UAAWtzE,GACP,GAAI9b,KAAKstD,UACL,OAAOttD,KAAKgxE,UAGpB,CASOpjB,YAAAA,CAAa6qB,GAChB,GAAIz4E,KAAKovF,aAAc,CACn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","sources":["../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DialogEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageUnderstandingModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/KeywordRecognitionModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriptionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriberConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriberConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerIdentificationModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognizerConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechDetected.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/KeywordDetection/src/common.speech/ServiceMessages/KeywordDetection/KeywordDetection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/v1.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetailsBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Error.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PushAudioOutputStreamCallback.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/BackgroundError.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/PhraseOutput/src/common.speech/ServiceMessages/PhraseOutput/PhraseOutput.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Contracts.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerVerificationModel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/v4.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/WebsocketMessageFormatter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/PhraseOutput/src/common.speech/ServiceMessages/PhraseOutput/InterimResults.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/BaseAudioPlayer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Connection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationStatus.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RawWebsocketMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfilePhraseResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/StringUtils.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ProxyInfo.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceInfo.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SessionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/v3.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationCommon.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationExpirationEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ChunkedArrayBufferStream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/sha1.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Queue.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketConnection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RequestSession.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBookmarkEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/IParticipant.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketMessageAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AgentConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/validate.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogConnectorFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileType.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/VoiceServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesizerConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationErrorCodes.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Promise.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisVoicesResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslator.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisRestAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechTranslationConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/Translation/src/common.speech/ServiceMessages/Translation/OnSuccess.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/parse.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionOpenResponse.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Meeting.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognizer.ts","../node_modules/bent/src/core.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarSynthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechHypothesis.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/md5.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PullAudioInputStreamCallback.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/TranscriberRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DeferralMap.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriber.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechKeyword.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationServiceAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioFileWriter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechContext.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ProfanityOption.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/index.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionMessage.Internal.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/List.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionMessage.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/EnumTranslation.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/rng.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisVisemeEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ReplayableAudioNode.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/MicAudioSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationHypothesis.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchDetails.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PhraseListGrammar.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Translations.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ParticipantChangedReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationEventArgsBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/SpeakerAudioDestination.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/native.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGranularity.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/v35.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Timeout.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TurnStatusReceivedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ActivityReceivedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/LanguageId/src/common.speech/ServiceMessages/LanguageId/OnUnknown.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/version.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/PhraseDetection/src/common.speech/ServiceMessages/PhraseDetection/Segmentation.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Conversation.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AddedLmIntent.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestConfigBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognitionEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetails.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioStreamFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceTelemetryListener.Internal.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/ActivityResponsePayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/QueryParameterNames.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/Translation/src/common.speech/ServiceMessages/Translation/InterimResults.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveTokenAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/HeaderNames.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBoundaryType.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/Enums.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/EventSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConversationTranscriptionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CustomCommandsConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/nil.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/AudioSourceEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConnectionFactoryBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RiffPcmEncoder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorInterfaces.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisContext.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/OCSPEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SynthesisAudioMetadata.ts","../node_modules/bent/src/browser.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnStateManager.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Stream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Recognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceRecognizerBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServicePropertyChannel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisWordBoundaryEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationManager.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageIdMode.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/v5.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyId.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriptionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServiceEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DynamicGrammarBuilder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriptionServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisAdapterBase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/BotFrameworkConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/MeetingTranscriptionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/PhraseDetection/src/common.speech/ServiceMessages/PhraseDetection/SpeakerDiarization.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SourceLanguageConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationRequestSession.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarVideoFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Exports.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/regex.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AvatarSynthesisAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/InvocationSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/FileAudioSource.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGradingSystem.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/LanguageId/src/common.speech/ServiceMessages/LanguageId/OnSuccess.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ConsoleLoggingListener.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisTurn.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/IntentResponse.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestMessageAdapter.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IConnection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConnector.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfile.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnState.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/PhraseDetection/src/common.speech/ServiceMessages/PhraseDetection/OnSuccess.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyCollection.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioInputStream.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/PhraseOutput/src/common.speech/ServiceMessages/PhraseOutput/PhraseResults.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileEnrollmentResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisOutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LogLevel.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Guid.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TurnStatusPayload.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/PlatformEvent.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/Dgi/src/common.speech/ServiceMessages/Dgi/Group.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriptionServiceRecognizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Diagnostics.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConfig.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/OutputFormat.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ResultReason.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/PCMRecorder.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/node_modules/uuid/dist/commonjs-browser/stringify.js","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriber.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarWebRTCConnectionResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessageEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageResult.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/LanguageId/src/common.speech/ServiceMessages/LanguageId/LanguageIdContext.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Events.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionEvents.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Synthesizer.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileClient.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/PhraseDetection/src/common.speech/ServiceMessages/PhraseDetection/PhraseDetectionContext.ts","../node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputStream.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { AgentConfig } from \"../common.speech/Exports.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class DialogEvent extends PlatformEvent {\r\n\r\n    public constructor(eventName: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n    }\r\n}\r\n\r\nexport class SendingAgentContextMessageEvent extends DialogEvent {\r\n    private privAgentConfig: AgentConfig;\r\n\r\n    public constructor(agentConfig: AgentConfig) {\r\n        super(\"SendingAgentContextMessageEvent\");\r\n        this.privAgentConfig = agentConfig;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     * Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     * Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     * of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private privDisposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model\r\n     * will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result.\r\n * @class\r\n */\r\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\r\n    private privIntentId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param intentId - The intent id.\r\n     * @param resultId - The result id.\r\n     * @param reason - The reason.\r\n     * @param text - The recognized text.\r\n     * @param duration - The duration.\r\n     * @param offset - The offset into the stream.\r\n     * @param language - Primary Language detected, if provided.\r\n     * @param languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param errorDetails - Error details, if provided.\r\n     * @param json - Additional Json, if provided.\r\n     * @param properties - Additional properties, if provided.\r\n     */\r\n    public constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string,\r\n                duration?: number, offset?: number, language?: string, languageDetectionConfidence?: string,\r\n                errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privIntentId = intentId;\r\n    }\r\n\r\n    /**\r\n     * A String that represents the intent identifier being recognized.\r\n     * @member IntentRecognitionResult.prototype.intentId\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the intent identifier being recognized.\r\n     */\r\n    public get intentId(): string {\r\n        return this.privIntentId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"../Exports.js\";\r\n\r\n/**\r\n * Defines result of conversation transcription.\r\n * @class ConversationTranscriptionResult\r\n */\r\nexport class ConversationTranscriptionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id\r\n     * @member ConversationTranscriptionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): Promise<IConnection> {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return Promise.resolve(new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId));\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId && !(QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {\r\n            queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n        }\r\n\r\n        if (language && !(QueryParameterNames.Language in queryParams)) {\r\n            queryParams[QueryParameterNames.Language] = language;\r\n        }\r\n\r\n        const wordLevelTimings: boolean = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\r\n        const detailed: boolean = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\r\n        if (wordLevelTimings || detailed) {\r\n            queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport { Context } from \"./Exports.js\";\r\n\r\nexport class SpeakerRecognitionConfig {\r\n    private privParameters: PropertyCollection;\r\n    private privContext: Context;\r\n\r\n    public constructor(\r\n        context: Context,\r\n        parameters: PropertyCollection) {\r\n        this.privContext = context ? context : new Context(null);\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.privContext;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class ConversationTranscriberConnectionFactory extends ConnectionFactoryBase {\r\n    private readonly universalUri: string = \"/speech/universal/v2\";\r\n\r\n    public async create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): Promise<IConnection> {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setV2UrlParams(config, queryParams, endpoint);\r\n\r\n        if (!!endpoint) {\r\n            const endpointUrl = new URL(endpoint);\r\n            const pathName = endpointUrl.pathname;\r\n\r\n            if (pathName === \"\" || pathName === \"/\") {\r\n                // We need to generate the path, and we need to check for a redirect.\r\n                endpointUrl.pathname = this.universalUri;\r\n\r\n                endpoint = await ConnectionFactoryBase.getRedirectUrlFromEndpoint(endpointUrl.toString());\r\n            }\r\n        }\r\n\r\n        if (!endpoint) {\r\n            endpoint = `${host}${this.universalUri}`;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n\r\n    protected setV2UrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerIdentificationModel class for Speaker Recognition\r\n * Model contains a set of profiles against which to identify speaker(s)\r\n * @class SpeakerIdentificationModel\r\n */\r\nexport class SpeakerIdentificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfiles: VoiceProfile[] = [];\r\n    private privProfileIds: string[] = [];\r\n\r\n    private constructor(profiles: VoiceProfile[]) {\r\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\r\n        if (profiles.length === 0) {\r\n            throw new Error(\"Empty Voice Profiles array\");\r\n        }\r\n        for (const profile of profiles) {\r\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\r\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\r\n            }\r\n            this.privVoiceProfiles.push(profile);\r\n            this.privProfileIds.push(profile.profileId);\r\n        }\r\n    }\r\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\r\n        return new SpeakerIdentificationModel(profiles);\r\n    }\r\n\r\n    public get voiceProfileIds(): string {\r\n        return this.privProfileIds.join(\",\");\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return this.privProfileIds;\r\n    }\r\n\r\n    public get scenario(): string {\r\n        return \"TextIndependentIdentification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\nimport { Context, SpeechServiceConfig } from \"./Exports.js\";\r\nimport { RecognitionMode } from \"./ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode;\r\n    private privLanguageIdMode: string;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n    private privEnableSpeakerId: boolean;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n        this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\r\n        this.privEnableSpeakerId = false;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get languageIdMode(): string {\r\n        return this.privLanguageIdMode;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get recognitionEndpointVersion(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n    }\r\n\r\n    public set recognitionEndpointVersion(version: string) {\r\n        this.parameters.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, version);\r\n    }\r\n\r\n    public get sourceLanguageModels(): { language: string; endpoint: string }[] {\r\n        const models: { language: string; endpoint: string }[] = [];\r\n        let modelsExist: boolean = false;\r\n        if (this.autoDetectSourceLanguages !== undefined) {\r\n            for (const language of this.autoDetectSourceLanguages.split(\",\")) {\r\n                const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                const modelId: string = this.parameters.getProperty(customProperty, undefined);\r\n                if (modelId !== undefined) {\r\n                    models.push({ language, endpoint: modelId });\r\n                    modelsExist = true;\r\n                } else {\r\n                    models.push({ language, endpoint: \"\" });\r\n                }\r\n            }\r\n        }\r\n        return modelsExist ? models : undefined;\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public set isSpeakerDiarizationEnabled(value: boolean) {\r\n        this.privEnableSpeakerId = value;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.endDetected\r\nexport interface ISpeechDetected {\r\n    Offset: number;\r\n}\r\n\r\nexport class SpeechDetected implements ISpeechDetected {\r\n    private privSpeechStartDetected: ISpeechDetected;\r\n\r\n    private constructor(json: string, baseOffset: number) {\r\n        this.privSpeechStartDetected = JSON.parse(json) as ISpeechDetected;\r\n        this.privSpeechStartDetected.Offset += baseOffset;\r\n    }\r\n\r\n    public static fromJSON(json: string, baseOffset: number): SpeechDetected {\r\n        return new SpeechDetected(json, baseOffset);\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechStartDetected.Offset;\r\n    }\r\n}\r\n","/**\r\n * Represents the type of keyword detection.\r\n */\r\nexport enum KeywordDetectionType {\r\n    /**\r\n     * Triggered at the start of input.\r\n     */\r\n    StartTrigger = \"StartTrigger\"\r\n}\r\n\r\n/**\r\n * Represents a keyword detected by the client.\r\n */\r\nexport interface ClientDetectedKeyword {\r\n    /**\r\n     * The text of the detected keyword.\r\n     */\r\n    text: string;\r\n\r\n    /**\r\n     * The confidence score of the detection.\r\n     */\r\n    confidence?: number;\r\n\r\n    /**\r\n     * The start offset in 100-nanoseconds.\r\n     */\r\n    startOffset?: number;\r\n\r\n    /**\r\n     * The duration in 100-nanoseconds.\r\n     */\r\n    duration?: number;\r\n}\r\n\r\n/**\r\n * The action to take when a keyword is rejected.\r\n */\r\nexport enum OnRejectAction {\r\n    /**\r\n     * End the current turn.\r\n     */\r\n    EndOfTurn = \"EndOfTurn\",\r\n\r\n    /**\r\n     * Continue processing.\r\n     */\r\n    Continue = \"Continue\"\r\n}\r\n\r\n/**\r\n * Settings for handling keyword rejection.\r\n */\r\nexport interface OnReject {\r\n    /**\r\n     * The action to take on keyword rejection.\r\n     */\r\n    action: OnRejectAction;\r\n}\r\n\r\n/**\r\n * Represents keyword detection configuration.\r\n */\r\nexport interface KeywordDetection {\r\n    /**\r\n     * The type of keyword detection.\r\n     */\r\n    type: KeywordDetectionType;\r\n\r\n    /**\r\n     * Keywords detected by the client.\r\n     */\r\n    clientDetectedKeywords: ClientDetectedKeyword[];\r\n\r\n    /**\r\n     * Settings for handling keyword rejection.\r\n     */\r\n    onReject: OnReject;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports.js\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter.js\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): Promise<IConnection> {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return Promise.resolve(new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId));\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IAuthentication {\r\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private privHeaderName: string;\r\n    private privToken: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.privHeaderName = headerName;\r\n        this.privToken = token;\r\n    }\r\n\r\n    public get headerName(): string {\r\n        return this.privHeaderName;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privToken;\r\n    }\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.unsafeStringify)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetailsBase\r\n */\r\nexport class CancellationDetailsBase {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    protected constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetailsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member CancellationDetailsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get ErrorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (write() and close()) for\r\n * custom audio output streams).\r\n * @class PushAudioOutputStreamCallback\r\n */\r\nexport abstract class PushAudioOutputStreamCallback {\r\n\r\n    /**\r\n     * Writes audio data into the data buffer.\r\n     * @member PushAudioOutputStreamCallback.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array that stores the audio data to write.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the audio output stream.\r\n     * @member PushAudioOutputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    EventType,\r\n    PlatformEvent\r\n} from \"./Exports.js\";\r\n\r\nexport class BackgroundEvent extends PlatformEvent {\r\n    private privError: string;\r\n\r\n    public constructor(error: string) {\r\n        super(\"BackgroundEvent\", EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { DetailedOptions } from \"./DetailedOptions\";\r\nimport { SimpleOptions } from \"./SimpleOptions\";\r\nimport { InterimResults } from \"./InterimResults\";\r\nimport { PhraseResults } from \"./PhraseResults\";\r\n\r\n/**\r\n * The detailed output options.\r\n */\r\nexport enum PhraseOption {\r\n    WordTimings = \"WordTimings\",\r\n    SNR = \"SNR\",\r\n    Pronunciation = \"Pronunciation\",\r\n    WordPronunciation = \"WordPronunciation\",\r\n    WordConfidence = \"WordConfidence\",\r\n    Words = \"Words\",\r\n    Sentiment = \"Sentiment\",\r\n    PronunciationAssessment = \"PronunciationAssessment\",\r\n    ContentAssessment = \"ContentAssessment\",\r\n    PhraseAMScore = \"PhraseAMScore\",\r\n    PhraseLMScore = \"PhraseLMScore\",\r\n    WordAMScore = \"WordAMScore\",\r\n    WordLMScore = \"WordLMScore\",\r\n    RuleTree = \"RuleTree\",\r\n    NBestTimings = \"NBestTimings\",\r\n    DecoderDiagnostics = \"DecoderDiagnostics\",\r\n    DisplayWordTimings = \"DisplayWordTimings\",\r\n    DisplayWords = \"DisplayWords\"\r\n}\r\n\r\n/**\r\n * The detailed output extensions.\r\n */\r\nexport enum PhraseExtension {\r\n    Graph = \"Graph\",\r\n    Corrections = \"Corrections\",\r\n    Sentiment = \"Sentiment\"\r\n}\r\n\r\n/**\r\n * The Recognition modes\r\n */\r\nexport enum OutputFormat {\r\n    Simple = \"Simple\",\r\n    Detailed = \"Detailed\"\r\n}\r\n\r\n/**\r\n * The Tentative Phrase Results option\r\n */\r\nexport enum TentativePhraseResultsOption {\r\n    None = \"None\",\r\n    Always = \"Always\"\r\n}\r\n\r\n/**\r\n * Defines the phrase output in the speech Context message\r\n */\r\nexport interface PhraseOutput {\r\n    /**\r\n     * The output format.\r\n     */\r\n    format?: OutputFormat;\r\n\r\n    /**\r\n     * The detailed options.\r\n     */\r\n    detailed?: DetailedOptions;\r\n\r\n    /**\r\n     * The simple options.\r\n     */\r\n    simple?: SimpleOptions;\r\n\r\n    /**\r\n     * The interim results.\r\n     */\r\n    interimResults?: InterimResults;\r\n\r\n    /**\r\n     * The phrase results.\r\n     */\r\n    phraseResults?: PhraseResults;\r\n\r\n    /**\r\n     * The tentative phrase results option\r\n     */\r\n    tentativePhraseResults?: TentativePhraseResultsOption;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooLong(param: string, name: string, maxLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length > maxLength) {\r\n            throw new Error(\"throwIfNullOrTooLong:\" + name + \" (more than \" + maxLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooShort(param: string, name: string, minLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length < minLength) {\r\n            throw new Error(\"throwIfNullOrTooShort:\" + name + \" (less than \" + minLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: string, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n\r\n    public static throwIfNotUndefined(param: any, name: string): void {\r\n        if (param !== undefined) {\r\n            throw new Error(\"throwIfNotUndefined:\" + name);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nclass SpeakerRecognitionConnectionFactoryBase extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        endpointPath: string,\r\n        connectionId?: string): Promise<IConnection> {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);\r\n            const scenario: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, \"TextIndependentIdentification\");\r\n            endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[HeaderNames.SpIDAuthKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return Promise.resolve(new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId));\r\n    }\r\n\r\n    private scenarioToPath(mode: string): string {\r\n        switch (mode) {\r\n            case \"TextIndependentVerification\":\r\n            case \"2\":\r\n                return \"verification/text-independent\";\r\n            case \"TextDependentVerification\":\r\n            case \"1\":\r\n                return \"verification/text-dependent\";\r\n            default:\r\n                return \"identification/text-independent\";\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): Promise<IConnection> {\r\n        return super.create(config, authInfo, \"recognition\", connectionId);\r\n    }\r\n}\r\n\r\nexport class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): Promise<IConnection> {\r\n        return super.create(config, authInfo, \"profile\", connectionId);\r\n    }\r\n}\r\n\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PronunciationAssessmentGradingSystem,\r\n    PronunciationAssessmentGranularity,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\ninterface PronunciationAssessmentJSON {\r\n    referenceText: string;\r\n    gradingSystem: string;\r\n    granularity: string;\r\n    phonemeAlphabet: string;\r\n    nbestPhonemeCount: number;\r\n    dimension: string;\r\n    enableMiscue: boolean;\r\n    enableProsodyAssessment: boolean;\r\n}\r\n\r\n/**\r\n * Pronunciation assessment configuration.\r\n * @class PronunciationAssessmentConfig\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privPhonemeAlphabet: string;\r\n    private privNBestPhonemeCount: number;\r\n    private privEnableProsodyAssessment: boolean;\r\n    private privContentAssessmentTopic: string;\r\n\r\n    /**\r\n     * PronunciationAssessmentConfig constructor.\r\n     * @constructor\r\n     * @param {string} referenceText\r\n     * @param gradingSystem\r\n     * @param granularity\r\n     * @param enableMiscue\r\n     */\r\n    public constructor(referenceText: string,\r\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\r\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\r\n                       enableMiscue: boolean = false) {\r\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.fromJSON\r\n     * @function\r\n     * @public\r\n     * @param {string} json The json string containing the pronunciation assessment parameters.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\r\n     * This method is designed to support the pronunciation assessment parameters still in preview.\r\n     * Under normal circumstances, use the constructor instead.\r\n     */\r\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        const config = new PronunciationAssessmentConfig(\"\");\r\n        config.privProperties = new PropertyCollection();\r\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\r\n        return config;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        this.updateJson();\r\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\r\n    }\r\n\r\n    public applyTo(recognizer: Recognizer): void {\r\n        this.updateJson();\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        recoBase.expectContentAssessmentResponse = !!this.privContentAssessmentTopic;\r\n        recoBase.speechContext.setPronunciationAssessmentParams(\r\n            this.properties.getProperty(PropertyId.PronunciationAssessment_Params),\r\n            this.privContentAssessmentTopic,\r\n            recoBase.isSpeakerDiarizationEnabled);\r\n    }\r\n\r\n    /**\r\n     * Gets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @returns {string} Reference text.\r\n     */\r\n    public get referenceText(): string {\r\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @param {string} referenceText - Reference text.\r\n     */\r\n    public set referenceText(referenceText: string) {\r\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n    }\r\n\r\n    /**\r\n     * Sets the phoneme alphabet.\r\n     * The valid values are \"SAPI\" (default) and \"IPA\".\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\r\n     * @function\r\n     * @public\r\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\r\n     */\r\n    public set phonemeAlphabet(phonemeAlphabet: string) {\r\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\r\n        this.privPhonemeAlphabet = phonemeAlphabet;\r\n    }\r\n\r\n    /**\r\n     * Sets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public set enableMiscue(enableMiscue: boolean) {\r\n        const enableMiscueString = enableMiscue ? \"true\" : \"false\";\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, enableMiscueString);\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @return {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public get enableMiscue(): boolean {\r\n        const enableMiscueString = this.properties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue, \"false\");\r\n        return (enableMiscueString.toLowerCase() === \"true\");\r\n    }\r\n\r\n    /**\r\n     * Sets the nbest phoneme count\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\r\n     * @function\r\n     * @public\r\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\r\n     */\r\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\r\n        this.privNBestPhonemeCount = nbestPhonemeCount;\r\n    }\r\n\r\n    /**\r\n     * Enables the prosody assessment.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableProsodyAssessment\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableProsodyAssessment - enable prosody assessment.\r\n     */\r\n    public set enableProsodyAssessment(enableProsodyAssessment: boolean) {\r\n        this.privEnableProsodyAssessment = enableProsodyAssessment;\r\n    }\r\n\r\n    /**\r\n     * Enables content assessment and sets the topic.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableContentAssessmentWithTopic\r\n     * @function\r\n     * @public\r\n     * @param {string} topic - Topic for content assessment.\r\n     */\r\n    public enableContentAssessmentWithTopic(topic: string): void {\r\n        this.privContentAssessmentTopic = topic;\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a pronunciation assessment config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    private updateJson(): void {\r\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\r\n        const paramsJson: PronunciationAssessmentJSON = JSON.parse(jsonString) as PronunciationAssessmentJSON;\r\n\r\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n        if (referenceText) {\r\n            paramsJson.referenceText = referenceText;\r\n        }\r\n\r\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\r\n        if (gradingSystem) {\r\n            paramsJson.gradingSystem = gradingSystem;\r\n        }\r\n\r\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\r\n        if (granularity) {\r\n            paramsJson.granularity = granularity;\r\n        }\r\n\r\n        if (this.privPhonemeAlphabet) {\r\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\r\n        }\r\n\r\n        if (this.privNBestPhonemeCount) {\r\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\r\n        }\r\n\r\n        paramsJson.enableProsodyAssessment = this.privEnableProsodyAssessment;\r\n\r\n        // always set dimension to Comprehensive\r\n        paramsJson.dimension = \"Comprehensive\";\r\n\r\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\r\n        if (enableMiscueString) {\r\n            paramsJson.enableMiscue = this.enableMiscue;\r\n        }\r\n\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { RecognitionEventArgs, SpeechRecognitionResult, ConversationTranscriptionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines contents of conversation transcribed/transcribing event.\r\n * @class ConversationTranscriptionEventArgs\r\n */\r\nexport class ConversationTranscriptionEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranscriptionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranscriptionResult} result - The conversation transcription result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranscriptionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the transcription result.\r\n     * @member ConversationTranscription1EventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {ConversationTranscriptionResult} the recognition result.\r\n     */\r\n        public get result(): ConversationTranscriptionResult {\r\n            return this.privResult;\r\n        }\r\n}\r\n\r\n/**\r\n * Defines contents of meeting transcribed/transcribing event.\r\n * @class MeetingTranscriptionEventArgs\r\n */\r\nexport class MeetingTranscriptionEventArgs extends SpeechRecognitionEventArgs {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerVerificationModel class for Speaker Recognition\r\n * Model contains a profile against which to verify a speaker\r\n * @class SpeakerVerificationModel\r\n */\r\nexport class SpeakerVerificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfile: VoiceProfile;\r\n\r\n    private constructor(profile: VoiceProfile) {\r\n        Contracts.throwIfNullOrUndefined(profile, \"VoiceProfile\");\r\n        if (profile.profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            throw new Error(\"Verification model cannot be created from Identification profile\");\r\n        }\r\n        this.privVoiceProfile = profile;\r\n    }\r\n\r\n    public static fromProfile(profile: VoiceProfile): SpeakerVerificationModel {\r\n        return new SpeakerVerificationModel(profile);\r\n    }\r\n\r\n    public get voiceProfile(): VoiceProfile {\r\n        return this.privVoiceProfile;\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return [ this.voiceProfile.profileId ];\r\n    }\r\n\r\n    public get scenario(): string {\r\n        if (this.voiceProfile.profileType === VoiceProfileType.TextDependentVerification) {\r\n            return \"TextDependentVerification\";\r\n        } else {\r\n            return \"TextIndependentVerification\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./ConsoleLoggingListener.js\";\r\nexport * from \"./IRecorder.js\";\r\nexport * from \"./MicAudioSource.js\";\r\nexport * from \"./FileAudioSource.js\";\r\nexport * from \"./PCMRecorder.js\";\r\nexport * from \"./WebsocketConnection.js\";\r\nexport * from \"./WebsocketMessageAdapter.js\";\r\nexport * from \"./ReplayableAudioNode.js\";\r\nexport * from \"./ProxyInfo.js\";\r\nexport * from \"./RestMessageAdapter.js\";\r\nexport * from \"./RestConfigBase.js\";\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _native = _interopRequireDefault(require(\"./native.js\"));\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (_native.default.randomUUID && !buf && !options) {\n    return _native.default.randomUUID();\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.unsafeStringify)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result.\r\n * @class TranslationRecognitionResult\r\n */\r\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\r\n    private privTranslations: Translations;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {Translations} translations - The translations.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason,\r\n                       text?: string, duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privTranslations = translations;\r\n    }\r\n\r\n    public static fromSpeechRecognitionResult(result: SpeechRecognitionResult): TranslationRecognitionResult {\r\n        return new TranslationRecognitionResult(undefined, result.resultId, result.reason, result.text, result.duration, result.offset, result.language, result.languageDetectionConfidence, result.errorDetails, result.json, result.properties);\r\n    }\r\n\r\n    /**\r\n     * Presents the translation results. Each item in the dictionary represents\r\n     * a translation result in one of target languages, where the key is the name\r\n     * of the target language, in BCP-47 format, and the value is the translation\r\n     * text in the specified language.\r\n     * @member TranslationRecognitionResult.prototype.translations\r\n     * @function\r\n     * @public\r\n     * @returns {Translations} the current translation map that holds all translations requested.\r\n     */\r\n    public get translations(): Translations {\r\n        return this.privTranslations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { TokenCredential } from \"@azure/core-auth\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport { IStringDictionary } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Gets the TokenCredential instance if configured.\r\n     * Only available if using AAD-based authentication via TokenCredential.\r\n     * @returns {TokenCredential | undefined}\r\n     */\r\n    public abstract get tokenCredential(): TokenCredential | undefined;\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     * SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     * and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     * endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig;\r\n\r\n    /**\r\n     * Creates a speech configuration instance using a specified endpoint and Azure Active Directory (AAD) token credential.\r\n     * This API supports **SpeechRecognizer** and **ConversationTranscriber**.\r\n     * Intended for use with **non-standard resource paths** or **custom parameter overrides**.\r\n     * Query parameters specified in the endpoint URL **are not overridden** by other APIs.\r\n     * For example, if the URL includes \"language=de-DE\" but \"speechRecognitionLanguage\" is set to \"en-US\",\r\n     * the value from the URL \"de-DE\" takes precedence — if the parameter is supported by the scenario.\r\n     * Parameters **not present in the URL** can still be updated via other APIs.\r\n     * To authenticate with a **subscription key**, use SpeechConfig.fromEndpoint with a key argument.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The full service endpoint URL (e.g., for custom domains or private links).\r\n     * See: https://learn.microsoft.com/azure/ai-services/speech-service/speech-services-private-link?tabs=portal#create-a-custom-domain-name.\r\n     * @param {TokenCredential} tokenCredential - The AAD token credential used for authentication and token requests.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, tokenCredential: TokenCredential): SpeechConfig;\r\n\r\n    /**\r\n     * Internal implementation of fromEndpoint() overloads. Accepts either a subscription key or a TokenCredential.\r\n     * @private\r\n     */\r\n    public static fromEndpoint(endpoint: URL, auth: string | TokenCredential): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        const isValidString = typeof auth === \"string\" && auth.trim().length > 0;\r\n        const isTokenCredential = typeof auth === \"object\" && auth !== null && typeof auth.getToken === \"function\";\r\n        if (auth !== undefined && !isValidString && !isTokenCredential) {\r\n            throw new Error(\"Invalid 'auth' parameter: must be a non-empty key string or a valid TokenCredential object.\");\r\n        }\r\n\r\n        const speechImpl: SpeechConfigImpl = typeof auth === \"object\"\r\n            ? new SpeechConfigImpl(auth)\r\n            : new SpeechConfigImpl();\r\n\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (typeof auth === \"string\" && auth.trim().length > 0) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, auth);\r\n        }\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        // Containers do not yet have /stt/speech/universal/v2 routes.\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     * to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     * the new token value will not apply to recognizers that have already been created. For recognizers\r\n     * that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The username of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * Enable audio logging in service.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n    private readonly privTokenCredential?: TokenCredential;\r\n\r\n    public constructor(tokenCredential?: TokenCredential) {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n        this.privTokenCredential = tokenCredential;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n\r\n    public set autoDetectSourceLanguages(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return OutputFormat[this.privProperties.getProperty(OutputFormatPropertyName, undefined) as keyof typeof OutputFormat];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public get tokenCredential(): TokenCredential | undefined {\r\n        return this.privTokenCredential;\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Detailed]);\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl(this.tokenCredential);\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return SpeechSynthesisOutputFormat[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConnectionMessage> {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders(message: ConnectionMessage): string {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders(headersString: string): IStringDictionary<string> {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer(str: string): ArrayBuffer {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n/**\r\n * The result type enum\r\n */\r\nexport enum ResultType {\r\n    Auto = \"Auto\",\r\n    StableFragment = \"StableFragment\",\r\n    Hypothesis = \"Hypothesis\",\r\n    None = \"None\"\r\n}\r\n\r\n/**\r\n * The interim results\r\n */\r\nexport interface InterimResults {\r\n    /**\r\n     * The result type\r\n     */\r\n    resultType?: ResultType;\r\n\r\n    /**\r\n     * The stable threshold\r\n     */\r\n    stableThreshold?: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../../common/Error.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n/**\r\n * Base audio player class\r\n * TODO: Plays only PCM for now.\r\n * @class\r\n */\r\nexport class BaseAudioPlayer {\r\n\r\n    private audioContext: AudioContext = null;\r\n    private gainNode: GainNode = null;\r\n    private audioFormat: AudioStreamFormatImpl;\r\n    private autoUpdateBufferTimer: any = 0;\r\n    private samples: Float32Array;\r\n    private startTime: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\r\n     */\r\n    public constructor(audioFormat?: AudioStreamFormat) {\r\n        if (audioFormat === undefined) {\r\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        this.init(audioFormat);\r\n    }\r\n\r\n    /**\r\n     * play Audio sample\r\n     * @param newAudioData audio data to be played.\r\n     */\r\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        try {\r\n            this.ensureInitializedContext();\r\n            const audioData = this.formatAudioData(newAudioData);\r\n            const newSamplesData = new Float32Array(this.samples.length + audioData.length);\r\n            newSamplesData.set(this.samples, 0);\r\n            newSamplesData.set(audioData, this.samples.length);\r\n            this.samples = newSamplesData;\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stops audio and clears the buffers\r\n     */\r\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.audioContext !== null) {\r\n            this.samples = new Float32Array();\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearInterval(this.autoUpdateBufferTimer);\r\n            this.audioContext.close().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n\r\n    private init(audioFormat: AudioStreamFormat): void {\r\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private ensureInitializedContext(): void {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n            const timerPeriod = 200;\r\n            this.autoUpdateBufferTimer = setInterval((): void => {\r\n                this.updateAudioBuffer();\r\n            }, timerPeriod);\r\n        }\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\r\n\r\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\r\n        // to control the volume, not likely\r\n        this.gainNode = this.audioContext.createGain();\r\n        this.gainNode.gain.value = 1;\r\n        this.gainNode.connect(this.audioContext.destination);\r\n        this.startTime = this.audioContext.currentTime;\r\n    }\r\n\r\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\r\n        switch (this.audioFormat.bitsPerSample) {\r\n            case 8:\r\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\r\n            case 16:\r\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\r\n            case 32:\r\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\r\n            default:\r\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\r\n        }\r\n    }\r\n\r\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\r\n        const float32Data = new Float32Array(audioData.length);\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            float32Data[i] = audioData[i] / maxValue;\r\n        }\r\n        return float32Data;\r\n    }\r\n\r\n    private updateAudioBuffer(): void {\r\n        if (this.samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const channelCount = this.audioFormat.channels;\r\n        const bufferSource = this.audioContext.createBufferSource();\r\n        const frameCount = this.samples.length / channelCount;\r\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\r\n\r\n        // TODO: Should we do the conversion in the pushAudioSample instead?\r\n        for (let channel = 0; channel < channelCount; channel++) {\r\n            // Fill in individual channel data\r\n            let channelOffset = channel;\r\n            const audioData = audioBuffer.getChannelData(channel);\r\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\r\n                audioData[i] = this.samples[channelOffset];\r\n            }\r\n        }\r\n\r\n        if (this.startTime < this.audioContext.currentTime) {\r\n            this.startTime = this.audioContext.currentTime;\r\n        }\r\n\r\n        bufferSource.buffer = audioBuffer;\r\n        bufferSource.connect(this.gainNode);\r\n        bufferSource.start(this.startTime);\r\n\r\n        // Make sure we play the next sample after the current one.\r\n        this.startTime += audioBuffer.duration;\r\n\r\n        // Clear the samples for the next pushed data.\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n        }\r\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\r\n        const destination: AudioDestinationNode = this.audioContext.destination;\r\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\r\n            source.buffer = newBuffer;\r\n            source.connect(destination);\r\n            source.start(0);\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): Promise<IConnection> {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return Promise.resolve(new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId));\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ServiceRecognizerBase,\r\n    SynthesisAdapterBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    IDetachable,\r\n    marshalPromiseToCallbacks,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectionMessageImpl\r\n} from \"./ConnectionMessage.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConnectionMessageEventArgs,\r\n    ConversationTranscriber,\r\n    Recognizer,\r\n    ServiceEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\r\nexport class Connection {\r\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\r\n    private privEventListener: IDetachable;\r\n    private privServiceEventListener: IDetachable;\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified recognizer.\r\n     * @param recognizer The recognizer associated with the connection.\r\n     * @return The Connection instance of the recognizer.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber): Connection {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = recoBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified synthesizer.\r\n     * @param synthesizer The synthesizer associated with the connection.\r\n     * @return The Connection instance of the synthesizer.\r\n     */\r\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\r\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = synthBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Starts to set up connection to the service.\r\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     */\r\n    public openConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n     *\r\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public closeConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\r\n        } else {\r\n            marshalPromiseToCallbacks(this.privInternalData.disconnect(), cb, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a parameter in a message to service.\r\n     * Added in version 1.12.1.\r\n     * @param path The path of the network message.\r\n     * @param propertyName Name of the property\r\n     * @param propertyValue Value of the property. This is a json string.\r\n     */\r\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string | object): void {\r\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\r\n\r\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\r\n            if (path.toLowerCase() !== \"speech.context\") {\r\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\r\n            } else {\r\n                const context = this.privInternalData.speechContext.getContext();\r\n                context[propertyName] = propertyValue;\r\n            }\r\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            if (path.toLowerCase() !== \"synthesis.context\") {\r\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\r\n            } else {\r\n                this.privInternalData.synthesisContext.setSection(propertyName, propertyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the speech service.\r\n     * Added in version 1.13.0.\r\n     * @param path The WebSocket path of the message\r\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n     * @param success A callback to indicate success.\r\n     * @param error A callback to indicate an error.\r\n     */\r\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\r\n    }\r\n\r\n    /**\r\n     * Any message from service that is not being processed by any other top level recognizers.\r\n     *\r\n     * Will be removed in 2.0.\r\n     */\r\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\r\n\r\n    /**\r\n     * Any message received from the Speech Service.\r\n     */\r\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * Any message sent to the Speech Service.\r\n     */\r\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * The Connected event to indicate that the recognizer is connected to service.\r\n     */\r\n    public connected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\r\n     */\r\n    public disconnected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     */\r\n    public close(): void {\r\n        /* eslint-disable no-empty */\r\n    }\r\n\r\n    private setupEvents(): void {\r\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                if (!!this.connected) {\r\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                if (!!this.disconnected) {\r\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\r\n                if (!!this.messageSent) {\r\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\r\n                if (!!this.messageReceived) {\r\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\r\n            if (!!this.receivedServiceMessage) {\r\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines translation status.\r\n * @class TranslationStatus\r\n */\r\nexport enum TranslationStatus {\r\n    /**\r\n     * @member TranslationStatus.Success\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * @member TranslationStatus.Error\r\n     */\r\n    Error,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result event arguments.\r\n * @class TranslationRecognitionEventArgs\r\n */\r\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might not be recognized.\r\n * @class NoMatchReason\r\n */\r\nexport enum NoMatchReason {\r\n\r\n    /**\r\n     * Indicates that speech was detected, but not recognized.\r\n     * @member NoMatchReason.NotRecognized\r\n     */\r\n    NotRecognized,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only silence,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialSilenceTimeout\r\n     */\r\n    InitialSilenceTimeout,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only noise,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialBabbleTimeout\r\n     */\r\n    InitialBabbleTimeout,\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage.js\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (messageType === MessageType.Binary && Object.getPrototypeOf(payload).constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload as ArrayBuffer;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ResultReason,\r\n    VoiceProfileResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfilePhraseResult\r\n */\r\nexport class VoiceProfilePhraseResult extends VoiceProfileResult {\r\n    private privPhrases: string[] = [];\r\n    private privType: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string, type: string, phraseArray: string[]) {\r\n        super(reason, statusText);\r\n        Contracts.throwIfNullOrUndefined(phraseArray, \"phrase array\");\r\n        this.privType = type;\r\n        if (!!phraseArray && !!phraseArray[0]) {\r\n            this.privPhrases = phraseArray;\r\n        }\r\n    }\r\n\r\n    public get phrases(): string[] {\r\n        return this.privPhrases;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\n/**\r\n * String helper functions\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * Formats a string by replacing the named {keys} in the string with the values contained in the replacement dictionary.\r\n     * @param format The format string that contains the parts to replace surrounded by {}. For example: \"wss://{region}.cts.speech.microsoft.com\".\r\n     * If your string needs to contain a { or } you can use the {{ and }} escape sequences respectively.\r\n     * @param replacements The dictionary of replacements. If a replacement is not found, it is replaced with an empty string\r\n     * @returns The formatted string. If you pass in a null or undefined format string, an empty string will be returned\r\n     */\r\n    public static formatString(format: string, replacements: IStringDictionary<string>): string {\r\n        if (!format) {\r\n            return \"\";\r\n        }\r\n\r\n        if (!replacements) {\r\n            return format;\r\n        }\r\n\r\n        let formatted: string = \"\";\r\n        let key: string = \"\";\r\n\r\n        const appendToFormatted = (str: string): void => {\r\n            formatted += str;\r\n        };\r\n        const appendToKey = (str: string): void => {\r\n            key += str;\r\n        };\r\n        let appendFunc: (str: string) => void = appendToFormatted;\r\n\r\n        for (let i = 0; i < format.length; i++) {\r\n            const c: string = format[i];\r\n            const next: string = i + 1 < format.length ? format[i + 1] : \"\";\r\n\r\n            switch (c) {\r\n                case \"{\":\r\n                    if (next === \"{\") {\r\n                        appendFunc(\"{\");\r\n                        i++;\r\n                    } else {\r\n                        appendFunc = appendToKey;\r\n                    }\r\n                    break;\r\n\r\n                case \"}\":\r\n                    if (next === \"}\") {\r\n                        appendFunc(\"}\");\r\n                        i++;\r\n                    } else {\r\n                        if (replacements.hasOwnProperty(key)) {\r\n                            formatted += replacements[key];\r\n                        }\r\n\r\n                        appendFunc = appendToFormatted;\r\n                        key = \"\";\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    appendFunc(c);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return formatted;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { RecognitionMode } from \"../common.speech/ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     * values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition like command or query.\r\n     * For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.getContext().intent = context.Intent;\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.getContext().intent = context.Intent;\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     * to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     * is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string;\r\n        key: string;\r\n        provider: string;\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognizerConfig } from \"../common.speech/Exports.js\";\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\n\r\nexport class ProxyInfo {\r\n    private privProxyHostName: string;\r\n    private privProxyPort: number;\r\n    private privProxyUserName: string;\r\n    private privProxyPassword: string;\r\n\r\n    private constructor(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string) {\r\n        this.privProxyHostName = proxyHostName;\r\n        this.privProxyPort = proxyPort;\r\n        this.privProxyUserName = proxyUserName;\r\n        this.privProxyPassword = proxyPassword;\r\n    }\r\n\r\n    public static fromParameters(parameters: PropertyCollection): ProxyInfo {\r\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName),\r\n            parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\r\n    }\r\n\r\n    public static fromRecognizerConfig(config: RecognizerConfig): ProxyInfo {\r\n        return this.fromParameters(config.parameters);\r\n    }\r\n\r\n    public get HostName(): string {\r\n        return this.privProxyHostName;\r\n    }\r\n\r\n    public get Port(): number {\r\n        return this.privProxyPort;\r\n    }\r\n\r\n    public get UserName(): string {\r\n        return this.privProxyUserName;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.privProxyPassword;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IVoiceJson, IVoiceTag } from \"./IVoiceJson\";\r\n\r\n/**\r\n * Defines the gender of synthesis voices.\r\n * Added in version 1.20.0.\r\n */\r\nexport enum SynthesisVoiceGender {\r\n\r\n    /** Gender unknown */\r\n    Unknown,\r\n\r\n    /** Female voice */\r\n    Female,\r\n\r\n    /** Male voice */\r\n    Male,\r\n\r\n    /** Neutral voice */\r\n    Neutral\r\n}\r\n\r\nexport enum SynthesisVoiceType {\r\n    /**\r\n     * Voice type is not known.\r\n     */\r\n    Unknown = 0,\r\n\r\n    /**\r\n     * Online neural voices.\r\n     */\r\n    OnlineNeural = 1,\r\n\r\n    /**\r\n     * Online standard voices. These voices are deprecated.\r\n     */\r\n    OnlineStandard = 2,\r\n\r\n    /**\r\n     * Offline neural voices.\r\n     */\r\n    OfflineNeural = 3,\r\n\r\n    /**\r\n     * Offline standard voices.\r\n     */\r\n    OfflineStandard = 4,\r\n\r\n    /**\r\n     * High definition (HD) voices. Refer to https://learn.microsoft.com/azure/ai-services/speech-service/high-definition-voices\r\n     */\r\n    OnlineNeuralHD = 5,\r\n}\r\n\r\nconst GENDER_LOOKUP: Record<string, SynthesisVoiceGender> = {\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Neutral]]: SynthesisVoiceGender.Neutral,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Male]]: SynthesisVoiceGender.Male,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Female]]: SynthesisVoiceGender.Female,\r\n};\r\n\r\nconst VOICE_TYPE_LOOKUP: Record<string, SynthesisVoiceType> = {\r\n    Neural: SynthesisVoiceType.OnlineNeural,\r\n    NeuralHD: SynthesisVoiceType.OnlineNeuralHD,\r\n};\r\n\r\n/**\r\n * Information about Speech Synthesis voice\r\n * Added in version 1.20.0.\r\n * @class VoiceInfo\r\n */\r\nexport class VoiceInfo {\r\n    private privName: IVoiceJson[\"Name\"];\r\n    private privLocale: IVoiceJson[\"Locale\"];\r\n    private privShortName: IVoiceJson[\"ShortName\"];\r\n    private privDisplayName: IVoiceJson[\"DisplayName\"];\r\n    private privLocalName: IVoiceJson[\"LocalName\"];\r\n    private privLocaleName: IVoiceJson[\"LocaleName\"];\r\n    private privGender: SynthesisVoiceGender;\r\n    private privVoiceType: SynthesisVoiceType;\r\n    private privStyleList: IVoiceJson[\"StyleList\"] = [];\r\n    private privSampleRateHertz: IVoiceJson[\"SampleRateHertz\"];\r\n    private privStatus: IVoiceJson[\"Status\"];\r\n    private privExtendedPropertyMap: IVoiceJson[\"ExtendedPropertyMap\"];\r\n    private privWordsPerMinute: IVoiceJson[\"WordsPerMinute\"];\r\n    private privSecondaryLocaleList: IVoiceJson[\"SecondaryLocaleList\"];\r\n    private privRolePlayList: IVoiceJson[\"RolePlayList\"];\r\n    private privVoiceTag: IVoiceTag;\r\n\r\n    public constructor(json: IVoiceJson) {\r\n        if (!!json) {\r\n            this.privName = json.Name;\r\n            this.privLocale = json.Locale;\r\n            this.privShortName = json.ShortName;\r\n            this.privLocaleName = json.LocaleName;\r\n            this.privDisplayName = json.DisplayName;\r\n            this.privLocalName = json.LocalName;\r\n            this.privVoiceType = VOICE_TYPE_LOOKUP[json.VoiceType] || SynthesisVoiceType.Unknown;\r\n            this.privGender = GENDER_LOOKUP[json.Gender] || SynthesisVoiceGender.Unknown;\r\n\r\n            if (!!json.StyleList && Array.isArray(json.StyleList)) {\r\n                for (const style of json.StyleList) {\r\n                    this.privStyleList.push(style);\r\n                }\r\n            }\r\n\r\n            this.privSampleRateHertz = json.SampleRateHertz;\r\n            this.privStatus = json.Status;\r\n\r\n            if (json.ExtendedPropertyMap) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privExtendedPropertyMap = json.ExtendedPropertyMap;\r\n            }\r\n\r\n            this.privWordsPerMinute = json.WordsPerMinute;\r\n\r\n            if (Array.isArray(json.SecondaryLocaleList)) {\r\n                this.privSecondaryLocaleList = [...json.SecondaryLocaleList];\r\n            }\r\n\r\n            if (Array.isArray(json.RolePlayList)) {\r\n                this.privRolePlayList = [...json.RolePlayList];\r\n            }\r\n\r\n            if (json.VoiceTag) {\r\n                this.privVoiceTag = json.VoiceTag;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get name(): IVoiceJson[\"Name\"] {\r\n        return this.privName;\r\n    }\r\n\r\n    public get locale(): IVoiceJson[\"Locale\"] {\r\n        return this.privLocale;\r\n    }\r\n\r\n    public get shortName(): IVoiceJson[\"ShortName\"] {\r\n        return this.privShortName;\r\n    }\r\n\r\n    public get displayName(): IVoiceJson[\"DisplayName\"] {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get localName(): IVoiceJson[\"LocalName\"] {\r\n        return this.privLocalName;\r\n    }\r\n\r\n    public get localeName(): IVoiceJson[\"LocaleName\"] {\r\n        return this.privLocaleName;\r\n    }\r\n\r\n    public get gender(): SynthesisVoiceGender {\r\n        return this.privGender;\r\n    }\r\n\r\n    public get voiceType(): SynthesisVoiceType {\r\n        return this.privVoiceType;\r\n    }\r\n\r\n    public get styleList(): IVoiceJson[\"StyleList\"] {\r\n        return this.privStyleList;\r\n    }\r\n\r\n    public get sampleRateHertz(): IVoiceJson[\"SampleRateHertz\"] {\r\n        return this.privSampleRateHertz;\r\n    }\r\n\r\n    public get status(): IVoiceJson[\"Status\"] {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get extendedPropertyMap(): IVoiceJson[\"ExtendedPropertyMap\"] {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privExtendedPropertyMap;\r\n    }\r\n\r\n    public get wordsPerMinute(): IVoiceJson[\"WordsPerMinute\"] {\r\n        return this.privWordsPerMinute;\r\n    }\r\n\r\n    public get secondaryLocaleList(): IVoiceJson[\"SecondaryLocaleList\"] {\r\n        return this.privSecondaryLocaleList;\r\n    }\r\n\r\n    public get rolePlayList(): IVoiceJson[\"RolePlayList\"] {\r\n        return this.privRolePlayList;\r\n    }\r\n\r\n    public get voiceTag(): IVoiceTag {\r\n        return this.privVoiceTag;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports.js\";\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privLanguageIdMode: LanguageIdMode;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        this.privLanguageIdMode = LanguageIdMode.AtStart;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig): void => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.mode\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdMode} mode LID mode desired.\r\n     * @summary Sets LID operation to desired mode\r\n     */\r\n    public set mode(mode: LanguageIdMode) {\r\n        if (mode === LanguageIdMode.Continuous) {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"Continuous\");\r\n        } else { // LanguageIdMode.AtStart\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        }\r\n        this.privLanguageIdMode = mode;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AudioConfig,\r\n    SpeechTranslationConfig\r\n} from \"../Exports.js\";\r\nimport { Callback } from \"./IConversation.js\";\r\n\r\nexport class ConversationCommon {\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    protected privSpeechTranslationConfig: SpeechTranslationConfig;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n    }\r\n\r\n    protected handleCallback(cb: Callback, err: Callback): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    protected handleError(error: any, err: Callback): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\n\r\nexport class ConversationExpirationEventArgs extends SessionEventArgs {\r\n    private privExpirationTime: number;\r\n\r\n    public constructor(expirationTime: number, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privExpirationTime = expirationTime;\r\n    }\r\n\r\n    /** How much longer until the conversation expires (in minutes). */\r\n    public get expirationTime(): number {\r\n        return this.privExpirationTime;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports.js\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    public constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = Math.round(targetChunkSize);\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { ConversationManager } from \"./ConversationManager.js\";\r\nexport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nexport { ConversationRecognizerFactory } from \"./ConversationTranslatorRecognizer.js\";\r\nexport { TranscriberRecognizer } from \"./TranscriberRecognizer.js\";\r\nexport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\nexport {\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants} from \"./ConversationTranslatorInterfaces.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\nimport { List } from \"./List.js\";\r\nimport {\r\n    Deferred,\r\n} from \"./Promise.js\";\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType; deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType; deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded((): void => this.drain()));\r\n    }\r\n\r\n    public enqueue(item: TItem): void {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void): void => resolve(item)));\r\n    }\r\n\r\n    public enqueueFromPromise(promise: Promise<TItem>): void {\r\n        this.throwIfDispose();\r\n        promise.then((val: TItem): void => {\r\n            this.privList.add(val);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        }, (): void => { });\r\n    }\r\n\r\n    public dequeue(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public peek(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                const promiseArray: Promise<TItem>[] = [];\r\n\r\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>): void => {\r\n                    promiseArray.push(wrapper);\r\n                });\r\n                return Promise.all(promiseArray).finally((): void => {\r\n                    this.privSubscribers = null;\r\n                    this.privList.forEach((item: TItem): void => {\r\n                        pendingItemProcessor(item);\r\n                    });\r\n                    this.privList = null;\r\n                    return;\r\n                }).then<void>();\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        await this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain(): void {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose(): void {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter.js\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n\r\n                    const key = encodeURIComponent(paramName);\r\n                    queryParams += key;\r\n\r\n                    let val = queryParameters[paramName];\r\n                    if (val) {\r\n                        val = encodeURIComponent(val);\r\n                        queryParams += `=${val}`;\r\n                    }\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public state(): ConnectionState {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents.js\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal.js\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecognitionBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privConnectionAttempts: number = 0;\r\n\r\n    public constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    public get numConnectionAttempts(): number {\r\n        return this.privConnectionAttempts;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n\r\n    // The number of bytes sent for the current recognition.\r\n    // Counter is reset to 0 each time recognition is started.\r\n    public get recognitionBytesSent(): number {\r\n        return this.privRecognitionBytesSent;\r\n    }\r\n\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privRecognitionBytesSent = 0;\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean): Promise<void> {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            await this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public async onAuthCompleted(isError: boolean): Promise<void> {\r\n        if (isError) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\r\n        this.privTurnDeferral.resolve();\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            await this.onComplete();\r\n            this.privInTurn = false;\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onSpeechContext(): void {\r\n        this.privRequestId = createNoDashGuid();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n        this.privConnectionAttempts = 0;\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n        this.privRecognitionBytesSent += bytesSent;\r\n    }\r\n\r\n    public onRetryConnection(): void {\r\n        this.privConnectionAttempts++;\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (!!this.privServiceTelemetryListener) {\r\n                this.privServiceTelemetryListener.dispose();\r\n            }\r\n            this.privIsRecognizing = false;\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async onStopRecognizing(): Promise<void> {\r\n        await this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent(event: SpeechRecognitionEvent): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private async onComplete(): Promise<void> {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            await this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private async detachAudioNode(): Promise<void> {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                await this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis bookmark event.\r\n * @class SpeechSynthesisBookmarkEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisBookmarkEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The bookmark text.\r\n     */\r\n    public constructor(audioOffset: number, text: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the bookmark.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the bookmark text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PropertyCollection } from \"../Exports.js\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    public constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\nexport interface VoiceSignature {\r\n    Version: number;\r\n    Tag: string;\r\n    Data: string;\r\n}\r\n\r\nexport interface TranscriptionParticipant {\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** The participant's voice signature */\r\n    readonly voice: string;\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant extends TranscriptionParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privVoice: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privVoice = voice;\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get voice(): string {\r\n        return this.privVoice;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public static From(id: string, language: string, voice: string): IParticipant {\r\n        return new Participant(id, \"\", id, false, false, false, language, voice);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Node.JS specific web socket / browser support.\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\nimport * as http from \"http\";\r\nimport * as net from \"net\";\r\nimport * as tls from \"tls\";\r\nimport Agent from \"agent-base\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\n\r\nimport ws from \"ws\";\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionRedirectEvent,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n        this.privHeaders.connectionId = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465\r\n                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61\r\n                const uri = new URL(this.privUri);\r\n                let protocol: string = uri.protocol;\r\n\r\n                if (protocol?.toLocaleLowerCase() === \"wss:\") {\r\n                    protocol = \"https:\";\r\n                } else if (protocol?.toLocaleLowerCase() === \"ws:\") {\r\n                    protocol = \"http:\";\r\n                }\r\n\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression, followRedirects: protocol.toLocaleLowerCase() === \"https:\" };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                options.agent = this.getAgent();\r\n\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                (options.agent as any).protocol = protocol;\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n                this.privWebsocketClient.on(\"redirect\", (redirectUrl: string): void => {\r\n                    const event: ConnectionRedirectEvent = new ConnectionRedirectEvent(this.privConnectionId, redirectUrl, this.privUri, `Getting redirect URL from endpoint ${this.privUri} with redirect URL '${redirectUrl}'`);\r\n                    Events.instance.onEvent(event);\r\n                });\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error as string));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (): void => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }): void => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }): void => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }): void => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage): void => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string): void => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close(reason?: string): Promise<void> {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage(sendItem: ISendItem): Promise<void> {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e as string}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((): void => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem): void => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent(event: ConnectionEvent): void {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private getAgent(): http.Agent {\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const agent: { proxyInfo: ProxyInfo } = new Agent.Agent(this.createConnection) as unknown as { proxyInfo: ProxyInfo };\r\n\r\n        if (this.proxyInfo !== undefined &&\r\n            this.proxyInfo.HostName !== undefined &&\r\n            this.proxyInfo.Port > 0) {\r\n            agent.proxyInfo = this.proxyInfo;\r\n        }\r\n\r\n        return agent as unknown as http.Agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password}`).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private createConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: true,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.proxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = WebsocketMessageAdapter.GetProxyAgent(this.proxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void): void => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket): void => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        return socketPromise;\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n                resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, hypothesis.asJson());\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    hypothesis.Offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    hypothesis.asJson(),\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(hypothesis.Offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Offset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n                resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, simple.asJson());\r\n\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus, this.privExpectContentAssessmentResponse);\r\n\r\n                this.privRequestSession.onPhraseRecognized(simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    // Like the native SDK's, don't event / return an EndOfDictation message.\r\n                    if (simple.RecognitionStatus === RecognitionStatus.EndOfDictation) {\r\n                        break;\r\n                    }\r\n\r\n                    if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                        result = new SpeechRecognitionResult(\r\n                            this.privRequestSession.requestId,\r\n                            resultReason,\r\n                            simple.DisplayText,\r\n                            simple.Duration,\r\n                            simple.Offset,\r\n                            simple.Language,\r\n                            simple.LanguageDetectionConfidence,\r\n                            undefined, // Speaker Id\r\n                            undefined,\r\n                            simple.asJson(),\r\n                            resultProps);\r\n                    } else {\r\n                        const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n                        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, detailed.asJson());\r\n\r\n                        result = new SpeechRecognitionResult(\r\n                            this.privRequestSession.requestId,\r\n                            resultReason,\r\n                            detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : \"\",\r\n                            detailed.Duration,\r\n                            detailed.Offset,\r\n                            detailed.Language,\r\n                            detailed.LanguageDetectionConfidence,\r\n                            undefined, // Speaker Id\r\n                            undefined,\r\n                            detailed.asJson(),\r\n                            resultProps);\r\n                    }\r\n\r\n                    const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                    if (!!this.privSpeechRecognizer.recognized) {\r\n                        try {\r\n                            this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents the JSON used in the agent.config message sent to the speech service.\r\n */\r\nexport class AgentConfig {\r\n    private iPrivConfig: IAgentConfig;\r\n\r\n    public toJsonString(): string {\r\n        return JSON.stringify(this.iPrivConfig);\r\n    }\r\n\r\n    public get(): IAgentConfig {\r\n        return this.iPrivConfig;\r\n    }\r\n\r\n    /**\r\n     * Setter for the agent.config object.\r\n     * @param value a JSON serializable object.\r\n     */\r\n    public set(value: IAgentConfig): void {\r\n        this.iPrivConfig = value;\r\n    }\r\n}\r\n\r\nexport interface IAgentConfig {\r\n    botInfo: {\r\n        commType: string;\r\n        connectionId: string;\r\n        conversationId: string;\r\n        fromId: string;\r\n        commandsCulture: string;\r\n        ttsAudioFormat: string;\r\n    };\r\n    version: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports.js\";\r\n\r\nexport class ConversationConnectionMessage extends ConnectionMessage {\r\n    private privConversationMessageType: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n            super(messageType, body, headers, id);\r\n            const json: { type: string } = JSON.parse(this.textBody) as { type: string };\r\n            if (json.type !== undefined) {\r\n                this.privConversationMessageType = json.type;\r\n            }\r\n    }\r\n\r\n    public get conversationMessageType(): string {\r\n        return this.privConversationMessageType;\r\n    }\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly ApiKey: string = \"api\";\r\n    private static readonly BaseUrl: string = \"convai.speech\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): Promise<IConnection> {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return Promise.resolve(new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId));\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileType\r\n */\r\nexport enum VoiceProfileType {\r\n\r\n    /**\r\n     * Text independent speaker identification\r\n     * @member VoiceProfileType.TextIndependentIdentification\r\n     */\r\n    TextIndependentIdentification,\r\n\r\n    /**\r\n     * Text dependent speaker verification\r\n     * @member VoiceProfileType.TextDependentVerification\r\n     */\r\n    TextDependentVerification,\r\n\r\n    /**\r\n     * Text independent speaker verification\r\n     * @member VoiceProfileType.TextIndependentVerification\r\n     */\r\n    TextIndependentVerification,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    DeferralMap,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    VoiceProfileClient,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n    VoiceProfile\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnrollmentResponse,\r\n    IProfile,\r\n    ISpeechConfigAudioDevice,\r\n    ProfilePhraseResponse,\r\n    ProfileResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CreateProfile {\r\n    scenario: string;\r\n    locale: string;\r\n    number: string;\r\n}\r\n\r\ninterface PhraseRequest {\r\n    scenario: string;\r\n    locale: string;\r\n}\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class VoiceServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privDeferralMap: DeferralMap = new DeferralMap();\r\n    private privExpectedProfileId: string;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: VoiceProfileClient) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    public set SpeakerAudioSource(audioSource: IAudioSource) {\r\n        this.privSpeakerAudioSource = audioSource;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            // Profile management response for create, fetch, delete, reset\r\n            case \"speaker.profiles\":\r\n                const response: ProfileResponse = JSON.parse(connectionMessage.textBody) as ProfileResponse;\r\n                switch (response.operation.toLowerCase()) {\r\n                    case \"create\":\r\n                        this.handleCreateResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"delete\":\r\n                    case \"reset\":\r\n                        this.handleResultResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"fetch\":\r\n                        const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                        this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            // Activation and authorization phrase response\r\n            case \"speaker.phrases\":\r\n                const phraseResponse: ProfilePhraseResponse = JSON.parse(connectionMessage.textBody) as ProfilePhraseResponse;\r\n                this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);\r\n                processed = true;\r\n                break;\r\n            // Enrollment response\r\n            case \"speaker.profile.enrollment\":\r\n                const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode),\r\n                    !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined,\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {\r\n                    this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(connectionMessage.requestId, result);\r\n                }\r\n                this.privRequestSession.onSpeechEnded();\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                ResultReason.Canceled,\r\n                error,\r\n                error,\r\n                );\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            }\r\n    }\r\n\r\n    public async createProfile(profileType: VoiceProfileType, locale: string): Promise<string[]> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.voiceProfileType = profileType.toString();\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const createProfileDeferral = new Deferred<string[]>();\r\n            await conPromise;\r\n            await this.sendCreateProfile(createProfileDeferral, profileType, locale);\r\n            void this.receiveMessage();\r\n            return createProfileDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async resetProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"reset\", profile.profileType, profile);\r\n    }\r\n\r\n    public async deleteProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"delete\", profile.profileType, profile);\r\n    }\r\n\r\n    public async retrieveEnrollmentResult(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        this.privExpectedProfileId = profile.profileId;\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult>(\"fetch\", profile.profileType, profile);\r\n    }\r\n\r\n    public async getAllProfiles(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        this.voiceProfileType = profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult[]>(\"fetch\", profileType);\r\n    }\r\n\r\n    public async getActivationPhrases(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        this.voiceProfileType = profileType.toString();\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const getPhrasesDeferral = new Deferred<VoiceProfilePhraseResult>();\r\n            await conPromise;\r\n            await this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);\r\n            void this.receiveMessage();\r\n            return getPhrasesDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async enrollProfile(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        const enrollmentDeferral = new Deferred<VoiceProfileEnrollmentResult>();\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(profile, enrollmentDeferral);\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return enrollmentDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(profile: VoiceProfile, enrollmentDeferral: Deferred<VoiceProfileEnrollmentResult>): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfileEnrollmentResult>(this.privRequestSession.requestId, enrollmentDeferral);\r\n        await this.sendBaseRequest(connection, \"enroll\", this.scenarioFrom(profile.profileType), profile);\r\n    }\r\n\r\n    private async sendPhrasesRequest(getPhrasesDeferral: Deferred<VoiceProfilePhraseResult>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfilePhraseResult>(this.privRequestSession.requestId, getPhrasesDeferral);\r\n        const scenario = this.scenarioFrom(profileType);\r\n\r\n        const profileCreateRequest: PhraseRequest = {\r\n            locale,\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.phrases\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCreateProfile(createProfileDeferral: Deferred<string[]>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<string[]>(this.privRequestSession.requestId, createProfileDeferral);\r\n        const scenario = profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n\r\n        const profileCreateRequest: CreateProfile = {\r\n            locale,\r\n            number: \"1\",\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.create\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCommonRequest<T>(operation: string, profileType: VoiceProfileType, profile: VoiceProfile = undefined): Promise<T> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const deferral = new Deferred<T>();\r\n            this.privRequestSession.onSpeechContext();\r\n            await conPromise;\r\n            const connection: IConnection = await this.fetchConnection();\r\n            this.privDeferralMap.add<T>(this.privRequestSession.requestId, deferral);\r\n            await this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);\r\n            void this.receiveMessage();\r\n            return deferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private async sendBaseRequest(connection: IConnection, operation: string, scenario: string, profile: VoiceProfile): Promise<void> {\r\n        const profileRequest: { maxPageSize?: number; profileIds?: string[]; scenario: string } = {\r\n            scenario\r\n        };\r\n        if (!!profile) {\r\n            profileRequest.profileIds = [ profile.profileId ];\r\n        } else {\r\n            profileRequest.maxPageSize = -1;\r\n        }\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            `speaker.profile.${operation}`,\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileRequest)));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n\r\n    private handlePhrasesResponse(response: ProfilePhraseResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                const reason: ResultReason = ResultReason.Canceled;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else if (!!response.phrases && response.phrases.length > 0) {\r\n                const reason: ResultReason = ResultReason.EnrollingVoiceProfile;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else {\r\n                throw new Error(\"Voice Profile get activation phrases failed, no phrases received\");\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleCreateResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!response.profiles && response.profiles.length > 0) {\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                const profileIds: string[] = response.profiles.map((profile: IProfile): string => profile.profileId);\r\n                this.privDeferralMap.complete<string[]>(requestId, profileIds);\r\n            } else {\r\n                throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n            }\r\n        } else {\r\n            throw new Error(\"Voice Profile create failed, no profile id received\");\r\n        }\r\n    }\r\n\r\n    private handleResultResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            const successReason: ResultReason = response.operation.toLowerCase() === \"delete\" ? ResultReason.DeletedVoiceProfile : ResultReason.ResetVoiceProfile;\r\n            const reason: ResultReason = response.status.statusCode.toLowerCase() === \"success\" ? successReason : ResultReason.Canceled;\r\n            const result = new VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);\r\n            this.privDeferralMap.complete<VoiceProfileResult>(requestId, result);\r\n        } else {\r\n            throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleFetchResponse(enrollmentResponse: EnrollmentResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {\r\n            if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {\r\n                this.privExpectedProfileId = undefined;\r\n                const profileInfo: IProfile = enrollmentResponse.profiles[0];\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(profileInfo.enrollmentStatus),\r\n                    JSON.stringify(profileInfo),\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            } else if (enrollmentResponse.profiles.length > 0) {\r\n                const iProfiles: IProfile[] = enrollmentResponse.profiles;\r\n                const profileResults: VoiceProfileEnrollmentResult[] = [];\r\n                for (const profile of iProfiles) {\r\n                    profileResults.push( new VoiceProfileEnrollmentResult(\r\n                        this.enrollmentReasonFrom(profile.enrollmentStatus),\r\n                        JSON.stringify(profile),\r\n                        enrollmentResponse.status.reason,\r\n                    ));\r\n                }\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult[]>(requestId, profileResults);\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private enrollmentReasonFrom(statusCode: string): ResultReason {\r\n        switch (statusCode.toLowerCase()) {\r\n            case \"enrolled\":\r\n                return ResultReason.EnrolledVoiceProfile;\r\n            case \"invalidlocale\":\r\n            case \"invalidphrase\":\r\n            case \"invalidaudioformat\":\r\n            case \"invalidscenario\":\r\n            case \"invalidprofilecount\":\r\n            case \"invalidoperation\":\r\n            case \"audiotooshort\":\r\n            case \"audiotoolong\":\r\n            case \"toomanyenrollments\":\r\n            case \"storageconflict\":\r\n            case \"profilenotfound\":\r\n            case \"incompatibleprofiles\":\r\n            case \"incompleteenrollment\":\r\n                return ResultReason.Canceled;\r\n            default:\r\n                return ResultReason.EnrollingVoiceProfile;\r\n        }\r\n    }\r\n\r\n    private scenarioFrom(profileType: VoiceProfileType): string {\r\n        return profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport {\r\n    Context,\r\n    ISynthesisSectionVideo,\r\n    SpeechServiceConfig\r\n    } from \"./Exports.js\";\r\n\r\nexport enum SynthesisServiceType {\r\n    Standard,\r\n    Custom,\r\n}\r\n\r\nexport class SynthesizerConfig {\r\n    private privSynthesisServiceType: SynthesisServiceType = SynthesisServiceType.Standard;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privParameters: PropertyCollection;\r\n    public avatarEnabled: boolean = false;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get synthesisServiceType(): SynthesisServiceType {\r\n        return this.privSynthesisServiceType;\r\n    }\r\n\r\n    public set synthesisServiceType(value: SynthesisServiceType) {\r\n        this.privSynthesisServiceType = value;\r\n    }\r\n\r\n    public set synthesisVideoSection(value: ISynthesisSectionVideo) {\r\n        this.privSpeechServiceConfig.Context.synthesis = {\r\n            video: value\r\n        };\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Base class for synthesis results\r\n * @class SynthesisResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privErrorDetails: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member SynthesisResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member SynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\r\n     * @member SynthesisResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member SynthesisResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines error code in case that CancellationReason is Error.\r\n * Added in version 1.1.0.\r\n */\r\nexport enum CancellationErrorCode {\r\n    /**\r\n     * Indicates that no error occurred during speech recognition.\r\n     */\r\n    NoError,\r\n\r\n    /**\r\n     * Indicates an authentication error.\r\n     */\r\n    AuthenticationFailure,\r\n\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    BadRequestParameters,\r\n\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed\r\n     * concurrent transcriptions for the subscription.\r\n     */\r\n    TooManyRequests,\r\n\r\n    /**\r\n     * Indicates a connection error.\r\n     */\r\n    ConnectionFailure,\r\n\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    ServiceTimeout,\r\n\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    ServiceError,\r\n\r\n    /**\r\n     * Indicates an unexpected runtime error.\r\n     */\r\n    RuntimeError,\r\n\r\n    /**\r\n     * Indicates an quota overrun on existing key.\r\n     */\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    };\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    };\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    };\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    };\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    };\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    };\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve(result: T): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject(error: string): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on(\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void {\r\n\r\n        if (successCallback == null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            successCallback = (): void => { };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback(result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e as string}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback(error: string, errorCallback: (error: string) => void): void {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e as string}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers(): void {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error ;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error as string);\r\n                    }\r\n                // eslint-disable-next-line no-empty\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            // eslint-disable-next-line no-empty\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyId,\r\n    RecognitionResult\r\n} from \"./Exports.js\";\r\n\r\ninterface AssessmentResult {\r\n    NBest: DetailResult[];\r\n}\r\n\r\ninterface DetailResult {\r\n    Words: WordResult[];\r\n    PronunciationAssessment: {\r\n        AccuracyScore: number;\r\n        CompletenessScore: number;\r\n        FluencyScore: number;\r\n        PronScore: number;\r\n        ProsodyScore: number;\r\n    };\r\n    ContentAssessment: {\r\n        GrammarScore: number;\r\n        VocabularyScore: number;\r\n        TopicScore: number;\r\n    };\r\n}\r\n\r\ninterface WordResult {\r\n    Word: string;\r\n    Phonemes: {\r\n        Phoneme?: string;\r\n        PronunciationAssessment?: {\r\n            NBestPhonemes: { Phoneme: string }[];\r\n        };\r\n     }[];\r\n    PronunciationAssessment?: {\r\n        AccuracyScore: number;\r\n        ErrorType: string;\r\n    };\r\n    Syllables: { Syllable: string }[];\r\n}\r\n\r\nexport class ContentAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally.\r\n     */\r\n    public constructor(detailResult: DetailResult) {\r\n        this.privPronJson = detailResult;\r\n    }\r\n\r\n    /**\r\n     * Correctness in using grammar and variety of sentence patterns.\r\n     * Grammatical errors are jointly evaluated by lexical accuracy,\r\n     * grammatical accuracy and diversity of sentence structures.\r\n     * @member ContentAssessmentResult.prototype.grammarScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Grammar score.\r\n     */\r\n    public get grammarScore(): number {\r\n        return this.privPronJson.ContentAssessment.GrammarScore;\r\n    }\r\n\r\n    /**\r\n     * Proficiency in lexical usage. It evaluates the speaker's effective usage\r\n     * of words and their appropriateness within the given context to express\r\n     * ideas accurately, as well as level of lexical complexity.\r\n     * @member ContentAssessmentResult.prototype.vocabularyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Vocabulary score.\r\n     */\r\n    public get vocabularyScore(): number {\r\n        return this.privPronJson.ContentAssessment.VocabularyScore;\r\n    }\r\n\r\n    /**\r\n     * Level of understanding and engagement with the topic, which provides\r\n     * insights into the speaker’s ability to express their thoughts and ideas\r\n     * effectively and the ability to engage with the topic.\r\n     * @member ContentAssessmentResult.prototype.topicScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Topic score.\r\n     */\r\n    public get topicScore(): number {\r\n        return this.privPronJson.ContentAssessment.TopicScore;\r\n    }\r\n}\r\n\r\n/**\r\n * Pronunciation assessment results.\r\n * @class PronunciationAssessmentResult\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    private constructor(jsonString: string) {\r\n        const j = JSON.parse(jsonString) as AssessmentResult;\r\n        Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\r\n        this.privPronJson = j.NBest[0];\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result The recognition result.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\r\n     */\r\n    public static fromResult(result: RecognitionResult): PronunciationAssessmentResult {\r\n        Contracts.throwIfNullOrUndefined(result, \"result\");\r\n        const json: string = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        return new PronunciationAssessmentResult(json);\r\n    }\r\n\r\n    /**\r\n     * Gets the detail result of pronunciation assessment.\r\n     * @member PronunciationAssessmentConfig.prototype.detailResult\r\n     * @function\r\n     * @public\r\n     * @returns {DetailResult} detail result.\r\n     */\r\n    public get detailResult(): DetailResult {\r\n        return this.privPronJson;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the pronunciation accuracy of the given speech, which indicates\r\n     * how closely the phonemes match a native speaker's pronunciation.\r\n     * @member PronunciationAssessmentResult.prototype.accuracyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Accuracy score.\r\n     */\r\n    public get accuracyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.AccuracyScore;\r\n    }\r\n\r\n    /**\r\n     * The overall score indicating the pronunciation quality of the given speech.\r\n     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\r\n     * @member PronunciationAssessmentResult.prototype.pronunciationScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Pronunciation score.\r\n     */\r\n    public get pronunciationScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.PronScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\r\n     * @member PronunciationAssessmentResult.prototype.completenessScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Completeness score.\r\n     */\r\n    public get completenessScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.CompletenessScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the fluency of the given speech.\r\n     * @member PronunciationAssessmentResult.prototype.fluencyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Fluency score.\r\n     */\r\n    public get fluencyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.FluencyScore;\r\n    }\r\n\r\n    /**\r\n     * The prosody score, which indicates how nature of the given speech, including stress, intonation, speaking speed and rhythm.\r\n     * @member PronunciationAssessmentResult.prototype.prosodyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Prosody score.\r\n     */\r\n    public get prosodyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.ProsodyScore;\r\n    }\r\n\r\n    /**\r\n     * The concent assessment result.\r\n     * Only available when content assessment is enabled.\r\n     * @member PronunciationAssessmentResult.prototype.contentAssessmentResult\r\n     * @function\r\n     * @public\r\n     * @returns {ContentAssessmentResult} Content assessment result.\r\n     */\r\n    public get contentAssessmentResult(): ContentAssessmentResult {\r\n        if (this.detailResult.ContentAssessment === undefined) {\r\n            return undefined;\r\n        }\r\n        return new ContentAssessmentResult(this.detailResult);\r\n    }\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    RestConfigBase\r\n} from \"../../common.browser/RestConfigBase.js\";\r\n\r\nexport class ConversationConnectionConfig extends RestConfigBase {\r\n\r\n    private static readonly privHost: string = \"dev.microsofttranslator.com\";\r\n    private static readonly privRestPath: string = \"/capito/room\";\r\n    private static readonly privApiVersion: string = \"2.0\";\r\n    private static readonly privDefaultLanguageCode: string = \"en-US\";\r\n    private static readonly privClientAppId: string = \"FC539C22-1767-4F1F-84BC-B4D811114F15\";\r\n    private static readonly privWebSocketPath: string = \"/capito/translate\";\r\n    private static readonly privTranscriptionEventKeys: string[] = [\"iCalUid\", \"callId\", \"organizer\", \"FLAC\", \"MTUri\", \"DifferentiateGuestSpeakers\", \"audiorecording\", \"Threadid\", \"OrganizerMri\", \"OrganizerTenantId\", \"UserToken\"];\r\n\r\n    public static get host(): string {\r\n        return ConversationConnectionConfig.privHost;\r\n    }\r\n\r\n    public static get apiVersion(): string {\r\n        return ConversationConnectionConfig.privApiVersion;\r\n    }\r\n\r\n    public static get clientAppId(): string {\r\n        return ConversationConnectionConfig.privClientAppId;\r\n    }\r\n\r\n    public static get defaultLanguageCode(): string {\r\n        return ConversationConnectionConfig.privDefaultLanguageCode;\r\n    }\r\n\r\n    public static get restPath(): string {\r\n        return ConversationConnectionConfig.privRestPath;\r\n    }\r\n\r\n    public static get webSocketPath(): string {\r\n        return ConversationConnectionConfig.privWebSocketPath;\r\n    }\r\n\r\n    public static get transcriptionEventKeys(): string[] {\r\n        return ConversationConnectionConfig.privTranscriptionEventKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IVoiceJson,\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult,\r\n    VoiceInfo,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SynthesisVoicesResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisVoicesResult extends SynthesisResult {\r\n    private privVoices: VoiceInfo[];\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param requestId - result id for request.\r\n     * @param json - json payload from endpoint.\r\n     */\r\n    public constructor(requestId: string, json: any, errorDetails: string ) {\r\n        if (Array.isArray(json)) {\r\n            super(requestId, ResultReason.VoicesListRetrieved, undefined, new PropertyCollection());\r\n            this.privVoices = [];\r\n            for (const item of json) {\r\n                this.privVoices.push(new VoiceInfo(item as IVoiceJson));\r\n            }\r\n        } else {\r\n            super(requestId, ResultReason.Canceled, errorDetails ? errorDetails : \"Error information unavailable\", new PropertyCollection());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The list of voices\r\n     * @member SynthesisVoicesResult.prototype.voices\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceInfo[]} List of synthesized voices.\r\n     */\r\n    public get voices(): VoiceInfo[] {\r\n        return this.privVoices;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports.js\";\r\nimport { StringUtils } from \"../common/StringUtils.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\nimport { RecognitionMode } from \"./ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly universalUri: string = \"/stt/speech/universal/v2\";\r\n    private readonly translationV1Uri: string = \"/speech/translation/cognitiveservices/v1\";\r\n\r\n    public async create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): Promise<IConnection> {\r\n\r\n        let endpoint: string = this.getEndpointUrl(config);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        // Determine if we're using V1 or V2 endpoint\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        if (!!endpoint) {\r\n            const endpointUrl = new URL(endpoint);\r\n            const pathName = endpointUrl.pathname;\r\n\r\n            if (pathName === \"\" || pathName === \"/\") {\r\n                // We need to generate the path, and we need to check for a redirect.\r\n                endpointUrl.pathname = this.universalUri;\r\n\r\n                endpoint = await ConnectionFactoryBase.getRedirectUrlFromEndpoint(endpointUrl.toString());\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        return webSocketConnection;\r\n    }\r\n\r\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n\r\n        // First check for an explicitly specified endpoint\r\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n\r\n        // If an explicit endpoint is provided, use it\r\n        if (endpointUrl) {\r\n            if (returnRegionPlaceholder === true) {\r\n                return endpointUrl;\r\n            }\r\n            return StringUtils.formatString(endpointUrl, { region });\r\n        }\r\n\r\n        // Check if V1 endpoint is explicitly requested\r\n        const forceV1Endpoint: boolean = config.parameters.getProperty(\"SPEECH-ForceV1Endpoint\", \"false\") === \"true\";\r\n\r\n        if (forceV1Endpoint) {\r\n            // Use V1 endpoint with s2s.speech host\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\r\n            endpointUrl = host + this.translationV1Uri;\r\n        } else {\r\n            // Default to V2 endpoint with stt.speech host\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.stt.speech\" + hostSuffix);\r\n            endpointUrl = host + this.universalUri;\r\n        }\r\n\r\n        if (returnRegionPlaceholder === true) {\r\n            return endpointUrl;\r\n        }\r\n\r\n        return StringUtils.formatString(endpointUrl, { region });\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n        // Common parameters for both V1 and V2 endpoints\r\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\r\n        queryParams.scenario = config.recognitionMode === RecognitionMode.Interactive ? \"interactive\" :\r\n            config.recognitionMode === RecognitionMode.Conversation ? \"conversation\" : \"\";\r\n\r\n        // Set common parameters\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpointUrl\r\n        );\r\n\r\n        // Handle translation voice if specified\r\n        const translationVoice: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n        if (translationVoice !== undefined) {\r\n            queryParams.voice = translationVoice;\r\n            // Updated to match C++ implementation\r\n            queryParams.features = \"requireVoice\";\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    IAuthentication,\r\n    ServicePropertiesPropertyName,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { ConversationTranslatorConnectionFactory } from \"../../common.speech/Transcription/ConversationTranslatorConnectionFactory.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports.js\";\r\nimport { ConversationImpl } from \"./Conversation.js\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports.js\";\r\nimport { Callback, IConversation } from \"./IConversation.js\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig: AudioConfig, translator: ConversationTranslator, convGetter: () => ConversationImpl) {\r\n\r\n        super(speechConfig, audioConfig, new ConversationTranslatorConnectionFactory(convGetter));\r\n\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            this.recognizing = (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): void => {\r\n                if (!!this.privTranslator.recognizing) {\r\n                    this.privTranslator.recognizing(this.privTranslator, e);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                } else {\r\n                    if (!!this.privTranslator.recognized) {\r\n                        this.privTranslator.recognized(this.privTranslator, e);\r\n                    }\r\n                }\r\n                return;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public set authentication(token: IAuthentication) {\r\n        this.privReco.authentication = token;\r\n    }\r\n\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onCancelSpeech(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for whole conversation results\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for detecting speech/translation results from self\r\n    public recognized: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n    public recognizing: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privCTRecognizer.authentication = token;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | IConversation, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const propertyIdsToCopy: (string | PropertyId)[] = [\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    PropertyId.ConversationTranslator_Host,\r\n                    PropertyId.SpeechServiceConnection_Endpoint,\r\n                    PropertyId.SpeechServiceConnection_ProxyHostName,\r\n                    PropertyId.SpeechServiceConnection_ProxyPassword,\r\n                    PropertyId.SpeechServiceConnection_ProxyPort,\r\n                    PropertyId.SpeechServiceConnection_ProxyUserName,\r\n                    \"ConversationTranslator_MultiChannelAudio\",\r\n                    \"ConversationTranslator_Region\"\r\n                ];\r\n\r\n                for (const prop of propertyIdsToCopy) {\r\n                    const value = this.privProperties.getProperty(prop);\r\n                    if (value) {\r\n                        const key = typeof prop === \"string\" ? prop : PropertyId[prop];\r\n                        this.privSpeechTranslationConfig.setProperty(key, value);\r\n                    }\r\n                }\r\n\r\n                const currentProperties  = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n                for (const prop of Object.keys(currentProperties)) {\r\n                    this.privSpeechTranslationConfig.setServiceProperty(prop, currentProperties[prop], ServicePropertyChannel.UriQueryParameter);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n                        this.privConversation.room.isHost = false;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n                this.privConversation.room.isHost = true;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise<void>((resolve: (value: void) => void, reject: (reason?: any) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onCancelSpeech();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            const convGetter = (): ConversationImpl => this.privConversation;\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this, convGetter);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ResultReason } from \"./ResultReason.js\";\r\n\r\n/**\r\n * Defines translation synthesis result, i.e. the voice output of the translated\r\n * text in the target language.\r\n * @class TranslationSynthesisResult\r\n */\r\nexport class TranslationSynthesisResult {\r\n    private privReason: ResultReason;\r\n    private privAudio: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ResultReason} reason - The synthesis reason.\r\n     * @param {ArrayBuffer} audio - The audio data.\r\n     */\r\n    public constructor(reason: ResultReason, audio: ArrayBuffer) {\r\n        this.privReason = reason;\r\n        this.privAudio = audio;\r\n    }\r\n\r\n    /**\r\n     * Translated text in the target language.\r\n     * @member TranslationSynthesisResult.prototype.audio\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} Translated audio in the target language.\r\n     */\r\n    public get audio(): ArrayBuffer {\r\n        return this.privAudio;\r\n    }\r\n\r\n    /**\r\n     * The synthesis status.\r\n     * @member TranslationSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} The synthesis status.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, IAuthentication, SynthesizerConfig } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privAuthentication: IAuthentication;\r\n\r\n    public constructor(config: SynthesizerConfig, authentication: IAuthentication) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n        this.privAuthentication = authentication;\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privAuthentication.fetch(connectionId).then((authInfo: AuthInfo): Promise<IRestResponse> => {\r\n            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\r\n            return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/tts/cognitiveservices/websocket/v1\";\r\n\r\n    public async create(\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): Promise<IConnection> {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined && endpointId !== \"\") {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomVoiceDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n            }\r\n        }\r\n\r\n        if (config.avatarEnabled) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.EnableAvatar) === -1) {\r\n                queryParams[QueryParameterNames.EnableAvatar] = \"true\";\r\n            }\r\n        }\r\n\r\n        if (!!endpoint) {\r\n            const endpointUrl = new URL(endpoint);\r\n            const pathName = endpointUrl.pathname;\r\n\r\n            if (pathName === \"\" || pathName === \"/\") {\r\n                // We need to generate the path, and we need to check for a redirect.\r\n                endpointUrl.pathname = this.synthesisUri;\r\n\r\n                endpoint = await ConnectionFactoryBase.getRedirectUrlFromEndpoint(endpointUrl.toString());\r\n            }\r\n        }\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { TokenCredential } from \"@azure/core-auth\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport { IStringDictionary } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     * will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     * set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     * \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     * setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech translation config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechTranslationConfig;\r\n\r\n    /**\r\n     * Creates a speech configuration instance using a specified endpoint and Azure Active Directory (AAD) token credential.\r\n     * This API is available for **TranslationRecognizer**.\r\n     * Intended for use with **non-standard resource paths** or **custom parameter overrides**.\r\n     * Query parameters specified in the endpoint URL **are not overridden** by other APIs.\r\n     * For example, if the URL includes \"language=de-DE\" but \"speechRecognitionLanguage\" is set to \"en-US\",\r\n     * the value from the URL \"de-DE\" takes precedence — if the parameter is supported by the scenario.\r\n     * Parameters **not present in the URL** can still be updated via other APIs.\r\n     * To authenticate with a **subscription key**, use SpeechTranslationConfig.fromEndpoint with a key argument.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The full service endpoint URL (e.g., for custom domains or private links).\r\n     * See: https://learn.microsoft.com/azure/ai-services/speech-service/speech-services-private-link?tabs=portal#create-a-custom-domain-name.\r\n     * @param {TokenCredential} tokenCredential - The AAD token credential used for authentication and token requests.\r\n     * @returns {SpeechTranslationConfig} A speech translation config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, tokenCredential: TokenCredential): SpeechTranslationConfig;\r\n\r\n    /**\r\n     * Internal implementation of fromEndpoint() overloads. Accepts either a subscription key or a TokenCredential.\r\n     * @private\r\n     */\r\n    public static fromEndpoint(endpoint: URL, auth: string | TokenCredential): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        const isValidString = typeof auth === \"string\" && auth.trim().length > 0;\r\n        const isTokenCredential = typeof auth === \"object\" && auth !== null && typeof auth.getToken === \"function\";\r\n        if (auth !== undefined && !isValidString && !isTokenCredential) {\r\n            throw new Error(\"Invalid 'auth' parameter: must be a non-empty key string or a valid TokenCredential object.\");\r\n        }\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = typeof auth === \"object\"\r\n            ? new SpeechTranslationConfigImpl(auth)\r\n            : new SpeechTranslationConfigImpl();\r\n\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (typeof auth === \"string\" && auth.trim().length > 0) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, auth);\r\n        }\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n    private readonly privTokenCredential?: TokenCredential;\r\n\r\n    public constructor(tokenCredential?: TokenCredential) {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n        this.privTokenCredential = tokenCredential;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        // eslint-disable-next-line\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        if (!languages.includes(value)) {\r\n            languages.push(value);\r\n            this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get tokenCredential(): TokenCredential | undefined {\r\n        return this.privTokenCredential;\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        // eslint-disable-next-line\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n/**\r\n * The action to take on success\r\n */\r\nexport enum NextAction {\r\n    None = \"None\",\r\n    Synthesize = \"Synthesize\"\r\n}\r\n\r\n/**\r\n * The on success configuration\r\n */\r\nexport interface OnSuccess {\r\n    /**\r\n     * The action to take on success\r\n     */\r\n    action?: NextAction;\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming list of participants\r\n */\r\nexport interface IParticipantsListPayloadResponse {\r\n    roomid: string;\r\n    id: string;\r\n    command: string;\r\n    participants: IParticipantPayloadResponse[];\r\n    token: string;\r\n    translateTo: string[];\r\n    profanityFilter: string;\r\n    roomProfanityFilter: string;\r\n    roomLocked: boolean;\r\n    muteAll: boolean;\r\n    type: string;\r\n}\r\n\r\n/**\r\n * Defines the payload for incoming participant\r\n */\r\nexport interface IParticipantPayloadResponse {\r\n    nickname: string;\r\n    locale: string;\r\n    usetts: boolean;\r\n    ismuted: boolean;\r\n    ishost: boolean;\r\n    participantId: string;\r\n    avatar?: string;\r\n}\r\n\r\nconst parseListResponse = (json: string): IParticipantsListPayloadResponse => JSON.parse(json) as IParticipantsListPayloadResponse;\r\nconst parseParticipantResponse = (json: string): IParticipantPayloadResponse => JSON.parse(json) as IParticipantPayloadResponse;\r\n\r\nexport class ParticipantsListPayloadResponse implements IParticipantsListPayloadResponse {\r\n    private privParticipantsPayloadResponse: IParticipantsListPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantsPayloadResponse = parseListResponse(json);\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privParticipantsPayloadResponse.roomid;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privParticipantsPayloadResponse.id;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privParticipantsPayloadResponse.command;\r\n    }\r\n\r\n    public get participants(): IParticipantPayloadResponse[] {\r\n        return this.privParticipantsPayloadResponse.participants;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privParticipantsPayloadResponse.token;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privParticipantsPayloadResponse.translateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.profanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.roomProfanityFilter;\r\n    }\r\n\r\n    public get roomLocked(): boolean {\r\n        return this.privParticipantsPayloadResponse.roomLocked;\r\n    }\r\n\r\n    public get muteAll(): boolean {\r\n        return this.privParticipantsPayloadResponse.muteAll;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privParticipantsPayloadResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantsListPayloadResponse {\r\n        return new ParticipantsListPayloadResponse(json);\r\n    }\r\n\r\n}\r\n\r\nexport class ParticipantPayloadResponse implements IParticipantPayloadResponse {\r\n\r\n    private privParticipantPayloadResponse: IParticipantPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantPayloadResponse = parseParticipantResponse(json);\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privParticipantPayloadResponse.nickname;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privParticipantPayloadResponse.locale;\r\n    }\r\n\r\n    public get usetts(): boolean {\r\n        return this.privParticipantPayloadResponse.usetts;\r\n    }\r\n\r\n    public get ismuted(): boolean {\r\n        return this.privParticipantPayloadResponse.ismuted;\r\n    }\r\n\r\n    public get ishost(): boolean {\r\n        return this.privParticipantPayloadResponse.ishost;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privParticipantPayloadResponse.participantId;\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privParticipantPayloadResponse.avatar;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantPayloadResponse {\r\n        return new ParticipantPayloadResponse(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation Synthesis event arguments\r\n * @class TranslationSynthesisEventArgs\r\n */\r\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\r\n    private privResult: TranslationSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the translation synthesis result.\r\n     * @member TranslationSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\r\n     */\r\n    public get result(): TranslationSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    public constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize(): string {\r\n        return JSON.stringify(this, (key: any, value: { [k: string]: any }): any => {\r\n            if (value && typeof value === \"object\" && !Array.isArray(value)) {\r\n                const replacement: { [k: string ]: any } = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n    public synthesis: {\r\n        video: ISynthesisSectionVideo;\r\n    };\r\n\r\n    public constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    public constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.44.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    public constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    public constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n\r\nexport interface ICoordinate {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n// For avatar synthesis\r\nexport interface ISynthesisSectionVideo {\r\n    protocol: {\r\n        name: string;\r\n        webrtcConfig: {\r\n            clientDescription: string;\r\n            iceServers: {\r\n                urls: string[];\r\n                username: string;\r\n                credential: string;\r\n            }[];\r\n        };\r\n    };\r\n    format: {\r\n        bitrate: number;\r\n        codec: string;\r\n        crop: {\r\n            topLeft: ICoordinate;\r\n            bottomRight: ICoordinate;\r\n        };\r\n        resolution: {\r\n            width: number;\r\n            height: number;\r\n        };\r\n    };\r\n    talkingAvatar: {\r\n        character: string;\r\n        customized: boolean;\r\n        useBuiltInVoice: boolean;\r\n        style: string;\r\n        background: {\r\n            color: string;\r\n        };\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class ConnectionOpenResponse {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(statusCode: number, reason: string) {\r\n        this.privStatusCode = statusCode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, MeetingInfo, MeetingProperties, IMeeting } from \"./IMeeting.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Meeting implements IMeeting {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get meetingId(): string;\r\n    public abstract get meetingInfo(): MeetingInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a meeting\r\n     * @param speechConfig\r\n     * @param meetingId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createMeetingAsync(speechConfig: SpeechTranslationConfig, meetingId: string, arg3?: Callback, arg4?: Callback): Meeting {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        Contracts.throwIfNull(meetingId, \"meetingId\");\r\n        if (meetingId.length === 0) {\r\n            throw new Error(\"meetingId cannot be empty\");\r\n        }\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        const meetingImpl = new MeetingImpl(speechConfig, meetingId);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        return meetingImpl;\r\n    }\r\n\r\n    /** Start a meeting. */\r\n    public abstract startMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a meeting. After this no one will be able to join the meeting. */\r\n    public abstract deleteMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a meeting. */\r\n    public abstract endMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a meeting. This will prevent new participants from joining. */\r\n    public abstract lockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Meeting. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the Meeting. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a meeting using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a meeting. */\r\n    public abstract unlockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the meeting. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class MeetingImpl extends Meeting implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a Meeting impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        this.privConversationId = id;\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the meeting Id\r\n    public get meetingId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get meetingInfo(): MeetingInfo {\r\n        const convId: string = this.meetingId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: MeetingProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: MeetingInfo = { id: convId, participants: p, meetingProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    /**\r\n     * Create a new meeting as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new meeting as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param meeting\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinMeetingAsync(meetingId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(meetingId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, meetingId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteMeetingImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public endMeetingImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.meeting = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const meetingInfo = this.meetingInfo;\r\n                meetingInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const meetingInfo = this.meetingInfo;\r\n        meetingInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingd\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports.js\";\r\nimport { RecognitionMode } from \"../common.speech/ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory(), speechConfig.tokenCredential);\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition\r\n     * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     * specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","'use strict'\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for connection events like Connected/Disconnected.\r\n * Added in version 1.2.0\r\n */\r\nexport class ConnectionEventArgs extends SessionEventArgs {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisConnectionFactory } from \"../common.speech/SpeechSynthesisConnectionFactory.js\";\r\nimport { SynthesisRestAdapter } from \"../common.speech/SynthesisRestAdapter.js\";\r\nimport { SynthesizerConfig } from \"../common.speech/SynthesizerConfig.js\";\r\nimport {\r\n    AvatarSynthesisAdapter,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase\r\n} from \"../common.speech/Exports.js\";\r\nimport { createNoDashGuid, Deferred, Events, EventType, PlatformEvent } from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SynthesisResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the avatar synthesizer.\r\n * @class AvatarSynthesizer\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarSynthesizer extends Synthesizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAvatarConfig: AvatarConfig;\r\n    private privIceServers: RTCIceServer[];\r\n    /**\r\n     * Defines event handler for avatar events.\r\n     * @member AvatarSynthesizer.prototype.avatarEventReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public avatarEventReceived: (sender: AvatarSynthesizer, event: AvatarEventArgs) => void;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config.\r\n     * @param {AvatarConfig} avatarConfig - The talking avatar config.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, avatarConfig: AvatarConfig) {\r\n        super(speechConfig);\r\n\r\n        Contracts.throwIfNullOrUndefined(avatarConfig, \"avatarConfig\");\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.privAvatarConfig = avatarConfig;\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        // The service checks the audio format setting while it ignores it in avatar synthesis.\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Starts the talking avatar session and establishes the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.startAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @param {AvatarWebRTCConnectionInfo} peerConnection - The peer connection.\r\n     * @returns {Promise<SynthesisResult>} The promise of the connection result.\r\n     */\r\n    public async startAvatarAsync(peerConnection: RTCPeerConnection): Promise<SynthesisResult> {\r\n        Contracts.throwIfNullOrUndefined(peerConnection, \"peerConnection\");\r\n        this.privIceServers = peerConnection.getConfiguration().iceServers;\r\n        Contracts.throwIfNullOrUndefined(this.privIceServers, \"Ice servers must be set.\");\r\n        const iceGatheringDone = new Deferred<void>();\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\r\n        peerConnection.onicegatheringstatechange = (): void => {\r\n            Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering state: \" + peerConnection.iceGatheringState, EventType.Debug));\r\n            if (peerConnection.iceGatheringState === \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering complete.\", EventType.Info));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        peerConnection.onicecandidate = (event: RTCPeerConnectionIceEvent): void => {\r\n            if (event.candidate) {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: \" + event.candidate.candidate, EventType.Debug));\r\n            } else {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: complete\", EventType.Debug));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        // Set a timeout for ice gathering, currently 2 seconds.\r\n        setTimeout((): void => {\r\n            if (peerConnection.iceGatheringState !== \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering timeout.\", EventType.Warning));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        }, 2000);\r\n        const sdp: RTCSessionDescriptionInit = await peerConnection.createOffer();\r\n        await peerConnection.setLocalDescription(sdp);\r\n        await iceGatheringDone.promise;\r\n        Events.instance.onEvent(new PlatformEvent(\"peer connection: got local SDP.\", EventType.Info));\r\n        this.privProperties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, JSON.stringify(peerConnection.localDescription));\r\n\r\n        const result: SpeechSynthesisResult = await this.speak(\"\", false);\r\n        if (result.reason !== ResultReason.SynthesizingAudioCompleted) {\r\n            return new SynthesisResult(\r\n                result.resultId,\r\n                result.reason,\r\n                result.errorDetails,\r\n                result.properties,\r\n            );\r\n        }\r\n        const sdpAnswerString: string = atob(result.properties.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP));\r\n        const sdpAnswer: RTCSessionDescription = new RTCSessionDescription(\r\n            JSON.parse(sdpAnswerString) as RTCSessionDescriptionInit,\r\n        );\r\n        await peerConnection.setRemoteDescription(sdpAnswer);\r\n        return new SynthesisResult(\r\n            result.resultId,\r\n            result.reason,\r\n            undefined,\r\n            result.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks plain text asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} text - The plain text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakTextAsync(text: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(text, false);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks SSML asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} ssml - The SSML text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakSsmlAsync(ssml: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(ssml, true);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks text asynchronously. The avatar will switch to idle state.\r\n     * @member AvatarSynthesizer.prototype.stopSpeakingAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopSpeakingAsync(): Promise<void> {\r\n        while (this.synthesisRequestQueue.length() > 0) {\r\n            const request = await this.synthesisRequestQueue.dequeue();\r\n            request.err(\"Synthesis is canceled by user.\");\r\n        }\r\n        return this.privAdapter.stopSpeaking();\r\n    }\r\n\r\n    /**\r\n     * Stops the talking avatar session and closes the WebRTC connection.\r\n     * For now, this is the same as close().\r\n     * You need to create a new AvatarSynthesizer instance to start a new session.\r\n     * @member AvatarSynthesizer.prototype.stopAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopAvatarAsync(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member AvatarSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the ICE servers. Internal use only.\r\n     */\r\n    public get iceServers(): RTCIceServer[] {\r\n        return this.privIceServers;\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new AvatarSynthesisAdapter(\r\n            authentication,\r\n            connectionFactory,\r\n            synthesizerConfig,\r\n            this,\r\n            this.privAvatarConfig);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        _authentication: IAuthentication,\r\n        _synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return undefined;\r\n    }\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        const config = super.createSynthesizerConfig(speechConfig);\r\n        config.avatarEnabled = true;\r\n        return config;\r\n    }\r\n\r\n    protected async speak(text: string, isSSML: boolean): Promise<SpeechSynthesisResult> {\r\n        const requestId = createNoDashGuid();\r\n        const deferredResult = new Deferred<SpeechSynthesisResult>();\r\n        this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, isSSML,\r\n            (e: SpeechSynthesisResult): void => {\r\n                deferredResult.resolve(e);\r\n                this.privSynthesizing = false;\r\n                void this.adapterSpeak();\r\n            },\r\n            (e: string): void => {\r\n                deferredResult.reject(e);\r\n                this.privSynthesizing = false;\r\n            }));\r\n        void this.adapterSpeak();\r\n        return deferredResult.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage } from \"./SimpleSpeechPhrase.js\";\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n    [key: string]: any;\r\n}\r\n\r\nexport class SpeechHypothesis implements ISpeechHypothesis {\r\n    private privSpeechHypothesis: ISpeechHypothesis;\r\n\r\n    private constructor(json: string, baseOffset: number) {\r\n        this.privSpeechHypothesis = JSON.parse(json) as ISpeechHypothesis;\r\n        this.updateOffset(baseOffset);\r\n    }\r\n\r\n    public static fromJSON(json: string, baseOffset: number): SpeechHypothesis {\r\n        return new SpeechHypothesis(json, baseOffset);\r\n    }\r\n\r\n    private updateOffset(baseOffset: number): void {\r\n        this.privSpeechHypothesis.Offset += baseOffset;\r\n    }\r\n\r\n    public asJson(): string {\r\n        return JSON.stringify(this.privSpeechHypothesis);\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechHypothesis.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechHypothesis.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechHypothesis.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSpeechHypothesis.SpeakerId;\r\n    }\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for\r\n  * custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\r\n     * to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { AudioStreamFormatImpl } from \"../../sdk/Audio/AudioStreamFormat.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Conversation,\r\n    ConversationInfo,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechTranslationConfig,\r\n    SpeechTranslationConfigImpl,\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranscriberConnectionFactory,\r\n    TranscriptionServiceRecognizer,\r\n} from \"../Exports.js\";\r\nimport { RecognitionMode } from \"../ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\n\r\nexport class TranscriberRecognizer extends Recognizer {\r\n\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    private privDisposedRecognizer: boolean;\r\n    private privConversation: Conversation;\r\n    private privMeeting: Meeting;\r\n    private isMeetingRecognizer: boolean;\r\n\r\n    /**\r\n     * TranscriberRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig: AudioConfig) {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\r\n\r\n        const audioConfigImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(audioConfigImpl, \"audioConfigImpl\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechTranslationConfigImpl.speechRecognitionLanguage,\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n        this.isMeetingRecognizer = false;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    public set conversation(c: Conversation) {\r\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\r\n        this.isMeetingRecognizer = false;\r\n        this.privConversation = c;\r\n    }\r\n\r\n    public getConversationInfo(): ConversationInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\r\n        return this.privConversation.conversationInfo;\r\n    }\r\n\r\n    public set meeting(m: Meeting) {\r\n        Contracts.throwIfNullOrUndefined(m, \"Meeting\");\r\n        this.isMeetingRecognizer = true;\r\n        this.privMeeting = m;\r\n    }\r\n\r\n    public getMeetingInfo(): MeetingInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privMeeting, \"Meeting\");\r\n        return this.privMeeting.meetingInfo;\r\n    }\r\n\r\n    public IsMeetingRecognizer(): boolean {\r\n        return this.isMeetingRecognizer;\r\n    }\r\n\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        if (!this.privDisposedRecognizer) {\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    // Push async join/leave conversation message via serviceRecognizer\r\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendSpeechEventAsync(conversationInfo, command);\r\n    }\r\n\r\n    // Push async join/leave meeting message via serviceRecognizer\r\n    public async pushMeetingEvent(meetingInfo: MeetingInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendMeetingSpeechEventAsync(meetingInfo, command);\r\n    }\r\n\r\n    public async enforceAudioGating(): Promise<void> {\r\n        const audioConfigImpl = this.audioConfig as AudioConfigImpl;\r\n        const format: AudioStreamFormatImpl = await audioConfigImpl.format;\r\n        const channels = format.channels;\r\n        if (channels === 1) {\r\n            if (this.properties.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() !== \"true\") {\r\n                throw new Error(\"Single channel audio configuration for MeetingTranscriber is currently under private preview, please contact diarizationrequest@microsoft.com for more details\");\r\n            }\r\n        } else if (channels !== 8) {\r\n            throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);\r\n        }\r\n        return;\r\n    }\r\n\r\n    public connectMeetingCallbacks(transcriber: MeetingTranscriber): void {\r\n        this.isMeetingRecognizer = true;\r\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.canceled) {\r\n                transcriber.canceled(transcriber, e);\r\n            }\r\n        };\r\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribing) {\r\n                transcriber.transcribing(transcriber, e);\r\n            }\r\n        };\r\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribed) {\r\n                transcriber.transcribed(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStarted) {\r\n                transcriber.sessionStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStopped) {\r\n                transcriber.sessionStopped(transcriber, e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public disconnectCallbacks(): void {\r\n        this.canceled = undefined;\r\n        this.recognizing = undefined;\r\n        this.recognized = undefined;\r\n        this.sessionStarted = undefined;\r\n        this.sessionStopped = undefined;\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Deferred } from \"./Promise.js\";\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class DefferalMap\r\n */\r\n\r\nexport class DeferralMap {\r\n    private privMap: { [id: string]: Deferred<any> } = {};\r\n\r\n    public add<T>(id: string, deferral: Deferred<T>): void {\r\n        this.privMap[id] = deferral;\r\n    }\r\n\r\n    public getId(id: string): Deferred<any> {\r\n        return this.privMap[id];\r\n    }\r\n\r\n    public complete<T>(id: string, result: T): void {\r\n        try {\r\n            this.privMap[id].resolve(result);\r\n        } catch (error) {\r\n            this.privMap[id].reject(error as string);\r\n        } finally {\r\n            this.privMap[id] = undefined;\r\n         }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ISpeechConfigAudioDevice,\r\n    SpeakerResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeakerServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerRecognizer: SpeakerRecognizer;\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privResultDeferral: Deferred<SpeakerRecognitionResult>;\r\n    private privSpeakerModel: SpeakerRecognitionModel;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: SpeakerRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerRecognizer = recognizer;\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.recognizeSpeaker = (model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> => this.recognizeSpeakerOnce(model);\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speaker.response\":\r\n                const response: SpeakerResponse = JSON.parse(connectionMessage.textBody) as SpeakerResponse;\r\n                let result: SpeakerRecognitionResult;\r\n                if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.Canceled,\r\n                        CancellationErrorCode.ServiceError,\r\n                        response.status.reason\r\n                        );\r\n                } else {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.RecognizedSpeaker,\r\n                        );\r\n                }\r\n                if (!!this.privResultDeferral) {\r\n                    this.privResultDeferral.resolve(result);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privResultDeferral) {\r\n            const result: SpeakerRecognitionResult = new SpeakerRecognitionResult(\r\n                {\r\n                    scenario: this.privSpeakerModel.scenario,\r\n                    status: { statusCode: error, reason: error }\r\n                },\r\n                ResultReason.Canceled,\r\n                errorCode,\r\n                error\r\n                );\r\n            try {\r\n                this.privResultDeferral.resolve(result);\r\n            } catch (error) {\r\n                this.privResultDeferral.reject(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async recognizeSpeakerOnce(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        this.privSpeakerModel = model;\r\n        this.voiceProfileType = model.scenario;\r\n        if (!this.privResultDeferral) {\r\n            this.privResultDeferral = new Deferred<SpeakerRecognitionResult>();\r\n        }\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(this.extractSpeakerContext(model));\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return this.privResultDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(context: SpeakerContext): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await this.sendSpeakerRecognition(connection, context);\r\n        // await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private async sendSpeakerRecognition(connection: IConnection, context: SpeakerContext): Promise<void> {\r\n        const speakerContextJson = JSON.stringify(context);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            speakerContextJson));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Connection,\r\n    MeetingTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs\r\n} from \"../Exports.js\";\r\nimport {\r\n    MeetingHandler,\r\n    MeetingImpl,\r\n    MeetingTranscriptionHandler\r\n} from \"./Exports.js\";\r\nimport { Callback, IMeeting } from \"./IMeeting.js\";\r\n\r\nexport class MeetingTranscriber implements MeetingTranscriptionHandler {\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during the meeting.\r\n     * @member MeetingTranscriber.prototype.MeetingCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingCanceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member MeetingTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognized signals that a final meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member MeetingTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member MeetingTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting started events.\r\n     * @member MeetingTranscriber.prototype.MeetingStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting stopped events.\r\n     * @member MeetingTranscriber.prototype.MeetingStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public meetingStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * MeetingTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member MeetingTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this MeetingTranscriber.\r\n     * @member MeetingTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this MeetingTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privRecognizer.internalData;\r\n    }\r\n\r\n    /**\r\n     * @Deprecated\r\n     * @Obsolete\r\n     * Please use the Connection.fromRecognizer pattern to obtain a connection object\r\n     */\r\n    public get connection(): Connection {\r\n        return Connection.fromRecognizer(this.privRecognizer);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * @param {Meeting} meeting - meeting to be recognized\r\n     */\r\n    public joinMeetingAsync(meeting: IMeeting, cb?: Callback, err?: Callback): void {\r\n        /* eslint-disable no-console */\r\n        // console.log(\">> MeetingTranscriber::joinMeetingAsync\");\r\n        /* eslint-enable no-console */\r\n        const meetingImpl = meeting as MeetingImpl;\r\n        Contracts.throwIfNullOrUndefined(MeetingImpl, \"Meeting\");\r\n\r\n        // ref the meeting object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(meeting.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectMeetingCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(meetingImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current meeting. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        // eslint-disable-next-line\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member MeetingTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member MeetingTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n        if (!!this.privRecognizer) {\r\n            await this.privRecognizer.close();\r\n            this.privRecognizer = undefined;\r\n        }\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.keyword\r\nexport interface ISpeechKeyword {\r\n    Status: string;\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n    [key: string]: any;\r\n}\r\n\r\nexport class SpeechKeyword implements ISpeechKeyword {\r\n    private privSpeechKeyword: ISpeechKeyword;\r\n\r\n    private constructor(json: string, baseOffset: number) {\r\n        this.privSpeechKeyword = JSON.parse(json) as ISpeechKeyword;\r\n        this.privSpeechKeyword.Offset += baseOffset;\r\n    }\r\n\r\n    public static fromJSON(json: string, baseOffset: number): SpeechKeyword {\r\n        return new SpeechKeyword(json, baseOffset);\r\n    }\r\n\r\n    public get Status(): string {\r\n        return this.privSpeechKeyword.Status;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechKeyword.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechKeyword.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechKeyword.Duration;\r\n    }\r\n\r\n    public asJson(): string {\r\n        return JSON.stringify(this.privSpeechKeyword);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationResult,\r\n    ResultReason,\r\n    Translations\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    CognitiveTokenAuthentication,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase\r\n} from \"../Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\nimport { ConversationRequestSession } from \"./ConversationRequestSession.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalParticipant\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer.js\";\r\nimport {\r\n    CommandResponsePayload,\r\n    IParticipantPayloadResponse,\r\n    IParticipantsListPayloadResponse,\r\n    ITranslationResponsePayload,\r\n    ParticipantPayloadResponse,\r\n    ParticipantsListPayloadResponse,\r\n    SpeechResponsePayload,\r\n    TextResponsePayload\r\n} from \"./ServiceMessages/Exports.js\";\r\n\r\n/**\r\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\r\n */\r\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\r\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\r\n    private privConversationConnectionFactory: IConnectionFactory;\r\n    private privConversationAuthFetchEventId: string;\r\n    private privConversationAuthentication: IAuthentication;\r\n    private privConversationRequestSession: ConversationRequestSession;\r\n    private privConnectionConfigPromise: Promise<IConnection> = undefined;\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private privLastPartialUtteranceId: string;\r\n    private privConversationIsDisposed: boolean;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\r\n\r\n        this.privLastPartialUtteranceId = \"\";\r\n        this.privConversationServiceConnector = conversationServiceConnector;\r\n        this.privConversationAuthentication = authentication;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveConversationMessageOverride();\r\n        this.recognizeOverride = (): Promise<void> => this.noOp();\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.conversationConnectImpl(connection);\r\n        this.configConnectionOverride = (): Promise<IConnection> => this.configConnection();\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\r\n        this.privConversationConnectionFactory = connectionFactory;\r\n        this.privConversationIsDisposed = false;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return super.isDisposed() || this.privConversationIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privConversationIsDisposed = true;\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n        await super.dispose(reason);\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new ConversationConnectionMessage(\r\n            MessageType.Text,\r\n            message));\r\n    }\r\n\r\n    public async sendMessageAsync(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\r\n    }\r\n\r\n    protected privDisconnect(): Promise<void> {\r\n        if (this.terminateMessageLoop) {\r\n            return;\r\n        }\r\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\r\n            this.privConversationRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    protected async processTypeSpecificMessages(): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n            cancellationReason,\r\n            error,\r\n            errorCode,\r\n            undefined,\r\n            sessionId);\r\n\r\n        try {\r\n            if (!!this.privConversationServiceConnector.canceled) {\r\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\r\n            }\r\n        } catch {\r\n            // continue on error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Establishes a websocket connection to the end point.\r\n     */\r\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Process incoming websocket messages\r\n     */\r\n    private async receiveConversationMessageOverride(): Promise<void> {\r\n        if (this.isDisposed() || this.terminateMessageLoop) {\r\n            return Promise.resolve();\r\n        }\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\r\n            if (this.isDisposed() || this.terminateMessageLoop) {\r\n                // We're done.\r\n                communicationCustodian.resolve();\r\n                return Promise.resolve();\r\n            }\r\n\r\n            if (!message) {\r\n                return this.receiveConversationMessageOverride();\r\n            }\r\n\r\n            const sessionId: string = this.privConversationRequestSession.sessionId;\r\n            const conversationMessageType: string = message.conversationMessageType.toLowerCase();\r\n            let sendFinal: boolean = false;\r\n\r\n            try {\r\n                switch (conversationMessageType) {\r\n                    case \"info\":\r\n                    case \"participant_command\":\r\n                    case \"command\":\r\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\r\n                        switch (commandPayload.command.toLowerCase()) {\r\n\r\n                            /**\r\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\r\n                             * The consuming client must wait for this message to arrive\r\n                             * before starting to send their own data.\r\n                             */\r\n                            case \"participantlist\":\r\n\r\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse): IInternalParticipant => {\r\n                                    const participant: IInternalParticipant = {\r\n                                        avatar: p.avatar,\r\n                                        displayName: p.nickname,\r\n                                        id: p.participantId,\r\n                                        isHost: p.ishost,\r\n                                        isMuted: p.ismuted,\r\n                                        isUsingTts: p.usetts,\r\n                                        preferredLanguage: p.locale\r\n                                    };\r\n                                    return participant;\r\n                                });\r\n\r\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\r\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\r\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\r\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\r\n                                            participantsPayload.muteAll, participantsResult, sessionId));\r\n                                }\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\r\n                             * This is sent at the start of the Conversation\r\n                             */\r\n                            case \"settranslatetolanguages\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\r\n                             * If sent by the participant the setting will effect only their own profanity level.\r\n                             * If sent by the host, the setting will effect all participants including the host.\r\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\r\n                             */\r\n                            case \"setprofanityfiltering\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMute' is sent if the participant has been muted by the host.\r\n                             * Check the 'participantId' to determine if the current user has been muted.\r\n                             */\r\n                            case \"setmute\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setMute,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\r\n                             */\r\n                            case \"setmuteall\":\r\n\r\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\r\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\r\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\r\n                             */\r\n                            case \"roomexpirationwarning\":\r\n\r\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\r\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\r\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\r\n                             */\r\n                            case \"setusetts\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setUseTTS,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\r\n                             */\r\n                            case \"setlockstate\":\r\n\r\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\r\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\r\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'ChangeNickname' is received if a user changes their display name.\r\n                             * Any cached particpiants list should be updated to reflect the display name.\r\n                             */\r\n                            case \"changenickname\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.changeNickname,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'JoinSession' is sent when a user joins the Conversation.\r\n                             */\r\n                            case \"joinsession\":\r\n\r\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const joiningParticipant: IInternalParticipant = {\r\n                                    avatar: joinParticipantPayload.avatar,\r\n                                    displayName: joinParticipantPayload.nickname,\r\n                                    id: joinParticipantPayload.participantId,\r\n                                    isHost: joinParticipantPayload.ishost,\r\n                                    isMuted: joinParticipantPayload.ismuted,\r\n                                    isUsingTts: joinParticipantPayload.usetts,\r\n                                    preferredLanguage: joinParticipantPayload.locale,\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(\r\n                                            joiningParticipant,\r\n                                            sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\r\n                             */\r\n                            case \"leavesession\":\r\n\r\n                                const leavingParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\r\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\r\n                             */\r\n                            case \"disconnectsession\":\r\n\r\n                                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                                const disconnectParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                break;\r\n\r\n                            case \"token\":\r\n                                const token = new CognitiveTokenAuthentication(\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    },\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    });\r\n                                this.authentication = token;\r\n                                this.privConversationServiceConnector.onToken(token);\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * Message not recognized.\r\n                             */\r\n                            default:\r\n                                break;\r\n                        }\r\n                        break;\r\n\r\n                    /**\r\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\r\n                     */\r\n                    case \"partial\":\r\n\r\n                    /**\r\n                     * 'final' (or 'phrase') represents a finalized speech message.\r\n                     */\r\n                    case \"final\":\r\n\r\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\r\n                        const conversationResultReason: ResultReason = (conversationMessageType === \"final\") ? ResultReason.TranslatedParticipantSpeech : ResultReason.TranslatingParticipantSpeech;\r\n\r\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\r\n                            this.getTranslations(speechPayload.translations),\r\n                            speechPayload.language,\r\n                            speechPayload.id,\r\n                            conversationResultReason,\r\n                            speechPayload.recognition,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (speechPayload.isFinal) {\r\n                            // check the length, sometimes empty finals are returned\r\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\r\n                                sendFinal = true;\r\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\r\n                                // send final as normal. We had a non-empty partial for this same utterance\r\n                                // so sending the empty final is important\r\n                                sendFinal = true;\r\n                            } else {\r\n                                // suppress unneeded final\r\n                            }\r\n\r\n                            if (sendFinal) {\r\n                                if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\r\n                                }\r\n                            }\r\n                        } else if (speechResult.text !== undefined) {\r\n                            this.privLastPartialUtteranceId = speechPayload.id;\r\n                            if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\r\n                            }\r\n                        }\r\n\r\n                        break;\r\n\r\n                    /**\r\n                     * \"translated_message\" is a text message or instant message (IM).\r\n                     */\r\n                    case \"translated_message\":\r\n\r\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\r\n                        // TODO: (Native parity) a result reason should be set based whether the participantId is ours or not\r\n\r\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\r\n                            this.getTranslations(textPayload.translations),\r\n                            textPayload.language,\r\n                            undefined,\r\n                            undefined,\r\n                            textPayload.originalText,\r\n                            undefined,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (!!this.privConversationServiceConnector.translationReceived) {\r\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // ignore any unsupported message types\r\n                        break;\r\n                }\r\n            } catch (e) {\r\n                // continue\r\n            }\r\n            return this.receiveConversationMessageOverride();\r\n        } catch (e) {\r\n            this.terminateMessageLoop = true;\r\n        }\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve();\r\n        }\r\n        this.terminateMessageLoop = false;\r\n\r\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\r\n\r\n        try {\r\n            const r = await messageRetrievalPromise;\r\n            return r;\r\n        } catch (error) {\r\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint\r\n    private configConnection(): Promise<IConnection> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigPromise = undefined;\r\n                    return this.configConnection();\r\n                }\r\n                return this.privConnectionConfigPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigPromise = undefined;\r\n                return this.configConnection();\r\n            });\r\n        }\r\n        if (this.terminateMessageLoop) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n\r\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): IConnection => connection);\r\n\r\n        return this.privConnectionConfigPromise;\r\n    }\r\n\r\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResultTranslations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResultTranslations) {\r\n                translations.set(translation.lang, translation.translation);\r\n            }\r\n        }\r\n\r\n        return translations;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { AgentConfig } from \"./src/common.speech/Exports.js\";\r\n\r\n// Note: this instantiation ensures the above import isn't\r\n// removed on compile. The import being absent causes an error on running\r\nvoid new AgentConfig();\r\n\r\n// Speech SDK API\r\nexport * from \"./src/sdk/Exports.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", (): void => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCode, CancellationReason, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of speech recognition canceled result events.\r\n * @class TranslationRecognitionCanceledEventArgs\r\n */\r\nexport class TranslationRecognitionCanceledEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n    private privSessionId: string;\r\n    private privCancelReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionid - The session id.\r\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {TranslationRecognitionResult} result - The result.\r\n     */\r\n    public constructor(\r\n        sessionid: string,\r\n        cancellationReason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result: TranslationRecognitionResult) {\r\n        this.privCancelReason = cancellationReason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privResult = result;\r\n        this.privSessionId = sessionid;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n\r\n    /**\r\n     * Specifies the session identifier.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privCancelReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n} from \"./Exports.js\";\r\nimport { Dgi } from \"./ServiceMessages/Dgi/Dgi.js\";\r\nimport { RecognitionMode } from \"./ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\nimport { OutputFormat, PhraseOption } from \"./ServiceMessages/PhraseOutput/PhraseOutput.js\";\r\nimport { PronunciationAssessmentOptions } from \"./ServiceMessages/PronunciationScore/PronunciationAssessmentOptions.js\";\r\n\r\nimport { SpeechContext as SpeechServiceContext } from \"./ServiceMessages/SpeechContext.js\";\r\n\r\n/**\r\n * Represents the JSON used in the speech.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SpeechContext {\r\n    private privContext: SpeechServiceContext = {};\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n\r\n    public constructor(dynamicGrammar: DynamicGrammarBuilder) {\r\n        this.privDynamicGrammar = dynamicGrammar;\r\n    }\r\n\r\n    public getContext(): SpeechServiceContext {\r\n        return this.privContext;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * This is only used by pronunciation assessment config.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public setPronunciationAssessmentParams(params: string,\r\n        contentAssessmentTopic: string,\r\n        isSpeakerDiarizationEnabled: boolean = false): void {\r\n        if (this.privContext.phraseDetection === undefined) {\r\n            this.privContext.phraseDetection = {\r\n                enrichment: {\r\n                    pronunciationAssessment: {}\r\n                }\r\n            };\r\n        }\r\n        if (this.privContext.phraseDetection.enrichment === undefined) {\r\n            this.privContext.phraseDetection.enrichment = {\r\n                pronunciationAssessment: {}\r\n            };\r\n        }\r\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params) as PronunciationAssessmentOptions || {};\r\n        if (isSpeakerDiarizationEnabled) {\r\n            this.privContext.phraseDetection.mode = RecognitionMode.Conversation;\r\n        }\r\n        this.setWordLevelTimings();\r\n        this.privContext.phraseOutput.detailed.options.push(PhraseOption.PronunciationAssessment);\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(PhraseOption.SNR) === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(PhraseOption.SNR);\r\n        }\r\n        if (!!contentAssessmentTopic) {\r\n            this.privContext.phraseDetection.enrichment.contentAssessment = {\r\n                topic: contentAssessmentTopic\r\n            };\r\n            this.privContext.phraseOutput.detailed.options.push(PhraseOption.ContentAssessment);\r\n        }\r\n    }\r\n\r\n    public setDetailedOutputFormat(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                }\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = OutputFormat.Detailed;\r\n    }\r\n\r\n    public setWordLevelTimings(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                }\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = OutputFormat.Detailed;\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(PhraseOption.WordTimings) === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(PhraseOption.WordTimings);\r\n        }\r\n    }\r\n\r\n    public setSpeakerDiarizationAudioOffsetMs(audioOffsetMs: number): void {\r\n        this.privContext.phraseDetection.speakerDiarization.audioOffsetMs = audioOffsetMs;\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const dgi: Dgi = this.privDynamicGrammar.generateGrammarObject();\r\n        this.privContext.dgi = dgi;\r\n\r\n        const ret: string = JSON.stringify(this.privContext);\r\n        return ret;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Make sure not to export internal modules.\r\n//\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication.js\";\r\nexport * from \"./CognitiveTokenAuthentication.js\";\r\nexport * from \"./IAuthentication.js\";\r\nexport * from \"./IConnectionFactory.js\";\r\nexport * from \"./ISynthesisConnectionFactory.js\";\r\nexport * from \"./IntentConnectionFactory.js\";\r\nexport * from \"./SpeakerRecognitionConnectionFactory.js\";\r\nexport * from \"./RecognitionEvents.js\";\r\nexport * from \"./ServiceRecognizerBase.js\";\r\nexport * from \"./ConversationServiceRecognizer.js\";\r\nexport * from \"./RecognizerConfig.js\";\r\nexport * from \"./SpeechServiceInterfaces.js\";\r\nexport * from \"./WebsocketMessageFormatter.js\";\r\nexport * from \"./SpeechConnectionFactory.js\";\r\nexport * from \"./ConversationTranscriberConnectionFactory.js\";\r\nexport * from \"./TranscriberConnectionFactory.js\";\r\nexport * from \"./TranslationConnectionFactory.js\";\r\nexport * from \"./SpeechSynthesisConnectionFactory.js\";\r\nexport * from \"./EnumTranslation.js\";\r\nexport * from \"./ServiceMessages/Enums.js\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd.js\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis.js\";\r\nexport * from \"./ServiceMessages/TranslationPhrase.js\";\r\nexport * from \"./TranslationServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/SpeechDetected.js\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis.js\";\r\nexport * from \"./ServiceMessages/SpeechKeyword.js\";\r\nexport * from \"./SpeechServiceRecognizer.js\";\r\nexport * from \"./ConversationTranscriptionServiceRecognizer.js\";\r\nexport * from \"./TranscriptionServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase.js\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase.js\";\r\nexport * from \"./AddedLmIntent.js\";\r\nexport * from \"./IntentServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/IntentResponse.js\";\r\nexport * from \"./ServiceMessages/SpeakerResponse.js\";\r\nexport * from \"./RequestSession.js\";\r\nexport * from \"./SpeechContext.js\";\r\nexport * from \"./DynamicGrammarBuilder.js\";\r\nexport * from \"./DialogServiceAdapter.js\";\r\nexport * from \"./AgentConfig.js\";\r\nexport * from \"./Transcription/Exports.js\";\r\nexport * from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nexport * from \"./SynthesisTurn.js\";\r\nexport * from \"./SynthesisAdapterBase.js\";\r\nexport { AvatarSynthesisAdapter } from \"./AvatarSynthesisAdapter.js\";\r\nexport { SpeechSynthesisAdapter } from \"./SpeechSynthesisAdapter.js\";\r\nexport * from \"./SynthesisRestAdapter.js\";\r\nexport * from \"./SynthesizerConfig.js\";\r\nexport * from \"./SynthesisContext.js\";\r\nexport * from \"./SpeakerRecognitionConfig.js\";\r\nexport * from \"./SpeakerServiceRecognizer.js\";\r\nexport * from \"./VoiceServiceRecognizer.js\";\r\nexport * from \"./SpeechServiceConfig.js\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\r\nexport const ServicePropertiesPropertyName: string = \"ServiceProperties\";\r\nexport const ForceDictationPropertyName: string = \"ForceDictation\";\r\nexport const AutoDetectSourceLanguagesOpenRangeOptionName: string = \"UND\";\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Profanity option.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ProfanityOption {\r\n    Masked = 0,\r\n    Removed = 1,\r\n    Raw = 2\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function get() {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function get() {\n    return _parse.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function get() {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function get() {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function get() {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function get() {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function get() {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function get() {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function get() {\n    return _version.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                       //  requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(itemIndex: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first(): TItem {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last(): TItem {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add(item: TItem): void {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt(index: number, item: TItem): void {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt(index: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove(index: number, count: number): TItem[] {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded(addedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved(removedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed(disposedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join(seperator?: string): string {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray(): TItem[] {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem): void => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any(callback?: (item: TItem, index: number) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all(callback: (item: TItem) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach(callback: (item: TItem, index: number) => void): void {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select<T2>(callback: (item: TItem, index: number) => T2): List<T2> {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where(callback: (item: TItem, index: number) => boolean): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem): number => compareFn(b, a));\r\n    }\r\n\r\n    public clone(): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat(list: List<TItem>): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray(array: TItem[]): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed(): void {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions(subscriptions: IStringDictionary<() => void>): void {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ReplayableAudioNode\r\n} from \"../common.browser/Exports.js\";\r\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    DialogEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConfig,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    TurnStatusReceivedEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n    SpeechKeyword,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\nimport { InvocationSource } from \"./ServiceMessages/InvocationSource.js\";\r\nimport { ClientDetectedKeyword, KeywordDetectionType, OnRejectAction } from \"./ServiceMessages/KeywordDetection/KeywordDetection.js\";\r\nimport { RecognitionMode } from \"./ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n\r\n    private privDialogAudioSource: IAudioSource;\r\n\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n    private privLastResult: SpeechRecognitionResult;\r\n    private privEvents: EventSource<DialogEvent>;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privEvents = new EventSource<DialogEvent>();\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveDialogMessageOverride();\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride =\r\n            (recoMode: RecognitionMode, successCallback: (e: SpeechRecognitionResult) => void, errorCallback: (e: string) => void): Promise<void> =>\r\n                this.listenOnce(recoMode, successCallback, errorCallback);\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.dialogConnectImpl(connection);\r\n        this.configConnectionOverride = (connection: IConnection): Promise<IConnection> => this.configConnection(connection);\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privDialogAudioSource = audioSource;\r\n\r\n        this.agentConfigSent = false;\r\n        this.privLastResult = null;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                this.terminateMessageLoop = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            messagePayload: JSON.parse(message),\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"agent\",\r\n            requestId,\r\n            \"application/json\",\r\n            agentMessageJson));\r\n\r\n    }\r\n\r\n    protected async privDisconnect(): Promise<void> {\r\n        await this.cancelRecognition(this.privRequestSession.sessionId,\r\n            this.privRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        return;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n        let processed: boolean;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                this.privRequestSession.onPhraseRecognized(speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    this.privLastResult = args.result;\r\n\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    hypothesis.Offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    undefined,\r\n                    hypothesis.asJson(),\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(hypothesis.Offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Offset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.keyword\":\r\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\r\n                    keyword.Text,\r\n                    keyword.Duration,\r\n                    keyword.Offset,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    keyword.asJson(),\r\n                    resultProps);\r\n\r\n                if (keyword.Status !== \"Accepted\") {\r\n                    this.privLastResult = result;\r\n                }\r\n\r\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognized) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    this.handleResponseMessage(connectionMessage);\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n        }\r\n\r\n        if (!!this.privDialogServiceConnector.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n\r\n            try {\r\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n\r\n            if (!!this.privSuccessCallback) {\r\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                    undefined, // ResultId\r\n                    ResultReason.Canceled,\r\n                    undefined, // Text\r\n                    undefined, // Duration\r\n                    undefined, // Offset\r\n                    undefined, // Language\r\n                    undefined, // Language Detection Confidence\r\n                    undefined, // Speaker Id\r\n                    error,\r\n                    undefined, // Json\r\n                    properties);\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                    this.privSuccessCallback = undefined;\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async listenOnce(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n    ): Promise<void> {\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallback;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\r\n\r\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, async (error: string): Promise<void> => {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    private receiveDialogMessageOverride(): Promise<void> {\r\n\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        const loop = async (): Promise<void> => {\r\n            try {\r\n                const isDisposed: boolean = this.isDisposed();\r\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                if (isDisposed || terminateMessageLoop) {\r\n                    // We're done.\r\n                    communicationCustodian.resolve(undefined);\r\n                    return;\r\n                }\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const message: ConnectionMessage = await connection.read();\r\n\r\n                if (!message) {\r\n                    return loop();\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        {\r\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.StartTurn(turnRequestId);\r\n                            } else {\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n\r\n                        let json: string;\r\n\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json, this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset);\r\n\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        {\r\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnEndRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                            } else {\r\n                                // Audio session turn\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n                                }\r\n\r\n                                // report result to promise.\r\n                                if (!!this.privSuccessCallback && this.privLastResult) {\r\n                                    try {\r\n                                        this.privSuccessCallback(this.privLastResult);\r\n                                        this.privLastResult = null;\r\n                                    } catch (e) {\r\n                                        if (!!this.privErrorCallback) {\r\n                                            this.privErrorCallback(e as string);\r\n                                        }\r\n                                    }\r\n                                    // Only invoke the call back once.\r\n                                    // and if it's successful don't invoke the\r\n                                    // error after that.\r\n                                    this.privSuccessCallback = undefined;\r\n                                    this.privErrorCallback = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        try {\r\n                            const processed = await this.processTypeSpecificMessages(connectionMessage);\r\n                            if (!processed) {\r\n                                if (!!this.serviceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            //\r\n                        }\r\n                }\r\n                const ret: Promise<void> = loop();\r\n\r\n                return ret;\r\n            } catch (error) {\r\n                this.terminateMessageLoop = true;\r\n                communicationCustodian.resolve();\r\n            }\r\n        };\r\n\r\n        loop().catch((reason: string): void => {\r\n            Events.instance.onEvent(new BackgroundEvent(reason));\r\n        });\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        try {\r\n            await this.receiveDialogMessageOverride();\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configConnection(connection: IConnection): Promise<IConnection> {\r\n        if (this.terminateMessageLoop) {\r\n            this.terminateMessageLoop = false;\r\n            return Promise.reject(\"Connection to service terminated.\");\r\n        }\r\n\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendAgentConfig(connection);\r\n        return connection;\r\n    }\r\n\r\n    private async sendPreAudioMessages(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.addKeywordContextData();\r\n        await this.sendSpeechContext(connection, true);\r\n        await this.sendAgentContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private sendAgentConfig(connection: IConnection): Promise<void> {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n\r\n            if (this.privRecognizerConfig\r\n                .parameters\r\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                const config = this.agentConfig.get();\r\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\r\n                this.agentConfig.set(config);\r\n            }\r\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\r\n\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            // guard against sending this multiple times on one connection\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private sendAgentContext(connection: IConnection): Promise<void> {\r\n        const guid: string = createGuid();\r\n\r\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            serviceResult.Offset,\r\n            serviceResult.Language,\r\n            serviceResult.LanguageDetectionConfidence,\r\n            undefined,\r\n            undefined,\r\n            serviceResult.asJson(),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, serviceResult.Offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private handleResponseMessage(responseMessage: SpeechConnectionMessage): void {\r\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\r\n        // event according to the message type that's specified.\r\n        const responsePayload: { messageType: string } = JSON.parse(responseMessage.textBody) as { messageType: string };\r\n        switch (responsePayload.messageType.toLowerCase()) {\r\n            case \"message\":\r\n                const responseRequestId = responseMessage.requestId.toUpperCase();\r\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\r\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                // update the conversation Id\r\n                if (activityPayload.conversationId) {\r\n                    const updateAgentConfig = this.agentConfig.get();\r\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                    this.agentConfig.set(updateAgentConfig);\r\n                }\r\n\r\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\r\n                    activityPayload,\r\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\r\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                if (!!this.privDialogServiceConnector.activityReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"messagestatus\":\r\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.turnStatusReceived(\r\n                            this.privDialogServiceConnector,\r\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                Events.instance.onEvent(\r\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onEvent(event: DialogEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private addKeywordContextData(): void {\r\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\r\n        if (keywordPropertyValue === undefined) {\r\n            return;\r\n        }\r\n\r\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\r\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\r\n\r\n        const keywords = keywordPropertyValue.split(\";\");\r\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\r\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\r\n\r\n        const keywordDefinitionArray: ClientDetectedKeyword[] = [];\r\n        for (let i = 0; i < keywords.length; i++) {\r\n            const definition: ClientDetectedKeyword = {\r\n                text: keywords[i]\r\n            };\r\n            if (i < keywordOffsets.length) {\r\n                definition.startOffset = Number(keywordOffsets[i]);\r\n            }\r\n            if (i < keywordDurations.length) {\r\n                definition.duration = Number(keywordDurations[i]);\r\n            }\r\n            keywordDefinitionArray.push(definition);\r\n        }\r\n\r\n        this.speechContext.getContext().invocationSource = InvocationSource.VoiceActivationWithKeyword;\r\n        this.speechContext.getContext().keywordDetection = [{\r\n            clientDetectedKeywords: keywordDefinitionArray,\r\n            onReject: { action: OnRejectAction.EndOfTurn },\r\n            type: KeywordDetectionType.StartTrigger\r\n        }];\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisStatus } from \"../Exports.js\";\r\n\r\n// translation.synthesis.end\r\nexport interface ITranslationSynthesisEnd {\r\n    SynthesisStatus?: SynthesisStatus;\r\n    FailureReason?: string;\r\n    Status?: SynthesisStatus;\r\n}\r\n\r\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\r\n    private privSynthesisEnd: ITranslationSynthesisEnd;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisEnd = JSON.parse(json) as ITranslationSynthesisEnd;\r\n        if (!!this.privSynthesisEnd.SynthesisStatus) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.SynthesisStatus as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n        if (!!this.privSynthesisEnd.Status) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.Status as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationSynthesisEnd {\r\n        return new TranslationSynthesisEnd(json);\r\n    }\r\n\r\n    public get SynthesisStatus(): SynthesisStatus {\r\n        return this.privSynthesisEnd.SynthesisStatus;\r\n    }\r\n\r\n    public get FailureReason(): string {\r\n        return this.privSynthesisEnd.FailureReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports.js\";\r\nimport { RecognitionStatus } from \"./Exports.js\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus, expectEndOfDictation: boolean = false): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.EndOfDictation:\r\n                // If we need the result in EndOfDictation (typically some session level result),\r\n                // translate into RecognizedSpeech, otherwise NoMatch\r\n                reason = expectEndOfDictation ? ResultReason.RecognizedSpeech : ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming websocket commands\r\n */\r\nexport interface ICommandResponsePayload {\r\n    type: string;\r\n    command?: string;\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId?: string;\r\n    roomid?: string;\r\n    value: boolean | number | string;\r\n    token?: string;\r\n}\r\n\r\nconst parseCommandResponse = (json: string): ICommandResponsePayload => JSON.parse(json) as ICommandResponsePayload;\r\n\r\nexport class CommandResponsePayload implements ICommandResponsePayload {\r\n    private privCommandResponse: ICommandResponsePayload;\r\n\r\n    public constructor(json: string) {\r\n        this.privCommandResponse = parseCommandResponse(json);\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privCommandResponse.type;\r\n    }\r\n    public get command(): string {\r\n        return this.privCommandResponse.command;\r\n    }\r\n    public get id(): string {\r\n        return this.privCommandResponse.id;\r\n    }\r\n    public get nickname(): string {\r\n        return this.privCommandResponse.nickname;\r\n    }\r\n    public get participantId(): string {\r\n        return this.privCommandResponse.participantId;\r\n    }\r\n    public get roomid(): string {\r\n        return this.privCommandResponse.roomid;\r\n    }\r\n    public get value(): boolean | number | string {\r\n        return this.privCommandResponse.value;\r\n    }\r\n    public get token(): string {\r\n        return this.privCommandResponse.token;\r\n    }\r\n\r\n    public static fromJSON(json: string): CommandResponsePayload {\r\n        return new CommandResponsePayload(json);\r\n    }\r\n\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis viseme event.\r\n * @class SpeechSynthesisVisemeEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisVisemeEventArgs {\r\n    private privAudioOffset: number;\r\n    private privVisemeId: number;\r\n    private privAnimation: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} visemeId - The viseme ID.\r\n     * @param {string} animation - The animation, could be in svg or other format.\r\n     */\r\n    public constructor(audioOffset: number, visemeId: number, animation: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privVisemeId = visemeId;\r\n        this.privAnimation = animation;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the viseme ID.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\r\n     * @function\r\n     * @public\r\n     * @returns {number} the viseme ID.\r\n     */\r\n    public get visemeId(): number {\r\n        return this.privVisemeId;\r\n    }\r\n\r\n    /**\r\n     * Specifies the animation.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\r\n     * @function\r\n     * @public\r\n     * @returns {string} the animation, could be in svg or other format.\r\n     */\r\n    public get animation(): string {\r\n        return this.privAnimation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n} from \"../common/Exports.js\";\r\n\r\nexport class ReplayableAudioNode implements IAudioStreamNode {\r\n    private privAudioNode: IAudioStreamNode;\r\n    private privBytesPerSecond: number;\r\n    private privBuffers: BufferEntry[] = [];\r\n    private privReplayOffset: number = 0;\r\n    private privLastShrinkOffset: number = 0;\r\n    private privBufferStartOffset: number = 0;\r\n    private privBufferSerial: number = 0;\r\n    private privBufferedBytes: number = 0;\r\n    private privReplay: boolean = false;\r\n    private privLastChunkAcquiredTime: number = 0;\r\n\r\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privAudioNode.id();\r\n    }\r\n\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\r\n\r\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n\r\n            let i: number = 0;\r\n\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n\r\n            if (i < this.privBuffers.length) {\r\n                const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n\r\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n\r\n                // If we've reached the end of the buffers, stop replaying.\r\n                if (i === this.privBuffers.length - 1) {\r\n                    this.privReplay = false;\r\n                }\r\n\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: retVal,\r\n                    isEnd: false,\r\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.privAudioNode.read()\r\n            .then((result: IStreamChunk<ArrayBuffer>): IStreamChunk<ArrayBuffer> => {\r\n                if (result && result.buffer) {\r\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                    this.privBufferedBytes += result.buffer.byteLength;\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    public detach(): Promise<void> {\r\n        this.privBuffers = undefined;\r\n        return this.privAudioNode.detach();\r\n    }\r\n\r\n    public replay(): void {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    public shrinkBuffers(offset: number): void {\r\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.privLastShrinkOffset = offset;\r\n\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\r\n\r\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n\r\n        let i: number = 0;\r\n\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    public findTimeAtOffset(offset: number): number {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const value of this.privBuffers) {\r\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\nclass BufferEntry {\r\n    public chunk: IStreamChunk<ArrayBuffer>;\r\n    public serial: number;\r\n    public byteOffset: number;\r\n\r\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { IStreamChunk } from \"../common/Stream.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { IRecorder } from \"./IRecorder.js\";\r\n\r\ntype NavigatorUserMediaSuccessCallback = (stream: MediaStream) => void;\r\ntype NavigatorUserMediaErrorCallback = (error: DOMException) => void;\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    private privIsClosing: boolean;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n        this.privIsClosing = false;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error as string);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as unknown as {\r\n            webkitGetUserMedia?: (\r\n                constraints: MediaStreamConstraints,\r\n                successCallback: (stream: MediaStream) => void,\r\n                errorCallback: (error: any) => void\r\n            ) => void;\r\n            mozGetUserMedia?: (\r\n                constraints: MediaStreamConstraints,\r\n                successCallback: (stream: MediaStream) => void,\r\n                errorCallback: (error: any) => void\r\n            ) => void;\r\n            msGetUserMedia?: (\r\n                constraints: MediaStreamConstraints,\r\n                successCallback: (stream: MediaStream) => void,\r\n                errorCallback: (error: any) => void\r\n            ) => void;\r\n            getUserMedia?: (\r\n                constraints: MediaStreamConstraints,\r\n                successCallback: (stream: MediaStream) => void,\r\n                errorCallback: (error: any) => void\r\n            ) => void;\r\n            mediaDevices?: MediaDevices;\r\n        };\r\n\r\n        let getUserMedia = (\r\n            // eslint-disable-next-line\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = (): void => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream): void => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: any): void => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error as string}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any): void => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason as string}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>): IAudioStreamNode => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async (): Promise<void> => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: (): string => audioNodeId,\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            // eslint-disable-next-line @typescript-eslint/await-thenable\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string): ISpeechConfigAudioDevice => (\r\n            {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            }\r\n        ));\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]): void => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, (): Deferred<string> => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private async listen(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error as string));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            if (!this.privIsClosing) {\r\n                // The audio context close may take enough time that the close is called twice\r\n                this.privIsClosing = true;\r\n                await this.privContext.close();\r\n                this.privContext = null;\r\n                this.privIsClosing = false;\r\n            }\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationHypothesis implements ITranslationHypothesis {\r\n    private privTranslationHypothesis: ITranslationHypothesis;\r\n\r\n    private constructor(hypothesis: ITranslationHypothesis, baseOffset: number) {\r\n        this.privTranslationHypothesis = hypothesis;\r\n        this.privTranslationHypothesis.Offset += baseOffset;\r\n        this.privTranslationHypothesis.Translation.TranslationStatus = this.mapTranslationStatus(this.privTranslationHypothesis.Translation.TranslationStatus);\r\n    }\r\n\r\n    public static fromJSON(json: string, baseOffset: number): TranslationHypothesis {\r\n        return new TranslationHypothesis(JSON.parse(json) as ITranslationHypothesis, baseOffset);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationHypothesis: { SpeechHypothesis: ITranslationHypothesis }, baseOffset: number): TranslationHypothesis {\r\n        Contracts.throwIfNullOrUndefined(translationHypothesis, \"translationHypothesis\");\r\n        const hypothesis: ITranslationHypothesis = translationHypothesis.SpeechHypothesis;\r\n        translationHypothesis.SpeechHypothesis = undefined;\r\n        hypothesis.Translation = (translationHypothesis as unknown as ITranslations);\r\n        return new TranslationHypothesis(hypothesis, baseOffset);\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationHypothesis.Duration;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationHypothesis.Offset;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationHypothesis.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationHypothesis.Translation;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privTranslationHypothesis.PrimaryLanguage?.Language;\r\n    }\r\n\r\n    public asJson(): string {\r\n        const jsonObj = { ...this.privTranslationHypothesis };\r\n        // Convert the enum value to its string representation for serialization purposes.\r\n\r\n        return jsonObj.Translation !== undefined ? JSON.stringify({\r\n            ...jsonObj,\r\n            TranslationStatus: TranslationStatus[jsonObj.Translation.TranslationStatus] as keyof typeof TranslationStatus\r\n        }) : JSON.stringify(jsonObj);\r\n    }\r\n\r\n    private mapTranslationStatus(status: any): TranslationStatus {\r\n        if (typeof status === \"string\") {\r\n            return TranslationStatus[status as keyof typeof TranslationStatus];\r\n        } else if (typeof status === \"number\") {\r\n            return status;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming translation messages\r\n */\r\nexport interface ITranslationResponsePayload {\r\n    lang: string;\r\n    translation: string;\r\n}\r\n\r\nexport interface ITranslationCommandMessage {\r\n    translations: ITranslationResponsePayload[];\r\n    id: string;\r\n    language: string;\r\n    nickname: string;\r\n    participantId: string;\r\n    roomid: string;\r\n    timestamp: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ISpeechResponsePayload extends ITranslationCommandMessage {\r\n    recognition: string;\r\n    isFinal: boolean;\r\n}\r\n\r\nexport interface ITextResponsePayload extends ITranslationCommandMessage {\r\n    originalText: string;\r\n}\r\n\r\nconst parseSpeechResponse = (json: string): ISpeechResponsePayload => JSON.parse(json) as ISpeechResponsePayload;\r\nconst parseTextResponse = (json: string): ITextResponsePayload => JSON.parse(json) as ITextResponsePayload;\r\n\r\nexport class SpeechResponsePayload implements ISpeechResponsePayload {\r\n\r\n    private privSpeechResponse: ISpeechResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechResponse = parseSpeechResponse(json);\r\n    }\r\n\r\n    public get recognition(): string {\r\n        return this.privSpeechResponse.recognition;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privSpeechResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privSpeechResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privSpeechResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privSpeechResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privSpeechResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privSpeechResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privSpeechResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privSpeechResponse.type;\r\n    }\r\n\r\n    public get isFinal(): boolean {\r\n        return this.privSpeechResponse.type === \"final\";\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechResponsePayload {\r\n        return new SpeechResponsePayload(json);\r\n    }\r\n\r\n}\r\n\r\nexport class TextResponsePayload implements ITextResponsePayload {\r\n\r\n    private privTextResponse: ITextResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privTextResponse = parseTextResponse(json);\r\n    }\r\n\r\n    public get originalText(): string {\r\n        return this.privTextResponse.originalText;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privTextResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privTextResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privTextResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privTextResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privTextResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privTextResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privTextResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privTextResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): TextResponsePayload {\r\n        return new TextResponsePayload(json);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConversationConnectionMessage> {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport { Conversation, ConversationImpl } from \"./Conversation.js\";\r\nexport { ConversationInfo } from \"./IConversation.js\";\r\nexport { ConversationCommon } from \"./ConversationCommon.js\";\r\nexport { ConversationExpirationEventArgs } from \"./ConversationExpirationEventArgs.js\";\r\nexport { ConversationParticipantsChangedEventArgs } from \"./ConversationParticipantsChangedEventArgs.js\";\r\nexport { ConversationTranslationCanceledEventArgs } from \"./ConversationTranslationCanceledEventArgs.js\";\r\nexport { ConversationTranslationEventArgs } from \"./ConversationTranslationEventArgs.js\";\r\nexport { ConversationTranslationResult } from \"./ConversationTranslationResult.js\";\r\nexport { ConversationTranslator } from \"./ConversationTranslator.js\";\r\nexport { ConversationTranscriber } from \"./ConversationTranscriber.js\";\r\nexport { IParticipant, Participant, User, VoiceSignature } from \"./IParticipant.js\";\r\nexport { ParticipantChangedReason } from \"./ParticipantChangedReason.js\";\r\nexport { ConversationHandler, ConversationTranscriptionHandler, IConversationTranslator } from \"./ConversationHandler.js\";\r\nexport { Meeting, MeetingImpl } from \"./Meeting.js\";\r\nexport { MeetingInfo } from \"./IMeeting.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriber } from \"./MeetingTranscriber.js\";\r\nexport { MeetingHandler, MeetingTranscriptionHandler } from \"./MeetingHandler.js\";\r\nexport { ConversationTranscriptionResult } from \"./ConversationTranscriptionResult.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus, SimpleSpeechPhrase } from \"../../src/common.speech/Exports.js\";\r\nimport { IntentRecognitionResult, NoMatchReason, SpeechRecognitionResult, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information for NoMatch recognition results.\r\n * @class NoMatchDetails\r\n */\r\nexport class NoMatchDetails {\r\n    private privReason: NoMatchReason;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {NoMatchReason} reason - The no-match reason.\r\n     */\r\n    private constructor(reason: NoMatchReason) {\r\n        this.privReason = reason;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\r\n     * @member NoMatchDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}\r\n     * result - The recognition result that was not recognized.\r\n     * @returns {NoMatchDetails} The no match details object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\r\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json, 0); // Offset fixups are already done.\r\n\r\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\r\n\r\n        switch (simpleSpeech.RecognitionStatus) {\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = NoMatchReason.InitialBabbleTimeout;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n                reason = NoMatchReason.InitialSilenceTimeout;\r\n                break;\r\n            default:\r\n                reason = NoMatchReason.NotRecognized;\r\n                break;\r\n        }\r\n        return new NoMatchDetails(reason);\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member NoMatchDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {NoMatchReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): NoMatchReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports.js\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports.js\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter.js\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream.js\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     * Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     * stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     * stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then((): void => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string): void => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    ServiceRecognizerBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConversationTranscriber,\r\n    MeetingTranscriber,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Allows additions of new phrases to improve speech recognition.\r\n *\r\n * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect\r\n * to the speech service.\r\n */\r\nexport class PhraseListGrammar {\r\n    private privGrammerBuilder: DynamicGrammarBuilder;\r\n\r\n    private constructor(recogBase: ServiceRecognizerBase) {\r\n        this.privGrammerBuilder = recogBase.dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.\r\n     * @param recognizer The recognizer to add phrase lists to.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber | MeetingTranscriber): PhraseListGrammar {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        return new PhraseListGrammar(recoBase);\r\n    }\r\n\r\n    /**\r\n     * Adds a single phrase to the current recognizer.\r\n     * @param phrase Phrase to add.\r\n     */\r\n    public addPhrase(phrase: string): void {\r\n        this.privGrammerBuilder.addPhrase(phrase);\r\n    }\r\n\r\n    /**\r\n     * Adds multiple phrases to the current recognizer.\r\n     * @param phrases Array of phrases to add.\r\n     */\r\n    public addPhrases(phrases: string[]): void {\r\n        this.privGrammerBuilder.addPhrase(phrases);\r\n    }\r\n\r\n    /**\r\n     * Clears all phrases added to the current recognizer.\r\n     */\r\n    public clear(): void {\r\n        this.privGrammerBuilder.clearPhrases();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of parameters and their values.\r\n * @class Translations\r\n */\r\nexport class Translations {\r\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\r\n    private privMap: PropertyCollection = new PropertyCollection();\r\n\r\n    /**\r\n     * Get the languages in the object in a String array.\r\n     * @member Translations.prototype.languages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} languages in translations object.\r\n     */\r\n    public get languages(): string[] {\r\n        return this.privMap.keys;\r\n    }\r\n\r\n    /**\r\n     * Returns the parameter value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member Translations.prototype.get\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public get(key: string, def?: string): string {\r\n        return this.privMap.getProperty(key, def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member Translations.prototype.set\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public set(key: string, value: string): void {\r\n        this.privMap.setProperty(key, value);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SpeechSynthesisResult\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisResult extends SynthesisResult {\r\n    private readonly privAudioData: ArrayBuffer;\r\n    private readonly privAudioDuration: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {ArrayBuffer} audioData - The synthesized audio binary.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     * @param {number} audioDuration - The audio duration.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, audioData?: ArrayBuffer,\r\n                errorDetails?: string, properties?: PropertyCollection, audioDuration?: number) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privAudioData = audioData;\r\n        this.privAudioDuration = audioDuration;\r\n    }\r\n\r\n    /**\r\n     * The synthesized audio data\r\n     * @member SpeechSynthesisResult.prototype.audioData\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} The synthesized audio data.\r\n     */\r\n    public get audioData(): ArrayBuffer {\r\n        return this.privAudioData;\r\n    }\r\n\r\n    /**\r\n     * The time duration of synthesized audio, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisResult.prototype.audioDuration\r\n     * @function\r\n     * @public\r\n     * @returns {number} The time duration of synthesized audio.\r\n     */\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport enum ParticipantChangedReason {\r\n    /** Participant has joined the conversation. */\r\n    JoinedConversation,\r\n\r\n    /** Participant has left the conversation. This could be voluntary, or involuntary\r\n     * (e.g. they are experiencing networking issues).\r\n     */\r\n    LeftConversation,\r\n\r\n    /** The participants' state has changed (e.g. they became muted, changed their nickname). */\r\n    Updated\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioDestination } from \"../common/Exports.js\";\r\nimport {\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\n\r\nexport class SpeechSynthesisAdapter extends SynthesisAdapterBase {\r\n    private privSpeechSynthesizer: SpeechSynthesizer;\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n            super(authentication, connectionFactory, synthesizerConfig, audioDestination);\r\n            this.privSpeechSynthesizer = speechSynthesizer;\r\n            this.privSynthesizer = speechSynthesizer as Synthesizer;\r\n        }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(this.privSpeechSynthesizer);\r\n    }\r\n\r\n    protected onSynthesisStarted(requestId: string): void {\r\n        const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n            new SpeechSynthesisResult(\r\n                requestId,\r\n                ResultReason.SynthesizingAudioStarted,\r\n            )\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n            this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n        }\r\n    }\r\n\r\n    protected onSynthesizing(audio: ArrayBuffer): void {\r\n        if (!!this.privSpeechSynthesizer.synthesizing) {\r\n            try {\r\n                const audioWithHeader = this.privSynthesisTurn.audioOutputFormat.addHeader(audio);\r\n                const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                    new SpeechSynthesisResult(\r\n                        this.privSynthesisTurn.requestId,\r\n                        ResultReason.SynthesizingAudio,\r\n                        audioWithHeader));\r\n                this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCancelled(result: SpeechSynthesisResult): void {\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCompleted(result: SpeechSynthesisResult): void {\r\n        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n            try {\r\n                this.privSpeechSynthesizer.synthesisCompleted(\r\n                    this.privSpeechSynthesizer,\r\n                    new SpeechSynthesisEventArgs(result)\r\n                );\r\n            } catch (e) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onWordBoundary(wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n            try {\r\n                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onVisemeReceived(visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n            try {\r\n                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onBookmarkReached(bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n            try {\r\n                this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationEventArgs,\r\n    CancellationReason,\r\n    RecognitionEventArgs\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines content of a CancellationEvent.\r\n * @class CancellationEventArgsBase\r\n */\r\nexport class CancellationEventArgsBase extends RecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string,\r\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationEventArgsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful operation.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful operation, provides details of the occurred error.\r\n     * @member CancellationEventArgsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\nimport { RecognitionMode } from \"./ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n    private readonly universalUri: string = \"/stt/speech/universal/v\";\r\n\r\n    public async create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): Promise<IConnection> {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!!endpoint) {\r\n            const endpointUrl = new URL(endpoint);\r\n            const pathName = endpointUrl.pathname;\r\n\r\n            if (pathName === \"\" || pathName === \"/\") {\r\n                // We need to generate the path, and we need to check for a redirect.\r\n                endpointUrl.pathname = this.universalUri + config.recognitionEndpointVersion;\r\n\r\n                endpoint = await ConnectionFactoryBase.getRedirectUrlFromEndpoint(endpointUrl.toString());\r\n            }\r\n        }\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        } else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    } else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers.connectionId = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n\r\n\r\n}\r\n\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { ConversationTranslationResult, SessionEventArgs } from \"../../sdk/Exports.js\";\r\nimport { IInternalParticipant } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class MuteAllEventArgs extends SessionEventArgs {\r\n    private privIsMuted: boolean;\r\n\r\n    public constructor(isMuted: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsMuted = isMuted;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n}\r\n\r\nexport class LockRoomEventArgs extends SessionEventArgs {\r\n    private privIsLocked: boolean;\r\n\r\n    public constructor(isLocked: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsLocked = isLocked;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsLocked;\r\n    }\r\n}\r\n\r\nexport class ParticipantEventArgs extends SessionEventArgs {\r\n    private privParticipant: IInternalParticipant;\r\n\r\n    public constructor(participant: IInternalParticipant, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privParticipant = participant;\r\n    }\r\n\r\n    public get participant(): IInternalParticipant {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n\r\nexport class ParticipantAttributeEventArgs extends SessionEventArgs {\r\n    private privValue: boolean | number | string | string[];\r\n    private privKey: string;\r\n    private privParticipantId: string;\r\n\r\n    public constructor(participantId: string, key: string, value: boolean | number | string |  string[], sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privKey = key;\r\n        this.privValue = value;\r\n        this.privParticipantId = participantId;\r\n    }\r\n\r\n    public get value(): boolean | number | string |  string[] {\r\n        return this.privValue;\r\n    }\r\n\r\n    public get key(): string {\r\n        return this.privKey;\r\n    }\r\n    public get id(): string {\r\n        return this.privParticipantId;\r\n    }\r\n}\r\n\r\nexport class ParticipantsListEventArgs extends SessionEventArgs {\r\n\r\n    private privRoomId: string;\r\n    private privSessionToken: string;\r\n    private privTranslateTo: string[];\r\n    private privProfanityFilter: string;\r\n    private privRoomProfanityFilter: string;\r\n    private privIsRoomLocked: boolean;\r\n    private privIsMuteAll: boolean;\r\n    private privParticipants: IInternalParticipant[];\r\n\r\n    public constructor(conversationId: string, token: string, translateTo: string[], profanityFilter: string,\r\n                       roomProfanityFilter: string, isRoomLocked: boolean, isMuteAll: boolean, participants: IInternalParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privRoomId = conversationId;\r\n        this.privSessionToken = token;\r\n        this.privTranslateTo = translateTo;\r\n        this.privProfanityFilter = profanityFilter;\r\n        this.privRoomProfanityFilter = roomProfanityFilter;\r\n        this.privIsRoomLocked = isRoomLocked;\r\n        this.privIsRoomLocked = isMuteAll;\r\n        this.privParticipants = participants;\r\n    }\r\n    public get sessionToken(): string {\r\n        return this.privSessionToken;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privRoomId;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privTranslateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privProfanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privRoomProfanityFilter;\r\n    }\r\n\r\n    public get isRoomLocked(): boolean {\r\n        return this.privIsRoomLocked;\r\n    }\r\n\r\n    public get isMuteAll(): boolean {\r\n        return this.privIsMuteAll;\r\n    }\r\n\r\n    public get participants(): IInternalParticipant[] {\r\n        return this.privParticipants;\r\n    }\r\n}\r\n\r\nexport class ConversationReceivedTranslationEventArgs {\r\n    private privPayload: ConversationTranslationResult;\r\n    private privCommand: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(command: string, payload: ConversationTranslationResult,  sessionId?: string) {\r\n        this.privPayload = payload;\r\n        this.privCommand = command;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get payload(): ConversationTranslationResult {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privCommand;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports.js\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat.js\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.FLAC]: \"audio/flac\",\r\n    [AudioFormatTag.AMR_WB]: \"audio/amr-wb\",\r\n    [AudioFormatTag.G722]: \"audio/G722\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined && typeof window !== \"undefined\") {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            } else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then((): void => {\r\n                    receivedAudio = this.privFormat.addHeader(receivedAudio);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then((): void => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error: string): void => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (typeof (AudioContext) !== \"undefined\" || (typeof (window) !== \"undefined\" && typeof ((window as any).webkitAudioContext) !== \"undefined\")) {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (): void => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (): void => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (): void => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get volume(): number {\r\n        return this.privAudio?.volume ?? -1;\r\n    }\r\n\r\n    public set volume(volume: number) {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.volume = volume;\r\n        }\r\n    }\r\n\r\n    public mute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = true;\r\n        }\r\n    }\r\n\r\n    public unmute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = false;\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // eslint-disable-next-line no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar _default = {\n  randomUUID\n};\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the pronunciation evaluation granularity; default value is Phoneme.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGranularity\r\n */\r\nexport enum PronunciationAssessmentGranularity {\r\n    /**\r\n     * Shows the score on the full text, word and phoneme level\r\n     * @member PronunciationAssessmentGranularity.Phoneme\r\n     */\r\n    Phoneme = 1,\r\n\r\n    /**\r\n     * Shows the score on the full text and word level\r\n     * @member PronunciationAssessmentGranularity.Word\r\n     */\r\n    Word,\r\n\r\n    /**\r\n     * Shows the score on the full text level only\r\n     * @member PronunciationAssessmentGranularity.FullText\r\n     */\r\n    FullText,\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URL = exports.DNS = void 0;\nexports.default = v35;\n\nvar _stringify = require(\"./stringify.js\");\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.unsafeStringify)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ntype TWorkerMessage = ICallNotification | IClearResponse | IErrorNotification | IErrorResponse;\r\n\r\ninterface IClearResponse {\r\n    error: null;\r\n    id: number;\r\n}\r\n\r\ninterface IErrorNotification {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: null;\r\n    result: null;\r\n}\r\n\r\ninterface IErrorResponse {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: number;\r\n    result: null;\r\n}\r\n\r\ninterface ICallNotification {\r\n    id: null;\r\n    method: \"call\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface ISetNotification {\r\n    id: null;\r\n    method: \"set\";\r\n    params: {\r\n        delay: number;\r\n        now: number;\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IClearRequest {\r\n    id: number;\r\n    method: \"clear\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IWorkerEvent extends Event {\r\n    data: TWorkerMessage;\r\n}\r\n\r\ninterface IWorkerTimers {\r\n    clearTimeout: (timerId: number) => void;\r\n    setTimeout: (func: () => any, delay: number) => number;\r\n}\r\n\r\ndeclare type Func = () => any;\r\n\r\nexport class Timeout {\r\n\r\n    private static workerTimers: null | IWorkerTimers = null;\r\n\r\n    public static clearTimeout: IWorkerTimers[\"clearTimeout\"] = (timerId: number): void => Timeout.timers().clearTimeout(timerId);\r\n\r\n    public static setTimeout: IWorkerTimers[\"setTimeout\"] = (func: () => any, delay: number): number => Timeout.timers().setTimeout(func, delay);\r\n\r\n    public static load(): any {\r\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\r\n        const scheduledTimeoutFunctions: Map<number, number | Func> = new Map([[0, (): void => { }]]); // eslint-disable-line @typescript-eslint/no-empty-function\r\n        const unhandledRequests: Map<number, number> = new Map();\r\n\r\n        // eslint-disable-next-line\r\n        const workerScript = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`;\r\n        const workerUrl = \"data:text/javascript;base64,\" + btoa(workerScript);\r\n        const worker = new Worker(workerUrl);\r\n\r\n        worker.addEventListener(\"message\", ({ data }: IWorkerEvent): void => {\r\n            if (Timeout.isCallNotification(data)) {\r\n                const {\r\n                    params: { timerId }\r\n                } = data;\r\n\r\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\r\n\r\n                if (typeof idOrFunc === \"number\") {\r\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\r\n\r\n                    if (\r\n                        unhandledTimerId === undefined ||\r\n                        unhandledTimerId !== timerId\r\n                    ) {\r\n                        throw new Error(\"The timer is in an undefined state.\");\r\n                    }\r\n                } else if (typeof idOrFunc !== \"undefined\") {\r\n                    idOrFunc();\r\n\r\n                    // A timeout can be safely deleted because it is only called once.\r\n                    scheduledTimeoutFunctions.delete(timerId);\r\n                } else {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n            } else if (Timeout.isClearResponse(data)) {\r\n                const { id } = data;\r\n\r\n                const unhandledTimerId = unhandledRequests.get(id);\r\n\r\n                if (unhandledTimerId === undefined) {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n\r\n                unhandledRequests.delete(id);\r\n\r\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\r\n            } else {\r\n                const {\r\n                    error: { message }\r\n                } = data;\r\n\r\n                throw new Error(message);\r\n            }\r\n        });\r\n\r\n        const clearTimeout = (timerId: number): void => {\r\n            const id = Math.random();\r\n\r\n            unhandledRequests.set(id, timerId);\r\n            scheduledTimeoutFunctions.set(timerId, id);\r\n\r\n            worker.postMessage({\r\n                id,\r\n                method: \"clear\",\r\n                params: { timerId }\r\n            } as IClearRequest);\r\n        };\r\n\r\n        const setTimeout = (func: () => void, delay: number): number => {\r\n            const timerId = Math.random();\r\n\r\n            scheduledTimeoutFunctions.set(timerId, func);\r\n\r\n            worker.postMessage({\r\n                id: null,\r\n                method: \"set\",\r\n                params: {\r\n                    delay,\r\n                    now: performance.now(),\r\n                    timerId\r\n                }\r\n            } as ISetNotification);\r\n\r\n            return timerId;\r\n        };\r\n\r\n        return {\r\n            clearTimeout,\r\n            setTimeout\r\n        };\r\n    }\r\n\r\n    private static loadWorkerTimers(): () => IWorkerTimers {\r\n        return (): IWorkerTimers => {\r\n            if (Timeout.workerTimers !== null) {\r\n                return Timeout.workerTimers;\r\n            }\r\n\r\n            Timeout.workerTimers = Timeout.load() as IWorkerTimers;\r\n\r\n            return Timeout.workerTimers;\r\n        };\r\n    }\r\n\r\n    public static timers: () => IWorkerTimers = Timeout.loadWorkerTimers();\r\n\r\n    private static isCallNotification(message: TWorkerMessage): message is ICallNotification {\r\n        return (message as ICallNotification).method !== undefined && (message as ICallNotification).method === \"call\";\r\n    }\r\n\r\n    private static isClearResponse(message: TWorkerMessage): message is IClearResponse {\r\n        return (message as IClearResponse).error === null && typeof message.id === \"number\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ITurnStatusResponsePayload,\r\n    TurnStatusResponsePayload\r\n    } from \"../common.speech/ServiceMessages/TurnStatusPayload.js\";\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class TurnStatusReceivedEventArgs\r\n */\r\nexport class TurnStatusReceivedEventArgs {\r\n    private privTurnStatus: ITurnStatusResponsePayload;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} turnStatus - The JSON-encoded turn status message.\r\n     */\r\n    public constructor(turnStatus: string) {\r\n        this.privTurnStatus = TurnStatusResponsePayload.fromJSON(turnStatus);\r\n    }\r\n\r\n    /**\r\n     * Gets the interaction identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.interactionId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received interaction id.\r\n     */\r\n    public get interactionId(): any {\r\n        return this.privTurnStatus.interactionId;\r\n    }\r\n\r\n    /**\r\n     * Gets the conversation identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.conversationId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received conversation id.\r\n     */\r\n    public get conversationId(): any {\r\n        return this.privTurnStatus.conversationId;\r\n    }\r\n\r\n    /**\r\n     * Gets the received turn status code.\r\n     * @member TurnStatusReceivedEventArgs.prototype.statusCode\r\n     * @function\r\n     * @public\r\n     * @returns {number} the received turn status.\r\n     */\r\n    public get statusCode(): number {\r\n        return this.privTurnStatus.statusCode; // eslint-disable-line @typescript-eslint/no-unsafe-return\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PullAudioOutputStream } from \"./Audio/AudioOutputStream.js\";\r\n\r\ninterface IActivity {\r\n    conversation?: any;\r\n    id?: string;\r\n    replyToId?: string;\r\n    type?: string;\r\n    text?: string;\r\n    speak?: any;\r\n}\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class ActivityReceivedEventArgs\r\n */\r\nexport class ActivityReceivedEventArgs {\r\n    private privActivity: IActivity;\r\n    private privAudioStream: PullAudioOutputStream;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {any} activity - The activity..\r\n     */\r\n    public constructor(activity: any, audioStream?: PullAudioOutputStream) {\r\n        this.privActivity = activity as IActivity;\r\n        this.privAudioStream = audioStream;\r\n    }\r\n\r\n    /**\r\n     * Gets the received activity\r\n     * @member ActivityReceivedEventArgs.prototype.activity\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received activity.\r\n     */\r\n    public get activity(): any {\r\n        return this.privActivity;\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStream {\r\n        return this.privAudioStream;\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n/**\r\n * An enum that defines actions that can be taken on unknown language detection\r\n */\r\nexport enum OnUnknownAction {\r\n    RecognizeWithDefaultLanguage = \"RecognizeWithDefaultLanguage\",\r\n    None = \"None\"\r\n}\r\n\r\n/**\r\n * The on unknown configuration\r\n */\r\nexport interface OnUnknown {\r\n    /**\r\n     * The action to take when language is unknown\r\n     */\r\n    action?: OnUnknownAction;\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.slice(14, 15), 16);\n}\n\nvar _default = version;\nexports.default = _default;","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n/**\r\n * The segmentation mode.\r\n */\r\nexport enum SegmentationMode {\r\n    Normal = \"Normal\",\r\n    Disabled = \"Disabled\",\r\n    Custom = \"Custom\",\r\n    Semantic = \"Semantic\"\r\n}\r\n\r\n/**\r\n * Defines the segmentation configuration in the speech Context message\r\n */\r\nexport interface Segmentation {\r\n    /**\r\n     * The segmentation mode.\r\n     */\r\n    mode?: SegmentationMode;\r\n\r\n    /**\r\n     * The segmentation silence timeout in milliseconds.\r\n     */\r\n    segmentationSilenceTimeoutMs?: number;\r\n\r\n    /**\r\n     * The segmentation timeout after which a segmentation is forced,\r\n     * even if speaker is still talking without pause, in milliseconds.\r\n     */\r\n    segmentationForcedTimeoutMs?: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { RecognitionMode } from \"../common.speech/ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Connection } from \"./Connection.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs\r\n} from \"./Exports.js\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - An optional connection factory to use to generate the endpoint URIs, headers to set, etc...\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, connectionFactory?: IConnectionFactory) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, connectionFactory || new TranslationConnectionFactory(), speechConfig.tokenCredential);\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * TranslationRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechTranslationConfig: SpeechTranslationConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): TranslationRecognizer {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechTranslationConfigImpl.properties);\r\n\r\n        if (autoDetectSourceLanguageConfig.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined) === AutoDetectSourceLanguagesOpenRangeOptionName) {\r\n            speechTranslationConfigImpl.properties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        }\r\n        return new TranslationRecognizer(speechTranslationConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\r\n     * for single shot recognition like command or query. For long-running recognition,\r\n     * use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public onConnection(): void { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", { to: languages });\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./AudioSourceEvents.js\";\r\nexport * from \"./ConnectionEvents.js\";\r\nexport * from \"./ConnectionMessage.js\";\r\nexport * from \"./ConnectionOpenResponse.js\";\r\nexport * from \"./DeferralMap.js\";\r\nexport * from \"./DialogEvents.js\";\r\nexport * from \"./Error.js\";\r\nexport * from \"./Events.js\";\r\nexport * from \"./EventSource.js\";\r\nexport * from \"./Guid.js\";\r\nexport * from \"./IAudioSource.js\";\r\nexport * from \"./IConnection.js\";\r\nexport * from \"./IDetachable.js\";\r\nexport * from \"./IDictionary.js\";\r\nexport * from \"./IDisposable.js\";\r\nexport * from \"./IEventListener.js\";\r\nexport * from \"./IEventSource.js\";\r\nexport * from \"./IErrorMessages.js\";\r\nexport * from \"./ITimer.js\";\r\nexport * from \"./IWebsocketMessageFormatter.js\";\r\nexport * from \"./List.js\";\r\nexport * from \"./PlatformEvent.js\";\r\nexport * from \"./Promise.js\";\r\nexport * from \"./Queue.js\";\r\nexport * from \"./RawWebsocketMessage.js\";\r\nexport * from \"./RiffPcmEncoder.js\";\r\nexport * from \"./Stream.js\";\r\nexport { TranslationStatus } from \"../common.speech/TranslationStatus.js\";\r\nexport * from \"./ChunkedArrayBufferStream.js\";\r\nexport * from \"./IAudioDestination.js\";\r\nexport * from \"./Timeout.js\";\r\nexport * from \"./OCSPEvents.js\";\r\nexport * from \"./BackgroundError.js\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationRecognizerFactory,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IAuthentication,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, ConversationInfo, ConversationProperties, IConversation } from \"./IConversation.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Conversation implements IConversation {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get conversationId(): string;\r\n    public abstract get conversationInfo(): ConversationInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a conversation\r\n     * @param speechConfig\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        let conversationImpl: ConversationImpl;\r\n        let cb: Callback;\r\n        let err: Callback;\r\n        if (typeof arg2 === \"string\") {\r\n            conversationImpl = new ConversationImpl(speechConfig, arg2);\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        } else {\r\n            conversationImpl = new ConversationImpl(speechConfig);\r\n            cb = arg2;\r\n            err = arg3;\r\n            conversationImpl.createConversationAsync(\r\n                ((): void => {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }),\r\n                (error: any): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n        }\r\n        return conversationImpl;\r\n\r\n    }\r\n\r\n    /** Start a conversation. */\r\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a conversation. */\r\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Conversation. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class ConversationImpl extends Conversation implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a conversation impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        if (!id) {\r\n            // check the target language(s)\r\n            if (speechConfig.targetLanguages.length === 0) {\r\n                speechConfig.addTargetLanguage(this.privLanguage);\r\n            }\r\n\r\n            // check the profanity setting: speech and conversationTranslator should be in sync\r\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\r\n            if (!profanity) {\r\n                speechConfig.setProfanity(ProfanityOption.Masked);\r\n            }\r\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\r\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\r\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\r\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\r\n            if (hostNickname === undefined || hostNickname === null) {\r\n                hostNickname = \"Host\";\r\n            }\r\n            Contracts.throwIfNullOrTooLong(hostNickname, \"nickname\", 50);\r\n            Contracts.throwIfNullOrTooShort(hostNickname, \"nickname\", 2);\r\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\r\n\r\n        } else {\r\n            this.privConversationId = id;\r\n        }\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the conversation Id\r\n    public get conversationId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get conversationInfo(): ConversationInfo {\r\n        const convId: string = this.conversationId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: ConversationProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    public set conversationTranslator(conversationTranslator: ConversationTranslator) {\r\n        this.privConversationTranslator = conversationTranslator;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversationTranslator.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Create a new conversation as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new conversation as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this, this.privConfig);\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, conversationId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteConversationImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public endConversationImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.conversation = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const conversationInfo = this.conversationInfo;\r\n                conversationInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const conversationInfo = this.conversationInfo;\r\n        conversationInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel.js\";\r\n\r\n/**\r\n * @class AddedLmIntent\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AddedLmIntent {\r\n    public modelImpl: LanguageUnderstandingModelImpl;\r\n    public intentName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param modelImpl - The model.\r\n     * @param intentName - The intent name.\r\n     */\r\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\r\n        this.modelImpl = modelImpl;\r\n        this.intentName = intentName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IErrorMessages } from \"../common/Exports.js\";\r\n/**\r\n * HTTP request helper\r\n */\r\nexport interface IRequestOptions {\r\n    headers?: {[key: string]: string};\r\n    ignoreCache?: boolean;\r\n    timeout?: number;\r\n}\r\n\r\nexport interface IRestParams {\r\n    apiVersion: string;\r\n    authorization: string;\r\n    clientAppId: string;\r\n    contentTypeKey: string;\r\n    correlationId: string;\r\n    languageCode: string;\r\n    nickname: string;\r\n    profanity: string;\r\n    requestId: string;\r\n    roomId: string;\r\n    sessionToken: string;\r\n    subscriptionKey: string;\r\n    subscriptionRegion: string;\r\n    token: string;\r\n}\r\n\r\nexport class RestConfigBase {\r\n\r\n    public static get requestOptions(): IRequestOptions {\r\n        return RestConfigBase.privDefaultRequestOptions;\r\n    }\r\n\r\n    public static get configParams(): IRestParams {\r\n        return RestConfigBase.privDefaultParams;\r\n    }\r\n\r\n    public static get restErrors(): IErrorMessages {\r\n        return RestConfigBase.privRestErrors;\r\n    }\r\n\r\n    private static readonly privDefaultRequestOptions: IRequestOptions = {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n        },\r\n        ignoreCache: false,\r\n        timeout: 10000,\r\n    };\r\n\r\n    private static readonly privRestErrors: IErrorMessages = {\r\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n        invalidArgs: \"Required input not found: {arg}.\",\r\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n        invalidParticipantRequest: \"The requested participant was not found.\",\r\n        permissionDeniedConnect: \"Required credentials not found.\",\r\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n    };\r\n\r\n    private static readonly privDefaultParams: IRestParams = {\r\n        apiVersion: \"api-version\",\r\n        authorization: \"Authorization\",\r\n        clientAppId: \"X-ClientAppId\",\r\n        contentTypeKey: \"Content-Type\",\r\n        correlationId: \"X-CorrelationId\",\r\n        languageCode: \"language\",\r\n        nickname: \"nickname\",\r\n        profanity: \"profanity\",\r\n        requestId: \"X-RequestId\",\r\n        roomId: \"roomid\",\r\n        sessionToken: \"token\",\r\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n        token: \"X-CapitoToken\",\r\n    };\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private privAuthFetchEventid: string;\r\n\r\n    public constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.privAuthFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get authFetchEventid(): string {\r\n        return this.privAuthFetchEventid;\r\n    }\r\n}\r\n\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privServiceTag: string;\r\n    private privStatus: RecognitionCompletionStatus;\r\n    private privError: string;\r\n\r\n    public constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privStatus = status;\r\n        this.privError = error;\r\n        this.privServiceTag = serviceTag;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n\r\n    public get serviceTag(): string {\r\n        return this.privServiceTag;\r\n    }\r\n\r\n    public get status(): RecognitionCompletionStatus {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports.js\";\r\nimport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    RecognitionResult,\r\n    SpeechSynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: RecognitionResult | SpeechSynthesisResult): CancellationDetails {\r\n        let reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (result instanceof RecognitionResult && !!result.json) {\r\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json, 0); // Offset fixups are already done.\r\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\r\n        }\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new CancellationDetails(reason, result.errorDetails || EnumTranslation.implTranslateErrorDetails(errorCode), errorCode);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n    ALaw,\r\n    FLAC,\r\n    OPUS,\r\n    AMR_WB,\r\n    G722,\r\n}\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified format characteristics.\r\n     * @member AudioStreamFormat.getWaveFormat\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormat(samplesPerSecond: number, bitsPerSample: number, channels: number, format: AudioFormatTag): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\r\n        super();\r\n\r\n        let isWavFormat: boolean = true;\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n                isWavFormat = false;\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        if (isWavFormat) {\r\n            this.privHeader = new ArrayBuffer(44);\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(this.privHeader);\r\n\r\n            /* RIFF identifier */\r\n            this.setString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, 0, true);\r\n            /* RIFF type & Format */\r\n            this.setString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* audio format */\r\n            view.setUint16(20, this.formatTag, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channels, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.samplesPerSec, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.avgBytesPerSec, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n            /* bits per sample */\r\n            view.setUint16(34, this.bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.setString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, 0, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    /* eslint-disable */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { AvatarVideoFormat } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the talking avatar configuration.\r\n * @class AvatarConfig\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarConfig {\r\n    private privCustomized: boolean = false;\r\n    private privUseBuiltInVoice: boolean = false;\r\n    private privBackgroundColor: string;\r\n    private privBackgroundImage: URL;\r\n    private privRemoteIceServers: RTCIceServer[];\r\n\r\n    /**\r\n     * Defines the avatar character.\r\n     */\r\n    public character: string;\r\n    /**\r\n     * Defines the avatar style.\r\n     */\r\n    public style: string;\r\n    /**\r\n     * Defines the talking avatar output video format.\r\n     */\r\n    public videoFormat: AvatarVideoFormat;\r\n\r\n    /**\r\n     * Indicates if the talking avatar is customized.\r\n     */\r\n    public get customized(): boolean {\r\n        return this.privCustomized;\r\n    }\r\n\r\n    /**\r\n     * Sets if the talking avatar is customized.\r\n     */\r\n    public set customized(value: boolean) {\r\n        this.privCustomized = value;\r\n    }\r\n\r\n    /**\r\n     * Indicates whether to use built-in voice for custom avatar.\r\n     */\r\n    public get useBuiltInVoice(): boolean {\r\n        return this.privUseBuiltInVoice;\r\n    }\r\n\r\n    /**\r\n     * Sets whether to use built-in voice for custom avatar.\r\n     */\r\n    public set useBuiltInVoice(value: boolean) {\r\n        this.privUseBuiltInVoice = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the background color.\r\n     */\r\n    public get backgroundColor(): string {\r\n        return this.privBackgroundColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the background color.\r\n     */\r\n    public set backgroundColor(value: string) {\r\n        this.privBackgroundColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the background image.\r\n     */\r\n    public get backgroundImage(): URL {\r\n        return this.privBackgroundImage;\r\n    }\r\n\r\n    /**\r\n     * Sets the background image.\r\n     * @param {URL} value - The background image.\r\n     */\r\n    public set backgroundImage(value: URL) {\r\n        this.privBackgroundImage = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the remote ICE servers.\r\n     * @remarks This method is designed to be used internally in the SDK.\r\n     * @returns {RTCIceServer[]} The remote ICE servers.\r\n     */\r\n    public get remoteIceServers(): RTCIceServer[] {\r\n        return this.privRemoteIceServers;\r\n    }\r\n\r\n    /**\r\n     * Sets the remote ICE servers.\r\n     * @remarks Normally, the ICE servers are gathered from the PeerConnection,\r\n     * set this property to override the ICE servers. E.g., the ICE servers are\r\n     * different in client and server side.\r\n     * @param {RTCIceServer[]} value - The remote ICE servers.\r\n     */\r\n    public set remoteIceServers(value: RTCIceServer[]) {\r\n        this.privRemoteIceServers = value;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} character - The avatar character.\r\n     * @param {string} style - The avatar style.\r\n     * @param {AvatarVideoFormat} videoFormat - The talking avatar output video format.\r\n     */\r\n    public constructor(character: string, style: string, videoFormat: AvatarVideoFormat) {\r\n        Contracts.throwIfNullOrWhitespace(character, \"character\");\r\n        this.character = character;\r\n        this.style = style;\r\n        if (videoFormat === undefined) {\r\n            videoFormat = new AvatarVideoFormat();\r\n        }\r\n        this.videoFormat = videoFormat;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports.js\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents.js\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent(e: PlatformEvent): void {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError(statusCode: number): string {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IActivityPayloadResponse {\r\n    conversationId: string;\r\n    messageDataStreamType: number;\r\n    messagePayload: string | object;\r\n    version: number;\r\n}\r\n\r\nexport class ActivityPayloadResponse implements IActivityPayloadResponse {\r\n    private privActivityResponse: IActivityPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privActivityResponse = JSON.parse(json) as IActivityPayloadResponse;\r\n    }\r\n\r\n    public static fromJSON(json: string): ActivityPayloadResponse {\r\n        return new ActivityPayloadResponse(json);\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privActivityResponse.conversationId;\r\n    }\r\n\r\n    public get messageDataStreamType(): number {\r\n        return this.privActivityResponse.messageDataStreamType;\r\n    }\r\n\r\n    public get messagePayload(): string | object {\r\n        return this.privActivityResponse.messagePayload;\r\n    }\r\n\r\n    public get version(): number {\r\n        return this.privActivityResponse.version;\r\n    }\r\n}\r\n\r\nexport enum MessageDataStreamType {\r\n    None = 0,\r\n    TextToSpeechAudio = 1,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum AvatarEventTypes {\r\n    SwitchedToSpeaking = \"SwitchedToSpeaking\",\r\n    SwitchedToIdle = \"SwitchedToIdle\",\r\n    SessionClosed = \"SessionClosed\",\r\n}\r\n\r\n/**\r\n * Defines content for talking avatar events.\r\n * @class AvatarEventArgs\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarEventArgs {\r\n    private privType: AvatarEventTypes;\r\n    private privOffset: number;\r\n    private privDescription: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} description - The description of the event.\r\n     */\r\n    public constructor(audioOffset: number, description: string) {\r\n        this.privOffset = audioOffset;\r\n        this.privDescription = description;\r\n    }\r\n\r\n    /**\r\n     * The type of the event.\r\n     * @public\r\n     * @returns {AvatarEventTypes} The type of the event.\r\n     */\r\n    public get type(): AvatarEventTypes {\r\n        return this.privType;\r\n    }\r\n\r\n    /**\r\n     * The time offset associated with this event.\r\n     * @public\r\n     * @returns {number} The time offset associated with this event.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * The description of the event.\r\n     * @public\r\n     * @returns {string} The description of the event.\r\n     */\r\n    public get description(): string {\r\n        return this.privDescription;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class QueryParameterNames {\r\n    public static BotId: string = \"botid\";\r\n    public static CustomSpeechDeploymentId: string = \"cid\";\r\n    public static CustomVoiceDeploymentId: string = \"deploymentId\";\r\n    public static EnableAudioLogging: string = \"storeAudio\";\r\n    public static EnableLanguageId: string = \"lidEnabled\";\r\n    public static EnableWordLevelTimestamps: string = \"wordLevelTimestamps\";\r\n    public static EndSilenceTimeoutMs: string = \"endSilenceTimeoutMs\";\r\n    public static SegmentationSilenceTimeoutMs: string = \"segmentationSilenceTimeoutMs\";\r\n    public static SegmentationMaximumTimeMs: string = \"segmentationMaximumTimeMs\";\r\n    public static SegmentationStrategy: string = \"segmentationStrategy\";\r\n    public static Format: string = \"format\";\r\n    public static InitialSilenceTimeoutMs: string = \"initialSilenceTimeoutMs\";\r\n    public static Language: string = \"language\";\r\n    public static Profanity: string = \"profanity\";\r\n    public static RequestBotStatusMessages: string = \"enableBotMessageStatus\";\r\n    public static StableIntermediateThreshold: string = \"stableIntermediateThreshold\";\r\n    public static StableTranslation: string = \"stableTranslation\";\r\n    public static TestHooks: string = \"testhooks\";\r\n    public static Postprocessing: string = \"postprocessing\";\r\n    public static CtsMeetingId: string = \"meetingId\";\r\n    public static CtsDeviceId: string = \"deviceId\";\r\n    public static CtsIsParticipant: string = \"isParticipant\";\r\n    public static EnableAvatar: string = \"enableTalkingAvatar\";\r\n}\r\n","export { CommandResponsePayload } from \"./CommandResponsePayload.js\";\r\nexport { IParticipantsListPayloadResponse, IParticipantPayloadResponse, ParticipantsListPayloadResponse, ParticipantPayloadResponse } from \"./ParticipantResponsePayload.js\";\r\nexport { ITranslationResponsePayload, SpeechResponsePayload, TextResponsePayload } from \"./TranslationResponsePayload.js\";\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n/**\r\n * Result type\r\n */\r\nexport enum Mode {\r\n    None = \"None\",\r\n    Always = \"Always\"\r\n}\r\n\r\n/**\r\n * Interim results\r\n */\r\nexport interface InterimResults {\r\n    /**\r\n     * The mode for interim results\r\n     */\r\n    mode?: Mode;\r\n\r\n    /**\r\n     * If true, intermediate results only contain stable parts\r\n     */\r\n    stableOnly?: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"../common/Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private static privTokenPrefix: string = \"Bearer \";\r\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    public constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.privFetchCallback = fetchCallback;\r\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class HeaderNames {\r\n    public static AuthKey: string = \"Ocp-Apim-Subscription-Key\";\r\n    public static Authorization: string = \"Authorization\";\r\n    public static SpIDAuthKey: string = \"Apim-Subscription-Id\";\r\n    public static ConnectionId: string = \"X-ConnectionId\";\r\n    public static ContentType: string = \"Content-Type\";\r\n    public static CustomCommandsAppId: string = \"X-CommandsAppId\";\r\n    public static Path: string = \"Path\";\r\n    public static RequestId: string = \"X-RequestId\";\r\n    public static RequestStreamId: string = \"X-StreamId\";\r\n    public static RequestTimestamp: string = \"X-Timestamp\";\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the boundary type of speech synthesis boundary event.\r\n * @class SpeechSynthesisBoundaryType\r\n * Added in version 1.21.0\r\n */\r\nexport enum SpeechSynthesisBoundaryType {\r\n    /**\r\n     * Indicates the boundary text is a word.\r\n     * @member SpeechSynthesisBoundaryType.Word\r\n     */\r\n    Word = \"WordBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a punctuation.\r\n     * @member SpeechSynthesisBoundaryType.Punctuation\r\n     */\r\n    Punctuation = \"PunctuationBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a sentence.\r\n     * @member SpeechSynthesisBoundaryType.Sentence\r\n     */\r\n    Sentence = \"SentenceBoundary\"\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport enum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n    TooManyRequests,\r\n    BadRequest,\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport { IRestResponse } from \"../common.browser/RestMessageAdapter.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SpeechSynthesisAdapter,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    marshalPromiseToCallbacks,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SynthesisVoicesResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer extends Synthesizer {\r\n    protected audioConfig: AudioConfig;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for bookmark reached events\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.bookmarkReached\r\n     * @function\r\n     * @public\r\n     */\r\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for viseme received event\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.visemeReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig | null) {\r\n        super(speechConfig);\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig | null): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Get list of synthesis voices available.\r\n     * The task returns the synthesis voice result.\r\n     * @member SpeechSynthesizer.prototype.getVoicesAsync\r\n     * @function\r\n     * @async\r\n     * @public\r\n     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\r\n     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\r\n     */\r\n    public async getVoicesAsync(locale: string = \"\"): Promise<SynthesisVoicesResult> {\r\n        return this.getVoices(locale);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SpeechSynthesisAdapter(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return new SynthesisRestAdapter(synthesizerConfig, authentication);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat]\r\n        );\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* eslint-disable no-empty */\r\n                this.adapterSpeak().catch((): void => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* eslint-disable no-empty-function */\r\n            this.adapterSpeak().catch((): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* eslint-disable no-empty */\r\n            this.dispose(true).catch((): void => { });\r\n        }\r\n    }\r\n\r\n    protected async getVoices(locale: string): Promise<SynthesisVoicesResult> {\r\n        const requestId = createNoDashGuid();\r\n        const response: IRestResponse = await this.privRestAdapter.getVoicesList(requestId);\r\n        if (response.ok && Array.isArray(response.json)) {\r\n            let json = response.json;\r\n            if (!!locale && locale.length > 0) {\r\n                json = json.filter((item: { Locale: string }): boolean => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase() );\r\n            }\r\n            return new SynthesisVoicesResult(requestId, json, undefined);\r\n        } else {\r\n            return new SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);\r\n        }\r\n   }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName, SpeakerResponse } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"./Exports.js\";\r\n\r\nexport enum SpeakerRecognitionResultType {\r\n    Verify,\r\n    Identify\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class SpeakerRecognitionResult\r\n */\r\nexport class SpeakerRecognitionResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privProfileId: string;\r\n    private privScore: number;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(response: SpeakerResponse, resultReason: ResultReason = ResultReason.RecognizedSpeaker, cancellationErrorCode: CancellationErrorCode = CancellationErrorCode.NoError, errorDetails: string = \"\") {\r\n        this.privProperties = new PropertyCollection();\r\n        const resultType = response.scenario === \"TextIndependentIdentification\" ? SpeakerRecognitionResultType.Identify : SpeakerRecognitionResultType.Verify;\r\n        this.privReason = resultReason;\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (resultType === SpeakerRecognitionResultType.Identify) {\r\n                this.privProfileId = response.identificationResult.identifiedProfile.profileId;\r\n                this.privScore = response.identificationResult.identifiedProfile.score;\r\n                this.privReason = ResultReason.RecognizedSpeakers;\r\n            } else {\r\n                this.privScore = response.verificationResult.score;\r\n                if (response.verificationResult.recognitionResult.toLowerCase() !== \"accept\") {\r\n                    this.privReason = ResultReason.NoMatch;\r\n                }\r\n                if (response.verificationResult.profileId !== undefined && response.verificationResult.profileId !== \"\") {\r\n                    this.privProfileId = response.verificationResult.profileId;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = errorDetails;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[cancellationErrorCode]);\r\n        }\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, JSON.stringify(response));\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get profileId(): string {\r\n        return this.privProfileId;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public get score(): number {\r\n        return this.privScore;\r\n    }\r\n}\r\n\r\n/**\r\n * @class SpeakerRecognitionCancellationDetails\r\n */\r\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\r\n     * @member SpeakerRecognitionCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerRecognitionResult} result - The result that was canceled.\r\n     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: SpeakerRecognitionResult): SpeakerRecognitionCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IEventListener } from \"./IEventListener.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n    private privConsoleListener: IDetachable = undefined;\r\n\r\n    public constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent(event: TEvent): void {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\r\n        return this.attach((e: TEvent): void => listener.onEvent(e));\r\n    }\r\n\r\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a RecognitionErrorEvent.\r\n * @class ConversationTranscriptionCanceledEventArgs\r\n */\r\nexport class ConversationTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { RecognitionEventArgs } from \"../Exports.js\";\r\nimport { ConversationTranslationResult } from \"./Exports.js\";\r\n\r\nexport class ConversationTranslationEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranslationResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranslationResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranslationResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @returns {ConversationTranslationResult} the recognition result.\r\n     */\r\n    public get result(): ConversationTranslationResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication.js\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    public constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private privAudioSourceId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privAudioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n}\r\n\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport { ConnectionRedirectEvent, Events, IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { AuthInfo, IConnectionFactory, RecognizerConfig } from \"./Exports.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): Promise<IConnection>;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\r\n        //        including e.g. the path portion, or even as a substring of other query parameters\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n    public static async getRedirectUrlFromEndpoint(endpoint: string): Promise<string> {\r\n\r\n        let redirectUrlString: string;\r\n\r\n        if (typeof window !== \"undefined\" && typeof window.fetch !== \"undefined\") {\r\n            // make a rest call to the endpoint to get the redirect url\r\n            const redirectUrl: URL = new URL(endpoint);\r\n            redirectUrl.protocol = \"https:\";\r\n            redirectUrl.port = \"443\";\r\n            const params: URLSearchParams = redirectUrl.searchParams;\r\n            params.append(\"GenerateRedirectResponse\", \"true\");\r\n\r\n            const redirectedUrlString: string = redirectUrl.toString();\r\n            Events.instance.onEvent(new ConnectionRedirectEvent(\"\", redirectedUrlString, undefined, \"ConnectionFactoryBase: redirectUrl request\"));\r\n\r\n            const redirectResponse: Response = await fetch(redirectedUrlString);\r\n\r\n            if (redirectResponse.status !== 200) {\r\n                return endpoint;\r\n            }\r\n\r\n            // Fix: properly read the response text\r\n            redirectUrlString = await redirectResponse.text();\r\n        } else {\r\n            redirectUrlString = endpoint;\r\n        }\r\n\r\n        Events.instance.onEvent(new ConnectionRedirectEvent(\"\", redirectUrlString, endpoint, \"ConnectionFactoryBase: redirectUrlString\"));\r\n\r\n        try {\r\n            // Validate the URL before returning\r\n            return new URL(redirectUrlString.trim()).toString();\r\n        } catch (error) {\r\n            return endpoint; // Return original endpoint if the redirect URL is invalid\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode(actualAudioFrame: Float32Array): ArrayBuffer {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM(view: DataView, offset: number, input: Float32Array): void {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame(\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array {\r\n\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IntentRecognitionResult, RecognitionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result event arguments.\r\n * @class\r\n */\r\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: IntentRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param result - The result of the intent recognition.\r\n     * @param offset - The offset.\r\n     * @param sessionId - The session id.\r\n     */\r\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Represents the intent recognition result.\r\n     * @member IntentRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\r\n     */\r\n    public get result(): IntentRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    SessionEventArgs,\r\n    } from \"../../sdk/Exports.js\";\r\n// import { ConversationClient } from \"./ConversationConnection\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\n\r\n/**\r\n * Internal conversation data\r\n */\r\nexport interface IInternalConversation {\r\n    // the token to use for connecting to the Speech Service\r\n    cognitiveSpeechAuthToken: string;\r\n    // the region to use for connecting to the Speech Service\r\n    cognitiveSpeechRegion: string;\r\n    // the unique id of the user who started or joined the Conversation\r\n    participantId: string;\r\n    // a descriptive name for the Conversation\r\n    name: string;\r\n    // a descriptive name for the Conversation\r\n    description: string;\r\n    // the speech model ID for custom speech\r\n    speechModel: string;\r\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\r\n    modalities: number;\r\n    // ?\r\n    isApproved: boolean;\r\n    // the mute flag has been set at conversation level and only the host can speak\r\n    isMuted: boolean;\r\n    // the 5 character conversation Id\r\n    roomId: string;\r\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\r\n    avatar: string;\r\n    // the token to use when calling the websocket\r\n    token: string;\r\n    // used for tracking the session and help with troubleshooting problems in the logs\r\n    correlationId: string;\r\n    // extracted from the headers\r\n    requestId: string;\r\n    // set programmatically\r\n    isHost: boolean;\r\n}\r\n\r\n/**\r\n * The user who is participating in the conversation.\r\n */\r\nexport interface IInternalParticipant {\r\n    avatar?: string;\r\n    displayName?: string;\r\n    id?: string;\r\n    isHost?: boolean;\r\n    isMuted?: boolean;\r\n    isUsingTts?: boolean;\r\n    profanity?: boolean;\r\n    preferredLanguage?: string;\r\n    translateToLanguages?: string[];\r\n    voice?: string;\r\n}\r\n\r\n/** Users participating in the conversation */\r\nexport class InternalParticipants {\r\n\r\n    public constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add or update a participant\r\n     * @param value\r\n     */\r\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        const exists: number = this.getParticipantIndex(value.id);\r\n        if (exists > -1) {\r\n            this.participants.splice(exists, 1, value);\r\n        } else {\r\n            this.participants.push(value);\r\n        }\r\n\r\n        // ensure it was added ok\r\n        return this.getParticipant(value.id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant's position in the participants list.\r\n     * @param id\r\n     */\r\n    public getParticipantIndex(id: string): number {\r\n        return this.participants.findIndex((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant by id.\r\n     * @param id\r\n     */\r\n    public getParticipant(id: string): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Remove a participant from the participants list.\r\n     */\r\n    public deleteParticipant(id: string): void {\r\n        this.participants = this.participants.filter((p: IInternalParticipant): boolean => p.id !== id);\r\n    }\r\n\r\n    /**\r\n     * Helper to return the conversation host.\r\n     */\r\n    public get host(): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.isHost === true );\r\n    }\r\n\r\n    /**\r\n     * Helper to return the current user.\r\n     */\r\n    public get me(): IInternalParticipant {\r\n        return this.getParticipant(this.meId);\r\n    }\r\n}\r\n\r\n/**\r\n * Recognizer for handling Conversation Translator websocket messages\r\n */\r\nexport interface ConversationRecognizer {\r\n    isDisposed(): boolean;\r\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\r\n    cancelSpeech?: () => Promise<void>;\r\n    close?: () => Promise<void>;\r\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    connected?: (e: ConnectionEventArgs) => void;\r\n    disconnected?: (e: ConnectionEventArgs) => void;\r\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\r\n}\r\n\r\n/**\r\n * Error message returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseErrorMessage {\r\n    code: string;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Error returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseError {\r\n    error: IConversationResponseErrorMessage;\r\n}\r\n\r\n/**\r\n * Base message command\r\n */\r\nexport interface IClientMessage {\r\n    type: any;\r\n}\r\n\r\n/**\r\n * Command message\r\n */\r\nexport interface ICommandMessage extends IClientMessage {\r\n    command?: string;\r\n}\r\n\r\n/**\r\n * Text message command\r\n */\r\nexport interface IInstantMessageCommand extends ICommandMessage {\r\n    roomId: string;\r\n    nickname?: string;\r\n    participantId: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Lock command\r\n */\r\nexport interface ILockConversationCommand extends ICommandMessage {\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId: string; // host - incoming ws\r\n    roomid: string;\r\n    value: boolean;\r\n}\r\n\r\n/**\r\n * Mute all command\r\n */\r\nexport interface IMuteAllCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;  // incoming ws\r\n    participantId: string; // host\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Mute participant command\r\n */\r\nexport interface IMuteCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;\r\n    participantId: string; // participant\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Remove participant command\r\n */\r\nexport interface IEjectParticipantCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string; // participant\r\n}\r\n\r\n/**\r\n * Change nickname command\r\n */\r\nexport interface IChangeNicknameCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string;\r\n    nickname: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * List of command message types\r\n */\r\nexport const ConversationTranslatorMessageTypes = {\r\n    command: \"command\",\r\n    final: \"final\",\r\n    info: \"info\",\r\n    instantMessage: \"instant_message\",\r\n    keepAlive: \"keep_alive\",\r\n    partial: \"partial\",\r\n    participantCommand: \"participant_command\",\r\n    translatedMessage: \"translated_message\"\r\n};\r\n\r\n/**\r\n * List of command types\r\n */\r\nexport const ConversationTranslatorCommandTypes = {\r\n    changeNickname: \"ChangeNickname\",\r\n    disconnectSession: \"DisconnectSession\",\r\n    ejectParticipant: \"EjectParticipant\",\r\n    instant_message: \"instant_message\",\r\n    joinSession: \"JoinSession\",\r\n    leaveSession: \"LeaveSession\",\r\n    participantList: \"ParticipantList\",\r\n    roomExpirationWarning: \"RoomExpirationWarning\",\r\n    setLockState: \"SetLockState\",\r\n    setMute: \"SetMute\",\r\n    setMuteAll: \"SetMuteAll\",\r\n    setProfanityFiltering: \"SetProfanityFiltering\",\r\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\r\n    setUseTTS: \"SetUseTTS\"\r\n};\r\n\r\n/**\r\n * HTTP response helper\r\n */\r\nexport interface IResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PropertyId, SpeechSynthesizer } from \"../sdk/Exports.js\";\r\n\r\n/**\r\n * Represents the JSON used in the synthesis.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SynthesisContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n\r\n    /**\r\n     * Adds a section to the synthesis.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | object): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio output format for synthesis context generation.\r\n     * @param format {AudioOutputFormatImpl} the output format\r\n     */\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        return JSON.stringify(this.privContext);\r\n    }\r\n\r\n    public setSynthesisSection(speechSynthesizer: SpeechSynthesizer): void {\r\n        const synthesisSection: ISynthesisSection = this.buildSynthesisContext(speechSynthesizer);\r\n        this.setSection(\"synthesis\", synthesisSection);\r\n    }\r\n\r\n    private buildSynthesisContext(speechSynthesizer: SpeechSynthesizer): ISynthesisSection {\r\n        return {\r\n            audio: {\r\n                metadataOptions: {\r\n                    bookmarkEnabled: (!!speechSynthesizer?.bookmarkReached),\r\n                    punctuationBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestPunctuationBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                    sentenceBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestSentenceBoundary, false),\r\n                    sessionEndEnabled: true,\r\n                    visemeEnabled: (!!speechSynthesizer?.visemeReceived),\r\n                    wordBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestWordBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                },\r\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n            },\r\n            language: {\r\n                autoDetection: speechSynthesizer?.autoDetectSourceLanguage\r\n            }\r\n        } as ISynthesisSection;\r\n    }\r\n}\r\n\r\ninterface ISynthesisSection {\r\n    audio: {\r\n        outputFormat: string;\r\n        metadataOptions: {\r\n            bookmarkEnabled: boolean;\r\n            wordBoundaryEnabled: string;\r\n            punctuationBoundaryEnabled: string;\r\n            visemeEnabled: boolean;\r\n            sentenceBoundaryEnabled: string;\r\n            sessionEndEnabled: boolean;\r\n        };\r\n    };\r\n    language: {\r\n        autoDetection: boolean;\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class OCSPEvent extends PlatformEvent {\r\n    private privSignature: string;\r\n\r\n    public constructor(eventName: string, eventType: EventType, signature: string) {\r\n        super(eventName, eventType);\r\n\r\n        this.privSignature = signature;\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheMissEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheMissEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateNeededEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateNeededEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateCompleteEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateCompleteEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPStapleReceivedEvent extends OCSPEvent {\r\n    public constructor() {\r\n        super(\"OCSPStapleReceivedEvent\", EventType.Debug, \"\");\r\n    }\r\n}\r\n\r\nexport class OCSPWSUpgradeStartedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPWSUpgradeStartedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryExpiredEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n\r\n    public constructor(serialNumber: string, expireTime: number) {\r\n        super(\"OCSPCacheEntryExpiredEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheEntryNeedsRefreshEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privStartTime = startTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheHitEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n    private privExpireTimeString: string;\r\n    private privStartTimeString: string;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheHitEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privExpireTimeString = new Date(expireTime).toLocaleDateString();\r\n        this.privStartTime = startTime;\r\n        this.privStartTimeString = new Date(startTime).toLocaleTimeString();\r\n    }\r\n}\r\n\r\nexport class OCSPVerificationFailedEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPVerificationFailedEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheFetchErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheFetchErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPResponseRetrievedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPResponseRetrievedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheUpdateErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IPrimaryLanguage {\r\n    Language: string;\r\n    Confidence: string;\r\n}\r\n\r\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\r\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\r\n\r\n    private constructor(json: string, baseOffset: number = 0) {\r\n        this.privSimpleSpeechPhrase = JSON.parse(json) as ISimpleSpeechPhrase;\r\n        this.privSimpleSpeechPhrase.RecognitionStatus = this.mapRecognitionStatus(this.privSimpleSpeechPhrase.RecognitionStatus); // RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n        this.updateOffset(baseOffset);\r\n    }\r\n\r\n    public static fromJSON(json: string, baseOffset: number): SimpleSpeechPhrase {\r\n        return new SimpleSpeechPhrase(json, baseOffset);\r\n    }\r\n\r\n    private updateOffset(baseOffset: number): void {\r\n        this.privSimpleSpeechPhrase.Offset += baseOffset;\r\n    }\r\n\r\n    public asJson(): string {\r\n        const jsonObj = { ...this.privSimpleSpeechPhrase };\r\n        // Convert the enum value to its string representation for serialization purposes.\r\n        return JSON.stringify({\r\n            ...jsonObj,\r\n            RecognitionStatus: RecognitionStatus[jsonObj.RecognitionStatus] as keyof typeof RecognitionStatus\r\n        });\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get DisplayText(): string {\r\n        return this.privSimpleSpeechPhrase.DisplayText;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSimpleSpeechPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSimpleSpeechPhrase.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSimpleSpeechPhrase.SpeakerId;\r\n    }\r\n\r\n    private mapRecognitionStatus(status: any): RecognitionStatus {\r\n        if (typeof status === \"string\") {\r\n            return RecognitionStatus[status as keyof typeof RecognitionStatus];\r\n        } else if (typeof status === \"number\") {\r\n            return status;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"../../sdk/Exports.js\";\r\n\r\nexport enum MetadataType {\r\n    WordBoundary = \"WordBoundary\",\r\n    Bookmark = \"Bookmark\",\r\n    Viseme = \"Viseme\",\r\n    SentenceBoundary = \"SentenceBoundary\",\r\n    SessionEnd = \"SessionEnd\",\r\n    AvatarSignal = \"TalkingAvatarSignal\",\r\n}\r\n\r\nexport interface ISynthesisMetadata {\r\n    Type: MetadataType;\r\n    Data: {\r\n        Offset: number;\r\n        Duration: number;\r\n        text: {\r\n            Text: string;\r\n            Length: number;\r\n            BoundaryType: SpeechSynthesisBoundaryType;\r\n        };\r\n        Bookmark: string;\r\n        VisemeId: number;\r\n        AnimationChunk: string;\r\n        IsLastAnimation: boolean;\r\n        Name: string;\r\n    };\r\n}\r\n\r\n// audio.metadata\r\nexport interface ISynthesisAudioMetadata {\r\n    Metadata: ISynthesisMetadata[];\r\n}\r\n\r\nexport class SynthesisAudioMetadata implements ISynthesisAudioMetadata {\r\n    private privSynthesisAudioMetadata: ISynthesisAudioMetadata;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisAudioMetadata = JSON.parse(json) as ISynthesisAudioMetadata;\r\n    }\r\n\r\n    public static fromJSON(json: string): SynthesisAudioMetadata {\r\n        return new SynthesisAudioMetadata(json);\r\n    }\r\n\r\n    public get Metadata(): ISynthesisMetadata[] {\r\n        return this.privSynthesisAudioMetadata.Metadata;\r\n    }\r\n}\r\n","'use strict'\n/* global fetch, btoa, Headers */\nconst core = require('./core')\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError)\n    }\n\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.status\n    this.res = res\n    this.json = res.json.bind(res)\n    this.text = res.text.bind(res)\n    this.arrayBuffer = res.arrayBuffer.bind(res)\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n    // match Node.js headers object\n    this.headers = {}\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  let parsed = new URL(_url)\n\n  if (!headers) headers = {}\n  if (parsed.username) {\n    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password)\n    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search)\n  }\n  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n\n  if (body) {\n    if (body instanceof ArrayBuffer ||\n      ArrayBuffer.isView(body) ||\n      typeof body === 'string'\n    ) {\n      // noop\n    } else if (typeof body === 'object') {\n      body = JSON.stringify(body)\n      headers['Content-Type'] = 'application/json'\n    } else {\n      throw new Error('Unknown body type.')\n    }\n  }\n\n  _headers = new Headers({ ...(headers || {}), ..._headers })\n\n  const resp = await fetch(parsed, { method, headers: _headers, body })\n  resp.statusCode = resp.status\n\n  if (!statusCodes.has(resp.status)) {\n    throw new StatusError(resp)\n  }\n\n  if (encoding === 'json') return resp.json()\n  else if (encoding === 'buffer') return resp.arrayBuffer()\n  else if (encoding === 'string') return resp.text()\n  else return resp\n}\n\nmodule.exports = core(mkrequest)\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../common/Error.js\";\r\nimport { DialogServiceTurnState } from \"./DialogServiceTurnState.js\";\r\n\r\nexport class DialogServiceTurnStateManager {\r\n    private privTurnMap: Map<string, DialogServiceTurnState>;\r\n\r\n    public constructor() {\r\n        this.privTurnMap = new Map<string, DialogServiceTurnState>();\r\n        return;\r\n    }\r\n\r\n    public StartTurn(id: string): DialogServiceTurnState {\r\n        if (this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: There is already a turn with id:\" + id);\r\n        }\r\n        const turnState: DialogServiceTurnState = new DialogServiceTurnState(this, id);\r\n        this.privTurnMap.set(id, turnState);\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public GetTurn(id: string): DialogServiceTurnState {\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public CompleteTurn(id: string): DialogServiceTurnState {\r\n        if (!this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: Received turn end for an unknown turn id:\" + id);\r\n        }\r\n        const turnState = this.privTurnMap.get(id);\r\n        turnState.complete();\r\n        this.privTurnMap.delete(id);\r\n        return turnState;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { Queue } from \"./Queue.js\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read(): Promise<IStreamChunk<TBuffer>> {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then(async (streamChunk: IStreamChunk<TBuffer>): Promise<IStreamChunk<TBuffer>> => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n    public readEnded(): void {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed(): void {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport {\r\n    TokenCredential\r\n} from \"@azure/core-auth\";\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport { RecognitionMode } from \"../common.speech/ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    protected tokenCredential?: TokenCredential;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     * @param {PropertyCollection} properties - A set of properties to set on the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - The factory class used to create a custom IConnection for the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory, tokenCredential?: TokenCredential) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.tokenCredential = tokenCredential;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuth(this.privProperties, this.tokenCredential),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuth(properties: PropertyCollection, tokenCredential?: TokenCredential): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        if (subscriptionKey && subscriptionKey !== \"\") {\r\n            return new CognitiveSubscriptionKeyAuthentication(subscriptionKey);\r\n        }\r\n\r\n        if (tokenCredential) {\r\n            return new CognitiveTokenAuthentication(\r\n                async (): Promise<string> => {\r\n                    try {\r\n                        const tokenResponse = await tokenCredential.getToken(\"https://cognitiveservices.azure.com/.default\");\r\n                        return tokenResponse?.token ?? \"\";\r\n                    } catch (err) {\r\n                        throw err;\r\n                    }\r\n                },\r\n                async (): Promise<string> => {\r\n                    try {\r\n                        const tokenResponse = await tokenCredential.getToken(\"https://cognitiveservices.azure.com/.default\");\r\n                        return tokenResponse?.token ?? \"\";\r\n                    } catch (err) {\r\n                        throw err;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n\r\n        return new CognitiveTokenAuthentication(\r\n            (): Promise<string> => {\r\n                const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                return Promise.resolve(authorizationToken);\r\n            },\r\n            (): Promise<string> => {\r\n                const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                return Promise.resolve(authorizationToken);\r\n            }\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeakerRecognitionResult,\r\n    SpeechRecognitionResult,\r\n    OutputFormat\r\n} from \"../sdk/Exports.js\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation.js\";\r\nimport {\r\n    AgentConfig,\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type,\r\n    OutputFormatPropertyName\r\n} from \"./Exports.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\nimport { Segmentation, SegmentationMode } from \"./ServiceMessages/PhraseDetection/Segmentation.js\";\r\nimport { CustomLanguageMappingEntry, PhraseDetectionContext, RecognitionMode } from \"./ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\nimport { NextAction as NextTranslationAction } from \"./ServiceMessages/Translation/OnSuccess.js\";\r\nimport { Mode } from \"./ServiceMessages/Translation/InterimResults.js\";\r\nimport { LanguageIdDetectionMode, LanguageIdDetectionPriority } from \"./ServiceMessages/LanguageId/LanguageIdContext.js\";\r\nimport { NextAction as NextLangaugeIdAction } from \"./ServiceMessages/LanguageId/OnSuccess.js\";\r\nimport { OnUnknownAction } from \"./ServiceMessages/LanguageId/OnUnknown.js\";\r\nimport { ResultType } from \"./ServiceMessages/PhraseOutput/InterimResults.js\";\r\nimport { PhraseResultOutputType } from \"./ServiceMessages/PhraseOutput/PhraseResults.js\";\r\nimport { NextAction as NextPhraseDetectionAction } from \"./ServiceMessages/PhraseDetection/OnSuccess.js\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    private privAverageBytesPerMs: number = 0;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privDiarizationSessionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n    protected privEnableSpeakerId: boolean = false;\r\n    protected privExpectContentAssessmentResponse: boolean = false;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        const webWorkerLoadType: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n            }\r\n            if (typeof globalThis !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = globalThis.setTimeout.bind(globalThis);\r\n            }\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.privEnableSpeakerId) {\r\n            this.privDiarizationSessionId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    protected setTranslationJson(): void {\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            const languages = targetLanguages.split(\",\");\r\n            const translationVoice: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n            const categoryId: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationCategoryId, undefined);\r\n\r\n            const action = (translationVoice !== undefined) ? NextTranslationAction.Synthesize : NextTranslationAction.None;\r\n\r\n            this.privSpeechContext.getContext().translation = {\r\n                onPassthrough: { action },  // Add onPassthrough with same action\r\n                onSuccess: { action },\r\n                output: {\r\n                    includePassThroughResults: true,  // Explicitly set pass-through results\r\n                    interimResults: { mode: Mode.Always }\r\n                },\r\n                targetLanguages: languages,\r\n            };\r\n\r\n            // Add category if specified\r\n            if (categoryId !== undefined) {\r\n                this.privSpeechContext.getContext().translation.category = categoryId;\r\n            }\r\n\r\n            if (translationVoice !== undefined) {\r\n                const languageToVoiceMap: { [key: string]: string } = {};\r\n                for (const lang of languages) {\r\n                    languageToVoiceMap[lang] = translationVoice;\r\n                }\r\n                this.privSpeechContext.getContext().synthesis = {\r\n                    defaultVoices: languageToVoiceMap\r\n                };\r\n            }\r\n\r\n            // Configure phrase detection for translation\r\n            const phraseDetection = this.privSpeechContext.getContext().phraseDetection || {};\r\n            phraseDetection.onSuccess = { action: NextPhraseDetectionAction.Translate };\r\n            phraseDetection.onInterim = { action: NextPhraseDetectionAction.Translate };\r\n            this.privSpeechContext.getContext().phraseDetection = phraseDetection;\r\n        }\r\n    }\r\n\r\n    protected setSpeechSegmentationTimeoutJson(): void {\r\n        const speechSegmentationSilenceTimeoutMs: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\r\n        const speechSegmentationMaximumTimeMs: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationMaximumTimeMs, undefined);\r\n        const speechSegmentationStrategy: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationStrategy, undefined);\r\n        const segmentation: Segmentation = {\r\n            mode: SegmentationMode.Normal,\r\n            segmentationForcedTimeoutMs: 0,\r\n            segmentationSilenceTimeoutMs: 0,\r\n        };\r\n\r\n        let configuredSegment = false;\r\n\r\n        if (speechSegmentationStrategy !== undefined) {\r\n            configuredSegment = true;\r\n            let segMode: SegmentationMode = SegmentationMode.Normal;\r\n            switch (speechSegmentationStrategy.toLowerCase()) {\r\n                case \"default\":\r\n                    break;\r\n                case \"time\":\r\n                    segMode = SegmentationMode.Custom;\r\n                    break;\r\n                case \"semantic\":\r\n                    segMode = SegmentationMode.Semantic;\r\n                    break;\r\n            }\r\n\r\n            segmentation.mode = segMode;\r\n        }\r\n\r\n        if (speechSegmentationSilenceTimeoutMs !== undefined) {\r\n            configuredSegment = true;\r\n            const segmentationSilenceTimeoutMs: number = parseInt(speechSegmentationSilenceTimeoutMs, 10);\r\n            segmentation.mode = SegmentationMode.Custom;\r\n            segmentation.segmentationSilenceTimeoutMs = segmentationSilenceTimeoutMs;\r\n        }\r\n\r\n        if (speechSegmentationMaximumTimeMs !== undefined) {\r\n            configuredSegment = true;\r\n            const segmentationMaximumTimeMs: number = parseInt(speechSegmentationMaximumTimeMs, 10);\r\n            segmentation.mode = SegmentationMode.Custom;\r\n            segmentation.segmentationForcedTimeoutMs = segmentationMaximumTimeMs;\r\n        }\r\n\r\n        if (configuredSegment) {\r\n            const phraseDetection: PhraseDetectionContext = this.privSpeechContext.getContext().phraseDetection || {};\r\n            phraseDetection.mode = this.recognitionMode;\r\n\r\n            switch (this.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    phraseDetection.conversation = phraseDetection.conversation ?? { segmentation: {} };\r\n                    phraseDetection.conversation.segmentation = segmentation;\r\n\r\n                    break;\r\n                case RecognitionMode.Interactive:\r\n                    phraseDetection.interactive = phraseDetection.interactive ?? { segmentation: {} };\r\n                    phraseDetection.interactive.segmentation = segmentation;\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    phraseDetection.dictation = phraseDetection.dictation ?? {};\r\n                    phraseDetection.dictation.segmentation = segmentation;\r\n\r\n                    break;\r\n            }\r\n            this.privSpeechContext.getContext().phraseDetection = phraseDetection;\r\n        }\r\n    }\r\n\r\n    protected setLanguageIdJson(): void {\r\n        const phraseDetection: PhraseDetectionContext = this.privSpeechContext.getContext().phraseDetection || {};\r\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n\r\n            if (sourceLanguages.length === 1 && sourceLanguages[0] === AutoDetectSourceLanguagesOpenRangeOptionName) {\r\n                sourceLanguages[0] = \"UND\";\r\n            }\r\n\r\n            let speechContextLidMode;\r\n            if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\r\n                speechContextLidMode = LanguageIdDetectionMode.DetectContinuous;\r\n            } else {// recognizerConfig.languageIdMode === \"AtStart\"\r\n                speechContextLidMode = LanguageIdDetectionMode.DetectAtAudioStart;\r\n            }\r\n\r\n            this.privSpeechContext.getContext().languageId = {\r\n                languages: sourceLanguages,\r\n                mode: speechContextLidMode,\r\n                onSuccess: { action: NextLangaugeIdAction.Recognize },\r\n                onUnknown: { action: OnUnknownAction.None },\r\n                priority: LanguageIdDetectionPriority.PrioritizeLatency\r\n            };\r\n            this.privSpeechContext.getContext().phraseOutput = {\r\n                interimResults: {\r\n                    resultType: ResultType.Auto\r\n                },\r\n                phraseResults: {\r\n                    resultType: PhraseResultOutputType.Always\r\n                }\r\n            };\r\n            const customModels: CustomLanguageMappingEntry[] = this.privRecognizerConfig.sourceLanguageModels;\r\n            if (customModels !== undefined) {\r\n                phraseDetection.customModels = customModels;\r\n                phraseDetection.onInterim = { action: NextPhraseDetectionAction.None };\r\n                phraseDetection.onSuccess = { action: NextPhraseDetectionAction.None };\r\n            }\r\n        }\r\n        // No longer setting translation-specific configuration here\r\n        // This is now handled in setTranslationJson and setupTranslationWithLanguageId methods\r\n\r\n        this.privSpeechContext.getContext().phraseDetection = phraseDetection;\r\n    }\r\n\r\n    protected setOutputDetailLevelJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const requestWordLevelTimestamps: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\r\n            if (requestWordLevelTimestamps === \"true\") {\r\n                this.privSpeechContext.setWordLevelTimings();\r\n            } else {\r\n                const outputFormat: string = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n                if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\r\n                    this.privSpeechContext.setDetailedOutputFormat();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set voiceProfileType(type: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = auth;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public recognizeSpeaker: (model: SpeakerRecognitionModel) => Promise<SpeakerRecognitionResult> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        if (this.privRecognizerConfig.recognitionEndpointVersion === \"2\") {\r\n            const phraseDetection: PhraseDetectionContext = this.privSpeechContext.getContext().phraseDetection || {};\r\n            phraseDetection.mode = recoMode;\r\n            this.privSpeechContext.getContext().phraseDetection = phraseDetection;\r\n        }\r\n\r\n        // Set language ID (if configured)\r\n        this.setLanguageIdJson();\r\n\r\n        // Then set translation (if configured)\r\n        this.setTranslationJson();\r\n\r\n        // Configure the integration between language ID and translation (if both are used)\r\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined &&\r\n            this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            this.setupTranslationWithLanguageId();\r\n        }\r\n\r\n        this.setSpeechSegmentationTimeoutJson();\r\n        this.setOutputDetailLevelJson();\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    public set expectContentAssessmentResponse(value: boolean) {\r\n        this.privExpectContentAssessmentResponse = value;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                return this.receiveMessage();\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json, this.privRequestSession.currentTurnAudioOffset);\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private updateSpeakerDiarizationAudioOffset(): void {\r\n        const bytesSent: number = this.privRequestSession.recognitionBytesSent;\r\n        const audioOffsetMs: number = this.privAverageBytesPerMs !== 0 ? bytesSent / this.privAverageBytesPerMs : 0;\r\n        this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        if (this.privEnableSpeakerId) {\r\n            this.updateSpeakerDiarizationAudioOffset();\r\n        }\r\n\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    protected setupTranslationWithLanguageId(): void {\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        const hasLanguageId = this.privRecognizerConfig.autoDetectSourceLanguages !== undefined;\r\n\r\n        if (targetLanguages !== undefined && hasLanguageId) {\r\n            // Configure phraseOutput for translation + language ID scenario\r\n            this.privSpeechContext.getContext().phraseOutput = {\r\n                interimResults: {\r\n                    resultType: ResultType.None\r\n                },\r\n                phraseResults: {\r\n                    resultType: PhraseResultOutputType.None\r\n                }\r\n            };\r\n\r\n            // Handle custom language models and voice mapping\r\n            const translationContext = this.privSpeechContext.getContext().translation;\r\n            if (translationContext) {\r\n                const customModels = this.privRecognizerConfig.sourceLanguageModels;\r\n                if (customModels !== undefined && customModels.length > 0) {\r\n                    const phraseDetection = this.privSpeechContext.getContext().phraseDetection || {};\r\n                    phraseDetection.customModels = customModels;\r\n                    this.privSpeechContext.getContext().phraseDetection = phraseDetection;\r\n                }\r\n\r\n                const translationVoice = this.privRecognizerConfig.parameters.getProperty(\r\n                    PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n\r\n                if (translationVoice !== undefined) {\r\n                    // Update translation actions for synthesis\r\n                    translationContext.onSuccess = { action: NextTranslationAction.Synthesize };\r\n                    translationContext.onPassthrough = { action: NextTranslationAction.Synthesize };\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected noOp(): Promise<void> {\r\n        // operation not supported\r\n        return;\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n    protected handleSpeechPhraseMessage: (textBody: string) => Promise<void> = undefined;\r\n    protected handleSpeechHypothesisMessage: (textBody: string) => void = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n        this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n            this.privRequestSession.onRetryConnection();\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = await this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n    private privIntentRecognizer: IntentRecognizer;\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privIntentDataSent: boolean;\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privIntentRecognizer = recognizer;\r\n        this.privIntentDataSent = false;\r\n        recognizerConfig.recognitionEndpointVersion = \"1\";\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent }, umbrellaIntent: AddedLmIntent): void {\r\n        this.privAddedLmIntents = addedIntents;\r\n        this.privUmbrellaIntent = umbrellaIntent;\r\n        this.privIntentDataSent = true;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset,\r\n                    speechHypothesis.Language,\r\n                    speechHypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    speechHypothesis.asJson(),\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(result.offset);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privIntentRecognizer.recognizing) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset,\r\n                    simple.Language,\r\n                    simple.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    simple.asJson(),\r\n                    resultProps);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                const sendEvent: () => void = (): void => {\r\n                    if (!!this.privIntentRecognizer.recognized) {\r\n                        try {\r\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    // Advance the buffers.\r\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.privPendingIntentArgs = ev;\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                ev = this.privPendingIntentArgs;\r\n                this.privPendingIntentArgs = undefined;\r\n\r\n                if (undefined === ev) {\r\n                    if (\"\" === connectionMessage.textBody) {\r\n                        // This condition happens if there is nothing but silence in the\r\n                        // audio sent to the service.\r\n                        return;\r\n                    }\r\n\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0, this.privRequestSession.sessionId);\r\n                }\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n\r\n                if (null !== intentResponse && !!intentResponse.topScoringIntent && !!intentResponse.topScoringIntent.intent) {\r\n                    let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                    if (this.privUmbrellaIntent !== undefined) {\r\n                        addedIntent = this.privUmbrellaIntent;\r\n                    }\r\n\r\n                    if (!!addedIntent) {\r\n                        const intentId = addedIntent === undefined || addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                        let reason = ev.result.reason;\r\n\r\n                        if (undefined !== intentId) {\r\n                            reason = ResultReason.RecognizedIntent;\r\n                        }\r\n\r\n                        // make sure, properties is set.\r\n                        const properties = (undefined !== ev.result.properties) ?\r\n                            ev.result.properties : new PropertyCollection();\r\n\r\n                        properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\r\n\r\n                        ev = new IntentRecognitionEventArgs(\r\n                            new IntentRecognitionResult(\r\n                                intentId,\r\n                                ev.result.resultId,\r\n                                reason,\r\n                                ev.result.text,\r\n                                ev.result.duration,\r\n                                ev.result.offset,\r\n                                undefined,\r\n                                undefined,\r\n                                ev.result.errorDetails,\r\n                                ev.result.json,\r\n                                properties),\r\n                            ev.offset,\r\n                            ev.sessionId);\r\n\r\n                    }\r\n                }\r\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n\r\n                if (!!this.privIntentRecognizer.recognized) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privIntentRecognizer.canceled) {\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined, // Intent Id\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines channels used to pass property settings to service.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ServicePropertyChannel {\r\n    /**\r\n     * Uses URI query parameter to pass property settings to service.\r\n     */\r\n    UriQueryParameter = 0.\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis word boundary event.\r\n * @class SpeechSynthesisWordBoundaryEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisWordBoundaryEventArgs {\r\n    private readonly privAudioOffset: number;\r\n    private readonly privDuration: number;\r\n    private readonly privText: string;\r\n    private readonly privWordLength: number;\r\n    private readonly privTextOffset: number;\r\n    private readonly privBoundaryType: SpeechSynthesisBoundaryType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} duration - The audio duration.\r\n     * @param {string} text - The text.\r\n     * @param {number} wordLength - The length of the word.\r\n     * @param {number} textOffset - The text offset.\r\n     * @param {SpeechSynthesisBoundaryType} boundaryType - The boundary type\r\n     */\r\n    public constructor(audioOffset: number, duration: number, text: string, wordLength: number,\r\n                       textOffset: number, boundaryType: SpeechSynthesisBoundaryType) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privDuration = duration;\r\n        this.privText = text;\r\n        this.privWordLength = wordLength;\r\n        this.privTextOffset = textOffset;\r\n        this.privBoundaryType = boundaryType;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the duration, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration in 100 nanosecond increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text of the word boundary event.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Specifies the word length\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\r\n     * @function\r\n     * @public\r\n     * @returns {number} the word length\r\n     */\r\n    public get wordLength(): number {\r\n        return this.privWordLength;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the text offset.\r\n     */\r\n    public get textOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the boundary type.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.boundaryType\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisBoundaryType} the boundary type.\r\n     */\r\n    public get boundaryType(): SpeechSynthesisBoundaryType {\r\n        return this.privBoundaryType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports.js\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { IConversationResponseError, IInternalConversation } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: (c: any) => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            }).catch( (): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                }).catch( (): void => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error as string);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Language Identification mode\r\n * @class LanguageIdMode\r\n */\r\nexport enum LanguageIdMode {\r\n\r\n    /**\r\n     * Detect language at audio start\r\n     * @member LanguageIdMode.AtStart\r\n     */\r\n    AtStart,\r\n\r\n    /**\r\n     * Continuously detect language\r\n     * @member LanguageIdMode.Continuous\r\n     */\r\n    Continuous,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    EnumTranslation,\r\n    ITranslationHypothesis,\r\n    RecognitionStatus,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ConversationServiceRecognizer {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = await this.processSpeechMessages(connectionMessage);\r\n        if (processed) {\r\n            return true;\r\n        }\r\n\r\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, translatedPhrase.asJson());\r\n            this.privRequestSession.onPhraseRecognized(translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                // OK, the recognition was successful. How'd the translation do?\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                if (!!this.privTranslationRecognizer.recognized) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(result.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n            } else {\r\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    reason,\r\n                    translatedPhrase.Text,\r\n                    translatedPhrase.Duration,\r\n                    translatedPhrase.Offset,\r\n                    translatedPhrase.Language,\r\n                    translatedPhrase.Confidence,\r\n                    undefined,\r\n                    translatedPhrase.asJson(),\r\n                    resultProps);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (translatedPhrase.RecognitionStatus !== RecognitionStatus.EndOfDictation) {\r\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranslationRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        // report result to promise.\r\n                        if (!!this.privSuccessCallback) {\r\n                            try {\r\n                                this.privSuccessCallback(result);\r\n                            } catch (e) {\r\n                                if (!!this.privErrorCallback) {\r\n                                    this.privErrorCallback(e as string);\r\n                                }\r\n                            }\r\n                            // Only invoke the call back once.\r\n                            // and if it's successful don't invoke the\r\n                            // error after that.\r\n                            this.privSuccessCallback = undefined;\r\n                            this.privErrorCallback = undefined;\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n            }\r\n\r\n        };\r\n\r\n        const handleTranslationHypothesis = (hypothesis: TranslationHypothesis): void => {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, hypothesis.asJson());\r\n\r\n            const result: TranslationRecognitionEventArgs = this.fireEventForResult(hypothesis, resultProps);\r\n            this.privRequestSession.onHypothesis(result.offset);\r\n\r\n            if (!!this.privTranslationRecognizer.recognizing) {\r\n                try {\r\n                    this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                    /* eslint-disable no-empty */\r\n                } catch (error) {\r\n                    // Not going to let errors in the event handler\r\n                    // trip things up.\r\n                }\r\n            }\r\n            processed = true;\r\n        };\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n                handleTranslationHypothesis(TranslationHypothesis.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset));\r\n                break;\r\n\r\n            case \"translation.response\":\r\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody) as { SpeechPhrase: ITranslationPhrase };\r\n                if (!!phrase.SpeechPhrase) {\r\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase, this.privRequestSession.currentTurnAudioOffset));\r\n                } else {\r\n                    const hypothesis: { SpeechHypothesis: ITranslationHypothesis } = JSON.parse(connectionMessage.textBody) as { SpeechHypothesis: ITranslationHypothesis };\r\n                    if (!!hypothesis.SpeechHypothesis) {\r\n                        handleTranslationHypothesis(TranslationHypothesis.fromTranslationResponse(hypothesis, this.privRequestSession.currentTurnAudioOffset));\r\n                    }\r\n                }\r\n                break;\r\n            case \"translation.phrase\":\r\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset));\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n            case \"audio\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"audio.end\":\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), offset, sessionId);\r\n            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), offset, sessionId);\r\n            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        let confidence: string;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (!!serviceResult.Translation && serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n            confidence = serviceResult.Confidence;\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n        const language = serviceResult.Language;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            serviceResult.Offset,\r\n            language,\r\n            confidence,\r\n            serviceResult.Translation.FailureReason,\r\n            serviceResult.asJson(),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, serviceResult.Offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to\r\n     * specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]].\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromEndpoint]].\r\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\r\n     * use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\r\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization type. Currently unused.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.endpointId]].\r\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\r\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\r\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * The category ID for translation.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationCategoryId\r\n     */\r\n    SpeechServiceConnection_TranslationCategoryId,\r\n\r\n    /**\r\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[LanguageUnderstandingModel]].\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyHostName,\r\n\r\n    /**\r\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPort,\r\n\r\n    /**\r\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyUserName,\r\n\r\n    /**\r\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPassword,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\r\n     * directly.\r\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\r\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead use [[SessionEventArgs.sessionId]].\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * The spoken language to be synthesized (e.g. en-US)\r\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\r\n     */\r\n    SpeechServiceConnection_SynthLanguage,\r\n\r\n    /**\r\n     * The name of the TTS voice to be used for speech synthesis\r\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\r\n     */\r\n    SpeechServiceConnection_SynthVoice,\r\n\r\n    /**\r\n     * The string to specify TTS output audio format\r\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\r\n     */\r\n    SpeechServiceConnection_SynthOutputFormat,\r\n\r\n    /**\r\n     * The list of comma separated languages used as possible source languages\r\n     * Added in version 1.13.0\r\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\r\n     */\r\n    SpeechServiceConnection_AutoDetectSourceLanguages,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\r\n     * to use this property directly.\r\n     * Instead use [[SpeechConfig.outputFormat]].\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\r\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * The cancellation reason. Currently unused.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * The cancellation text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * The Cancellation detailed text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The URL string built from speech configuration.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * NOTE: Added in version 1.7.0.\r\n     */\r\n    SpeechServiceConnection_Url,\r\n\r\n    /**\r\n     * The initial silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n\r\n    /**\r\n     * The end silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EndSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A duration of detected silence, measured in milliseconds, after which speech-to-text will determine a spoken\r\n     * phrase has ended and generate a final Recognized result. Configuring this timeout may be helpful in situations\r\n     * where spoken input is significantly faster or slower than usual and default segmentation behavior consistently\r\n     * yields results that are too long or too short. Segmentation timeout values that are inappropriately high or low\r\n     * can negatively affect speech-to-text accuracy; this property should be carefully configured and the resulting\r\n     * behavior should be thoroughly validated as intended.\r\n     *\r\n     * For more information about timeout configuration that includes discussion of default behaviors, please visit\r\n     * https://aka.ms/csspeech/timeouts.\r\n     *\r\n     * Added in version 1.21.0.\r\n     */\r\n    Speech_SegmentationSilenceTimeoutMs,\r\n\r\n    /**\r\n     * SegmentationMaximumTimeMs represents the maximum length of a spoken phrase when using the Time segmentation strategy.\r\n     * As the length of a spoken phrase approaches this value, the @member Speech_SegmentationSilenceTimeoutMs will be reduced until either\r\n     * the phrase silence timeout is reached or the phrase reaches the maximum length.\r\n     *\r\n     * Added in version 1.42.0.\r\n     */\r\n    Speech_SegmentationMaximumTimeMs,\r\n\r\n    /**\r\n     * SegmentationStrategy defines the strategy used to determine when a spoken phrase has ended and a final Recognized result should be generated.\r\n     * Allowed values are \"Default\", \"Time\", and \"Semantic\".\r\n     *\r\n     * Valid values:\r\n     * - \"Default\": Uses the default strategy and settings as determined by the Speech Service. Suitable for most situations.\r\n     * - \"Time\": Uses a time-based strategy where the amount of silence between speech determines when to generate a final result.\r\n     * - \"Semantic\": Uses an AI model to determine the end of a spoken phrase based on the phrase's content.\r\n     *\r\n     * Additional Notes:\r\n     * - When using the Time strategy, @member Speech_SegmentationSilenceTimeoutMs can be adjusted to modify the required silence duration for ending a phrase,\r\n     * and @member Speech_SegmentationMaximumTimeMs can be adjusted to set the maximum length of a spoken phrase.\r\n     * - The Semantic strategy does not have any adjustable properties.\r\n     *\r\n     * Added in version 1.42.0.\r\n     */\r\n    Speech_SegmentationStrategy,\r\n\r\n    /**\r\n     * A boolean value specifying whether audio logging is enabled in the service or not.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EnableAudioLogging,\r\n\r\n    /**\r\n     * The speech service connection language identifier mode.\r\n     * Can be \"AtStart\" (the default), or \"Continuous\". See Language\r\n     * Identification document https://aka.ms/speech/lid?pivots=programming-language-javascript\r\n     * for more details.\r\n     * Added in 1.25.0\r\n     **/\r\n    SpeechServiceConnection_LanguageIdMode,\r\n\r\n    /**\r\n     * A string value representing the desired endpoint version to target for Speech Recognition.\r\n     * Added in version 1.21.0\r\n     */\r\n    SpeechServiceConnection_RecognitionEndpointVersion,\r\n\r\n    /**\r\n    /**\r\n     * A string value the current speaker recognition scenario/mode (TextIndependentIdentification, etc.).\r\n     * Added in version 1.23.0\r\n     */\r\n    SpeechServiceConnection_SpeakerIdMode,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity setting.\r\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_ProfanityOption,\r\n\r\n    /**\r\n     * A string value specifying which post processing option should be used by service.\r\n     * Allowed values are \"TrueText\".\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_PostProcessingOption,\r\n\r\n    /**\r\n     * A boolean value specifying whether to include word-level timestamps in the response result.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_RequestWordLevelTimestamps,\r\n\r\n    /**\r\n     * The number of times a word has to be in partial results to be returned.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_StablePartialResultThreshold,\r\n\r\n    /**\r\n     * A string value specifying the output format option in the response result. Internal use only.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_OutputFormatOption,\r\n\r\n    /**\r\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request WordBoundary events.\r\n     * @member PropertyId.SpeechServiceResponse_RequestWordBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestWordBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request punctuation boundary in WordBoundary Events. Default is true.\r\n     * @member PropertyId.SpeechServiceResponse_RequestPunctuationBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestPunctuationBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request sentence boundary in WordBoundary Events. Default is false.\r\n     * @member PropertyId.SpeechServiceResponse_RequestSentenceBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestSentenceBoundary,\r\n\r\n    /**\r\n     * Determines if intermediate results contain speaker identification.\r\n     * Allowed values are \"true\" or \"false\". If set to \"true\", the intermediate results will contain speaker identification.\r\n     * The default value if unset or set to an invalid value is \"false\".\r\n     * This is currently only supported for scenarios using the ConversationTranscriber\".\r\n     * @member PropertyId.SpeechServiceResponse_DiarizeIntermediateResults\r\n     * Adding in version 1.41.\r\n     */\r\n    SpeechServiceResponse_DiarizeIntermediateResults,\r\n\r\n    /**\r\n     * Identifier used to connect to the backend service.\r\n     * @member PropertyId.Conversation_ApplicationId\r\n     */\r\n    Conversation_ApplicationId,\r\n\r\n    /**\r\n     * Type of dialog backend to connect to.\r\n     * @member PropertyId.Conversation_DialogType\r\n     */\r\n    Conversation_DialogType,\r\n\r\n    /**\r\n     * Silence timeout for listening\r\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\r\n     */\r\n    Conversation_Initial_Silence_Timeout,\r\n\r\n    /**\r\n     * From Id to add to speech recognition activities.\r\n     * @member PropertyId.Conversation_From_Id\r\n     */\r\n    Conversation_From_Id,\r\n\r\n    /**\r\n     * ConversationId for the session.\r\n     * @member PropertyId.Conversation_Conversation_Id\r\n     */\r\n    Conversation_Conversation_Id,\r\n\r\n    /**\r\n     * Comma separated list of custom voice deployment ids.\r\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\r\n     */\r\n    Conversation_Custom_Voice_Deployment_Ids,\r\n\r\n    /**\r\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\r\n     * @member PropertyId.Conversation_Speech_Activity_Template\r\n     * Added in version 1.10.0.\r\n     */\r\n    Conversation_Speech_Activity_Template,\r\n\r\n    /**\r\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\r\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\r\n     * Added in version 1.15.0.\r\n     */\r\n    Conversation_Request_Bot_Status_Messages,\r\n\r\n    /**\r\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\r\n     * channel authentication.\r\n     * Added in version 1.15.1.\r\n     */\r\n    Conversation_Agent_Connection_Id,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromHost]].\r\n     */\r\n    SpeechServiceConnection_Host,\r\n\r\n    /**\r\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\r\n     */\r\n    ConversationTranslator_Host,\r\n\r\n    /**\r\n     * Optionally set the the host's display name.\r\n     * Used when joining a conversation.\r\n     */\r\n    ConversationTranslator_Name,\r\n\r\n    /**\r\n     * Optionally set a value for the X-CorrelationId request header.\r\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\r\n     */\r\n    ConversationTranslator_CorrelationId,\r\n\r\n    /**\r\n     * Set the conversation token to be sent to the speech service. This enables the\r\n     * service to service call from the speech service to the Conversation Translator service for relaying\r\n     * recognitions. For internal use.\r\n     */\r\n    ConversationTranslator_Token,\r\n\r\n    /**\r\n     * The reference text of the audio for pronunciation evaluation.\r\n     * For this and the following pronunciation assessment parameters, see\r\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_ReferenceText,\r\n\r\n    /**\r\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_GradingSystem,\r\n\r\n    /**\r\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Granularity,\r\n\r\n    /**\r\n     * Defines if enable miscue calculation.\r\n     * With this enabled, the pronounced words will be compared to the reference text,\r\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_EnableMiscue,\r\n\r\n    /**\r\n     * The json string of pronunciation assessment parameters\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Json,\r\n\r\n    /**\r\n     * Pronunciation assessment parameters.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Params,\r\n\r\n    /**\r\n     * Version of Speaker Recognition API to use.\r\n     * Added in version 1.18.0\r\n     */\r\n    SpeakerRecognition_Api_Version,\r\n\r\n    /**\r\n     * Specifies whether to allow load of data URL for web worker\r\n     * Allowed values are \"off\" and \"on\". Default is \"on\".\r\n     * Added in version 1.32.0\r\n     */\r\n    WebWorkerLoadType,\r\n\r\n    /**\r\n     * Talking avatar service WebRTC session description protocol.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.33.0\r\n     */\r\n    TalkingAvatarService_WebRTC_SDP,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for any Service message event\r\n * Added in version 1.9.0\r\n */\r\n\r\nexport class ServiceEventArgs extends SessionEventArgs {\r\n    private privJsonResult: string;\r\n    private privEventName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} json - json payload of the USP message.\r\n     */\r\n    public constructor(json: string,  name: string, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privJsonResult = json;\r\n        this.privEventName = name;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n\r\n    public get eventName(): string {\r\n        return this.privEventName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Dgi } from \"./ServiceMessages/Dgi/Dgi.js\";\r\nimport { GroupType } from \"./ServiceMessages/Dgi/Group.js\";\r\nimport { Item } from \"./ServiceMessages/Dgi/Item.js\";\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase);\r\n        } else {\r\n            this.privPhrases.push(phrase);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar);\r\n        } else {\r\n            this.privGrammars.push(grammar);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): Dgi {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: Dgi = {};\r\n        retObj.referenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: Item[] = [];\r\n\r\n            this.privPhrases.forEach((value: string): void => {\r\n                retPhrases.push({\r\n                    text: value,\r\n                });\r\n            });\r\n\r\n            retObj.groups = [{ type: GroupType.Generic, items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    MeetingTranscriptionCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConversationInfo, MeetingInfo } from \"../sdk/Transcription/Exports.js\";\r\nimport { ConversationProperties } from \"../sdk/Transcription/IConversation.js\";\r\nimport { MeetingProperties } from \"../sdk/Transcription/IMeeting.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    TranscriberRecognizer\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ConversationServiceRecognizer {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = (connection: IConnection): Promise<void> => this.sendTranscriptionStartJSON(connection);\r\n        if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\r\n            this.privSpeechContext.setWordLevelTimings();\r\n        }\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    public async sendMeetingSpeechEventAsync(info: MeetingInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createMeetingSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        return this.processSpeechMessages(connectionMessage);\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, offset, sessionId);\r\n            this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n            if (!!this.privSuccessCallback) {\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                } catch (e) {\r\n                    if (!!this.privErrorCallback) {\r\n                        this.privErrorCallback(e as string);\r\n                    }\r\n                }\r\n                // Only invoke the call back once.\r\n                // and if it's successful don't invoke the\r\n                // error after that.\r\n                this.privSuccessCallback = undefined;\r\n                this.privErrorCallback = undefined;\r\n            }\r\n        /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new SpeechRecognitionEventArgs(result, duration, sessionId);\r\n            this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: MeetingTranscriptionCanceledEventArgs = new MeetingTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        } else {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection, true);\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            const info: MeetingInfo = this.privTranscriberRecognizer.getMeetingInfo();\r\n            const payload: { [id: string]: any } = this.createMeetingSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        } else {\r\n            const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n            const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        }\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent(connection: IConnection, payload: { [id: string]: any }): Promise<void> {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: ConversationProperties } = { id: \"meeting\", name: command, meeting: info.conversationProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n    private createMeetingSpeechEventPayload(info: MeetingInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: MeetingProperties } = { id: \"meeting\", name: command, meeting: info.meetingProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\nimport { ParticipantChangedReason } from \"./Exports.js\";\r\nimport { IParticipant } from \"./IParticipant.js\";\r\n\r\nexport class ConversationParticipantsChangedEventArgs extends SessionEventArgs {\r\n    private privReason: ParticipantChangedReason;\r\n    private privParticipant: IParticipant[];\r\n\r\n    public constructor(reason: ParticipantChangedReason, participants: IParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privReason = reason;\r\n        this.privParticipant = participants;\r\n    }\r\n\r\n    public get reason(): ParticipantChangedReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get participants(): IParticipant[] {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport abstract class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSynthesizer: Synthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => void = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected receiveMessageOverride: () => void = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => void = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    protected privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privActivityTemplate: string;\r\n    protected privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext();\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            this.onSynthesisStarted(requestId);\r\n\r\n            void this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e as string);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    public async stopSpeaking(): Promise<void> {\r\n        await this.connectImpl();\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"synthesis.control\",\r\n            this.privSynthesisTurn.requestId,\r\n            \"application/json\",\r\n            JSON.stringify({\r\n                action: \"stop\"\r\n            })\r\n        ));\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        _cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        this.onSynthesisCancelled(result);\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected processTypeSpecificMessages(_connectionMessage: SpeechConnectionMessage): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse(connectionMessage.textBody);\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            this.onSynthesizing(connectionMessage.binaryBody);\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                case MetadataType.SentenceBoundary:\r\n                                    this.privSynthesisTurn.onTextBoundaryEvent(metadata);\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Duration,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        metadata.Type === MetadataType.WordBoundary\r\n                                            ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset,\r\n                                        metadata.Data.text.BoundaryType);\r\n                                    this.onWordBoundary(wordBoundaryEventArgs);\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n                                    this.onBookmarkReached(bookmarkEventArgs);\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n                                        this.onVisemeReceived(visemeEventArgs);\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.AvatarSignal:\r\n                                    this.onAvatarEvent(metadata);\r\n                                    break;\r\n                                case MetadataType.SessionEnd:\r\n                                    this.privSynthesisTurn.onSessionEnd(metadata);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            result = await this.privSynthesisTurn.constructSynthesisResult();\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error as string);\r\n                            }\r\n                        }\r\n                        this.onSynthesisCompleted(result);\r\n                        break;\r\n\r\n                    default:\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext(connection: IConnection): Promise<void> {\r\n        this.setSynthesisContextSynthesisSection();\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected abstract setSynthesisContextSynthesisSection(): void;\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise != null) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = await this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.reject(\r\n                    `Unable to contact server. StatusCode: ${response.statusCode},\r\n                    ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Url)} Reason: ${response.reason}`);\r\n            }\r\n        }, (error: string): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(true);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig(connection: IConnection, SpeechServiceConfigJson: string): Promise<void> {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage(connection: IConnection, ssml: string, requestId: string): Promise<void> {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        this.setSpeechConfigSynthesisSection();\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n\r\n    protected onAvatarEvent(_metadata: ISynthesisMetadata): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisStarted(_requestId: string): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesizing(_audio: ArrayBuffer): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCancelled(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCompleted(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onWordBoundary(_wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onVisemeReceived(_visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onBookmarkReached(_bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        return;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeakerRecognitionConnectionFactory,\r\n    SpeakerServiceRecognizer,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privDisposedSpeakerRecognizer: boolean;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n    /**\r\n     * Initializes an instance of the SpeakerRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new SpeakerRecognitionConnectionFactory());\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privDisposedSpeakerRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        return this.recognizeSpeakerOnceAsyncImpl(model);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     * @async\r\n     */\r\n    public async close(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected async recognizeSpeakerOnceAsyncImpl(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        await this.implRecognizerStop();\r\n        const result: SpeakerRecognitionResult = await this.privReco.recognizeSpeaker(model);\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedSpeakerRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedSpeakerRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis events.\r\n * @class SpeechSynthesisEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisEventArgs {\r\n    private readonly privResult: SpeechSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\r\n     */\r\n    public constructor(result: SpeechSynthesisResult) {\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the synthesis result.\r\n     * @member SpeechSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisResult} the synthesis result.\r\n     */\r\n    public get result(): SpeechSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance with the provided subscription information.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance for the specified authorization token and region.\r\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\r\n     * caller must refresh it by setting the authorizationToken property on the corresponding\r\n     * DialogServiceConnector instance created with this config. The contents of configuration objects are copied\r\n     * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\r\n     * original configuration's authorization token. Create a new configuration instance or set the\r\n     * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\r\n     * further DialogServiceConnectors.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromAuthorizationToken(\r\n        authorizationToken: string, region: string, botId?: string\r\n    ): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\r\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\r\n     * property on the created BotFrameworkConfig instance.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\r\n     * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\r\n     * wss://{host}.convai.speech.azure.us.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromHost(\r\n        host: URL | string,\r\n        subscriptionKey?: string,\r\n        botId?: string): BotFrameworkConfig {\r\n\r\n        void botId;\r\n        Contracts.throwIfNullOrUndefined(host, \"host\");\r\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\r\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\r\n     * use the authorization token.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a MeetingTranscriptionCanceledEvent.\r\n * @class MeetingTranscriptionCanceledEventArgs\r\n */\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n/**\r\n * The speaker diarization mode\r\n */\r\nexport enum SpeakerDiarizationMode {\r\n    None = \"None\",\r\n    Identity = \"Identity\",\r\n    Anonymous = \"Anonymous\"\r\n}\r\n\r\n/**\r\n * The identity provider\r\n */\r\nexport enum IdentityProvider {\r\n    CallCenter = \"CallCenter\"\r\n}\r\n\r\n/**\r\n * The speaker diarization configuration\r\n */\r\nexport interface SpeakerDiarization {\r\n    /**\r\n     * The mode\r\n     */\r\n    mode?: SpeakerDiarizationMode;\r\n\r\n    /**\r\n     * The identity provider\r\n     */\r\n    identityProvider?: IdentityProvider;\r\n\r\n    /**\r\n     * A token that identifies a diarization session across reconnects\r\n     */\r\n    audioSessionId?: string;\r\n\r\n    /**\r\n     * The audio offset measured in msec to apply to the audio stream in case this is a session reconnect\r\n     */\r\n    audioOffsetMs?: number;\r\n\r\n    /**\r\n     * If set to true the diarization will be performed on the intermediate results\r\n     */\r\n    diarizeIntermediates?: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\r\n                offset?: number, language?: string, languageDetectionConfidence?: string, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second increments.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detected.\r\n     * @member RecognitionResult.prototype.language\r\n     * @function\r\n     * @public\r\n     * @returns {string} language detected.\r\n     */\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\r\n     * @member RecognitionResult.prototype.languageDetectionConfidence\r\n     * @function\r\n     * @public\r\n     * @returns {string} detection confidence strength.\r\n     */\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Source Language configuration.\r\n * @class SourceLanguageConfig\r\n */\r\nexport class SourceLanguageConfig {\r\n    private privLanguage: string;\r\n    private privEndpointId: string;\r\n\r\n    private constructor(language: string, endpointId?: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        this.privLanguage = language;\r\n        this.privEndpointId = endpointId;\r\n    }\r\n\r\n    /**\r\n     * @member SourceLanguageConfig.fromLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} language language (eg. \"en-US\") value of config.\r\n     * @param {string?} endpointId endpointId of model bound to given language of config.\r\n     * @return {SourceLanguageConfig} Instance of SourceLanguageConfig\r\n     * @summary Creates an instance of the SourceLanguageConfig with the given language and optional endpointId.\r\n     * Added in version 1.13.0.\r\n     */\r\n    public static fromLanguage(language: string, endpointId?: string): SourceLanguageConfig {\r\n        return new SourceLanguageConfig(language, endpointId);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privEndpointId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports.js\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat.js\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: \"raw-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: \"riff-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: \"raw-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: \"riff-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.AmrWb16000Hz]: \"amr-wb-16000hz\",\r\n        [SpeechSynthesisOutputFormat.G72216Khz64Kbps]: \"g722-16khz-64kbps\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    24000,\r\n                    24000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    48000,\r\n                    30000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"raw-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-22050hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"raw-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-44100hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"amr-wb-16000h\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.AMR_WB,\r\n                    1,\r\n                    16000,\r\n                    3052,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"g722-16khz-64kbps\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.G722,\r\n                    1,\r\n                    16000,\r\n                    8000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n    /**\r\n     * Adds audio header\r\n     * @param audio the raw audio without header\r\n     * @returns the audio with header if applicable\r\n     */\r\n\r\n    public addHeader(audio: ArrayBuffer): ArrayBuffer {\r\n        if (!this.hasHeader) {\r\n            return audio;\r\n        }\r\n        this.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + this.header.byteLength);\r\n        tmp.set(new Uint8Array(this.header), 0);\r\n        tmp.set(new Uint8Array(audio), this.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports.js\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse(continuousRecognition: boolean): void {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        //\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * Defines a coordinate in 2D space.\r\n * @class Coordinate\r\n * Added in version 1.33.0\r\n */\r\nexport class Coordinate {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the avatar output video format.\r\n * @class AvatarVideoFormat\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarVideoFormat {\r\n    /**\r\n     * Defines the video codec.\r\n     * @default \"H264\"\r\n     */\r\n    public codec: string;\r\n    /**\r\n     * Defines the video bitrate.\r\n     * @default 2000000\r\n     */\r\n    public bitrate: number;\r\n    /**\r\n     * Defines the video width.\r\n     * @default 1920\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Defines the video height.\r\n     * @default 1080\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Sets the video crop range.\r\n     */\r\n    public setCropRange(topLeft: Coordinate, bottomRight: Coordinate): void {\r\n        this.cropRange = {\r\n            bottomRight,\r\n            topLeft,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Defines the video crop range.\r\n     * @default undefined\r\n     * @internal\r\n     */\r\n    public cropRange: {\r\n        topLeft: Coordinate;\r\n        bottomRight: Coordinate;\r\n    };\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} codec - The video codec.\r\n     * @param {number} bitrate - The video bitrate.\r\n     * @param {number} width - The video width.\r\n     * @param {number} height - The video height.\r\n     */\r\n    public constructor(codec: string = \"H264\",\r\n                       bitrate: number = 2000000,\r\n                       width: number = 1920,\r\n                       height: number = 1080,\r\n    ) {\r\n        this.codec = codec;\r\n        this.bitrate = bitrate;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { AudioConfig } from \"./Audio/AudioConfig.js\";\r\nexport { AudioStreamFormat, AudioFormatTag } from \"./Audio/AudioStreamFormat.js\";\r\nexport { AudioInputStream, PullAudioInputStream, PushAudioInputStream } from \"./Audio/AudioInputStream.js\";\r\nexport { AudioOutputStream, PullAudioOutputStream, PushAudioOutputStream} from \"./Audio/AudioOutputStream.js\";\r\nexport { CancellationReason } from \"./CancellationReason.js\";\r\nexport { PullAudioInputStreamCallback } from \"./Audio/PullAudioInputStreamCallback.js\";\r\nexport { PushAudioOutputStreamCallback } from \"./Audio/PushAudioOutputStreamCallback.js\";\r\nexport { KeywordRecognitionModel } from \"./KeywordRecognitionModel.js\";\r\nexport { SessionEventArgs } from \"./SessionEventArgs.js\";\r\nexport { RecognitionEventArgs } from \"./RecognitionEventArgs.js\";\r\nexport { OutputFormat } from \"./OutputFormat.js\";\r\nexport { IntentRecognitionEventArgs } from \"./IntentRecognitionEventArgs.js\";\r\nexport { RecognitionResult } from \"./RecognitionResult.js\";\r\nexport { SpeechRecognitionResult } from \"./SpeechRecognitionResult.js\";\r\nexport { IntentRecognitionResult } from \"./IntentRecognitionResult.js\";\r\nexport { LanguageUnderstandingModel } from \"./LanguageUnderstandingModel.js\";\r\nexport { SpeechRecognitionEventArgs, ConversationTranscriptionEventArgs, MeetingTranscriptionEventArgs } from \"./SpeechRecognitionEventArgs.js\";\r\nexport { SpeechRecognitionCanceledEventArgs } from \"./SpeechRecognitionCanceledEventArgs.js\";\r\nexport { TranslationRecognitionEventArgs } from \"./TranslationRecognitionEventArgs.js\";\r\nexport { TranslationSynthesisEventArgs } from \"./TranslationSynthesisEventArgs.js\";\r\nexport { TranslationRecognitionResult } from \"./TranslationRecognitionResult.js\";\r\nexport { TranslationSynthesisResult } from \"./TranslationSynthesisResult.js\";\r\nexport { ResultReason } from \"./ResultReason.js\";\r\nexport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nexport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\nexport { PropertyCollection } from \"./PropertyCollection.js\";\r\nexport { PropertyId } from \"./PropertyId.js\";\r\nexport { Recognizer } from \"./Recognizer.js\";\r\nexport { SpeechRecognizer } from \"./SpeechRecognizer.js\";\r\nexport { IntentRecognizer } from \"./IntentRecognizer.js\";\r\nexport { VoiceProfileType } from \"./VoiceProfileType.js\";\r\nexport { TranslationRecognizer } from \"./TranslationRecognizer.js\";\r\nexport { Translations } from \"./Translations.js\";\r\nexport { NoMatchReason } from \"./NoMatchReason.js\";\r\nexport { NoMatchDetails } from \"./NoMatchDetails.js\";\r\nexport { TranslationRecognitionCanceledEventArgs } from \"./TranslationRecognitionCanceledEventArgs.js\";\r\nexport { IntentRecognitionCanceledEventArgs } from \"./IntentRecognitionCanceledEventArgs.js\";\r\nexport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nexport { CancellationDetails } from \"./CancellationDetails.js\";\r\nexport { CancellationErrorCode } from \"./CancellationErrorCodes.js\";\r\nexport { ConnectionEventArgs } from \"./ConnectionEventArgs.js\";\r\nexport { ServiceEventArgs } from \"./ServiceEventArgs.js\";\r\nexport { Connection } from \"./Connection.js\";\r\nexport { PhraseListGrammar } from \"./PhraseListGrammar.js\";\r\nexport { DialogServiceConfig } from \"./DialogServiceConfig.js\";\r\nexport { BotFrameworkConfig } from \"./BotFrameworkConfig.js\";\r\nexport { CustomCommandsConfig } from \"./CustomCommandsConfig.js\";\r\nexport { DialogServiceConnector } from \"./DialogServiceConnector.js\";\r\nexport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nexport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\nexport { ServicePropertyChannel } from \"./ServicePropertyChannel.js\";\r\nexport { ProfanityOption } from \"./ProfanityOption.js\";\r\nexport { BaseAudioPlayer } from \"./Audio/BaseAudioPlayer.js\";\r\nexport { ConnectionMessageEventArgs } from \"./ConnectionMessageEventArgs.js\";\r\nexport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nexport { VoiceProfile } from \"./VoiceProfile.js\";\r\nexport { VoiceProfileEnrollmentResult, VoiceProfileEnrollmentCancellationDetails } from \"./VoiceProfileEnrollmentResult.js\";\r\nexport { VoiceProfileResult, VoiceProfileCancellationDetails } from \"./VoiceProfileResult.js\";\r\nexport { VoiceProfilePhraseResult } from \"./VoiceProfilePhraseResult.js\";\r\nexport { VoiceProfileClient } from \"./VoiceProfileClient.js\";\r\nexport { SpeakerRecognizer } from \"./SpeakerRecognizer.js\";\r\nexport { SpeakerIdentificationModel } from \"./SpeakerIdentificationModel.js\";\r\nexport { SpeakerVerificationModel } from \"./SpeakerVerificationModel.js\";\r\nexport { AutoDetectSourceLanguageConfig } from \"./AutoDetectSourceLanguageConfig.js\";\r\nexport { AutoDetectSourceLanguageResult } from \"./AutoDetectSourceLanguageResult.js\";\r\nexport { SourceLanguageConfig } from \"./SourceLanguageConfig.js\";\r\nexport { SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerRecognitionCancellationDetails } from \"./SpeakerRecognitionResult.js\";\r\nexport { Conversation,\r\n    ConversationExpirationEventArgs,\r\n    ConversationInfo,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslationResult,\r\n    ConversationTranslator,\r\n    ConversationTranscriber,\r\n    ConversationTranscriptionResult,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    IParticipant,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    User,\r\n    VoiceSignature\r\n    } from \"./Transcription/Exports.js\";\r\nexport { Synthesizer } from \"./Synthesizer.js\";\r\nexport { SpeechSynthesisOutputFormat } from \"./SpeechSynthesisOutputFormat.js\";\r\nexport { SpeechSynthesizer } from \"./SpeechSynthesizer.js\";\r\nexport { SynthesisResult } from \"./SynthesisResult.js\";\r\nexport { SpeechSynthesisResult } from \"./SpeechSynthesisResult.js\";\r\nexport { SpeechSynthesisEventArgs } from \"./SpeechSynthesisEventArgs.js\";\r\nexport { SpeechSynthesisWordBoundaryEventArgs } from \"./SpeechSynthesisWordBoundaryEventArgs.js\";\r\nexport { SpeechSynthesisBookmarkEventArgs } from \"./SpeechSynthesisBookmarkEventArgs.js\";\r\nexport { SpeechSynthesisVisemeEventArgs } from \"./SpeechSynthesisVisemeEventArgs.js\";\r\nexport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\nexport { SynthesisVoicesResult } from \"./SynthesisVoicesResult.js\";\r\nexport { SynthesisVoiceGender, SynthesisVoiceType, VoiceInfo } from \"./VoiceInfo.js\";\r\nexport { IPlayer } from \"./Audio/IPlayer.js\";\r\nexport { SpeakerAudioDestination } from \"./Audio/SpeakerAudioDestination.js\";\r\nexport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nexport { ConversationTranscriptionCanceledEventArgs } from \"./ConversationTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { PronunciationAssessmentGradingSystem } from \"./PronunciationAssessmentGradingSystem.js\";\r\nexport { PronunciationAssessmentGranularity } from \"./PronunciationAssessmentGranularity.js\";\r\nexport { PronunciationAssessmentConfig } from \"./PronunciationAssessmentConfig.js\";\r\nexport { PronunciationAssessmentResult } from \"./PronunciationAssessmentResult.js\";\r\nexport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\nexport { AvatarConfig } from \"./AvatarConfig.js\";\r\nexport { AvatarEventArgs } from \"./AvatarEventArgs.js\";\r\nexport { AvatarSynthesizer } from \"./AvatarSynthesizer.js\";\r\nexport { AvatarVideoFormat, Coordinate } from \"./AvatarVideoFormat.js\";\r\nexport { AvatarWebRTCConnectionResult } from \"./AvatarWebRTCConnectionResult.js\";\r\nexport { Diagnostics } from \"./Diagnostics.js\";\r\nexport { LogLevel } from \"./LogLevel.js\";\r\nexport { IVoiceJson } from \"./IVoiceJson.js\";\r\n","import { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    SpeechRecognitionResult\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis\r\n} from \"./Exports.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class ConversationServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.handleSpeechPhraseMessage = async (textBody: string): Promise<void> => this.handleSpeechPhrase(textBody);\r\n        this.handleSpeechHypothesisMessage = (textBody: string): void => this.handleSpeechHypothesis(textBody);\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        void connectionMessage;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        void result;\r\n        void offset;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        void result;\r\n        void duration;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected async processSpeechMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        let processed: boolean = false;\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                if (!!this.handleSpeechHypothesisMessage) {\r\n                    this.handleSpeechHypothesisMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (!!this.handleSpeechPhraseMessage) {\r\n                    await this.handleSpeechPhraseMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        // Implementing to allow inheritance\r\n        void sessionId;\r\n        void requestId;\r\n        void cancellationReason;\r\n        void errorCode;\r\n        void error;\r\n    }\r\n\r\n    protected async handleSpeechPhrase(textBody: string): Promise<void> {\r\n\r\n        const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(textBody, this.privRequestSession.currentTurnAudioOffset);\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n\r\n        this.privRequestSession.onPhraseRecognized(simple.Offset + simple.Duration);\r\n\r\n        if (ResultReason.Canceled === resultReason) {\r\n            const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n            const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n            await this.cancelRecognitionLocal(\r\n                cancelReason,\r\n                cancellationErrorCode,\r\n                EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n        } else {\r\n            if (simple.RecognitionStatus !== RecognitionStatus.EndOfDictation) {\r\n                if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        simple.DisplayText,\r\n                        simple.Duration,\r\n                        simple.Offset,\r\n                        simple.Language,\r\n                        simple.LanguageDetectionConfidence,\r\n                        simple.SpeakerId,\r\n                        undefined,\r\n                        simple.asJson(),\r\n                        resultProps);\r\n                } else {\r\n                    const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(textBody, this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        detailed.Text,\r\n                        detailed.Duration,\r\n                        detailed.Offset,\r\n                        detailed.Language,\r\n                        detailed.LanguageDetectionConfidence,\r\n                        detailed.SpeakerId,\r\n                        undefined,\r\n                        detailed.asJson(),\r\n                        resultProps);\r\n                }\r\n\r\n                this.handleRecognizedCallback(result, result.offset, this.privRequestSession.sessionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected handleSpeechHypothesis(textBody: string): void {\r\n        const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(textBody, this.privRequestSession.currentTurnAudioOffset);\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            ResultReason.RecognizingSpeech,\r\n            hypothesis.Text,\r\n            hypothesis.Duration,\r\n            hypothesis.Offset,\r\n            hypothesis.Language,\r\n            hypothesis.LanguageDetectionConfidence,\r\n            hypothesis.SpeakerId,\r\n            undefined,\r\n            hypothesis.asJson(),\r\n            resultProps);\r\n\r\n        this.privRequestSession.onHypothesis(hypothesis.Offset);\r\n\r\n        this.handleRecognizingCallback(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n    }\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    AvatarSynthesizer,\r\n    PropertyId,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    ISynthesisSectionVideo,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\n\r\nexport class AvatarSynthesisAdapter extends SynthesisAdapterBase {\r\n    private readonly privAvatarSynthesizer: AvatarSynthesizer;\r\n    private readonly privAvatarConfig: AvatarConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        avatarSynthesizer: AvatarSynthesizer,\r\n        avatarConfig: AvatarConfig,\r\n        ) {\r\n\r\n        super(authentication, connectionFactory,\r\n            synthesizerConfig, undefined);\r\n        this.privAvatarSynthesizer = avatarSynthesizer;\r\n        this.privSynthesizer = avatarSynthesizer as Synthesizer;\r\n        this.privAvatarConfig = avatarConfig;\r\n    }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(undefined);\r\n    }\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        this.privSynthesizerConfig.synthesisVideoSection = {\r\n            format: {\r\n                bitrate: this.privAvatarConfig.videoFormat?.bitrate,\r\n                codec: this.privAvatarConfig.videoFormat?.codec,\r\n                crop: {\r\n                    bottomRight: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.y,\r\n                    },\r\n                    topLeft: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.y,\r\n                    },\r\n                },\r\n                resolution: {\r\n                    height: this.privAvatarConfig.videoFormat?.height,\r\n                    width: this.privAvatarConfig.videoFormat?.width,\r\n                },\r\n            },\r\n            protocol: {\r\n                name: \"WebRTC\",\r\n                webrtcConfig: {\r\n                    clientDescription: btoa(this.privSynthesizerConfig.parameters.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP)),\r\n                    iceServers: this.privAvatarConfig.remoteIceServers ?? this.privAvatarSynthesizer.iceServers,\r\n                },\r\n            },\r\n            talkingAvatar: {\r\n                background: {\r\n                    color: this.privAvatarConfig.backgroundColor,\r\n                    image: {\r\n                        url: this.privAvatarConfig.backgroundImage?.toString(),\r\n                    }\r\n                },\r\n                character: this.privAvatarConfig.character,\r\n                customized: this.privAvatarConfig.customized,\r\n                style: this.privAvatarConfig.style,\r\n                useBuiltInVoice: this.privAvatarConfig.useBuiltInVoice,\r\n            }\r\n        } as ISynthesisSectionVideo;\r\n    }\r\n\r\n\r\n    protected onAvatarEvent(metadata: ISynthesisMetadata): void {\r\n        if (!!this.privAvatarSynthesizer.avatarEventReceived) {\r\n            const avatarEventArgs: AvatarEventArgs = new AvatarEventArgs(\r\n                metadata.Data.Offset,\r\n                metadata.Data.Name);\r\n            try {\r\n                this.privAvatarSynthesizer.avatarEventReceived(this.privAvatarSynthesizer, avatarEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Represents the source of speech recognition invocation.\r\n */\r\nexport enum InvocationSource {\r\n    /**\r\n     * No invocation source specified.\r\n     */\r\n    None = \"None\",\r\n\r\n    /**\r\n     * Voice activation with a keyword.\r\n     */\r\n    VoiceActivationWithKeyword = \"VoiceActivationWithKeyword\"\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privSource: Blob | Buffer;\r\n\r\n    private privFilename: string;\r\n\r\n    private privHeaderEnd: number = 44;\r\n\r\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = (file as File).name;\r\n        } else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\r\n\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return Promise.resolve({\r\n            detach: async (): Promise<void> => {\r\n                stream.readEnded();\r\n                delete this.privStreams[audioNodeId];\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                await this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl): Promise<{\r\n            bitspersample: number;\r\n            channelcount: number;\r\n            connectivity: connectivity.Unknown;\r\n            manufacturer: string;\r\n            model: string;\r\n            samplerate: number;\r\n            type: type.File;\r\n        }> => ( Promise.resolve({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            })\r\n        ));\r\n    }\r\n\r\n    private readHeader(): Promise<AudioStreamFormatImpl> {\r\n        // Read the wave header.\r\n        const maxHeaderSize: number = 4296;\r\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (header: ArrayBuffer): void => {\r\n            const view: DataView = new DataView(header);\r\n\r\n            const getWord = (index: number): string => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n\r\n            const formatSize: number = view.getInt32(16, true);\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n        };\r\n\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader: FileReader = new FileReader();\r\n\r\n            reader.onload = (event: Event): void => {\r\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                processHeader(header);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(header);\r\n        } else {\r\n            const h: Buffer = header as Buffer;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n\r\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        const onerror = (error: string): void => {\r\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n            throw new Error(errorMsg);\r\n        };\r\n\r\n        try {\r\n            await this.turnOn();\r\n\r\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\r\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n            this.privStreams[audioNodeId] = stream;\r\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\r\n\r\n            const processFile = (buff: ArrayBuffer): void => {\r\n                if (stream.isClosed) {\r\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                }\r\n\r\n                stream.writeStreamChunk({\r\n                    buffer: buff,\r\n                    isEnd: false,\r\n                    timeReceived: Date.now(),\r\n                });\r\n                stream.close();\r\n            };\r\n\r\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                const reader: FileReader = new FileReader();\r\n                reader.onerror = (ev: ProgressEvent<FileReader>): void  =>  onerror(ev.toString());\r\n\r\n                reader.onload = (event: Event): void => {\r\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                    processFile(fileBuffer);\r\n                };\r\n\r\n                reader.readAsArrayBuffer(chunk);\r\n            } else {\r\n                const c: Buffer = chunk as Buffer;\r\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n            }\r\n\r\n            return stream;\r\n        } catch (e) {\r\n            onerror(e as string);\r\n        }\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileResult\r\n */\r\nexport class VoiceProfileResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (reason === ResultReason.Canceled) {\r\n            Contracts.throwIfNullOrUndefined(statusText, \"statusText\");\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileCancellationDetails\r\n */\r\nexport class VoiceProfileCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileCancellationDetails object for the canceled VoiceProfileResult.\r\n     * @member VoiceProfileCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileResult): VoiceProfileCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the point system for pronunciation score calibration; default value is FivePoint.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGradingSystem\r\n */\r\nexport enum PronunciationAssessmentGradingSystem {\r\n    /**\r\n     * Five point calibration\r\n     * @member PronunciationAssessmentGradingSystem.FivePoint\r\n     */\r\n    FivePoint = 1,\r\n\r\n    /**\r\n     * Hundred mark\r\n     * @member PronunciationAssessmentGradingSystem.HundredMark\r\n     */\r\n    HundredMark,\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n/**\r\n * The action to take on successful language detection\r\n */\r\nexport enum NextAction {\r\n    Recognize = \"Recognize\",\r\n    None = \"None\"\r\n}\r\n\r\n/**\r\n * This type defines the OnSuccess configuration for LanguageDetection\r\n */\r\nexport interface OnSuccess {\r\n    /**\r\n     * The action to take on success\r\n     */\r\n    action?: NextAction;\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { LogLevel } from \"../sdk/LogLevel.js\";\r\nimport { IEventListener, PlatformEvent } from \"../common/Exports.js\";\r\nimport { Contracts } from \"../sdk/Contracts.js\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: LogLevel;\r\n    private privLogPath: fs.PathLike = undefined;\r\n    private privEnableConsoleOutput: boolean = true;\r\n\r\n    public logCallback: (s: string) => void;\r\n\r\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public set logPath(path: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\r\n        this.privLogPath = path;\r\n    }\r\n\r\n    public set enableConsoleOutput(enableOutput: boolean) {\r\n        this.privEnableConsoleOutput = enableOutput;\r\n    }\r\n\r\n    public onEvent(event: PlatformEvent): void {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n            if (!!this.logCallback) {\r\n                this.logCallback(log);\r\n            }\r\n            if (!!this.privLogPath) {\r\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\r\n            }\r\n\r\n            if (this.privEnableConsoleOutput) {\r\n                switch (event.eventType) {\r\n                    case LogLevel.Debug:\r\n                        // eslint-disable-next-line no-console\r\n                        console.debug(log);\r\n                        break;\r\n                    case LogLevel.Info:\r\n                        // eslint-disable-next-line no-console\r\n                        console.info(log);\r\n                        break;\r\n                    case LogLevel.Warning:\r\n                        // eslint-disable-next-line no-console\r\n                        console.warn(log);\r\n                        break;\r\n                    case LogLevel.Error:\r\n                        // eslint-disable-next-line no-console\r\n                        console.error(log);\r\n                        break;\r\n                    default:\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(log);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString(event: PlatformEvent): string {\r\n        const logFragments = [\r\n            `${event.eventTime}`,\r\n            `${event.name}`,\r\n        ];\r\n\r\n        const e: any = event as any;\r\n        for (const prop in e) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                const value = e[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IAudioDestination\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ISynthesisMetadata, MetadataType } from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nimport {\r\n    ConnectingToSynthesisServiceEvent,\r\n    SpeechSynthesisEvent,\r\n    SynthesisStartedEvent,\r\n    SynthesisTriggeredEvent,\r\n} from \"./SynthesisEvents.js\";\r\n\r\nexport interface ISynthesisResponseContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface ISynthesisResponseAudio {\r\n    type: string;\r\n    streamId: string;\r\n}\r\n\r\nexport interface ISynthesisResponse {\r\n    context: ISynthesisResponseContext;\r\n    audio: ISynthesisResponseAudio;\r\n    webrtc: {\r\n        connectionString: string;\r\n    };\r\n}\r\n\r\nexport class SynthesisTurn {\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public set streamId(value: string) {\r\n        this.privStreamId = value;\r\n    }\r\n\r\n    public get audioOutputFormat(): AudioOutputFormatImpl {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSynthesisEnded(): boolean {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n\r\n    public get isSynthesizing(): boolean {\r\n        return this.privIsSynthesizing;\r\n    }\r\n\r\n    public get currentTextOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    public get currentSentenceOffset(): number {\r\n        return this.privSentenceOffset;\r\n    }\r\n\r\n    // The number of bytes received for current turn\r\n    public get bytesReceived(): number {\r\n        return this.privBytesReceived;\r\n    }\r\n\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n\r\n    public get extraProperties(): PropertyCollection {\r\n        if (!!this.privWebRTCSDP) {\r\n            const properties = new PropertyCollection();\r\n            properties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, this.privWebRTCSDP);\r\n            return properties;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private privIsDisposed: boolean = false;\r\n    private privAuthFetchEventId: string;\r\n    private privIsSynthesizing: boolean = false;\r\n    private privIsSynthesisEnded: boolean = false;\r\n    private privBytesReceived: number = 0;\r\n    private privRequestId: string;\r\n    private privStreamId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privReceivedAudio: ArrayBuffer;\r\n    private privReceivedAudioWithHeader: ArrayBuffer;\r\n    private privTextOffset: number = 0;\r\n    private privNextSearchTextIndex: number = 0;\r\n    private privSentenceOffset: number = 0;\r\n    private privNextSearchSentenceIndex: number = 0;\r\n    private privPartialVisemeAnimation: string;\r\n    private privRawText: string;\r\n    private privIsSSML: boolean;\r\n    private privTurnAudioDestination: IAudioDestination;\r\n    private privAudioDuration: number;\r\n    private privWebRTCSDP: string;\r\n\r\n    public constructor() {\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudio) {\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        await this.readAllAudioFromStream();\r\n        return Promise.resolve(this.privReceivedAudio);\r\n    }\r\n\r\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudioWithHeader) {\r\n            return this.privReceivedAudioWithHeader;\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        if (this.audioOutputFormat.hasHeader) {\r\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\r\n            this.privReceivedAudioWithHeader = this.audioOutputFormat.addHeader(audio);\r\n            return this.privReceivedAudioWithHeader;\r\n        } else {\r\n            return this.getAllReceivedAudio();\r\n        }\r\n    }\r\n\r\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privSentenceOffset = 0;\r\n        this.privNextSearchSentenceIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        this.privWebRTCSDP = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceResponseMessage(responseJson: string): void {\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n\r\n    public onServiceTurnEndResponse(): void {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(responseJson: string): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        if (!!response.webrtc) {\r\n            this.privWebRTCSDP = response.webrtc.connectionString;\r\n        }\r\n    }\r\n\r\n    public onAudioChunkReceived(data: ArrayBuffer): void {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onTextBoundaryEvent(metadata: ISynthesisMetadata): void {\r\n        this.updateTextOffset(metadata.Data.text.Text, metadata.Type);\r\n    }\r\n\r\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n\r\n    public onSessionEnd(metadata: ISynthesisMetadata): void {\r\n        this.privAudioDuration = metadata.Data.Offset;\r\n    }\r\n\r\n    public async constructSynthesisResult(): Promise<SpeechSynthesisResult> {\r\n        const audioBuffer: ArrayBuffer = await this.getAllReceivedAudioWithHeader();\r\n        return new SpeechSynthesisResult(\r\n            this.requestId,\r\n            ResultReason.SynthesizingAudioCompleted,\r\n            audioBuffer,\r\n            undefined,\r\n            this.extraProperties,\r\n            this.audioDuration\r\n        );\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n\r\n    public onStopSynthesizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    public getAndClearVisemeAnimation(): string {\r\n        const animation: string = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n\r\n    protected onEvent(event: SpeechSynthesisEvent): void {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Check if the text is an XML(SSML) tag\r\n     * @param text\r\n     * @private\r\n     */\r\n    private static isXmlTag(text: string): boolean {\r\n        return text.length >= 2 && text[0] === \"<\" && text[text.length - 1] === \">\";\r\n    }\r\n\r\n    private updateTextOffset(text: string, type: MetadataType): void {\r\n        if (type === MetadataType.WordBoundary) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privTextOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.privSentenceOffset = this.privRawText.indexOf(text, this.privNextSearchSentenceIndex);\r\n            if (this.privSentenceOffset >= 0) {\r\n                this.privNextSearchSentenceIndex = this.privSentenceOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privSentenceOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async readAllAudioFromStream(): Promise<void> {\r\n        if (this.privIsSynthesisEnded) {\r\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n            try {\r\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\r\n            } catch (e) {\r\n                this.privReceivedAudio = new ArrayBuffer(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if current idx is in XML(SSML) tag\r\n     * @param idx\r\n     * @private\r\n     */\r\n    private withinXmlTag(idx: number): boolean {\r\n        return this.privRawText.indexOf(\"<\", idx + 1) > this.privRawText.indexOf(\">\", idx + 1);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations, RecognitionStatus } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.phrase\r\nexport interface ITranslationPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    Offset: number;\r\n    Duration: number;\r\n    Translation?: ITranslations;\r\n    Text?: string;\r\n    DisplayText?: string;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n}\r\n\r\nexport class TranslationPhrase implements ITranslationPhrase {\r\n    private privTranslationPhrase: ITranslationPhrase;\r\n\r\n    private constructor(phrase: ITranslationPhrase, baseOffset: number) {\r\n        this.privTranslationPhrase = phrase;\r\n        this.privTranslationPhrase.Offset += baseOffset;\r\n        this.privTranslationPhrase.RecognitionStatus = this.mapRecognitionStatus(this.privTranslationPhrase.RecognitionStatus);\r\n        if (this.privTranslationPhrase.Translation !== undefined) {\r\n            this.privTranslationPhrase.Translation.TranslationStatus = this.mapTranslationStatus(this.privTranslationPhrase.Translation.TranslationStatus);\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string, baseOffset: number): TranslationPhrase {\r\n        return new TranslationPhrase(JSON.parse(json) as ITranslationPhrase, baseOffset);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationResponse: { SpeechPhrase: ITranslationPhrase }, baseOffset: number): TranslationPhrase {\r\n        Contracts.throwIfNullOrUndefined(translationResponse, \"translationResponse\");\r\n        const phrase: ITranslationPhrase = translationResponse.SpeechPhrase;\r\n        translationResponse.SpeechPhrase = undefined;\r\n        phrase.Translation = (translationResponse as unknown as ITranslations);\r\n        phrase.Text = phrase.DisplayText;\r\n        return new TranslationPhrase(phrase, baseOffset);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privTranslationPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationPhrase.Duration;\r\n    }\r\n\r\n    public get Text(): string | undefined {\r\n        return this.privTranslationPhrase.Text;\r\n    }\r\n\r\n    public get Language(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Language;\r\n    }\r\n\r\n    public get Confidence(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Confidence;\r\n    }\r\n\r\n    public get Translation(): ITranslations | undefined {\r\n        return this.privTranslationPhrase.Translation;\r\n    }\r\n\r\n    public asJson(): string {\r\n        const jsonObj = { ...this.privTranslationPhrase };\r\n\r\n        // Convert the enum values to their string representations for serialization\r\n        const serializedObj: any = {\r\n            ...jsonObj,\r\n            RecognitionStatus: RecognitionStatus[jsonObj.RecognitionStatus]\r\n        };\r\n\r\n        if (jsonObj.Translation) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n            serializedObj.Translation = {\r\n                ...jsonObj.Translation,\r\n                TranslationStatus: TranslationStatus[jsonObj.Translation.TranslationStatus]\r\n            };\r\n        }\r\n\r\n        return JSON.stringify(serializedObj);\r\n    }\r\n\r\n    private mapRecognitionStatus(status: any): RecognitionStatus {\r\n        if (typeof status === \"string\") {\r\n            return RecognitionStatus[status as keyof typeof RecognitionStatus];\r\n        } else if (typeof status === \"number\") {\r\n            return status;\r\n        }\r\n    }\r\n\r\n    private mapTranslationStatus(status: any): TranslationStatus {\r\n        if (typeof status === \"string\") {\r\n            return TranslationStatus[status as keyof typeof TranslationStatus];\r\n        } else if (typeof status === \"number\") {\r\n            return status;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IIntentResponse {\r\n    query?: string;\r\n    topScoringIntent?: ISingleIntent;\r\n    entities?: IIntentEntity[];\r\n}\r\n\r\nexport interface IIntentEntity {\r\n    entity: string;\r\n    type: string;\r\n    startIndex: number;\r\n    endIndex: number;\r\n    score: number;\r\n}\r\n\r\nexport interface ISingleIntent {\r\n    intent: string;\r\n    score: number;\r\n}\r\n\r\nexport class IntentResponse implements IIntentResponse {\r\n    private privIntentResponse: IIntentResponse;\r\n\r\n    private constructor(json: string) {\r\n        if (json === \"\") {\r\n            this.privIntentResponse = {};\r\n        } else {\r\n            this.privIntentResponse = JSON.parse(json) as IIntentResponse;\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): IntentResponse {\r\n        return new IntentResponse(json);\r\n    }\r\n\r\n    public get query(): string {\r\n        return this.privIntentResponse.query;\r\n    }\r\n\r\n    public get topScoringIntent(): ISingleIntent {\r\n        return this.privIntentResponse.topScoringIntent;\r\n    }\r\n\r\n    public get entities(): IIntentEntity[] {\r\n        return this.privIntentResponse.entities;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport bent, { BentResponse, RequestBody } from \"bent\";\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports.js\";\r\nimport { IRequestOptions } from \"./Exports.js\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\ninterface JsonError {\r\n    error?: {\r\n        message: string;\r\n    };\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: { [key: string]: string } = {};\r\n            arr.forEach((line: string): void => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: { [key: string]: any } = {},\r\n        body: any = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: JsonError = {}): IRestResponse => {\r\n            const d: { statusText?: string; statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const send = (postData: RequestBody): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : `?${this.queryParams(queryParams)}`;\r\n            sendRequest(params, postData).then( async (data: BentResponse): Promise<void> => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    try {\r\n                        const j: JsonError = await data.json() as JsonError;\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                    } catch {\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                    }\r\n                }\r\n            }).catch((error: string): void => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.Post && body) {\r\n            this.privHeaders[\"content-type\"] = \"application/json\";\r\n            this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n        }\r\n        send(body as RequestBody);\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private queryParams(params: { [key: string]: string } = {}): string {\r\n        return Object.keys(params)\r\n            .map((k: string): string => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionEvent } from \"./ConnectionEvents.js\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection {\r\n    id: string;\r\n    state(): ConnectionState;\r\n    open(): Promise<ConnectionOpenResponse>;\r\n    send(message: ConnectionMessage): Promise<void>;\r\n    read(): Promise<ConnectionMessage>;\r\n    events: EventSource<ConnectionEvent>;\r\n    dispose(disposing?: string): Promise<void>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory.js\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { RecognitionMode } from \"../common.speech/ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch((): void => {\r\n                // Destroy the recognizer.\r\n                // We've done all we can here.\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                this.dispose(true).catch((): void => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { VoiceProfileType } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines Voice Profile class for Speaker Recognition\r\n * @class VoiceProfile\r\n */\r\nexport class VoiceProfile {\r\n    private privId: string;\r\n    private privProfileType: VoiceProfileType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} profileId - profileId of this Voice Profile.\r\n     * @param {VoiceProfileType} profileType - profileType of this Voice Profile.\r\n     */\r\n    public constructor(profileId: string, profileType: VoiceProfileType) {\r\n        this.privId = profileId;\r\n        this.privProfileType = profileType;\r\n    }\r\n\r\n    /**\r\n     * profileId of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileId\r\n     * @function\r\n     * @public\r\n     * @returns {string} profileId of this Voice Profile instance.\r\n     */\r\n    public get profileId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * profileType of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileType\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceProfileType} profile type of this Voice Profile instance.\r\n     */\r\n    public get profileType(): VoiceProfileType {\r\n        return this.privProfileType;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport { ActivityPayloadResponse, MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\n\r\nexport class DialogServiceTurnState {\r\n    private privRequestId: string;\r\n    private privIsCompleted: boolean;\r\n    private privAudioStream: PullAudioOutputStreamImpl;\r\n    private privTimeoutToken: any;\r\n    private privTurnManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(manager: DialogServiceTurnStateManager, requestId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privIsCompleted = false;\r\n        this.privAudioStream = null;\r\n        this.privTurnManager = manager;\r\n        this.resetTurnEndTimeout();\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStreamImpl {\r\n        // Called when is needed to stream.\r\n        this.resetTurnEndTimeout();\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public processActivityPayload(payload: ActivityPayloadResponse, audioFormat?: AudioOutputFormatImpl): PullAudioOutputStreamImpl {\r\n        if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\r\n            this.privAudioStream = AudioOutputStream.createPullStream() as PullAudioOutputStreamImpl;\r\n            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public endAudioStream(): void {\r\n        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\r\n            this.privAudioStream.close();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.endAudioStream();\r\n    }\r\n\r\n    private resetTurnEndTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.privTimeoutToken = setTimeout((): void => {\r\n            this.privTurnManager.CompleteTurn(this.privRequestId);\r\n            return;\r\n        }, 2000);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    RestConfigBase,\r\n    WebsocketConnection,\r\n} from \"../../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../../common/Exports.js\";\r\nimport { StringUtils } from \"../../common/StringUtils.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    ConversationImpl\r\n} from \"../../sdk/Transcription/Conversation.js\";\r\nimport { HeaderNames } from \"../HeaderNames.js\";\r\nimport { QueryParameterNames } from \"../QueryParameterNames.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./../ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    TranscriberConnectionFactory,\r\n    TranslationConnectionFactory,\r\n    WebsocketMessageFormatter,\r\n} from \"./../Exports.js\";\r\n\r\n/**\r\n * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,\r\n * as well as the virtual microphone array transcription endpoint\r\n */\r\nexport class ConversationTranslatorConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly CTS_VIRT_MIC_PATH: string = \"/speech/recognition/dynamicaudio\";\r\n\r\n    private privConvGetter: () => ConversationImpl;\r\n\r\n    public constructor(convGetter: () => ConversationImpl) {\r\n        super();\r\n\r\n        Contracts.throwIfNullOrUndefined(convGetter, \"convGetter\");\r\n        this.privConvGetter = convGetter;\r\n    }\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): Promise<IConnection> {\r\n        const isVirtMicArrayEndpoint = config.parameters.getProperty(\"ConversationTranslator_MultiChannelAudio\", \"\").toUpperCase() === \"TRUE\";\r\n\r\n        const convInfo = this.privConvGetter().room;\r\n        const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"\");\r\n\r\n        const replacementValues: IStringDictionary<string> = {\r\n            hostSuffix: ConnectionFactoryBase.getHostSuffix(region),\r\n            path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,\r\n            region: encodeURIComponent(region)\r\n        };\r\n        replacementValues[QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"\"));\r\n        replacementValues[QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);\r\n        replacementValues[QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);\r\n        replacementValues[QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? \"\" : (\"&\" + QueryParameterNames.CtsIsParticipant);\r\n\r\n        let endpointUrl: string = \"\";\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (isVirtMicArrayEndpoint) {\r\n            // connecting to the conversation transcription virtual microphone array endpoint\r\n            endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n            if (!endpointUrl) {\r\n                const hostName = config.parameters.getProperty(\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    \"transcribe.{region}.cts.speech{hostSuffix}\");\r\n\r\n                endpointUrl = \"wss://\" + hostName + \"{path}\";\r\n            }\r\n\r\n            // because the region can change during a session, we support being passed a format string which we can then\r\n            // replace with the correct information.\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            const parsedUrl = new URL(endpointUrl);\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                queryParams[key] = val;\r\n            });\r\n\r\n            const connFactory = new TranscriberConnectionFactory();\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n\r\n            // Some query parameters are required for the CTS endpoint, let's explicity set them here\r\n            queryParams[QueryParameterNames.CtsMeetingId] = replacementValues[QueryParameterNames.CtsMeetingId];\r\n            queryParams[QueryParameterNames.CtsDeviceId] = replacementValues[QueryParameterNames.CtsDeviceId];\r\n            if (!convInfo.isHost) {\r\n                queryParams[QueryParameterNames.CtsIsParticipant] = \"\"; // this doesn't have a value so set to an empty string\r\n            }\r\n\r\n            if (!(QueryParameterNames.Format in queryParams)) {\r\n                queryParams[QueryParameterNames.Format] = \"simple\";\r\n            }\r\n\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                parsedUrl.searchParams.set(key, queryParams[key]);\r\n                delete queryParams[key];\r\n            });\r\n\r\n            endpointUrl = parsedUrl.toString();\r\n\r\n        } else {\r\n            // connecting to regular translation endpoint\r\n            const connFactory = new TranslationConnectionFactory();\r\n\r\n            endpointUrl = connFactory.getEndpointUrl(config, true);\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n        }\r\n\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[RestConfigBase.configParams.token] = convInfo.token;\r\n        if (!!authInfo.token) {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"\").toUpperCase() === \"TRUE\";\r\n        return Promise.resolve(new WebsocketConnection(endpointUrl, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId));\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n/**\r\n * The action enum when speech recognition return a final phrase result\r\n */\r\nexport enum NextAction {\r\n    None = \"None\",\r\n    Translate = \"Translate\"\r\n}\r\n\r\n/**\r\n * The on success configuration\r\n */\r\nexport interface OnSuccess {\r\n    /**\r\n     * The action to take on success\r\n     */\r\n    action?: NextAction;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string | number | boolean} def - The default value which is returned if the parameter\r\n     * is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string | number | boolean): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        if (def === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return String(def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection}  destinationCollection - The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId): void => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { createNoDashGuid } from \"../../common/Guid.js\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     * PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async (): Promise<void> => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n super();\r\n}\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n/**\r\n * The phrase result output type\r\n */\r\nexport enum PhraseResultOutputType {\r\n    Always = \"Always\",\r\n    None = \"None\"\r\n}\r\n\r\n/**\r\n * The phrase results configuration\r\n */\r\nexport interface PhraseResults {\r\n    /**\r\n     * The result type\r\n     */\r\n    resultType?: PhraseResultOutputType;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\nexport interface EnrollmentResultDetails {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: number;\r\n    enrollmentsSpeechLength: number;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: number;\r\n    audioLength: number;\r\n    audioSpeechLength: number;\r\n    enrollmentStatus: string;\r\n}\r\n\r\nexport interface EnrollmentResultJSON {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: string;\r\n    enrollmentsSpeechLength: string;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: string;\r\n    audioLength: string;\r\n    audioSpeechLength: string;\r\n    enrollmentStatus: string;\r\n    remainingEnrollments?: number;\r\n    identificationProfileId?: string;\r\n    verificationProfileId?: string;\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileEnrollmentResult\r\n */\r\nexport class VoiceProfileEnrollmentResult {\r\n    private privReason: ResultReason;\r\n    private privDetails: EnrollmentResultDetails;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, json: string, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (!!json) {\r\n                this.privDetails = JSON.parse(json) as EnrollmentResultDetails;\r\n                if (this.privDetails.enrollmentStatus.toLowerCase() === \"enrolling\") {\r\n                    this.privReason = ResultReason.EnrollingVoiceProfile;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get enrollmentsCount(): number {\r\n        return this.privDetails.enrollmentsCount;\r\n    }\r\n\r\n    public get enrollmentsLength(): number {\r\n        return this.privDetails.enrollmentsLength;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get enrollmentResultDetails(): EnrollmentResultDetails {\r\n        return this.privDetails;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public static FromIdentificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getIdentificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public static FromVerificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getVerificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private static getIdentificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount || 0,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.identificationProfileId,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n\r\n    private static getVerificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.verificationProfileId,\r\n            remainingEnrollmentsCount: json.remainingEnrollments || json.remainingEnrollmentsCount,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileEnrollmentCancellationDetails\r\n */\r\nexport class VoiceProfileEnrollmentCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileEnrollmentCancellationDetails object for the canceled VoiceProfileEnrollmentResult.\r\n     * @member VoiceProfileEnrollmentCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileEnrollmentResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileEnrollmentCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileEnrollmentResult): VoiceProfileEnrollmentCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileEnrollmentCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events,\r\n    Timeout,\r\n} from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig.js\";\r\nimport { ConversationImpl } from \"../../sdk/Transcription/Conversation.js\";\r\nimport { Callback, IConversation } from \"../../sdk/Transcription/IConversation.js\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory.js\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationRecognizer,\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n    private privConversation: ConversationImpl;\r\n    private privTimeoutToken: any;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number;\r\n    private privClearTimeout: (id: number) => void;\r\n\r\n    public constructor(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privConversation = conversationImpl;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n        const webWorkerLoadType: string = this.privProperties.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n            this.privClearTimeout = Timeout.clearTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privClearTimeout = window.clearTimeout.bind(window);\r\n            } else {\r\n                this.privSetTimeout = setTimeout;\r\n                this.privClearTimeout = clearTimeout;\r\n            }\r\n        }\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.resetConversationTimeout();\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (this.privTimeoutToken !== undefined) {\r\n               // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n               this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privReco.disconnect().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle update of service auth token (#694)\r\n     */\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversation.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n            }\r\n            this.privConnection = undefined;\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            if (this.privTimeoutToken !== undefined) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        const PromiseToEmptyCallback = <T>(promise: Promise<T>, cb?: Callback, err?: Callback): void => {\r\n            if (promise !== undefined) {\r\n                promise.then((): void => {\r\n                    try {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(`'Unhandled error on promise callback: ${e as string}'`);\r\n                        }\r\n                    }\r\n                }, (reason: any): void => {\r\n                    try {\r\n                        if (!!err) {\r\n                            err(reason);\r\n                        }\r\n                        // eslint-disable-next-line no-empty\r\n                    } catch (error) { }\r\n                });\r\n            } else {\r\n                if (!!err) {\r\n                    err(\"Null promise\");\r\n                }\r\n            }\r\n        };\r\n\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n        this.resetConversationTimeout();\r\n    }\r\n\r\n    private resetConversationTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            this.privClearTimeout(this.privTimeoutToken);\r\n        }\r\n\r\n        this.privTimeoutToken = this.privSetTimeout((): void => {\r\n            this.sendRequest(this.privConversation.getKeepAlive());\r\n        }, 60000);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define speech synthesis audio output formats.\r\n * @enum SpeechSynthesisOutputFormat\r\n * Updated in version 1.17.0\r\n */\r\nexport enum SpeechSynthesisOutputFormat {\r\n    /**\r\n     * raw-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\r\n     */\r\n    Raw8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * riff-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\r\n     */\r\n    Riff16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\r\n     */\r\n    Audio16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-32kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\r\n     */\r\n    Audio16Khz32KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-128kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\r\n     */\r\n    Audio16Khz128KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-64kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\r\n     */\r\n    Audio16Khz64KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-48kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\r\n     */\r\n    Audio24Khz48KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\r\n     */\r\n    Audio24Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-160kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\r\n     */\r\n    Audio24Khz160KBitRateMonoMp3,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-truesilk\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\r\n     */\r\n    Raw16Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * riff-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\r\n     */\r\n    Riff16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\r\n     */\r\n    Riff8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n     */\r\n    Riff24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\r\n     */\r\n    Riff8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\r\n     */\r\n    Raw16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\r\n     */\r\n    Raw24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\r\n     */\r\n    Raw8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * ogg-16khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\r\n     */\r\n    Ogg16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * ogg-24khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\r\n     */\r\n    Ogg24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\r\n     */\r\n    Raw48Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\r\n     */\r\n\r\n    Riff48Khz16BitMonoPcm,\r\n    /**\r\n     * audio-48khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\r\n     */\r\n    Audio48Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-48khz-192kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\r\n     */\r\n    Audio48Khz192KBitRateMonoMp3,\r\n\r\n    /**\r\n     * ogg-48khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\r\n     */\r\n    Ogg48Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-16khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\r\n     */\r\n    Webm16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-24khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\r\n     */\r\n    Webm24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-truesilk\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk\r\n     */\r\n     Raw24Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * raw-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw\r\n     */\r\n     Raw8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw\r\n     */\r\n     Riff8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * webm-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec in a webm container, with bitrate of 24kbps, optimized for IoT scenario.\r\n     * Added in version 1.19.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Webm24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-16khz-16bit-32kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 32kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus\r\n     */\r\n    Audio16Khz16Bit32KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-48kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 48kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit48KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 24kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * raw-22050hz-16bit-mono-pcm\r\n     * Raw PCM audio at 22050Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm\r\n     */\r\n    Raw22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-22050hz-16bit-mono-pcm\r\n     * PCM audio at 22050Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm\r\n     */\r\n    Riff22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-44100hz-16bit-mono-pcm\r\n     * Raw PCM audio at 44100Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm\r\n     */\r\n    Raw44100Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-44100hz-16bit-mono-pcm\r\n     * PCM audio at 44100Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm\r\n     */\r\n    Riff44100Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * amr-wb-16000hz\r\n     * AMR-WB audio at 16kHz sampling rate.\r\n     * Added in version 1.38.0\r\n     * @member SpeechSynthesisOutputFormat.AmrWb16000Hz\r\n     */\r\n    AmrWb16000Hz,\r\n\r\n    /**\r\n     * g722-16khz-64kbps\r\n     * G.722 audio at 16kHz sampling rate and 64kbps bitrate.\r\n     * Added in version 1.38.0\r\n     */\r\n    G72216Khz64Kbps\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventType } from \"../common/Exports.js\";\r\n\r\n/**\r\n * Define event severity types for setting logging output.\r\n * @class LogLevel\r\n */\r\n\r\nexport { EventType as LogLevel };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst createGuid: () => string = (): string => uuid();\r\n\r\nconst createNoDashGuid: () => string = (): string => createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n\r\nexport { createGuid, createNoDashGuid };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface ITurnStatusResponsePayload {\r\n    interactionId: string;\r\n    conversationId: string;\r\n    statusCode: any;\r\n}\r\n\r\nexport class TurnStatusResponsePayload implements ITurnStatusResponsePayload {\r\n    private privMessageStatusResponse: ITurnStatusResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privMessageStatusResponse = JSON.parse(json) as ITurnStatusResponsePayload;\r\n    }\r\n\r\n    public static fromJSON(json: string): TurnStatusResponsePayload {\r\n        return new TurnStatusResponsePayload(json);\r\n    }\r\n\r\n    public get interactionId(): string {\r\n        return this.privMessageStatusResponse.interactionId;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privMessageStatusResponse.conversationId;\r\n    }\r\n\r\n    public get statusCode(): any {\r\n        // Payloads may contain a limited set of textual representations or a numeric status\r\n        // code. The textual values are here converted into numeric ones.\r\n        switch (this.privMessageStatusResponse.statusCode) {\r\n            case \"Success\":\r\n                return 200;\r\n            case \"Failed\":\r\n                return 400;\r\n            case \"TimedOut\":\r\n                return 429;\r\n            default:\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n                return this.privMessageStatusResponse.statusCode;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n    None,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private privName: string;\r\n    private privEventId: string;\r\n    private privEventTime: string;\r\n    private privEventType: EventType;\r\n    private privMetadata: IStringDictionary<string>;\r\n\r\n    public constructor(eventName: string, eventType: EventType) {\r\n        this.privName = eventName;\r\n        this.privEventId = createNoDashGuid();\r\n        this.privEventTime = new Date().toISOString();\r\n        this.privEventType = eventType;\r\n        this.privMetadata = { };\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get eventId(): string {\r\n        return this.privEventId;\r\n    }\r\n\r\n    public get eventTime(): string {\r\n        return this.privEventTime;\r\n    }\r\n\r\n    public get eventType(): EventType {\r\n        return this.privEventType;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { Hints } from \"./Hints\";\r\nimport { Item } from \"./Item\";\r\n\r\n/**\r\n * Represents the type of the Intent.\r\n */\r\nexport enum GroupType {\r\n    IntentText = \"IntentText\",\r\n    IntentEntity = \"IntentEntity\",\r\n    Generic = \"Generic\",\r\n    People = \"People\",\r\n    Place = \"Place\",\r\n    DynamicEntity = \"DynamicEntity\"\r\n}\r\n\r\n/**\r\n * Represents the type of the substring match.\r\n */\r\nexport enum SubstringMatchType {\r\n    None = \"None\",\r\n    LeftRooted = \"LeftRooted\",\r\n    PartialName = \"PartialName\",\r\n    MiddleOfSentence = \"MiddleOfSentence\"\r\n}\r\n\r\n/**\r\n * Internal class representing a Group in the DGI v1 grammar.\r\n */\r\nexport interface Group {\r\n    /**\r\n     * The Type of the Group in the grammar.\r\n     */\r\n    type: GroupType;\r\n\r\n    /**\r\n     * Gets the Hints in the Grammar.\r\n     * Required when Type=IntentEntity\r\n     */\r\n    hints?: Hints;\r\n\r\n    /**\r\n     * Gets the Grammar name.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Gets the substring match.\r\n     */\r\n    substringMatch?: SubstringMatchType;\r\n\r\n    /**\r\n     * Gets the Items in the Grammar.\r\n     * Required when Type=IntentText, Optional when Type=IntentEntity but need to remove unused Open IntentEntity\r\n     */\r\n    items?: Item[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionResult,\r\n    ConversationTranscriber,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\nimport { SpeakerDiarization, SpeakerDiarizationMode } from \"./ServiceMessages/PhraseDetection/SpeakerDiarization.js\";\r\nimport { RecognitionMode } from \"./ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class ConversationTranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privConversationTranscriber: ConversationTranscriber;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationTranscriber: ConversationTranscriber) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationTranscriber);\r\n        this.privConversationTranscriber = conversationTranscriber;\r\n        this.setSpeakerDiarizationJson();\r\n    }\r\n\r\n    protected setSpeakerDiarizationJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const phraseDetection = this.privSpeechContext.getContext().phraseDetection || {};\r\n            phraseDetection.mode = RecognitionMode.Conversation;\r\n            const speakerDiarization: SpeakerDiarization = {};\r\n            speakerDiarization.mode = SpeakerDiarizationMode.Anonymous;\r\n            speakerDiarization.audioSessionId = this.privDiarizationSessionId;\r\n            speakerDiarization.audioOffsetMs = 0;\r\n            speakerDiarization.diarizeIntermediates = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_DiarizeIntermediateResults, \"false\") === \"true\";\r\n            phraseDetection.speakerDiarization = speakerDiarization;\r\n            this.privSpeechContext.getContext().phraseDetection = phraseDetection;\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: ConversationTranscriptionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                result = new ConversationTranscriptionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    hypothesis.Offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    hypothesis.SpeakerId,\r\n                    undefined,\r\n                    hypothesis.asJson(),\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(hypothesis.Offset);\r\n\r\n                const ev = new ConversationTranscriptionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privConversationTranscriber.transcribing) {\r\n                    try {\r\n                        this.privConversationTranscriber.transcribing(this.privConversationTranscriber, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                simple.asJson(),\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody, this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                detailed.Offset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                detailed.asJson(),\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: ConversationTranscriptionEventArgs = new ConversationTranscriptionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privConversationTranscriber.transcribed) {\r\n                            try {\r\n                                this.privConversationTranscriber.transcribed(this.privConversationTranscriber, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privConversationTranscriber.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privConversationTranscriber.canceled(this.privConversationTranscriber, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { ConsoleLoggingListener } from \"../common.browser/Exports.js\";\r\nimport { Events } from \"../common/Exports.js\";\r\nimport { LogLevel } from \"./LogLevel.js\";\r\n\r\ntype LogCallback = (s: string) => void;\r\n\r\n/**\r\n * Defines diagnostics API for managing console output\r\n * Added in version 1.21.0\r\n */\r\nexport class Diagnostics {\r\n    private static privListener: ConsoleLoggingListener = undefined;\r\n\r\n    public static SetLoggingLevel(logLevel: LogLevel): void {\r\n        this.privListener = new ConsoleLoggingListener(logLevel);\r\n        Events.instance.attachConsoleListener(this.privListener);\r\n    }\r\n\r\n    public static StartConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = true;\r\n        }\r\n    }\r\n\r\n    public static StopConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = false;\r\n        }\r\n    }\r\n\r\n    public static SetLogOutputPath(path: string): void {\r\n        if (typeof window === \"undefined\") {\r\n            if (!!this.privListener) {\r\n                this.privListener.logPath = path;\r\n            }\r\n        } else {\r\n            throw new Error(\"File system logging not available in browser.\");\r\n        }\r\n    }\r\n\r\n\r\n    public static set onLogOutput( callback: LogCallback ) {\r\n        if (!!this.privListener) {\r\n            this.privListener.logCallback = callback;\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display?: string;\r\n    DisplayText?: string;\r\n    Words?: IWord[];\r\n    DisplayWords?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string, baseOffset: number) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = this.mapRecognitionStatus(this.privDetailedSpeechPhrase.RecognitionStatus);\r\n        this.updateOffsets(baseOffset);\r\n    }\r\n\r\n    public static fromJSON(json: string, baseOffset: number): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json, baseOffset);\r\n    }\r\n\r\n    private updateOffsets(baseOffset: number): void {\r\n        this.privDetailedSpeechPhrase.Offset += baseOffset;\r\n\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words) {\r\n                    for (const word of phrase.Words) {\r\n                        word.Offset += baseOffset;\r\n                    }\r\n                }\r\n                if (!!phrase.DisplayWords) {\r\n                    for (const word of phrase.DisplayWords) {\r\n                        word.Offset += baseOffset;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public asJson(): string {\r\n        const jsonObj = { ...this.privDetailedSpeechPhrase };\r\n        // Convert the enum value to its string representation for serialization purposes.\r\n        return JSON.stringify({\r\n            ...jsonObj,\r\n            RecognitionStatus: RecognitionStatus[jsonObj.RecognitionStatus] as keyof typeof RecognitionStatus\r\n        });\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\r\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\r\n        }\r\n        return this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n    private mapRecognitionStatus(status: any): RecognitionStatus {\r\n        if (typeof status === \"string\") {\r\n            return RecognitionStatus[status as keyof typeof RecognitionStatus];\r\n        } else if (typeof status === \"number\") {\r\n            return status;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports.js\";\r\nimport { OutputFormat } from \"./OutputFormat.js\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set applicationId(value: string) { }\r\n\r\n    public static get DialogTypes(): { BotFramework: string; CustomCommands: string } {\r\n        return {\r\n            BotFramework: \"bot_framework\",\r\n            CustomCommands: \"custom_commands\"\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return this.privSpeechConfig.outputFormat;\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechConfig.outputFormat = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        void def;\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        void channel;\r\n        this.privSpeechConfig.setServiceProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nimport { CancellationErrorCode, CancellationReason, IntentRecognitionEventArgs, IntentRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of intent recognition canceled result events.\r\n * @class IntentRecognitionCanceledEventArgs\r\n */\r\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} result - The result of the intent recognition.\r\n     * @param {string} offset - The offset.\r\n     * @param {IntentRecognitionResult} sessionId - The session id.\r\n     */\r\n    public constructor(\r\n        reason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result?: IntentRecognitionResult,\r\n        offset?: number,\r\n        sessionId?: string) {\r\n        super(result, offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechSynthesisEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n}\r\n\r\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\r\n    private privSessionAudioDestinationId: string;\r\n    private privTurnAudioDestinationId: string;\r\n\r\n    public constructor(requestId: string, sessionAudioDestinationId: string, turnAudioDestinationId: string) {\r\n        super(\"SynthesisTriggeredEvent\", requestId);\r\n\r\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\r\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\r\n    }\r\n\r\n    public get audioSessionDestinationId(): string {\r\n        return this.privSessionAudioDestinationId;\r\n    }\r\n\r\n    public get audioTurnDestinationId(): string {\r\n        return this.privTurnAudioDestinationId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"SynthesisStartedEvent\", requestId);\r\n\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details\r\n     * can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details\r\n     * can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains a finalized acceptance of a provided keyword.\r\n     * Speech recognition will continue unless otherwise configured.\r\n     * @member ResultReason.RecognizedKeyword\r\n     */\r\n    RecognizedKeyword,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n\r\n    /**\r\n     * Indicates the speech synthesis is now started\r\n     * @member ResultReason.SynthesizingAudioStarted\r\n     */\r\n    SynthesizingAudioStarted,\r\n\r\n    /**\r\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\r\n     * @member ResultReason.EnrollingVoiceProfile\r\n     */\r\n    EnrollingVoiceProfile,\r\n\r\n    /**\r\n     * Indicates the voice profile has been enrolled.\r\n     * @member ResultReason.EnrolledVoiceProfile\r\n     */\r\n    EnrolledVoiceProfile,\r\n\r\n    /**\r\n     * Indicates successful identification of some speakers.\r\n     * @member ResultReason.RecognizedSpeakers\r\n     */\r\n    RecognizedSpeakers,\r\n\r\n    /**\r\n     * Indicates successfully verified one speaker.\r\n     * @member ResultReason.RecognizedSpeaker\r\n     */\r\n    RecognizedSpeaker,\r\n\r\n    /**\r\n     * Indicates a voice profile has been reset successfully.\r\n     * @member ResultReason.ResetVoiceProfile\r\n     */\r\n    ResetVoiceProfile,\r\n\r\n    /**\r\n     * Indicates a voice profile has been deleted successfully.\r\n     * @member ResultReason.DeletedVoiceProfile\r\n     */\r\n    DeletedVoiceProfile,\r\n\r\n    /**\r\n     * Indicates synthesis voices list has been successfully retrieved.\r\n     * @member ResultReason.VoicesListRetrieved\r\n     */\r\n    VoicesListRetrieved,\r\n\r\n    /**\r\n     * Indicates the transcription result contains hypothesis text and its translation(s) for\r\n     * other participants in the conversation.\r\n     * @member ResultReason.TranslatingParticipantSpeech\r\n     */\r\n    TranslatingParticipantSpeech,\r\n\r\n    /**\r\n     * Indicates the transcription result contains final text and corresponding translation(s)\r\n     * for other participants in the conversation. Speech Recognition and Translation are now\r\n     * complete for this phrase.\r\n     * @member ResultReason.TranslatedParticipantSpeech\r\n     */\r\n    TranslatedParticipantSpeech,\r\n\r\n    /**\r\n     * <summary>\r\n     * Indicates the transcription result contains the instant message and corresponding\r\n     * translation(s).\r\n     * @member ResultReason.TranslatedInstantMessage\r\n     */\r\n    TranslatedInstantMessage,\r\n\r\n    /**\r\n     * Indicates the transcription result contains the instant message for other participants\r\n     * in the conversation and corresponding translation(s).\r\n     * @member ResultReason.TranslatedParticipantInstantMessage\r\n     */\r\n    TranslatedParticipantInstantMessage,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n    private privStopInputOnRelease: boolean;\r\n\r\n    public constructor(stopInputOnRelease: boolean) {\r\n        this.privStopInputOnRelease = stopInputOnRelease;\r\n    }\r\n\r\n    public record(context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        const attachScriptProcessor = (): void => {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            const scriptNode = (() => {\r\n                let bufferSize = 0;\r\n                try {\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                } catch (error) {\r\n                    // Webkit (<= version 31) requires a valid bufferSize.\r\n                    bufferSize = 2048;\r\n                    let audioSampleRate = context.sampleRate;\r\n                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                        bufferSize <<= 1;\r\n                        audioSampleRate >>= 1;\r\n                    }\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                }\r\n            })();\r\n            scriptNode.onaudioprocess = (event: AudioProcessingEvent): void => {\r\n                const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n                if (outputStream && !outputStream.isClosed) {\r\n                    const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                    if (!!waveFrame) {\r\n                        outputStream.writeStreamChunk({\r\n                            buffer: waveFrame,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        };\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n        const skipAudioWorklet = !!this.privSpeechProcessorScript && this.privSpeechProcessorScript.toLowerCase() === \"ignore\";\r\n\r\n        if (!!context.audioWorklet && !skipAudioWorklet) {\r\n            if (!this.privSpeechProcessorScript) {\r\n                const workletScript = `class SP extends AudioWorkletProcessor {\r\n                    constructor(options) {\r\n                      super(options);\r\n                    }\r\n                    process(inputs, outputs) {\r\n                      const input = inputs[0];\r\n                      const output = [];\r\n                      for (let channel = 0; channel < input.length; channel += 1) {\r\n                        output[channel] = input[channel];\r\n                      }\r\n                      this.port.postMessage(output[0]);\r\n                      return true;\r\n                    }\r\n                  }\r\n                  registerProcessor('speech-processor', SP);`;\r\n                const blob = new Blob([workletScript], { type: \"application/javascript; charset=utf-8\" });\r\n                this.privSpeechProcessorScript = URL.createObjectURL(blob);\r\n            }\r\n\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then((): void => {\r\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                    workletNode.port.onmessage = (ev: MessageEvent): void => {\r\n                        const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(workletNode);\r\n                    workletNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: workletNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                })\r\n                .catch((): void => {\r\n                    attachScriptProcessor();\r\n                });\r\n        } else {\r\n            try {\r\n                attachScriptProcessor();\r\n            } catch (err) {\r\n                throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err as string}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources(context: AudioContext): void {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                if (this.privStopInputOnRelease) {\r\n                    this.privMediaResources.stream.getTracks().forEach((track: MediaStreamTrack): void => track.stop());\r\n                }\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../PropertyCollection.js\";\r\nimport { ResultReason } from \"../ResultReason.js\";\r\nimport { TranslationRecognitionResult } from \"../TranslationRecognitionResult.js\";\r\nimport { Translations } from \"../Translations.js\";\r\n\r\nexport class ConversationTranslationResult extends TranslationRecognitionResult {\r\n    private privId: string;\r\n    private privOrigLang: string;\r\n\r\n    public constructor(participantId: string,\r\n                       translations: Translations,\r\n                       originalLanguage?: string,\r\n                       resultId?: string,\r\n                       reason?: ResultReason,\r\n                       text?: string,\r\n                       duration?: number,\r\n                       offset?: number,\r\n                       errorDetails?: string,\r\n                       json?: string,\r\n                       properties?: PropertyCollection) {\r\n        super(translations, resultId, reason, text, duration, offset, undefined, undefined, errorDetails, json, properties);\r\n        this.privId = participantId;\r\n        this.privOrigLang = originalLanguage;\r\n    }\r\n\r\n    /**\r\n     * The unique identifier for the participant this result is for.\r\n     */\r\n    public get participantId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * The original language this result was in.\r\n     */\r\n    public get originalLang(): string {\r\n        return this.privOrigLang;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.unsafeStringify = unsafeStringify;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    // SpeechConnectionFactory,\r\n    ConversationTranscriberConnectionFactory,\r\n    SpeechServiceConfig,\r\n    ConversationTranscriptionServiceRecognizer,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { RecognitionMode } from \"../../common.speech/ServiceMessages/PhraseDetection/PhraseDetectionContext.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n} from \"../Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"../SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition with speaker separation from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class ConversationTranscriber\r\n */\r\nexport class ConversationTranscriber extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new ConversationTranscriberConnectionFactory(), speechConfig.tokenCredential);\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): ConversationTranscriber {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new ConversationTranscriber(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event transcribing signals that an intermediate transcription result is received.\r\n     * @member ConversationTranscriber.prototype.transcribing\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribing: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event transcriber signals that a final recognition result is received.\r\n     * @member ConversationTranscriber.prototype.transcribed\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribed: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: ConversationTranscriptionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for transcription.\r\n     * @member ConversationTranscriber.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of transcription.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of transcription.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of transcription.\r\n     * @member ConversationTranscriber.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of transcription.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this conversation transcriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops conversation transcription.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        recognizerConfig.isSpeakerDiarizationEnabled = true;\r\n        return new ConversationTranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ResultReason,\r\n    PropertyCollection,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the avatar WebRTC connection result.\r\n * @class AvatarWebRTCConnectionResult\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarWebRTCConnectionResult extends SynthesisResult {\r\n    private readonly privSDPAnswer: RTCSessionDescriptionInit;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {RTCSessionDescriptionInit} SDPAnswer - The SDP answer of WebRTC connection.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(SDPAnswer?: RTCSessionDescriptionInit, resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privSDPAnswer = SDPAnswer;\r\n    }\r\n\r\n    /**\r\n     * Specifies SDP (Session Description Protocol) answer of WebRTC connection.\r\n     * @member AvatarWebRTCConnectionResult.prototype.SDPAnswer\r\n     * @function\r\n     * @public\r\n     * @returns {RTCSessionDescriptionInit} Specifies the SDP answer of WebRTC connection.\r\n     */\r\n    public get SDPAnswer(): RTCSessionDescriptionInit {\r\n        return this.privSDPAnswer;\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ConnectionMessage\r\n} from \"./Exports.js\";\r\n\r\nexport class ConnectionMessageEventArgs {\r\n\r\n    private privConnectionMessage: ConnectionMessage;\r\n\r\n    public constructor(message: ConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n    }\r\n\r\n    /**\r\n     * Gets the <see cref=\"ConnectionMessage\"/> associated with this <see cref=\"ConnectionMessageEventArgs\"/>.\r\n     */\r\n    public get message(): ConnectionMessage {\r\n        return this.privConnectionMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message event.\r\n     */\r\n    public toString(): string {\r\n        return \"Message: \" + this.privConnectionMessage.toString();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    SpeechRecognitionResult,\r\n    ConversationTranscriptionResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class AutoDetectSourceLanguageResult\r\n */\r\nexport class AutoDetectSourceLanguageResult {\r\n\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n\r\n    private constructor(language: string, languageDetectionConfidence: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        Contracts.throwIfNullOrUndefined(languageDetectionConfidence, \"languageDetectionConfidence\");\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a SpeechRecognitionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult} result - The recognition result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult): AutoDetectSourceLanguageResult {\r\n        return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a ConversationTranscriptionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromConversationTranscriptionResult\r\n     * @function\r\n     * @public\r\n     * @param {ConversationTranscriptionResult} result - The transcription result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n        public static fromConversationTranscriptionResult(result: ConversationTranscriptionResult): AutoDetectSourceLanguageResult {\r\n            return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n        }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { OnSuccess } from \"./OnSuccess\";\r\nimport { OnUnknown } from \"./OnUnknown\";\r\nimport { LanguageIdOutput } from \"./LanguageIdOutput\";\r\n\r\n/**\r\n * The enum that represents which mode will language detection take place\r\n * There is only detectAtAudioStart mode for now as language detection models are not trained for different modes\r\n * This enum can be extended in future to support different modes\r\n */\r\nexport enum LanguageIdDetectionMode {\r\n    DetectAtAudioStart = \"DetectAtAudioStart\",\r\n    DetectContinuous = \"DetectContinuous\",\r\n    DetectSegments = \"DetectSegments\"\r\n}\r\n\r\n/**\r\n * The language id detection mode, setting this will load the detection setting of MaxAudioDuration and MaxSpeechDuration\r\n * If the maxAudioDuration and maxSpeechDuration is set in the speech.context, then this detection mode will be ignored\r\n */\r\nexport enum LanguageIdDetectionPriority {\r\n    /**\r\n     * default, Service decides the best mode to use.\r\n     */\r\n    Auto = \"Auto\",\r\n\r\n    /**\r\n     * Offers lower latency via a trade-off of accuracy.\r\n     */\r\n    PrioritizeLatency = \"PrioritizeLatency\",\r\n\r\n    /**\r\n     * Offers higher accuracy via a trade-off of latency.\r\n     */\r\n    PrioritizeAccuracy = \"PrioritizeAccuracy\"\r\n}\r\n\r\n/**\r\n * The language id context\r\n */\r\nexport interface LanguageIdContext {\r\n    /**\r\n     * The candidate languages for speaker language detection.\r\n     */\r\n    languages: string[];\r\n\r\n    /**\r\n     * The on success action.\r\n     */\r\n    onSuccess?: OnSuccess;\r\n\r\n    /**\r\n     * The language detection mode.\r\n     */\r\n    mode?: LanguageIdDetectionMode;\r\n\r\n    /**\r\n     * The fallback language.\r\n     */\r\n    onUnknown?: OnUnknown;\r\n\r\n    /**\r\n     * The output\r\n     */\r\n    output?: LanguageIdOutput;\r\n\r\n    /**\r\n     * The max audio duration\r\n     */\r\n    maxAudioDuration?: number;\r\n\r\n    /**\r\n     * The max speech duration\r\n     */\r\n    maxSpeechDuration?: number;\r\n\r\n    /**\r\n     * The priority.\r\n     */\r\n    priority?: LanguageIdDetectionPriority;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"./Error.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class Events {\r\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static setEventSource(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.privInstance = eventSource;\r\n    }\r\n\r\n    public static get instance(): IEventSource<PlatformEvent> {\r\n        return Events.privInstance;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class ServiceEvent extends PlatformEvent {\r\n    private privJsonResult: string;\r\n\r\n    public constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\r\n      super(eventName, eventType);\r\n      this.privJsonResult = jsonstring;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private privConnectionId: string;\r\n\r\n    public constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n\r\n    public get connectionId(): string {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\n\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private privUri: string;\r\n    private privHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    public constructor(connectionId: string) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private privReason: string;\r\n    private privStatusCode: number;\r\n\r\n    public constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    private readonly privMessage: string;\r\n    private readonly privType: string;\r\n\r\n    public constructor(connectionId: string, message: string, type: string) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n\r\n    public get message(): string {\r\n        return this.privMessage;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private privNetworkReceivedTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkReceivedTime(): string {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private privNetworkSentTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkSentTime(): string {\r\n        return this.privNetworkSentTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionRedirectEvent extends ConnectionEvent {\r\n    private privRedirectUrl: string;\r\n    private privOriginalUrl?: string;\r\n    private privContext?: string;\r\n\r\n    public constructor(connectionId: string, redirectUrl: string, originalUrl?: string, context?: string) {\r\n        super(\"ConnectionRedirectEvent\", connectionId, EventType.Info);\r\n        this.privRedirectUrl = redirectUrl;\r\n        this.privOriginalUrl = originalUrl;\r\n        this.privContext = context;\r\n    }\r\n\r\n    public get redirectUrl(): string {\r\n        return this.privRedirectUrl;\r\n    }\r\n\r\n    public get originalUrl(): string | undefined {\r\n        return this.privOriginalUrl;\r\n    }\r\n\r\n    public get context(): string | undefined {\r\n        return this.privContext;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { TokenCredential } from \"@azure/core-auth\";\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig } from \"../common.speech/Exports.js\";\r\nimport { IAudioDestination, IStringDictionary, Queue } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, SpeechConfig, SpeechConfigImpl, SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\nexport abstract class Synthesizer {\r\n    private tokenCredential?: TokenCredential;\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privRestAdapter: SynthesisRestAdapter;\r\n    protected privProperties: PropertyCollection;\r\n    protected privConnectionFactory: ISynthesisConnectionFactory;\r\n    protected privDisposed: boolean;\r\n    protected privSynthesizing: boolean;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this Synthesizer.\r\n     * @member Synthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member Synthesizer.prototype.autoDetectSourceLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config to initialize the synthesizer.\r\n     */\r\n    protected constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n        this.tokenCredential = speechConfig.tokenCredential;\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"af-ZA\"]: \"af-ZA-AdriNeural\",\r\n            [\"am-ET\"]: \"am-ET-AmehaNeural\",\r\n            [\"ar-AE\"]: \"ar-AE-FatimaNeural\",\r\n            [\"ar-BH\"]: \"ar-BH-AliNeural\",\r\n            [\"ar-DZ\"]: \"ar-DZ-AminaNeural\",\r\n            [\"ar-EG\"]: \"ar-EG-SalmaNeural\",\r\n            [\"ar-IQ\"]: \"ar-IQ-BasselNeural\",\r\n            [\"ar-JO\"]: \"ar-JO-SanaNeural\",\r\n            [\"ar-KW\"]: \"ar-KW-FahedNeural\",\r\n            [\"ar-LY\"]: \"ar-LY-ImanNeural\",\r\n            [\"ar-MA\"]: \"ar-MA-JamalNeural\",\r\n            [\"ar-QA\"]: \"ar-QA-AmalNeural\",\r\n            [\"ar-SA\"]: \"ar-SA-HamedNeural\",\r\n            [\"ar-SY\"]: \"ar-SY-AmanyNeural\",\r\n            [\"ar-TN\"]: \"ar-TN-HediNeural\",\r\n            [\"ar-YE\"]: \"ar-YE-MaryamNeural\",\r\n            [\"bg-BG\"]: \"bg-BG-BorislavNeural\",\r\n            [\"bn-BD\"]: \"bn-BD-NabanitaNeural\",\r\n            [\"bn-IN\"]: \"bn-IN-BashkarNeural\",\r\n            [\"ca-ES\"]: \"ca-ES-JoanaNeural\",\r\n            [\"cs-CZ\"]: \"cs-CZ-AntoninNeural\",\r\n            [\"cy-GB\"]: \"cy-GB-AledNeural\",\r\n            [\"da-DK\"]: \"da-DK-ChristelNeural\",\r\n            [\"de-AT\"]: \"de-AT-IngridNeural\",\r\n            [\"de-CH\"]: \"de-CH-JanNeural\",\r\n            [\"de-DE\"]: \"de-DE-KatjaNeural\",\r\n            [\"el-GR\"]: \"el-GR-AthinaNeural\",\r\n            [\"en-AU\"]: \"en-AU-NatashaNeural\",\r\n            [\"en-CA\"]: \"en-CA-ClaraNeural\",\r\n            [\"en-GB\"]: \"en-GB-LibbyNeural\",\r\n            [\"en-HK\"]: \"en-HK-SamNeural\",\r\n            [\"en-IE\"]: \"en-IE-ConnorNeural\",\r\n            [\"en-IN\"]: \"en-IN-NeerjaNeural\",\r\n            [\"en-KE\"]: \"en-KE-AsiliaNeural\",\r\n            [\"en-NG\"]: \"en-NG-AbeoNeural\",\r\n            [\"en-NZ\"]: \"en-NZ-MitchellNeural\",\r\n            [\"en-PH\"]: \"en-PH-JamesNeural\",\r\n            [\"en-SG\"]: \"en-SG-LunaNeural\",\r\n            [\"en-TZ\"]: \"en-TZ-ElimuNeural\",\r\n            [\"en-US\"]: \"en-US-AvaMultilingualNeural\",\r\n            [\"en-ZA\"]: \"en-ZA-LeahNeural\",\r\n            [\"es-AR\"]: \"es-AR-ElenaNeural\",\r\n            [\"es-BO\"]: \"es-BO-MarceloNeural\",\r\n            [\"es-CL\"]: \"es-CL-CatalinaNeural\",\r\n            [\"es-CO\"]: \"es-CO-GonzaloNeural\",\r\n            [\"es-CR\"]: \"es-CR-JuanNeural\",\r\n            [\"es-CU\"]: \"es-CU-BelkysNeural\",\r\n            [\"es-DO\"]: \"es-DO-EmilioNeural\",\r\n            [\"es-EC\"]: \"es-EC-AndreaNeural\",\r\n            [\"es-ES\"]: \"es-ES-AlvaroNeural\",\r\n            [\"es-GQ\"]: \"es-GQ-JavierNeural\",\r\n            [\"es-GT\"]: \"es-GT-AndresNeural\",\r\n            [\"es-HN\"]: \"es-HN-CarlosNeural\",\r\n            [\"es-MX\"]: \"es-MX-DaliaNeural\",\r\n            [\"es-NI\"]: \"es-NI-FedericoNeural\",\r\n            [\"es-PA\"]: \"es-PA-MargaritaNeural\",\r\n            [\"es-PE\"]: \"es-PE-AlexNeural\",\r\n            [\"es-PR\"]: \"es-PR-KarinaNeural\",\r\n            [\"es-PY\"]: \"es-PY-MarioNeural\",\r\n            [\"es-SV\"]: \"es-SV-LorenaNeural\",\r\n            [\"es-US\"]: \"es-US-AlonsoNeural\",\r\n            [\"es-UY\"]: \"es-UY-MateoNeural\",\r\n            [\"es-VE\"]: \"es-VE-PaolaNeural\",\r\n            [\"et-EE\"]: \"et-EE-AnuNeural\",\r\n            [\"fa-IR\"]: \"fa-IR-DilaraNeural\",\r\n            [\"fi-FI\"]: \"fi-FI-SelmaNeural\",\r\n            [\"fil-PH\"]: \"fil-PH-AngeloNeural\",\r\n            [\"fr-BE\"]: \"fr-BE-CharlineNeural\",\r\n            [\"fr-CA\"]: \"fr-CA-SylvieNeural\",\r\n            [\"fr-CH\"]: \"fr-CH-ArianeNeural\",\r\n            [\"fr-FR\"]: \"fr-FR-DeniseNeural\",\r\n            [\"ga-IE\"]: \"ga-IE-ColmNeural\",\r\n            [\"gl-ES\"]: \"gl-ES-RoiNeural\",\r\n            [\"gu-IN\"]: \"gu-IN-DhwaniNeural\",\r\n            [\"he-IL\"]: \"he-IL-AvriNeural\",\r\n            [\"hi-IN\"]: \"hi-IN-MadhurNeural\",\r\n            [\"hr-HR\"]: \"hr-HR-GabrijelaNeural\",\r\n            [\"hu-HU\"]: \"hu-HU-NoemiNeural\",\r\n            [\"id-ID\"]: \"id-ID-ArdiNeural\",\r\n            [\"is-IS\"]: \"is-IS-GudrunNeural\",\r\n            [\"it-IT\"]: \"it-IT-IsabellaNeural\",\r\n            [\"ja-JP\"]: \"ja-JP-NanamiNeural\",\r\n            [\"jv-ID\"]: \"jv-ID-DimasNeural\",\r\n            [\"kk-KZ\"]: \"kk-KZ-AigulNeural\",\r\n            [\"km-KH\"]: \"km-KH-PisethNeural\",\r\n            [\"kn-IN\"]: \"kn-IN-GaganNeural\",\r\n            [\"ko-KR\"]: \"ko-KR-SunHiNeural\",\r\n            [\"lo-LA\"]: \"lo-LA-ChanthavongNeural\",\r\n            [\"lt-LT\"]: \"lt-LT-LeonasNeural\",\r\n            [\"lv-LV\"]: \"lv-LV-EveritaNeural\",\r\n            [\"mk-MK\"]: \"mk-MK-AleksandarNeural\",\r\n            [\"ml-IN\"]: \"ml-IN-MidhunNeural\",\r\n            [\"mr-IN\"]: \"mr-IN-AarohiNeural\",\r\n            [\"ms-MY\"]: \"ms-MY-OsmanNeural\",\r\n            [\"mt-MT\"]: \"mt-MT-GraceNeural\",\r\n            [\"my-MM\"]: \"my-MM-NilarNeural\",\r\n            [\"nb-NO\"]: \"nb-NO-PernilleNeural\",\r\n            [\"nl-BE\"]: \"nl-BE-ArnaudNeural\",\r\n            [\"nl-NL\"]: \"nl-NL-ColetteNeural\",\r\n            [\"pl-PL\"]: \"pl-PL-AgnieszkaNeural\",\r\n            [\"ps-AF\"]: \"ps-AF-GulNawazNeural\",\r\n            [\"pt-BR\"]: \"pt-BR-FranciscaNeural\",\r\n            [\"pt-PT\"]: \"pt-PT-DuarteNeural\",\r\n            [\"ro-RO\"]: \"ro-RO-AlinaNeural\",\r\n            [\"ru-RU\"]: \"ru-RU-SvetlanaNeural\",\r\n            [\"si-LK\"]: \"si-LK-SameeraNeural\",\r\n            [\"sk-SK\"]: \"sk-SK-LukasNeural\",\r\n            [\"sl-SI\"]: \"sl-SI-PetraNeural\",\r\n            [\"so-SO\"]: \"so-SO-MuuseNeural\",\r\n            [\"sr-RS\"]: \"sr-RS-NicholasNeural\",\r\n            [\"su-ID\"]: \"su-ID-JajangNeural\",\r\n            [\"sv-SE\"]: \"sv-SE-SofieNeural\",\r\n            [\"sw-KE\"]: \"sw-KE-RafikiNeural\",\r\n            [\"sw-TZ\"]: \"sw-TZ-DaudiNeural\",\r\n            [\"ta-IN\"]: \"ta-IN-PallaviNeural\",\r\n            [\"ta-LK\"]: \"ta-LK-KumarNeural\",\r\n            [\"ta-SG\"]: \"ta-SG-AnbuNeural\",\r\n            [\"te-IN\"]: \"te-IN-MohanNeural\",\r\n            [\"th-TH\"]: \"th-TH-PremwadeeNeural\",\r\n            [\"tr-TR\"]: \"tr-TR-AhmetNeural\",\r\n            [\"uk-UA\"]: \"uk-UA-OstapNeural\",\r\n            [\"ur-IN\"]: \"ur-IN-GulNeural\",\r\n            [\"ur-PK\"]: \"ur-PK-AsadNeural\",\r\n            [\"uz-UZ\"]: \"uz-UZ-MadinaNeural\",\r\n            [\"vi-VN\"]: \"vi-VN-HoaiMyNeural\",\r\n            [\"zh-CN\"]: \"zh-CN-XiaoxiaoNeural\",\r\n            [\"zh-HK\"]: \"zh-HK-HiuMaanNeural\",\r\n            [\"zh-TW\"]: \"zh-TW-HsiaoChenNeural\",\r\n            [\"zu-ZA\"]: \"zu-ZA-ThandoNeural\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = Synthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Synthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                await this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    protected async adapterSpeak(): Promise<void> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\r\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n        }\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected abstract createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase;\r\n\r\n    // Creates the REST synthesis adapter\r\n    protected abstract createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter;\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Does the generic synthesizer setup that is common across all synthesizer types.\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig: SynthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\")\r\n        ? new CognitiveSubscriptionKeyAuthentication(subscriptionKey)\r\n        : (this.tokenCredential)\r\n            ? new CognitiveTokenAuthentication(\r\n                async (): Promise<string> => {\r\n                    try {\r\n                        const tokenResponse = await this.tokenCredential.getToken(\"https://cognitiveservices.azure.com/.default\");\r\n                        return tokenResponse?.token ?? \"\";\r\n                    } catch (err) {\r\n                        throw err;\r\n                    }\r\n                },\r\n                async (): Promise<string> => {\r\n                    try {\r\n                        const tokenResponse = await this.tokenCredential.getToken(\"https://cognitiveservices.azure.com/.default\");\r\n                        return tokenResponse?.token ?? \"\";\r\n                    } catch (err) {\r\n                        throw err;\r\n                    }\r\n                }\r\n            )\r\n            : new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                }\r\n            );\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            synthesizerConfig);\r\n\r\n        this.privRestAdapter = this.createRestSynthesisAdapter(\r\n            authentication,\r\n            synthesizerConfig);\r\n    }\r\n\r\n    protected static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    public constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    VoiceProfileConnectionFactory,\r\n    VoiceServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privVoiceAdapter: VoiceServiceRecognizer;\r\n    private privDisposedVoiceAdapter: boolean;\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        super(AudioConfig.fromStreamInput(AudioInputStream.createPushStream()), speechConfigImpl.properties, new VoiceProfileConnectionFactory());\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privVoiceAdapter = this.privReco as VoiceServiceRecognizer;\r\n        this.privDisposedVoiceAdapter = false;\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const profileIds: string[] = await this.privVoiceAdapter.createProfile(profileType, lang);\r\n        return new VoiceProfile(profileIds[0], profileType);\r\n    }\r\n\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        return this.privVoiceAdapter.getAllProfiles(profileType);\r\n        /*\r\n        const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.audioConfig = audioConfig;\r\n        this.privVoiceAdapter.SpeakerAudioSource = configImpl;\r\n\r\n        return this.privVoiceAdapter.enrollProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.deleteProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.resetProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Clean up object and close underlying connection\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @async\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedVoiceAdapter) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedVoiceAdapter = true;\r\n\r\n        if (disposing) {\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class ConversationTranslationCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { Dictation } from \"./Dictation\";\r\nimport { Enrichment } from \"./Enrichment\";\r\nimport { Interactive } from \"./Interactive\";\r\nimport { Conversation } from \"./Conversation\";\r\nimport { SpeakerDiarization } from \"./SpeakerDiarization\";\r\nimport { SentimentAnalysis } from \"./SentimentAnalysis\";\r\nimport { GeoLocation } from \"./GeoLocation\";\r\nimport { OnSuccess } from \"./OnSuccess\";\r\nimport { OnInterim } from \"./OnInterim\";\r\n\r\n/**\r\n * The Recognition modes\r\n */\r\nexport enum RecognitionMode {\r\n    Interactive = \"Interactive\",\r\n    Dictation = \"Dictation\",\r\n    Conversation = \"Conversation\",\r\n    None = \"None\"\r\n}\r\n\r\n/**\r\n * Defines the phrase detection payload in the speech Context message\r\n */\r\nexport interface PhraseDetectionContext {\r\n    /**\r\n     * The initial silence timeout.\r\n     */\r\n    initialSilenceTimeout?: number;\r\n\r\n    /**\r\n     * The trailing silence timeout.\r\n     */\r\n    trailingSilenceTimeout?: number;\r\n\r\n    /**\r\n     * The recognition mode.\r\n     */\r\n    mode?: RecognitionMode;\r\n\r\n    /**\r\n     * The enrichment option.\r\n     */\r\n    enrichment?: Enrichment;\r\n\r\n    /**\r\n     * The Interactive options.\r\n     */\r\n    interactive?: Interactive;\r\n\r\n    /**\r\n     * The Dictation options.\r\n     */\r\n    dictation?: Dictation;\r\n\r\n    /**\r\n     * The Conversation options.\r\n     */\r\n    conversation?: Conversation;\r\n\r\n    /**\r\n     * The grammar scenario that allows clients to use sophisticated acoustic and language models\r\n     */\r\n    grammarScenario?: string;\r\n\r\n    /**\r\n     * A flag that indicates whether to enable interim results or not. If true, interim results are returned to the client application.\r\n     */\r\n    interimResults?: boolean;\r\n\r\n    /**\r\n     * The configuration of speaker diarization.\r\n     */\r\n    speakerDiarization?: SpeakerDiarization;\r\n\r\n    /**\r\n     * The configuration of sentiment analysis.\r\n     */\r\n    sentimentAnalysis?: SentimentAnalysis;\r\n\r\n    /**\r\n     * The geo location.\r\n     */\r\n    geoLocation?: GeoLocation;\r\n\r\n    /**\r\n     * The on success.\r\n     */\r\n    onSuccess?: OnSuccess;\r\n\r\n    /**\r\n     * The on interim.\r\n     */\r\n    onInterim?: OnInterim;\r\n\r\n    /**\r\n     * The mapping from language to custom model id, if required.\r\n     */\r\n    customModels?: CustomLanguageMappingEntry[];\r\n\r\n    /**\r\n     * The detection language.\r\n     */\r\n    language?: string;\r\n}\r\n\r\n/**\r\n * Defines a mapping entry from a language to a custom endpoint.\r\n */\r\nexport interface CustomLanguageMappingEntry {\r\n    /**\r\n     * The language for there is a custom endpoint.\r\n     */\r\n    language: string;\r\n\r\n    /**\r\n     * The custom endpoint id.\r\n     */\r\n    endpoint: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"],"names":["PlatformEvent_js_1","require","DialogEvent","PlatformEvent","constructor","eventName","super","arguments","length","undefined","EventType","Info","exports","agentConfig","this","privAgentConfig","Contracts_js_1","LanguageUnderstandingModel","fromEndpoint","uri","Contracts","throwIfNull","throwIfNullOrWhitespace","hostname","langModelImp","LanguageUnderstandingModelImpl","firstDot","host","indexOf","Error","region","substr","lastSegment","pathname","lastIndexOf","appId","subscriptionKey","searchParams","get","fromAppId","fromSubscription","privDisposed","fromFile","fileName","throwIfFileDoesNotExist","fromStream","file","close","Exports_js_1","IntentRecognitionResult","SpeechRecognitionResult","intentId","resultId","reason","text","duration","offset","language","languageDetectionConfidence","errorDetails","json","properties","privIntentId","ConversationTranscriptionResult","RecognitionResult","speakerId","privSpeakerId","Exports_js_2","ConnectionFactoryBase_js_1","Exports_js_3","HeaderNames_js_1","QueryParameterNames_js_1","TranscriberConnectionFactory","ConnectionFactoryBase","multiaudioRelativeUri","create","config","authInfo","connectionId","endpoint","parameters","getProperty","PropertyId","SpeechServiceConnection_Endpoint","SpeechServiceConnection_Region","hostDefault","getHostSuffix","SpeechServiceConnection_Host","queryParams","setQueryParams","headers","token","headerName","HeaderNames","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","Promise","resolve","WebsocketConnection","WebsocketMessageFormatter","ProxyInfo","fromRecognizerConfig","endpointUrl","endpointId","SpeechServiceConnection_EndpointId","SpeechServiceConnection_RecoLanguage","QueryParameterNames","CustomSpeechDeploymentId","Language","wordLevelTimings","SpeechServiceResponse_RequestWordLevelTimestamps","toLowerCase","detailed","OutputFormatPropertyName","OutputFormat","Simple","Format","Detailed","setCommonUrlParams","context","privContext","Context","privParameters","Exports_js_4","ConversationTranscriberConnectionFactory","universalUri","hostSuffix","search","autoDetectSourceLanguages","EnableLanguageId","setV2UrlParams","URL","pathName","getRedirectUrlFromEndpoint","toString","concat","webSocketConnection","Map","Speech_SegmentationSilenceTimeoutMs","SegmentationSilenceTimeoutMs","SpeechServiceConnection_EnableAudioLogging","EnableAudioLogging","SpeechServiceConnection_EndSilenceTimeoutMs","EndSilenceTimeoutMs","SpeechServiceConnection_InitialSilenceTimeoutMs","InitialSilenceTimeoutMs","SpeechServiceResponse_PostProcessingOption","Postprocessing","SpeechServiceResponse_ProfanityOption","Profanity","SpeechServiceResponse_StablePartialResultThreshold","StableIntermediateThreshold","forEach","parameterName","propertyId","setUrlParameter","serviceProperties","JSON","parse","ServicePropertiesPropertyName","Object","keys","value","SpeakerIdentificationModel","profiles","privVoiceProfiles","privProfileIds","throwIfNullOrUndefined","profile","profileType","VoiceProfileType","TextIndependentIdentification","profileId","push","fromProfiles","voiceProfileIds","join","profileIds","scenario","PhraseDetectionContext_js_1","SpeechResultFormat","speechServiceConfig","privSpeechServiceConfig","SpeechServiceConfig","privMaxRetryCount","parseInt","privLanguageIdMode","SpeechServiceConnection_LanguageIdMode","privEnableSpeakerId","recognitionMode","privRecognitionMode","privRecognitionActivityTimeout","RecognitionMode","Interactive","Recognition","recognitionActivityTimeout","isContinuousRecognition","languageIdMode","SpeechServiceConnection_AutoDetectSourceLanguages","recognitionEndpointVersion","SpeechServiceConnection_RecognitionEndpointVersion","version","sourceLanguageModels","models","modelsExist","split","customProperty","modelId","maxRetryCount","isSpeakerDiarizationEnabled","SpeechDetected","baseOffset","privSpeechStartDetected","Offset","fromJSON","KeywordDetectionType","OnRejectAction","ConversationConnectionConfig_js_1","ConversationWebsocketMessageFormatter_js_1","ConversationConnectionFactory","endpointHost","ConversationTranslator_Host","ConversationConnectionConfig","correlationId","ConversationTranslator_CorrelationId","createGuid","webSocketPath","ConversationTranslator_Token","configParams","apiVersion","ConversationWebsocketMessageFormatter","privHeaderName","privToken","defineProperty","obj","_rng","__esModule","default","_stringify","_nodeId","_clockseq","_lastMSecs","_lastNSecs","_default","options","buf","i","b","Array","node","clockseq","seedBytes","random","rng","msecs","Date","now","nsecs","dt","tl","tmh","n","unsafeStringify","errorCode","privReason","privErrorDetails","privErrorCode","ErrorCode","ArgumentNullError","argumentName","name","message","InvalidOperationError","error","ObjectDisposedError","objectName","RecognitionEventArgs","SessionEventArgs","sessionId","privOffset","BackgroundEvent","privError","PhraseOption","PhraseExtension","TentativePhraseResultsOption","param","trim","throwIfNullOrTooLong","maxLength","throwIfNullOrTooShort","minLength","throwIfDisposed","isDisposed","throwIfArrayEmptyOrWhitespace","array","item","throwIfNotUndefined","SpeakerRecognitionConnectionFactoryBase","endpointPath","SpeechServiceConnection_SpeakerIdMode","scenarioToPath","format","SpIDAuthKey","SpeechServiceConnection_Key","mode","PronunciationAssessmentConfig","referenceText","gradingSystem","PronunciationAssessmentGradingSystem","FivePoint","granularity","PronunciationAssessmentGranularity","Phoneme","enableMiscue","privProperties","PropertyCollection","PronunciationAssessment_ReferenceText","PronunciationAssessment_GradingSystem","PronunciationAssessment_Granularity","PronunciationAssessment_EnableMiscue","String","PronunciationAssessment_Json","toJSON","updateJson","PronunciationAssessment_Params","applyTo","recognizer","recoBase","internalData","expectContentAssessmentResponse","privContentAssessmentTopic","speechContext","setPronunciationAssessmentParams","phonemeAlphabet","privPhonemeAlphabet","enableMiscueString","nbestPhonemeCount","privNBestPhonemeCount","enableProsodyAssessment","privEnableProsodyAssessment","enableContentAssessmentWithTopic","topic","jsonString","paramsJson","dimension","stringify","SpeechRecognitionEventArgs","result","privResult","ConversationTranscriptionEventArgs","SpeakerVerificationModel","privVoiceProfile","fromProfile","voiceProfile","TextDependentVerification","CancellationReason","__exportStar","_native","_interopRequireDefault","randomUUID","rnds","TranslationRecognitionResult","translations","privTranslations","fromSpeechRecognitionResult","SpeechConfig","speechImpl","SpeechConfigImpl","SpeechServiceConnection_IntentRegion","auth","isValidString","isTokenCredential","getToken","href","fromHost","hostName","protocol","port","fromAuthorizationToken","authorizationToken","tokenCredential","speechRecognitionLanguage","outputFormat","privTokenCredential","endPoint","SpeechServiceAuthorization_Token","def","setProxy","proxyHostName","proxyPort","proxyUserName","proxyPassword","SpeechServiceConnection_ProxyHostName","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","setServiceProperty","currentProperties","setProfanity","profanity","ProfanityOption","enableAudioLogging","requestWordLevelTimestamps","enableDictation","ForceDictationPropertyName","clone","ret","speechSynthesisLanguage","SpeechServiceConnection_SynthLanguage","speechSynthesisVoiceName","SpeechServiceConnection_SynthVoice","voice","speechSynthesisOutputFormat","SpeechSynthesisOutputFormat","SpeechServiceConnection_SynthOutputFormat","toConnectionMessage","deferral","Deferred","messageType","MessageType","Text","textMessage","textContent","body","headerBodySplit","parseHeaders","ConnectionMessage","id","Binary","binaryMessage","binaryContent","byteLength","dataView","DataView","headerLength","getInt16","headersString","fromCharCode","getInt8","slice","e","reject","promise","fromConnectionMessage","payload","makeHeaders","textBody","RawWebsocketMessage","content","binaryBody","headerBuffer","stringToArrayBuffer","headerInt8Array","Int8Array","payloadInt8Array","set","bodyInt8Array","buffer","header","headerMatches","match","separatorIndex","headerValue","str","ArrayBuffer","view","setUint8","charCodeAt","ResultType","Error_js_1","AudioStreamFormat_js_1","audioFormat","audioContext","gainNode","autoUpdateBufferTimer","AudioStreamFormat","getDefaultInputFormat","init","playAudioSample","newAudioData","cb","err","ensureInitializedContext","audioData","formatAudioData","newSamplesData","Float32Array","samples","stopAudio","clearInterval","then","createAudioContext","timerPeriod","setInterval","updateAudioBuffer","AudioStreamFormatImpl","getAudioContext","createGain","gain","connect","destination","startTime","currentTime","bitsPerSample","formatArrayBuffer","Int16Array","Int32Array","maxValue","float32Data","channelCount","channels","bufferSource","createBufferSource","frameCount","audioBuffer","createBuffer","samplesPerSec","channel","channelOffset","getChannelData","start","playAudio","source","decodeAudioData","newBuffer","IntentConnectionFactory","getSpeechRegionFromIntentRegion","intentRegion","ConnectionMessage_js_1","Connection","fromRecognizer","privInternalData","setupEvents","fromSynthesizer","synthesizer","synthBase","openConnection","marshalPromiseToCallbacks","closeConnection","SynthesisAdapterBase","disconnect","setMessageProperty","path","propertyName","propertyValue","ServiceRecognizerBase","getContext","synthesisContext","setSection","sendMessageAsync","success","sendNetworkMessage","privEventListener","connectionEvents","attach","connectionEvent","connected","ConnectionEventArgs","disconnected","messageSent","ConnectionMessageEventArgs","ConnectionMessageImpl","messageReceived","privServiceEventListener","serviceEvents","receivedServiceMessage","ServiceEventArgs","TranslationStatus","TranslationRecognitionEventArgs","NoMatchReason","Guid_js_1","privPayload","getPrototypeOf","privMessageType","privId","createNoDashGuid","VoiceProfilePhraseResult","VoiceProfileResult","statusText","type","phraseArray","privPhrases","privType","phrases","formatString","replacements","formatted","key","appendToFormatted","appendToKey","appendFunc","c","next","hasOwnProperty","IntentRecognizer","Recognizer","speechConfig","audioConfig","configImpl","privAddedIntents","privAddedLmIntents","privDisposedIntentRecognizer","recognizeOnceAsync","privUmbrellaIntent","buildSpeechContext","privReco","intent","Intent","dynamicGrammar","addReferenceGrammar","ReferenceGrammars","setIntents","recognizeOnceAsyncImpl","startContinuousRecognitionAsync","startContinuousRecognitionAsyncImpl","Conversation","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","startKeywordRecognitionAsync","model","stopKeywordRecognitionAsync","addIntent","simplePhrase","addIntentWithLanguageModel","intentName","modelImpl","AddedLmIntent","addAllIntents","errorCb","dispose","createRecognizerConfig","RecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","audioImpl","IntentServiceRecognizer","disposing","refGrammers","addedLmIntent","grammer","provider","privProxyHostName","privProxyPort","privProxyUserName","privProxyPassword","fromParameters","HostName","Port","UserName","Password","SynthesisVoiceGender","SynthesisVoiceType","GENDER_LOOKUP","Neutral","Male","Female","VOICE_TYPE_LOOKUP","Neural","OnlineNeural","NeuralHD","OnlineNeuralHD","privStyleList","privName","Name","privLocale","Locale","privShortName","ShortName","privLocaleName","LocaleName","privDisplayName","DisplayName","privLocalName","LocalName","privVoiceType","VoiceType","Unknown","privGender","Gender","StyleList","isArray","style","privSampleRateHertz","SampleRateHertz","privStatus","Status","ExtendedPropertyMap","privExtendedPropertyMap","privWordsPerMinute","WordsPerMinute","SecondaryLocaleList","privSecondaryLocaleList","RolePlayList","privRolePlayList","VoiceTag","privVoiceTag","locale","shortName","displayName","localName","localeName","gender","voiceType","styleList","sampleRateHertz","status","extendedPropertyMap","wordsPerMinute","secondaryLocaleList","rolePlayList","voiceTag","privSessionId","_v","_md","LanguageIdMode_js_1","AutoDetectSourceLanguageConfig","LanguageIdMode","AtStart","fromOpenRange","AutoDetectSourceLanguagesOpenRangeOptionName","fromLanguages","languages","fromSourceLanguageConfigs","configs","autoConfig","langs","Continuous","privAudioConfig","handleCallback","handleError","typedError","ConversationExpirationEventArgs","expirationTime","privExpirationTime","ChunkedArrayBufferStream","Stream","targetChunkSize","streamId","privTargetChunkSize","Math","round","privNextBufferReadyBytes","writeStreamChunk","chunk","isEnd","bytesCopiedFromBuffer","privNextBufferToWrite","privNextBufferStartTime","timeReceived","bytesToCopy","min","targetView","Uint8Array","sourceView","isClosed","f","s","x","y","z","ROTL","bytes","K","H","msg","unescape","encodeURIComponent","prototype","call","l","N","ceil","M","arr","Uint32Array","j","pow","floor","W","t","a","d","T","ConversationManager_js_1","enumerable","ConversationManager","ConversationTranslatorRecognizer_js_1","ConversationRecognizerFactory","TranscriberRecognizer_js_1","TranscriberRecognizer","ConversationTranslatorEventArgs_js_1","ConversationReceivedTranslationEventArgs","LockRoomEventArgs","MuteAllEventArgs","ParticipantAttributeEventArgs","ParticipantEventArgs","ParticipantsListEventArgs","ConversationTranslatorInterfaces_js_1","ConversationTranslatorCommandTypes","ConversationTranslatorMessageTypes","InternalParticipants","List_js_1","Promise_js_1","SubscriberType","list","privPromiseStore","List","privIsDrainInProgress","privIsDisposing","privDisposeReason","privList","privDetachables","privSubscribers","onAdded","drain","enqueue","throwIfDispose","enqueueFromPromise","val","add","dequeue","deferredSubscriber","Dequeue","peek","Peek","drainAndDispose","pendingItemProcessor","subs","removeFirst","detachable","detach","promiseArray","toArray","wrapper","all","finally","lists","subscriber","first","dequeuedItem","WebsocketMessageAdapter_js_1","queryParameters","messageFormatter","proxyInfo","privIsDisposed","privMessageFormatter","paramName","privUri","privConnectionMessageAdapter","WebsocketMessageAdapter","state","open","send","read","events","RecognitionEvents_js_1","ServiceTelemetryListener_Internal_js_1","audioSourceId","privIsAudioNodeDetached","privIsRecognizing","privIsSpeechEnded","privTurnStartAudioOffset","privLastRecoOffset","privHypothesisReceived","privBytesSent","privRecognitionBytesSent","privRecogNumber","privInTurn","privConnectionAttempts","privAudioSourceId","privRequestId","privAudioNodeId","privTurnDeferral","requestId","audioNodeId","turnCompletionPromise","isSpeechEnded","isRecognizing","currentTurnAudioOffset","recogNumber","numConnectionAttempts","bytesSent","recognitionBytesSent","listenForServiceTelemetry","eventSource","privServiceTelemetryListener","attachListener","startNewRecognition","ServiceTelemetryListener","onEvent","RecognitionTriggeredEvent","onAudioSourceAttachCompleted","audioNode","isError","privAudioNode","onComplete","ListeningStartedEvent","onPreConnectionStart","authFetchEventId","privAuthFetchEventId","ConnectingToServiceEvent","onAuthCompleted","onConnectionEstablishCompleted","statusCode","RecognitionStartedEvent","replay","onServiceTurnEndResponse","continuousRecognition","onSpeechContext","onServiceTurnStartResponse","catch","onHypothesis","hypothesisReceived","findTimeAtOffset","onPhraseRecognized","phraseReceived","onServiceRecognized","shrinkBuffers","onAudioSent","onRetryConnection","getTelemetry","hasTelemetry","onStopRecognizing","onSpeechEnded","event","Events","instance","detachAudioNode","audioOffset","privAudioOffset","privText","userId","privUserId","Participant","avatar","isHost","isMuted","isUsingTts","preferredLanguage","privAvatar","privIsHost","privIsMuted","privIsUsingTts","privPreferredLanguage","privVoice","From","_objectSpread","net","__importStar","tls","agent_base_1","__importDefault","https_proxy_agent_1","ws_1","privConnectionEvents","EventSource","privConnectionId","privConnectionState","ConnectionState","None","privHeaders","privEnableCompression","privLastErrorReceived","Disconnected","privConnectionEstablishDeferral","privCertificateValidatedDeferral","Connecting","WebSocket","forceNpmWebSocket","_protocol","_protocol2","toLocaleLowerCase","perMessageDeflate","followRedirects","agent","getAgent","privWebsocketClient","on","redirectUrl","ConnectionRedirectEvent","binaryType","privReceivingMessageQueue","Queue","privDisconnectDeferral","privSendMessageQueue","processSendQueue","ConnectionOpenResponse","ConnectionStartEvent","onopen","Connected","ConnectionEstablishedEvent","onerror","ConnectionErrorEvent","onclose","code","ConnectionClosedEvent","onClose","onmessage","networkReceivedTime","toISOString","deferred","data","rawMessage","connectionMessage","ConnectionMessageReceivedEvent","messageSendStatusDeferral","messageSendDeferral","Message","sendStatusDeferral","sendRawMessage","sendItem","ConnectionMessageSentEvent","isWebsocketOpen","stack","closeReason","pendingSendItem","itemToSend","sendError","Agent","createConnection","GetProxyAgent","httpProxyOptions","Buffer","requestOCSP","request","socketPromise","servername","baseAgent","callback","socket","secureEndpoint","readyState","OPEN","SpeechServiceRecognizer","audioSource","speechRecognizer","privSpeechRecognizer","processTypeSpecificMessages","resultProps","processed","hypothesis","SpeechHypothesis","privRequestSession","SpeechServiceResponse_JsonResult","asJson","ResultReason","RecognizingSpeech","Duration","LanguageDetectionConfidence","ev","recognizing","simple","SimpleSpeechPhrase","resultReason","EnumTranslation","implTranslateRecognitionResult","RecognitionStatus","privExpectContentAssessmentResponse","Canceled","cancelReason","implTranslateCancelResult","cancellationErrorCode","implTranslateCancelErrorCode","cancelRecognitionLocal","implTranslateErrorDetails","EndOfDictation","privRecognizerConfig","DisplayText","DetailedSpeechPhrase","Success","NBest","Display","recognized","privSuccessCallback","privErrorCallback","cancelRecognition","cancellationReason","CancellationErrorCodePropertyName","CancellationErrorCode","canceled","cancelEvent","SpeechRecognitionCanceledEventArgs","_unused","_unused2","toJsonString","iPrivConfig","ConversationConnectionMessage","privConversationMessageType","conversationMessageType","_regex","uuid","test","DialogConnectionFactory","applicationId","Conversation_ApplicationId","dialogType","Conversation_DialogType","requestTurnStatus","Conversation_Request_Bot_Status_Messages","RequestBotStatusMessages","BotId","DialogServiceConfig","DialogTypes","CustomCommands","CustomCommandsAppId","resourceInfix","BotFramework","BaseUrl","standardizedHost","endsWith","ApiKey","SpeechConnectionMessage_Internal_js_1","VoiceServiceRecognizer","privDeferralMap","DeferralMap","privSpeakerAudioSource","sendPrePayloadJSONOverride","noOp","SpeakerAudioSource","response","operation","handleCreateResponse","handleResultResponse","enrollmentResponse","handleFetchResponse","phraseResponse","handlePhrasesResponse","VoiceProfileEnrollmentResult","enrollmentReasonFrom","enrollment","enrollmentStatus","getId","complete","defferal","createProfile","voiceProfileType","conPromise","connectImpl","createProfileDeferral","sendCreateProfile","receiveMessage","resetProfile","sendCommonRequest","deleteProfile","retrieveEnrollmentResult","privExpectedProfileId","getAllProfiles","getActivationPhrases","lang","getPhrasesDeferral","sendPhrasesRequest","enrollProfile","enrollmentDeferral","Speech_SessionId","preAudioPromise","sendPreAudioMessages","deviceInfo","ReplayableAudioNode","avgBytesPerSec","audio","ConnectionFailure","sessionStartEventArgs","privRecognizer","sessionStarted","sendAudio","RuntimeError","connection","fetchConnection","sendBaseRequest","scenarioFrom","profileCreateRequest","SpeechConnectionMessage","number","TextIndependentVerification","profileRequest","maxPageSize","extractSpeakerContext","features","interimResult","progressiveDetection","passPhraseType","EnrollingVoiceProfile","map","successReason","DeletedVoiceProfile","ResetVoiceProfile","profileInfo","iProfiles","profileResults","EnrolledVoiceProfile","SynthesisServiceType","privSynthesisServiceType","Standard","avatarEnabled","synthesisServiceType","synthesisVideoSection","synthesis","video","privResultId","PromiseState","PromiseResult","promiseResultEventSource","throwIfError","privIsCompleted","privIsError","isCompleted","PromiseResultEventSource","setResult","privOnSetResult","setError","privOnSetError","onSetResult","onSetError","privResolve","privReject","privPromise","privState","privPromiseResult","privPromiseResultEvents","privSuccessHandlers","privErrorHandlers","Resolved","executeSuccessCallback","detachHandlers","Rejected","errorHandler","executeErrorCallback","successCallback","errorCallback","ContentAssessmentResult","detailResult","privPronJson","grammarScore","ContentAssessment","GrammarScore","vocabularyScore","VocabularyScore","topicScore","TopicScore","PronunciationAssessmentResult","fromResult","accuracyScore","_this$detailResult$Pr","PronunciationAssessment","AccuracyScore","pronunciationScore","_this$detailResult$Pr2","PronScore","completenessScore","_this$detailResult$Pr3","CompletenessScore","fluencyScore","_this$detailResult$Pr4","FluencyScore","prosodyScore","_this$detailResult$Pr5","ProsodyScore","contentAssessmentResult","RestConfigBase_js_1","RestConfigBase","privHost","privApiVersion","clientAppId","privClientAppId","defaultLanguageCode","privDefaultLanguageCode","restPath","privRestPath","privWebSocketPath","transcriptionEventKeys","privTranscriptionEventKeys","SynthesisVoicesResult","SynthesisResult","VoicesListRetrieved","privVoices","VoiceInfo","voices","StringUtils_js_1","TranslationConnectionFactory","translationV1Uri","getEndpointUrl","returnRegionPlaceholder","StringUtils","from","to","SpeechServiceConnection_TranslationToLanguages","SpeechServiceResponse_TranslationRequestStablePartialResult","StableTranslation","translationVoice","SpeechServiceConnection_TranslationVoice","ConversationTranslatorConnectionFactory_js_1","Conversation_js_1","SpeechState","ConversationTranslationRecognizer","TranslationRecognizer","translator","convGetter","ConversationTranslatorConnectionFactory","privSpeechState","Inactive","privTranslator","sessionStopped","tr","async","_e$result","cancelSpeech","fireCancelEvent","newState","onConnection","onCancelSpeech","ConversationTranslationCanceledEventArgs","_this$privReco","ConversationTranslator","ConversationCommon","privErrors","restErrors","privIsSpeaking","privPlaceholderKey","privPlaceholderRegion","privSpeechRecognitionLanguage","participants","_this$privConversatio","privConversation","canSpeak","isConnected","privCTRecognizer","isMutedByHost","onToken","joinConversationAsync","conversation","nickname","param1","param2","param3","invalidArgs","replace","permissionDeniedStart","privSpeechTranslationConfig","SpeechTranslationConfig","Masked","addTargetLanguage","ConversationTranslator_Name","propertyIdsToCopy","prop","ServicePropertyChannel","UriQueryParameter","ConversationImpl","conversationTranslator","permissionDeniedConnect","room","startConversationAsync","leaveConversationAsync","endConversationImplAsync","deleteConversationImplAsync","sendTextMessageAsync","permissionDeniedSend","startTranscribingAsync","connectTranslatorRecognizer","startContinuousRecognition","stopTranscribingAsync","_this$privCTRecognize","AudioConfig","fromDefaultMicrophoneInput","privAudio","requestOptions","privRestAdapter","RestMessageAdapter","privAuthentication","getVoicesList","setHeaders","fetch","RestRequestType","Get","synthesisUri","hostPrefix","CustomVoiceDeploymentId","EnableAvatar","SpeechTranslationConfigImpl","privSpeechProperties","targetLanguages","includes","voiceName","NextAction","_validate","TypeError","v","ParticipantsListPayloadResponse","privParticipantsPayloadResponse","parseListResponse","roomid","command","translateTo","profanityFilter","roomProfanityFilter","roomLocked","muteAll","ParticipantPayloadResponse","privParticipantPayloadResponse","parseParticipantResponse","usetts","ismuted","ishost","participantId","TranslationSynthesisEventArgs","serialize","replacement","k","charAt","substring","recognition","os","system","System","build","platform","manufacturer","connectivity","privStatusCode","Meeting","createMeetingAsync","meetingId","arg3","arg4","meetingImpl","MeetingImpl","onConnected","privIsConnected","privConversationTranslator","onDisconnected","_this$privConversatio2","onCanceled","r","_this$privConversatio3","onParticipantUpdateCommandReceived","updatedParticipant","privParticipants","getParticipant","changeNickname","setUseTTS","setProfanityFiltering","setMute","setTranslateToLanguages","translateToLanguages","addOrUpdateParticipant","participantsChanged","ConversationParticipantsChangedEventArgs","ParticipantChangedReason","Updated","toParticipant","onLockRoomCommandReceived","onMuteAllCommandReceived","p","toParticipants","onParticipantJoinCommandReceived","newParticipant","participant","JoinedConversation","onParticipantLeaveCommandReceived","ejectedParticipant","deleteParticipant","LeftConversation","onTranslationReceived","final","transcribed","ConversationTranslationEventArgs","partial","transcribing","instantMessage","textMessageReceived","onParticipantsListReceived","sessionToken","privRoom","me","privIsReady","_this$privConversatio4","changeNicknameAsync","onConversationExpiration","conversationExpiration","privConversationId","privManager","privLanguage","privConfig","privTextMessageMaxLength","privConversationRecognizer","roomId","_this$privParticipant","_this$privParticipant2","transcriberRecognizer","privTranscriberRecognizer","meetingInfo","convId","part","props","meetingProperties","canSend","_this$privParticipant3","canSendAsHost","_this$privParticipant4","createOrJoin","startMeetingAsync","meId","participantUpdateCommandReceived","lockRoomCommandReceived","muteAllCommandReceived","participantJoinCommandReceived","participantLeaveCommandReceived","translationReceived","participantsListReceived","addParticipantAsync","addParticipantImplAsync","joinMeetingAsync","cognitiveSpeechAuthToken","deleteMeetingAsync","deleteMeetingImplAsync","leave","endMeetingAsync","endMeetingImplAsync","lockMeetingAsync","permissionDeniedConversation","sendRequest","getLockCommand","muteAllParticipantsAsync","getMuteAllCommand","muteParticipantAsync","permissionDeniedParticipant","getParticipantIndex","invalidParticipantRequest","getMuteCommand","removeParticipantAsync","removeParticipantImplAsync","findIndex","getEjectCommand","unlockMeetingAsync","unmuteAllParticipantsAsync","unmuteParticipantAsync","getMessageCommand","setTranslatedLanguagesAsync","getSetTranslateToLanguagesCommand","getChangeNicknameCommand","connectTranscriberRecognizer","enforceAudioGating","meeting","getKeepAlive","keepAlive","pushMeetingEvent","_this$privConversatio5","includeHost","filter","setMuteAll","participantCommand","isLocked","setLockState","ejectParticipant","SpeechRecognizer","speechConfigImpl","SpeechConnectionFactory","privDisposedRecognizer","FromConfig","autoDetectSourceLanguageConfig","mergeTo","implRecognizerStop","encodings","Set","module","mkrequest","statusCodes","method","encoding","baseurl","_len","args","_key","arg","toUpperCase","startsWith","has","size","SpeechSynthesisConnectionFactory_js_1","AudioOutputFormat_js_1","Synthesizer_js_1","AvatarSynthesizer","Synthesizer","avatarConfig","privConnectionFactory","SpeechSynthesisConnectionFactory","privAvatarConfig","implCommonSynthesizeSetup","privAdapter","audioOutputFormat","AudioOutputFormatImpl","fromSpeechSynthesisOutputFormat","Riff24Khz16BitMonoPcm","startAvatarAsync","peerConnection","privIceServers","getConfiguration","iceServers","iceGatheringDone","onicegatheringstatechange","iceGatheringState","Debug","onicecandidate","candidate","setTimeout","Warning","sdp","createOffer","setLocalDescription","TalkingAvatarService_WebRTC_SDP","localDescription","speak","SynthesizingAudioCompleted","sdpAnswerString","atob","sdpAnswer","RTCSessionDescription","setRemoteDescription","speakTextAsync","speakSsmlAsync","ssml","stopSpeakingAsync","synthesisRequestQueue","stopSpeaking","stopAvatarAsync","createSynthesisAdapter","synthesizerConfig","AvatarSynthesisAdapter","createRestSynthesisAdapter","_authentication","_synthesizerConfig","createSynthesizerConfig","isSSML","deferredResult","SynthesisRequest","privSynthesizing","adapterSpeak","privSpeechHypothesis","updateOffset","PrimaryLanguage","Confidence","SpeakerId","getOutputLength","inputLength8","safeAdd","lsw","md5cmn","q","num","cnt","md5ff","md5gg","md5hh","md5ii","input","output","length32","hexTab","hex","md5ToHexEncodedArray","len","olda","oldb","oldc","oldd","wordsToMd5","length8","bytesToWords","speechTranslationConfig","speechTranslationConfigImpl","audioConfigImpl","isMeetingRecognizer","getConversationInfo","conversationInfo","m","privMeeting","getMeetingInfo","IsMeetingRecognizer","pushConversationEvent","reco","sendSpeechEventAsync","sendMeetingSpeechEventAsync","connectMeetingCallbacks","transcriber","disconnectCallbacks","TranscriptionServiceRecognizer","privMap","SpeakerServiceRecognizer","privSpeakerRecognizer","recognizeSpeaker","recognizeSpeakerOnce","SpeakerRecognitionResult","ServiceError","RecognizedSpeaker","privResultDeferral","privSpeakerModel","sendSpeakerRecognition","speakerContextJson","leaveMeetingAsync","SpeechKeyword","privSpeechKeyword","ConversationConnectionMessage_js_1","ConversationRequestSession_js_1","ConversationServiceAdapter","conversationServiceConnector","privConnectionConfigPromise","privLastPartialUtteranceId","privConversationServiceConnector","privConversationAuthentication","receiveMessageOverride","receiveConversationMessageOverride","recognizeOverride","postConnectImplOverride","conversationConnectImpl","configConnectionOverride","configConnection","disconnectOverride","privDisconnect","privConversationRequestSession","ConversationRequestSession","privConversationConnectionFactory","privConversationIsDisposed","sendMessage","terminateMessageLoop","NoError","privConnectionLoop","startMessageLoop","communicationCustodian","sendFinal","commandPayload","CommandResponsePayload","participantsPayload","participantsResult","joinParticipantPayload","joiningParticipant","leavingParticipant","CognitiveTokenAuthentication","speechPayload","SpeechResponsePayload","conversationResultReason","TranslatedParticipantSpeech","TranslatingParticipantSpeech","speechResult","ConversationTranslationResult","getTranslations","isFinal","textPayload","TextResponsePayload","textResult","originalText","messageRetrievalPromise","serviceResultTranslations","Translations","translation","AgentConfig","fs","filename","openSync","privFd","privAudioFormat","headerOffset","hasHeader","privWriteStream","createWriteStream","fd","autoClose","write","updateHeader","bytesWritten","writeSync","closeSync","end","sessionid","privCancelReason","PhraseOutput_js_1","privDynamicGrammar","params","contentAssessmentTopic","phraseDetection","enrichment","pronunciationAssessment","setWordLevelTimings","phraseOutput","SNR","contentAssessment","setDetailedOutputFormat","WordTimings","setSpeakerDiarizationAudioOffsetMs","audioOffsetMs","speakerDiarization","dgi","generateGrammarObject","AvatarSynthesisAdapter_js_1","SpeechSynthesisAdapter_js_1","SpeechSynthesisAdapter","_nil","_parse","_v2","_v3","_v4","_version","contentType","additionalHeaders","Path","RequestId","RequestTimestamp","ContentType","RequestStreamId","privPath","privContentType","privStreamId","privAdditionalHeaders","PropertyCollection_js_1","PropertyId_js_1","privConnectionMessage","find","isTextMessage","isBinaryMessage","TextMessage","privSubscriptionIdCounter","privAddSubscriptions","privRemoveSubscriptions","privDisposedSubscriptions","itemIndex","last","insertAt","index","unshift","splice","triggerSubscriptions","removeAt","removeLast","remove","count","removedElements","clear","addedCallback","subscriptionId","onRemoved","removedCallback","onDisposed","disposedCallback","seperator","cloneCopy","any","where","select","selectList","filteredList","orderBy","compareFn","orderedArray","sort","orderByDesc","concatArray","subscriptions","privBody","privSize","DialogEvents_js_1","DialogServiceTurnStateManager_js_1","ActivityResponsePayload_js_1","InvocationSource_js_1","KeywordDetection_js_1","DialogServiceAdapter","dialogServiceConnector","privEvents","privDialogServiceConnector","receiveDialogMessageOverride","privTurnStateManager","DialogServiceTurnStateManager","recoMode","listenOnce","dialogConnectImpl","privDialogAudioSource","agentConfigSent","privLastResult","interactionGuid","agentMessage","interactionId","messagePayload","agentMessageJson","speechPhrase","TooManyRequests","fireEventForResult","keyword","RecognizedKeyword","NoMatch","audioRequestId","turn","GetTurn","audioStream","endAudioStream","handleResponseMessage","loop","turnRequestId","StartTurn","speechStartDetected","speechStartEventArgs","speechStopDetected","speechStopEventArgs","speechEndDetected","turnEndRequestId","CompleteTurn","sessionStopEventArgs","ServiceEvent","sendSpeechServiceConfig","sendAgentConfig","addKeywordContextData","sendSpeechContext","sendAgentContext","sendWaveHeader","botInfo","commandsCulture","SendingAgentContextMessageEvent","agentConfigJson","guid","speechActivityTemplate","Conversation_Speech_Activity_Template","agentContext","channelData","agentContextJson","serviceResult","responseMessage","responsePayload","responseRequestId","activityPayload","ActivityPayloadResponse","conversationId","updateAgentConfig","pullAudioOutputStream","processActivityPayload","fromSpeechSynthesisOutputFormatString","activity","ActivityReceivedEventArgs","activityReceived","turnStatusReceived","TurnStatusReceivedEventArgs","keywordPropertyValue","keywordOffsetPropertyValue","keywordDurationPropertyValue","keywords","keywordOffsets","keywordDurations","keywordDefinitionArray","definition","startOffset","Number","invocationSource","InvocationSource","VoiceActivationWithKeyword","keywordDetection","clientDetectedKeywords","onReject","action","EndOfTurn","StartTrigger","TranslationSynthesisEnd","privSynthesisEnd","SynthesisStatus","FailureReason","recognitionStatus","expectEndOfDictation","RecognizedSpeech","InitialSilenceTimeout","BabbleTimeout","BadRequest","Forbidden","EndOfStream","BadRequestParameters","privCommandResponse","parseCommandResponse","getRandomValues","crypto","bind","rnds8","visemeId","animation","privVisemeId","privAnimation","bytesPerSecond","privBuffers","privReplayOffset","privLastShrinkOffset","privBufferStartOffset","privBufferSerial","privBufferedBytes","privReplay","privLastChunkAcquiredTime","privBytesPerSecond","offsetToSeek","bytesToSeek","retVal","BufferEntry","byteOffset","endOffset","serial","MicAudioSource","privRecorder","deviceId","mediaStream","privStreams","privOutputChunkSize","AUDIOFORMAT","privMediaStream","privIsClosing","turnOn","privInitializeDeferral","nav","window","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","constraints","AudioSourceInitializingEvent","active","AudioSourceReadyEvent","errorMsg","AudioSourceErrorEvent","resume","AudioStreamNodeAttachingEvent","listen","stream","AudioStreamNodeAttachedEvent","readEnded","AudioStreamNodeDetachedEvent","turnOff","AudioSourceOffEvent","destroyAudioContext","getMicrophoneLabel","label","bitspersample","channelcount","samplerate","Microphones","AudioWorkletSourceURLPropertyName","setWorkletUrl","defaultMicrophoneName","privMicrophoneLabel","microphoneDeviceId","getTracks","getSettings","enumerateDevices","devices","device","record","AudioStreamNodeErrorEvent","releaseMediaResources","hasClose","suspend","TranslationStatus_js_1","TranslationHypothesis","privTranslationHypothesis","Translation","mapTranslationStatus","fromTranslationResponse","translationHypothesis","_this$privTranslation","jsonObj","privSpeechResponse","parseSpeechResponse","timestamp","privTextResponse","parseTextResponse","incomingMessage","ConversationCommon_js_1","ConversationExpirationEventArgs_js_1","ConversationParticipantsChangedEventArgs_js_1","ConversationTranslationCanceledEventArgs_js_1","ConversationTranslationEventArgs_js_1","ConversationTranslationResult_js_1","ConversationTranslator_js_1","ConversationTranscriber_js_1","ConversationTranscriber","IParticipant_js_1","User","ParticipantChangedReason_js_1","Meeting_js_1","MeetingTranscriptionCanceledEventArgs_js_1","MeetingTranscriptionCanceledEventArgs","MeetingTranscriber_js_1","MeetingTranscriber","ConversationTranscriptionResult_js_1","NoMatchDetails","simpleSpeech","NotRecognized","InitialBabbleTimeout","AudioFileWriter_js_1","AudioInputStream_js_1","AudioOutputStream_js_1","pcmRecorder","PcmRecorder","AudioConfigImpl","fromMicrophoneInput","fromWavFileInput","FileAudioSource","fromStreamInput","PullAudioInputStreamCallback","PullAudioInputStreamImpl","AudioInputStream","MediaStream","fromDefaultSpeakerOutput","AudioOutputConfigImpl","SpeakerAudioDestination","fromSpeakerOutput","player","fromAudioFileOutput","AudioFileWriter","fromStreamOutput","PushAudioOutputStreamCallback","PushAudioOutputStreamImpl","PushAudioOutputStream","PullAudioOutputStream","privSource","privDestination","PhraseListGrammar","recogBase","privGrammerBuilder","addPhrase","phrase","addPhrases","clearPhrases","SpeechSynthesisResult","audioDuration","privAudioData","privAudioDuration","speechSynthesizer","audioDestination","privSpeechSynthesizer","privSynthesizer","setSynthesisContextSynthesisSection","privSynthesisContext","setSynthesisSection","onSynthesisStarted","synthesisStartEventArgs","SpeechSynthesisEventArgs","SynthesizingAudioStarted","synthesisStarted","onSynthesizing","synthesizing","audioWithHeader","privSynthesisTurn","addHeader","SynthesizingAudio","onSynthesisCancelled","SynthesisCanceled","onSynthesisCompleted","synthesisCompleted","onWordBoundary","wordBoundaryEventArgs","wordBoundary","onVisemeReceived","visemeEventArgs","visemeReceived","onBookmarkReached","bookmarkEventArgs","bookmarkReached","CancellationEventArgsBase","interactiveRelativeUri","conversationRelativeUri","dictationRelativeUri","Dictation","privIsLocked","privParticipant","privKey","privValue","privParticipantId","isRoomLocked","isMuteAll","privRoomId","privSessionToken","privTranslateTo","privProfanityFilter","privRoomProfanityFilter","privIsRoomLocked","privIsMuteAll","privCommand","AudioFormatToMimeType","AudioFormatTag","PCM","MuLaw","MP3","OGG_OPUS","WEBM_OPUS","ALaw","FLAC","AMR_WB","G722","audioDestinationId","privPlaybackStarted","privAppendingToBuffer","privMediaSourceOpened","privBytesReceived","privIsPaused","privIsClosed","privAudioBuffer","updateSourceBuffer","privAudioOutputStream","privSourceBuffer","handleSourceBufferUpdateEnd","privFormat","formatTag","receivedAudio","audioBlob","Blob","src","createObjectURL","notifyPlayback","console","warn","onAudioEnd","AudioContext","webkitAudioContext","mimeType","MediaSource","isTypeSupported","Audio","privMediaSource","load","onsourceopen","addSourceBuffer","onupdate","onupdateend","onupdatestart","PullAudioOutputStreamImpl","volume","_this$privAudio$volum","_this$privAudio","mute","muted","unmute","pause","play","internalAudio","sourceBufferAvailable","binary","shift","appendBuffer","log","canEndStream","endOfStream","onAudioStart","onended","updating","DNS","hashfunc","generateUUID","namespace","_namespace","stringToBytes","Timeout","scheduledTimeoutFunctions","unhandledRequests","workerUrl","btoa","worker","Worker","addEventListener","_ref","isCallNotification","timerId","idOrFunc","unhandledTimerId","delete","isClearResponse","clearTimeout","postMessage","func","delay","performance","loadWorkerTimers","workerTimers","timers","TurnStatusPayload_js_1","turnStatus","privTurnStatus","TurnStatusResponsePayload","privActivity","privAudioStream","OnUnknownAction","msCrypto","REGEX","byteToHex","validate","SegmentationMode","Connection_js_1","privDisposedTranslationRecognizer","removeTargetLanguage","updateLanguages","TranslationServiceRecognizer","conn","createConversationAsync","arg2","conversationImpl","hostNickname","conversationProperties","fromConfig","deleteConversationAsync","endConversationAsync","lockConversationAsync","unlockConversationAsync","privDefaultRequestOptions","privDefaultParams","privRestErrors","Accept","ignoreCache","timeout","authInvalidSubscriptionKey","authInvalidSubscriptionRegion","invalidCreateJoinConversationResponse","authorization","contentTypeKey","languageCode","subscriptionRegion","SpeechRecognitionEvent","authFetchEventid","privAuthFetchEventid","RecognitionCompletionStatus","serviceTag","privServiceTag","CancellationDetailsBase_js_1","CancellationDetails","CancellationDetailsBase","getWaveFormat","samplesPerSecond","getWaveFormatPCM","isWavFormat","blockAlign","max","privHeader","setString","setUint32","setUint16","sampleRate","getSupportedConstraints","character","videoFormat","privCustomized","privUseBuiltInVoice","AvatarVideoFormat","customized","useBuiltInVoice","backgroundColor","privBackgroundColor","backgroundImage","privBackgroundImage","remoteIceServers","privRemoteIceServers","privListeningTriggerMetric","privMicMetric","privConnectionEstablishMetric","privReceivedMessages","privPhraseLatencies","privHypothesisLatencies","audioReceivedTime","End","eventTime","Start","privMicStartTime","privConnectionStartTime","Id","ConnectionEstablishErrorEvent","getConnectionError","maxMessagesToSend","metrics","PhraseLatencyMs","FirstHypothesisLatencyMs","telemetry","Metrics","ReceivedMessages","privActivityResponse","messageDataStreamType","MessageDataStreamType","AvatarEventTypes","description","privDescription","EnableWordLevelTimestamps","SegmentationMaximumTimeMs","SegmentationStrategy","TestHooks","CtsMeetingId","CtsDeviceId","CtsIsParticipant","CommandResponsePayload_js_1","ParticipantResponsePayload_js_1","TranslationResponsePayload_js_1","Mode","IAuthentication_js_1","fetchCallback","fetchOnExpiryCallback","privFetchCallback","privFetchOnExpiryCallback","AuthInfo","Authorization","privTokenPrefix","fetchOnExpiry","AuthKey","SpeechSynthesisBoundaryType","SpeechSynthesizer","speakImpl","getVoicesAsync","getVoices","SynthesisRestAdapter","IsSsml","dataStream","ok","SpeakerRecognitionResultType","resultType","Identify","Verify","privProfileId","identificationResult","identifiedProfile","privScore","score","RecognizedSpeakers","verificationResult","recognitionResult","SpeakerRecognitionCancellationDetails","metadata","privEventListeners","privConsoleListener","privMetadata","eventId","onEventCallback","listener","attachConsoleListener","CancellationEventArgsBase_js_1","ConversationTranscriptionCanceledEventArgs","DialogServiceConfig_js_1","CustomCommandsConfig","DialogServiceConfigImpl","subscription","customCommandsConfig","privAuthInfo","AudioSourceEvent","AudioStreamNodeEvent","propId","redirectUrlString","append","redirectedUrlString","redirectResponse","actualSampleRate","desiredSampleRate","privActualSampleRate","privDesiredSampleRate","encode","actualAudioFrame","audioFrame","downSampleAudioFrame","audioLength","floatTo16BitPCM","setInt16","srcFrame","srcRate","dstRate","ratio","dstLength","dstFrame","srcOffset","dstOffset","nextSrcOffset","accum","IntentRecognitionEventArgs","exists","info","translatedMessage","disconnectSession","instant_message","joinSession","leaveSession","participantList","roomExpirationWarning","sectionName","privAudioOutputFormat","synthesisSection","buildSynthesisContext","metadataOptions","bookmarkEnabled","punctuationBoundaryEnabled","SpeechServiceResponse_RequestPunctuationBoundary","sentenceBoundaryEnabled","SpeechServiceResponse_RequestSentenceBoundary","sessionEndEnabled","visemeEnabled","wordBoundaryEnabled","SpeechServiceResponse_RequestWordBoundary","requestAudioFormatString","autoDetection","autoDetectSourceLanguage","OCSPEvent","eventType","signature","privSignature","serialNumber","expireTime","privExpireTime","privStartTime","privExpireTimeString","toLocaleDateString","privStartTimeString","toLocaleTimeString","privSimpleSpeechPhrase","mapRecognitionStatus","MetadataType","SynthesisAudioMetadata","privSynthesisAudioMetadata","Metadata","core","StatusError","res","captureStackTrace","statusMessage","arrayBuffer","entries","_url","_headers","parsed","username","password","isView","Headers","resp","DialogServiceTurnState_js_1","privTurnMap","turnState","DialogServiceTurnState","Queue_js_1","privIsWriteEnded","privIsReadEnded","privReaderQueue","isReadEnded","streamChunk","throwIfClosed","implCommonRecognizerSetup","telemetryEnabled","telemetryDataEnabled","enableTelemetry","enabled","osPlatform","osName","osVersion","userAgent","appVersion","OS","getAuth","recognize","stopRecognizing","CognitiveSubscriptionKeyAuthentication","_tokenResponse$token","tokenResponse","_tokenResponse$token2","Segmentation_js_1","OnSuccess_js_1","InterimResults_js_1","LanguageIdContext_js_1","OnSuccess_js_2","OnUnknown_js_1","InterimResults_js_2","PhraseResults_js_1","OnSuccess_js_3","privConnectionConfigurationPromise","privConnectionPromise","privSetTimeout","privIsLiveAudio","privAverageBytesPerMs","handleSpeechPhraseMessage","handleSpeechHypothesisMessage","privMustReportEndOfStream","privAudioSource","RequestSession","privServiceEvents","DynamicGrammarBuilder","privSpeechContext","SpeechContext","WebWorkerLoadType","globalThis","connectionClosedEvent","privDiarizationSessionId","setTranslationJson","categoryId","SpeechServiceConnection_TranslationCategoryId","Synthesize","onPassthrough","onSuccess","includePassThroughResults","interimResults","Always","category","languageToVoiceMap","defaultVoices","Translate","onInterim","setSpeechSegmentationTimeoutJson","_phraseDetection$conv","_phraseDetection$inte","_phraseDetection$dict","speechSegmentationSilenceTimeoutMs","speechSegmentationMaximumTimeMs","Speech_SegmentationMaximumTimeMs","speechSegmentationStrategy","Speech_SegmentationStrategy","segmentation","Normal","segmentationForcedTimeoutMs","segmentationSilenceTimeoutMs","configuredSegment","segMode","Custom","Semantic","segmentationMaximumTimeMs","interactive","dictation","setLanguageIdJson","sourceLanguages","speechContextLidMode","LanguageIdDetectionMode","DetectContinuous","DetectAtAudioStart","languageId","Recognize","onUnknown","priority","LanguageIdDetectionPriority","PrioritizeLatency","Auto","phraseResults","PhraseResultOutputType","customModels","setOutputDetailLevelJson","conversationTranslatorToken","errorCallBack","setupTranslationWithLanguageId","audioStreamNode","sendFinalAudio","connectAsync","activityTemplate","privActivityTemplate","sendTelemetryData","telemetryData","privServiceHasSentMessage","sendPrePayloadJSON","updateSpeakerDiarizationAudioOffset","generateNewRequestId","speechContextJson","hasLanguageId","translationContext","retryableConnect","requestSession","SpeechServiceConfigJson","DisableReferenceChannel","MicSpec","configureConnection","nextSendTime","fastLaneSizeMs","maxSendUnthrottledBytes","startRecogNumber","readAndUploadCycle","audioStreamChunk","sendDelay","isUnAuthorized","lastStatusCode","lastReason","authPromise","delayMs","writeBufferToConsole","out","readView","padStart","privIntentRecognizer","privIntentDataSent","addedIntents","umbrellaIntent","speechHypothesis","RecognizingIntent","sendEvent","privPendingIntentArgs","intentResponse","IntentResponse","topScoringIntent","addedIntent","RecognizedIntent","LanguageUnderstandingServiceResponse_JsonResult","IntentRecognitionCanceledEventArgs","wordLength","textOffset","boundaryType","privDuration","privWordLength","privTextOffset","privBoundaryType","privRequestParams","conversationCode","authToken","Post","extractHeaderValue","errMessageRaw","errorMessage","Delete","ConversationServiceRecognizer","translationRecognizer","privTranslationRecognizer","processSpeechMessages","handleTranslationPhrase","translatedPhrase","handleTranslationHypothesis","SpeechPhrase","TranslationPhrase","sendSynthesisAudio","synthEnd","TranslationSynthesisResult","retEvent","canceledResult","TranslationRecognitionCanceledEventArgs","handleRecognizingCallback","handleRecognizedCallback","confidence","TranslatedSpeech","TranslatingSpeech","_sha","privJsonResult","privEventName","Group_js_1","grammar","privGrammars","clearGrammars","retObj","referenceGrammars","retPhrases","groups","GroupType","Generic","items","sendTranscriptionStartJSON","sendSpeechEvent","createSpeechEventPayload","createMeetingSpeechEventPayload","_unused3","speechEventJson","eventDict","attendees","speakOverride","connectImplOverride","privSynthesizerConfig","privSessionAudioDestination","SynthesisTurn","SynthesisContext","cancelSynthesisLocal","Speak","buildSsml","startNewSynthesis","sendSynthesisContext","sendSsmlMessage","cancelSynthesis","_cancellationReason","isSynthesizing","onStopSynthesizing","_connectionMessage","onServiceResponseMessage","onAudioChunkReceived","metadataList","Type","WordBoundary","SentenceBoundary","onTextBoundaryEvent","SpeechSynthesisWordBoundaryEventArgs","Data","Length","currentTextOffset","currentSentenceOffset","BoundaryType","Bookmark","SpeechSynthesisBookmarkEventArgs","Viseme","onVisemeMetadataReceived","IsLastAnimation","SpeechSynthesisVisemeEventArgs","VisemeId","getAndClearVisemeAnimation","AvatarSignal","onAvatarEvent","SessionEnd","onSessionEnd","constructSynthesisResult","synthesisContextJson","setSpeechConfigSynthesisSection","_metadata","_requestId","_audio","_result","_wordBoundaryEventArgs","_visemeEventArgs","_bookmarkEventArgs","SpeakerRecognizer","SpeakerRecognitionConnectionFactory","privAudioConfigImpl","privDisposedSpeakerRecognizer","recognizeSpeakerOnceAsyncImpl","BotFrameworkConfig","botId","botFrameworkConfig","resolvedHost","SpeakerDiarizationMode","IdentityProvider","privLanguageDetectionConfidence","privJson","SourceLanguageConfig","privEndpointId","fromLanguage","SpeechSynthesisOutputFormat_js_1","audioFormatString","priAudioFormatString","priRequestAudioFormatString","priHasHeader","getDefaultOutputFormat","SpeechSynthesisOutputFormatToString","speechSynthesisOutputFormatString","Siren","SILKSkype","OPUS","tmp","Raw8Khz8BitMonoMULaw","Riff16Khz16KbpsMonoSiren","Audio16Khz16KbpsMonoSiren","Audio16Khz32KBitRateMonoMp3","Audio16Khz128KBitRateMonoMp3","Audio16Khz64KBitRateMonoMp3","Audio24Khz48KBitRateMonoMp3","Audio24Khz96KBitRateMonoMp3","Audio24Khz160KBitRateMonoMp3","Raw16Khz16BitMonoTrueSilk","Riff16Khz16BitMonoPcm","Riff8Khz16BitMonoPcm","Riff8Khz8BitMonoMULaw","Raw16Khz16BitMonoPcm","Raw24Khz16BitMonoPcm","Raw8Khz16BitMonoPcm","Ogg16Khz16BitMonoOpus","Ogg24Khz16BitMonoOpus","Raw48Khz16BitMonoPcm","Riff48Khz16BitMonoPcm","Audio48Khz96KBitRateMonoMp3","Audio48Khz192KBitRateMonoMp3","Ogg48Khz16BitMonoOpus","Webm16Khz16BitMonoOpus","Webm24Khz16BitMonoOpus","Webm24Khz16Bit24KbpsMonoOpus","Raw24Khz16BitMonoTrueSilk","Raw8Khz8BitMonoALaw","Riff8Khz8BitMonoALaw","Audio16Khz16Bit32KbpsMonoOpus","Audio24Khz16Bit48KbpsMonoOpus","Audio24Khz16Bit24KbpsMonoOpus","Raw22050Hz16BitMonoPcm","Riff22050Hz16BitMonoPcm","Raw44100Hz16BitMonoPcm","Riff44100Hz16BitMonoPcm","AmrWb16000Hz","G72216Khz64Kbps","privRequestCompletionDeferral","completionPromise","codec","bitrate","width","height","setCropRange","topLeft","bottomRight","cropRange","AudioConfig_js_1","PullAudioInputStream","PushAudioInputStream","AudioOutputStream","CancellationReason_js_1","PullAudioInputStreamCallback_js_1","PushAudioOutputStreamCallback_js_1","KeywordRecognitionModel_js_1","KeywordRecognitionModel","SessionEventArgs_js_1","RecognitionEventArgs_js_1","OutputFormat_js_1","IntentRecognitionEventArgs_js_1","RecognitionResult_js_1","SpeechRecognitionResult_js_1","IntentRecognitionResult_js_1","LanguageUnderstandingModel_js_1","SpeechRecognitionEventArgs_js_1","MeetingTranscriptionEventArgs","SpeechRecognitionCanceledEventArgs_js_1","TranslationRecognitionEventArgs_js_1","TranslationSynthesisEventArgs_js_1","TranslationRecognitionResult_js_1","TranslationSynthesisResult_js_1","ResultReason_js_1","SpeechConfig_js_1","SpeechTranslationConfig_js_1","Recognizer_js_1","SpeechRecognizer_js_1","IntentRecognizer_js_1","VoiceProfileType_js_1","TranslationRecognizer_js_1","Translations_js_1","NoMatchReason_js_1","NoMatchDetails_js_1","TranslationRecognitionCanceledEventArgs_js_1","IntentRecognitionCanceledEventArgs_js_1","CancellationDetails_js_1","CancellationErrorCodes_js_1","ConnectionEventArgs_js_1","ServiceEventArgs_js_1","PhraseListGrammar_js_1","BotFrameworkConfig_js_1","CustomCommandsConfig_js_1","DialogServiceConnector_js_1","DialogServiceConnector","ActivityReceivedEventArgs_js_1","TurnStatusReceivedEventArgs_js_1","ServicePropertyChannel_js_1","ProfanityOption_js_1","BaseAudioPlayer_js_1","BaseAudioPlayer","ConnectionMessageEventArgs_js_1","VoiceProfile_js_1","VoiceProfile","VoiceProfileEnrollmentResult_js_1","VoiceProfileEnrollmentCancellationDetails","VoiceProfileResult_js_1","VoiceProfileCancellationDetails","VoiceProfilePhraseResult_js_1","VoiceProfileClient_js_1","VoiceProfileClient","SpeakerRecognizer_js_1","SpeakerIdentificationModel_js_1","SpeakerVerificationModel_js_1","AutoDetectSourceLanguageConfig_js_1","AutoDetectSourceLanguageResult_js_1","AutoDetectSourceLanguageResult","SourceLanguageConfig_js_1","SpeakerRecognitionResult_js_1","SpeechSynthesizer_js_1","SynthesisResult_js_1","SpeechSynthesisResult_js_1","SpeechSynthesisEventArgs_js_1","SpeechSynthesisWordBoundaryEventArgs_js_1","SpeechSynthesisBookmarkEventArgs_js_1","SpeechSynthesisVisemeEventArgs_js_1","SpeechSynthesisBoundaryType_js_1","SynthesisVoicesResult_js_1","VoiceInfo_js_1","SpeakerAudioDestination_js_1","ConversationTranscriptionCanceledEventArgs_js_1","PronunciationAssessmentGradingSystem_js_1","PronunciationAssessmentGranularity_js_1","PronunciationAssessmentConfig_js_1","PronunciationAssessmentResult_js_1","AvatarConfig_js_1","AvatarConfig","AvatarEventArgs_js_1","AvatarEventArgs","AvatarSynthesizer_js_1","AvatarVideoFormat_js_1","Coordinate","AvatarWebRTCConnectionResult_js_1","AvatarWebRTCConnectionResult","Diagnostics_js_1","Diagnostics","LogLevel_js_1","LogLevel","handleSpeechPhrase","handleSpeechHypothesis","avatarSynthesizer","privAvatarSynthesizer","_this$privAvatarConfi","_this$privAvatarConfi2","_this$privAvatarConfi3","_this$privAvatarConfi4","_this$privAvatarConfi5","_this$privAvatarConfi6","_this$privAvatarConfi7","_this$privAvatarConfi8","_this$privAvatarConfi9","_this$privAvatarConfi0","crop","resolution","webrtcConfig","clientDescription","talkingAvatar","background","color","image","url","avatarEventReceived","avatarEventArgs","privHeaderEnd","privFilename","privAudioFormatPromise","readHeader","upload","File","headerResult","processHeader","getWord","getUint8","formatSize","getInt32","getUint16","getUint32","pos","maxHeaderSize","reader","FileReader","onload","target","readAsArrayBuffer","h","processFile","buff","fileBuffer","logLevelFilter","privLogPath","privEnableConsoleOutput","privLogLevelFilter","logPath","enableConsoleOutput","enableOutput","logCallback","writeFileSync","flag","debug","logFragments","valueToLog","SynthesisAudioMetadata_js_1","SynthesisEvents_js_1","privIsSynthesizing","privIsSynthesisEnded","privNextSearchTextIndex","privSentenceOffset","privNextSearchSentenceIndex","isSynthesisEnded","bytesReceived","extraProperties","privWebRTCSDP","getAllReceivedAudio","privReceivedAudio","readAllAudioFromStream","getAllReceivedAudioWithHeader","privReceivedAudioWithHeader","rawText","privRawText","privIsSSML","privPartialVisemeAnimation","privTurnAudioDestination","SynthesisTriggeredEvent","ConnectingToSynthesisServiceEvent","SynthesisStartedEvent","responseJson","webrtc","connectionString","updateTextOffset","AnimationChunk","isXmlTag","withinXmlTag","idx","privTranslationPhrase","translationResponse","_this$privTranslation2","serializedObj","privIntentResponse","query","entities","bent_1","privIgnoreCache","headerKey","headerMap","line","parts","responseReceivedDeferral","requestCommand","handleRestResponse","postData","DialogConnectorFactory_js_1","dialogConfig","dialogServiceConfigImpl","isTurnComplete","buildAgentConfig","listenOnceAsync","retPromise","callbackHolder","sendActivityAsync","errCb","commType","Conversation_Agent_Connection_Id","Conversation_Conversation_Id","fromId","Conversation_From_Id","ttsAudioFormat","privProfileType","manager","privTurnManager","resetTurnEndTimeout","TextToSpeechAudio","createPullStream","privTimeoutToken","privConvGetter","isVirtMicArrayEndpoint","convInfo","cognitiveSpeechRegion","replacementValues","CTS_VIRT_MIC_PATH","parsedUrl","connFactory","privKeys","privValues","keyToUse","clonedMap","destinationCollection","createPushStream","PushAudioInputStreamImpl","privStream","dataBuffer","toBuffer","alloc","privCallback","privBufferSize","transmitBuff","totalBytes","readBuff","pulledBytes","privDetails","enrollmentsCount","enrollmentsLength","enrollmentResultDetails","FromIdentificationProfileList","results","getIdentificationDetails","FromVerificationProfileList","getVerificationDetails","parseFloat","audioSpeechLength","enrollmentsSpeechLength","identificationProfileId","remainingEnrollmentsSpeechLength","verificationProfileId","remainingEnrollmentsCount","remainingEnrollments","ConversationConnectionFactory_js_1","ConversationServiceAdapter_js_1","ConversationTranslatorRecognizer","serviceConfigImpl","privConnection","privClearTimeout","resetConversationTimeout","PromiseToEmptyCallback","uuid_1","v4","RegExp","privMessageStatusResponse","privEventId","privEventTime","privEventType","SubstringMatchType","SpeakerDiarization_js_1","ConversationTranscriptionServiceRecognizer","conversationTranscriber","privConversationTranscriber","setSpeakerDiarizationJson","Anonymous","audioSessionId","diarizeIntermediates","SpeechServiceResponse_DiarizeIntermediateResults","SetLoggingLevel","logLevel","privListener","ConsoleLoggingListener","StartConsoleOutput","StopConsoleOutput","SetLogOutputPath","onLogOutput","privDetailedSpeechPhrase","updateOffsets","Words","word","DisplayWords","privSpeechConfig","SpeechSynthesisEvent","sessionAudioDestinationId","turnAudioDestinationId","privSessionAudioDestinationId","privTurnAudioDestinationId","audioSessionDestinationId","audioTurnDestinationId","Exports_1","stopInputOnRelease","privStopInputOnRelease","outputStream","waveStreamEncoder","RiffPcmEncoder","micInput","createMediaStreamSource","attachScriptProcessor","scriptNode","bufferSize","createScriptProcessor","audioSampleRate","onaudioprocess","inputFrame","inputBuffer","waveFrame","privMediaResources","scriptProcessorNode","skipAudioWorklet","privSpeechProcessorScript","audioWorklet","blob","addModule","workletNode","AudioWorkletNode","track","stop","originalLanguage","privOrigLang","originalLang","SDPAnswer","privSDPAnswer","fromConversationTranscriptionResult","EventSource_js_1","setEventSource","privInstance","jsonstring","ConnectionEvent","privMessage","statuscode","networkReceivedTimeISO","privNetworkReceivedTime","networkSentTimeISO","privNetworkSentTime","networkSentTime","originalUrl","privRedirectUrl","privOriginalUrl","languageToDefaultVoice","XMLEncode","SynthesizerConfig","VoiceProfileConnectionFactory","privVoiceAdapter","privDisposedVoiceAdapter","createProfileAsync","retrieveEnrollmentResultAsync","getAllProfilesAsync","getActivationPhrasesAsync","enrollProfileAsync","deleteProfileAsync","resetProfileAsync","getResult","intView","privLastChunkView","tmpBuffer"],"sourceRoot":""}