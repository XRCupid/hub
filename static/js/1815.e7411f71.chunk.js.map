{"version":3,"file":"static/js/1815.e7411f71.chunk.js","mappings":"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","sources":["components/PresenceAvatarWithGender.tsx","components/DougieSpeedDate.backup.tsx"],"sourcesContent":["import React, { useMemo, useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { useFrame, useGraph } from '@react-three/fiber';\nimport { useGLTF, useAnimations } from '@react-three/drei';\nimport { SkeletonUtils } from 'three-stdlib';\nimport { MathUtils } from 'three';\nimport type { TrackingData, FacialExpressions } from '../types/tracking';\n\nconst DEFAULT_AVATAR_URL = '/avatars/coach_grace.glb';\n\ninterface PresenceAvatarWithGenderProps {\n  avatarUrl?: string;\n  position?: [number, number, number] | THREE.Vector3;\n  scale?: number;\n  trackingData?: TrackingData;\n  animationName?: string;\n  emotionalBlendshapes?: Record<string, number>;\n  audioData?: Uint8Array;\n  participantId?: string;\n  gender?: 'male' | 'female'; // Allow explicit gender override\n}\n\n// Hume to RPM blendshape mapping with amplification factors\nconst HUME_TO_RPM_MAPPING: Record<string, { target: string; amplify?: number }> = {\n  'browInnerUp': { target: 'browInnerUp', amplify: 1.5 },\n  'browDownLeft': { target: 'browDownLeft', amplify: 1.8 },\n  'browDownRight': { target: 'browDownRight', amplify: 1.8 },\n  'browOuterUpLeft': { target: 'browOuterUpLeft', amplify: 1.5 },\n  'browOuterUpRight': { target: 'browOuterUpRight', amplify: 1.5 },\n  'mouthSmileLeft': { target: 'mouthSmileLeft', amplify: 2.5 },\n  'mouthSmileRight': { target: 'mouthSmileRight', amplify: 2.5 },\n  'mouthFrownLeft': { target: 'mouthFrownLeft', amplify: 2.2 },\n  'mouthFrownRight': { target: 'mouthFrownRight', amplify: 2.2 },\n  'mouthOpen': { target: 'mouthOpen', amplify: 1.0 },\n  'mouthPucker': { target: 'mouthPucker', amplify: 1.8 },\n  'mouthLeft': { target: 'mouthLeft', amplify: 1.5 },\n  'mouthRight': { target: 'mouthRight', amplify: 1.5 },\n  'eyeSquintLeft': { target: 'eyeSquintLeft', amplify: 1.4 },\n  'eyeSquintRight': { target: 'eyeSquintRight', amplify: 1.4 },\n  'eyeWideLeft': { target: 'eyeWideLeft', amplify: 1.2 },\n  'eyeWideRight': { target: 'eyeWideRight', amplify: 1.2 },\n  'cheekPuff': { target: 'cheekPuff', amplify: 1.5 },\n  'cheekSquintLeft': { target: 'cheekSquintLeft', amplify: 1.3 },\n  'cheekSquintRight': { target: 'cheekSquintRight', amplify: 1.3 },\n  'noseSneerLeft': { target: 'noseSneerLeft', amplify: 1.5 },\n  'noseSneerRight': { target: 'noseSneerRight', amplify: 1.5 },\n  'jawOpen': { target: 'jawOpen', amplify: 1.0 },\n  'jawLeft': { target: 'jawLeft', amplify: 1.2 },\n  'jawRight': { target: 'jawRight', amplify: 1.2 }\n};\n\n// Emotion to blendshape mapping\nconst EMOTION_TO_BLENDSHAPE: Record<string, string[]> = {\n  joy: ['mouthSmileLeft', 'mouthSmileRight', 'cheekSquintLeft', 'cheekSquintRight'],\n  sadness: ['mouthFrownLeft', 'mouthFrownRight', 'browDownLeft', 'browDownRight'],\n  anger: ['browDownLeft', 'browDownRight', 'noseSneerLeft', 'noseSneerRight'],\n  fear: ['eyeWideLeft', 'eyeWideRight', 'browInnerUp', 'mouthOpen'],\n  surprise: ['eyeWideLeft', 'eyeWideRight', 'browOuterUpLeft', 'browOuterUpRight', 'mouthOpen'],\n  disgust: ['noseSneerLeft', 'noseSneerRight', 'mouthFrownLeft', 'mouthFrownRight'],\n  contempt: ['mouthLeft', 'mouthRight', 'eyeSquintLeft', 'eyeSquintRight']\n};\n\n// Head rotation limits\nconst HEAD_ROTATION_LIMITS = {\n  pitch: { min: -0.5, max: 0.5 },\n  yaw: { min: -0.7, max: 0.7 },\n  roll: { min: -0.3, max: 0.3 }\n};\n\n// Neck rotation distribution\nconst NECK_ROTATION_FACTOR = {\n  pitch: {\n    neck: 0.3,\n    head: 0.7\n  },\n  yaw: {\n    neck: 0.4,\n    head: 0.6\n  },\n  roll: {\n    neck: 0.2,\n    head: 0.8\n  }\n};\n\nfunction clampRotation(value: number, limits: { min: number; max: number }): number {\n  return Math.max(limits.min, Math.min(limits.max, value));\n}\n\nfunction lerp(current: number, target: number, factor: number): number {\n  return current + (target - current) * factor;\n}\n\nconst tempEuler = new THREE.Euler();\nconst tempQuat = new THREE.Quaternion();\nconst tempMatrix = new THREE.Matrix4();\nconst deltaMatrix = new THREE.Matrix4();\nconst targetWorldMatrix = new THREE.Matrix4();\nconst parentInverseWorldMatrix = new THREE.Matrix4();\nconst targetLocalMatrix = new THREE.Matrix4();\n\nexport const PresenceAvatarWithGender: React.FC<PresenceAvatarWithGenderProps> = React.memo(({\n  avatarUrl,\n  trackingData,\n  position = [0, 0, 0],\n  scale = 1,\n  participantId,\n  animationName = 'idle',\n  emotionalBlendshapes,\n  audioData,\n  gender\n}) => {\n  // Determine gender from avatar URL or explicit prop\n  const detectedGender = useMemo(() => {\n    if (gender) return gender;\n    \n    // Check avatar URL for gender hints\n    const url = avatarUrl?.toLowerCase() || '';\n    if (url.includes('dougie') || url.includes('male') || url.includes('_m_')) {\n      return 'male';\n    }\n    if (url.includes('grace') || url.includes('female') || url.includes('_f_')) {\n      return 'female';\n    }\n    \n    // Default to female for backward compatibility\n    return 'female';\n  }, [avatarUrl, gender]);\n\n  const isCoachAvatar = trackingData === undefined;\n  const avatarType = isCoachAvatar ? 'coach' : 'user';\n  \n  const instanceIdRef = useRef(Math.random().toString(36).substr(2, 9));\n  \n  useEffect(() => {\n    console.log(`[PresenceAvatarWithGender-${instanceIdRef.current}] Mounted:`, {\n      avatarType,\n      participantId,\n      hasTrackingData: !!trackingData,\n      avatarUrl,\n      detectedGender,\n      timestamp: Date.now()\n    });\n    return () => {\n      console.log(`[PresenceAvatarWithGender-${instanceIdRef.current}] Unmounted`);\n    };\n  }, []);\n\n  const { scene } = useGLTF(avatarUrl || DEFAULT_AVATAR_URL);\n  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);\n  const { nodes } = useGraph(clone);\n\n  // Load gender-appropriate animations\n  const genderPrefix = detectedGender === 'male' ? 'M' : 'F';\n  const idleAnimationUrl = `/animations/${genderPrefix}_Standing_Idle_001.glb`;\n  const { animations: idleAnimations } = useGLTF(idleAnimationUrl);\n\n  // Load talking animations based on gender\n  const talkingAnimationUrls = [\n    `/animations/${genderPrefix}_Talking_Variations_001.glb`,\n    `/animations/${genderPrefix}_Talking_Variations_002.glb`,\n    `/animations/${genderPrefix}_Talking_Variations_003.glb`,\n    `/animations/${genderPrefix}_Talking_Variations_004.glb`,\n    `/animations/${genderPrefix}_Talking_Variations_005.glb`,\n    `/animations/${genderPrefix}_Talking_Variations_006.glb`\n  ];\n\n  // Load all talking animations separately\n  const { animations: talking1 } = useGLTF(talkingAnimationUrls[0]);\n  const { animations: talking2 } = useGLTF(talkingAnimationUrls[1]);\n  const { animations: talking3 } = useGLTF(talkingAnimationUrls[2]);\n  const { animations: talking4 } = useGLTF(talkingAnimationUrls[3]);\n  const { animations: talking5 } = useGLTF(talkingAnimationUrls[4]);\n  const { animations: talking6 } = useGLTF(talkingAnimationUrls[5]);\n\n  // Combine all talking animations\n  const talkingAnimations = [...talking1, ...talking2, ...talking3, ...talking4, ...talking5, ...talking6];\n\n  // Preload all animations\n  talkingAnimationUrls.forEach(url => useGLTF.preload(url));\n\n  // Combine all animations\n  const allAnimations = useMemo(() => {\n    const combined = [...idleAnimations, ...talkingAnimations];\n    console.log(`[PresenceAvatarWithGender] Loaded ${combined.length} animations for ${detectedGender} avatar`);\n    return combined;\n  }, [idleAnimations, talkingAnimations, detectedGender]);\n\n  const { actions, mixer } = useAnimations(allAnimations, clone);\n\n  // Track the last talking animation to avoid repeating\n  const lastTalkingAnimationRef = useRef<string | null>(null);\n  const lastAnimationNameRef = useRef<string>('idle');\n  const animationChangeTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  \n  useEffect(() => {\n    if (!actions || Object.keys(actions).length === 0) return;\n    \n    // Debounce animation changes to prevent flickering\n    if (animationChangeTimeoutRef.current) {\n      clearTimeout(animationChangeTimeoutRef.current);\n    }\n    \n    // Only change animation if it's actually different\n    if (lastAnimationNameRef.current === animationName) {\n      return;\n    }\n    \n    animationChangeTimeoutRef.current = setTimeout(() => {\n      lastAnimationNameRef.current = animationName;\n      \n      // Stop all animations with fade out\n      Object.values(actions).forEach(action => {\n        if (action) action.fadeOut(0.3); // Smooth fade out over 0.3 seconds\n      });\n      \n      if (animationName === 'talking') {\n        // Find all talking animations\n        const talkingAnimations = Object.entries(actions).filter(([name]) => \n          name.toLowerCase().includes('talking') || name.toLowerCase().includes('talk')\n        );\n        \n        if (talkingAnimations.length > 0) {\n          console.log('[PresenceAvatarWithGender] Available talking animations:', talkingAnimations);\n          \n          // If we have multiple talking animations, pick one randomly (but not the same as last time)\n          let selectedAnimation;\n          if (talkingAnimations.length > 1) {\n            let availableAnimations = talkingAnimations.filter(([name]) => name !== lastTalkingAnimationRef.current);\n            if (availableAnimations.length === 0) availableAnimations = talkingAnimations;\n            \n            const randomIndex = Math.floor(Math.random() * availableAnimations.length);\n            selectedAnimation = availableAnimations[randomIndex];\n          } else {\n            selectedAnimation = talkingAnimations[0];\n          }\n          \n          const [animName, action] = selectedAnimation;\n          console.log('[PresenceAvatarWithGender] Playing talking animation:', animName);\n          lastTalkingAnimationRef.current = animName;\n          \n          if (action) {\n            action.reset();\n            action.setLoop(THREE.LoopRepeat, Infinity);\n            action.fadeIn(0.3); // Smooth fade in over 0.3 seconds\n            action.timeScale = 0.7; // Slow down animation to 70% speed\n            action.play();\n          }\n        }\n      } else {\n        // Play idle animation\n        const idleAnimation = Object.entries(actions).find(([name]) => \n          name.toLowerCase().includes('idle')\n        );\n        \n        if (idleAnimation) {\n          const [animName, action] = idleAnimation;\n          console.log('[PresenceAvatarWithGender] Playing idle animation:', animName);\n          if (action) {\n            action.reset();\n            action.setLoop(THREE.LoopRepeat, Infinity);\n            action.fadeIn(0.3); // Smooth fade in over 0.3 seconds\n            action.timeScale = 0.8; // Slow down idle animation to 80% speed\n            action.play();\n          }\n        }\n      }\n    }, 100);\n  }, [animationName, actions]);\n\n  // Find mesh with morph targets\n  const meshesWithMorphTargets = useRef<THREE.SkinnedMesh[]>([]);\n  const headBone = useRef<THREE.Bone | null>(null);\n  const neckBone = useRef<THREE.Bone | null>(null);\n\n  useEffect(() => {\n    meshesWithMorphTargets.current = [];\n    clone.traverse((child) => {\n      if (child instanceof THREE.SkinnedMesh && child.morphTargetDictionary) {\n        meshesWithMorphTargets.current.push(child);\n        console.log('[PresenceAvatarWithGender] Found mesh with morph targets:', child.name, Object.keys(child.morphTargetDictionary));\n      }\n      if (child instanceof THREE.Bone) {\n        if (child.name.toLowerCase().includes('head')) {\n          headBone.current = child;\n          console.log('[PresenceAvatarWithGender] Found head bone:', child.name);\n        } else if (child.name.toLowerCase().includes('neck')) {\n          neckBone.current = child;\n          console.log('[PresenceAvatarWithGender] Found neck bone:', child.name);\n        }\n      }\n    });\n  }, [clone]);\n\n  // Smooth rotation values\n  const smoothedRotation = useRef({ pitch: 0, yaw: 0, roll: 0 });\n  const ROTATION_SMOOTHING = 0.1;\n\n  // Audio analysis for lip sync\n  const audioAnalyser = useRef<{ volume: number; frequency: number }>({ volume: 0, frequency: 0 });\n  const morphTargetsDebuggedRef = useRef(false);\n  const frameCount = useRef(0);\n  \n  useFrame(() => {\n    if (meshesWithMorphTargets.current.length === 0) return;\n\n    // Analyze audio data in the render loop for real-time lip sync\n    if (audioData && audioData.length > 0) {\n      // Simple audio analysis\n      let sum = 0;\n      let max = 0;\n      for (let i = 0; i < audioData.length; i++) {\n        sum += audioData[i];\n        max = Math.max(max, audioData[i]);\n      }\n      audioAnalyser.current.volume = sum / audioData.length / 255;\n      audioAnalyser.current.frequency = max / 255;\n      \n      // Log every 60 frames (about once per second)\n      if (frameCount.current % 60 === 0) {\n        console.log('[PresenceAvatarWithGender] Audio data:', {\n          hasAudioData: true,\n          dataLength: audioData.length,\n          volume: audioAnalyser.current.volume,\n          frequency: audioAnalyser.current.frequency,\n          max: max,\n          sum: sum,\n          participantId,\n          isCoachAvatar\n        });\n      }\n    } else {\n      audioAnalyser.current.volume = 0;\n      audioAnalyser.current.frequency = 0;\n    }\n\n    frameCount.current++;\n\n    // Debug log morph targets once\n    if (!morphTargetsDebuggedRef.current) {\n      console.log('[PresenceAvatarWithGender] Morph targets found:', \n        meshesWithMorphTargets.current.map(mesh => ({\n          name: mesh.name,\n          morphTargets: Object.keys(mesh.morphTargetDictionary || {})\n        }))\n      );\n      morphTargetsDebuggedRef.current = true;\n    }\n\n    // Apply emotional blendshapes from Hume EVI\n    if (emotionalBlendshapes) {\n      meshesWithMorphTargets.current.forEach(mesh => {\n        if (!mesh.morphTargetDictionary || !mesh.morphTargetInfluences) return;\n\n        Object.entries(emotionalBlendshapes).forEach(([emotion, value]) => {\n          const blendshapes = EMOTION_TO_BLENDSHAPE[emotion];\n          if (blendshapes) {\n            blendshapes.forEach(blendshape => {\n              const mapping = HUME_TO_RPM_MAPPING[blendshape];\n              if (mapping && mesh.morphTargetDictionary) {\n                const morphIndex = mesh.morphTargetDictionary[mapping.target];\n                if (morphIndex !== undefined && mesh.morphTargetInfluences) {\n                  const amplifiedValue = value * (mapping.amplify || 1.0);\n                  mesh.morphTargetInfluences[morphIndex] = MathUtils.clamp(amplifiedValue, 0, 1);\n                }\n              }\n            });\n          }\n        });\n      });\n    }\n\n    // Apply lip sync from audio data\n    if (audioData && audioData.length > 0) {\n      // Log audio analysis values periodically\n      if (Math.random() < 0.01) { // Log ~1% of frames\n        console.log('[PresenceAvatarWithGender] Audio analysis:', {\n          volume: audioAnalyser.current.volume,\n          frequency: audioAnalyser.current.frequency,\n          audioDataLength: audioData.length,\n          isCoachAvatar,\n          gender: detectedGender\n        });\n      }\n\n      meshesWithMorphTargets.current.forEach(mesh => {\n        if (!mesh.morphTargetDictionary || !mesh.morphTargetInfluences) return;\n\n        // Try multiple possible jaw/mouth morph targets including RPM numbered targets\n        const possibleJawTargets = ['mouthOpen', 'jawOpen', 'viseme_aa', 'viseme_O', '0', '1'];\n        let jawTargetFound = false;\n        \n        for (const target of possibleJawTargets) {\n          if (mesh.morphTargetDictionary[target] !== undefined) {\n            const targetValue = audioAnalyser.current.volume * 0.8;\n            const morphIndex = mesh.morphTargetDictionary[target];\n            const currentValue = mesh.morphTargetInfluences[morphIndex];\n            mesh.morphTargetInfluences[morphIndex] = lerp(currentValue, targetValue, 0.3);\n            \n            // Log when we apply lip sync\n            if (Math.random() < 0.01 && targetValue > 0.01) { // Log when there's actual movement\n              console.log(`[PresenceAvatarWithGender] Applied lip sync to ${target}:`, {\n                targetValue,\n                currentValue,\n                morphIndex,\n                meshName: mesh.name\n              });\n            }\n            \n            // For RPM avatars with numbered targets, apply to secondary target\n            if (target === '0' && mesh.morphTargetDictionary['1'] !== undefined) {\n              const secondaryIndex = mesh.morphTargetDictionary['1'];\n              const secondaryValue = audioAnalyser.current.volume * 0.4;\n              mesh.morphTargetInfluences[secondaryIndex] = lerp(\n                mesh.morphTargetInfluences[secondaryIndex],\n                secondaryValue,\n                0.3\n              );\n            }\n            \n            jawTargetFound = true;\n            break;\n          }\n        }\n        \n        // Log warning if no jaw target found (only once)\n        if (!jawTargetFound && !morphTargetsDebuggedRef.current) {\n          console.warn('[PresenceAvatarWithGender] No jaw/mouth morph target found! Available targets:', Object.keys(mesh.morphTargetDictionary));\n          morphTargetsDebuggedRef.current = true;\n        }\n\n        // Map frequency to mouth shape (for non-RPM avatars)\n        const mouthSmileLeftIndex = mesh.morphTargetDictionary['mouthSmileLeft'];\n        const mouthSmileRightIndex = mesh.morphTargetDictionary['mouthSmileRight'];\n        if (mouthSmileLeftIndex !== undefined && mouthSmileRightIndex !== undefined) {\n          const smileValue = audioAnalyser.current.frequency * 0.3;\n          mesh.morphTargetInfluences[mouthSmileLeftIndex] = lerp(\n            mesh.morphTargetInfluences[mouthSmileLeftIndex],\n            smileValue,\n            0.2\n          );\n          mesh.morphTargetInfluences[mouthSmileRightIndex] = lerp(\n            mesh.morphTargetInfluences[mouthSmileRightIndex],\n            smileValue,\n            0.2\n          );\n        }\n      });\n    }\n\n    // Apply face tracking data (for user avatars)\n    if (trackingData && trackingData.rotation) {\n      const { pitch, yaw, roll } = trackingData.rotation;\n\n      // Smooth the rotation values\n      smoothedRotation.current.pitch = lerp(\n        smoothedRotation.current.pitch,\n        clampRotation(pitch, HEAD_ROTATION_LIMITS.pitch),\n        ROTATION_SMOOTHING\n      );\n      smoothedRotation.current.yaw = lerp(\n        smoothedRotation.current.yaw,\n        clampRotation(yaw, HEAD_ROTATION_LIMITS.yaw),\n        ROTATION_SMOOTHING\n      );\n      smoothedRotation.current.roll = lerp(\n        smoothedRotation.current.roll,\n        clampRotation(roll, HEAD_ROTATION_LIMITS.roll),\n        ROTATION_SMOOTHING\n      );\n\n      // Apply rotation to neck and head bones\n      if (neckBone.current) {\n        tempEuler.set(\n          smoothedRotation.current.pitch * NECK_ROTATION_FACTOR.pitch.neck,\n          smoothedRotation.current.yaw * NECK_ROTATION_FACTOR.yaw.neck,\n          smoothedRotation.current.roll * NECK_ROTATION_FACTOR.roll.neck,\n          'XYZ'\n        );\n        neckBone.current.quaternion.setFromEuler(tempEuler);\n      }\n\n      if (headBone.current) {\n        tempEuler.set(\n          smoothedRotation.current.pitch * NECK_ROTATION_FACTOR.pitch.head,\n          smoothedRotation.current.yaw * NECK_ROTATION_FACTOR.yaw.head,\n          smoothedRotation.current.roll * NECK_ROTATION_FACTOR.roll.head,\n          'XYZ'\n        );\n        headBone.current.quaternion.setFromEuler(tempEuler);\n      }\n\n      // Apply facial expressions from tracking data\n      if (trackingData.expressions) {\n        meshesWithMorphTargets.current.forEach(mesh => {\n          if (!mesh.morphTargetDictionary || !mesh.morphTargetInfluences) return;\n\n          Object.entries(trackingData.expressions!).forEach(([expression, value]) => {\n            const morphIndex = mesh.morphTargetDictionary![expression];\n            if (morphIndex !== undefined) {\n              mesh.morphTargetInfluences![morphIndex] = value;\n            }\n          });\n        });\n      }\n    }\n  });\n\n  // Convert position prop to proper Vector3 format\n  const positionVector = Array.isArray(position) && position.length === 3 \n    ? position as [number, number, number]\n    : [0, 0, 0] as [number, number, number];\n\n  return (\n    <group position={positionVector} scale={scale}>\n      <primitive object={clone} />\n    </group>\n  );\n});\n\nPresenceAvatarWithGender.displayName = 'PresenceAvatarWithGender';\n\n// Preload common avatar URLs\n[\n  '/avatars/coach_grace.glb',\n  '/avatars/Dougie.glb',\n  '/animations/M_Standing_Idle_001.glb',\n  '/animations/F_Standing_Idle_001.glb'\n].forEach(url => {\n  useGLTF.preload(url);\n});\n","import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera } from '@react-three/drei';\nimport { PresenceAvatarWithGender } from './PresenceAvatarWithGender';\nimport { HybridVoiceService } from '../services/hybridVoiceService';\nimport { HumeExpressionService } from '../services/HumeExpressionService';\nimport RealTimeEmotionSliders from './RealTimeEmotionSliders';\nimport TranscriptTimeline from './TranscriptTimeline';\nimport ChemistryReport from './ChemistryReport';\nimport { FaLock, FaLockOpen } from 'react-icons/fa';\nimport './DougieSpeedDate.css';\n\n// WebGL Error Boundary\nclass WebGLErrorBoundary extends React.Component<\n  { children: React.ReactNode; fallback?: React.ReactNode },\n  { hasError: boolean }\n> {\n  constructor(props: { children: React.ReactNode; fallback?: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('[WebGLErrorBoundary] Caught error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback || (\n        <div className=\"pip-fallback\">\n          <p>Unable to load 3D avatar</p>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\n// Transcript segment type\ninterface TranscriptSegment {\n  timestamp: number;\n  speaker: string;\n  text: string;\n  emotions: { name: string; score: number }[];\n  prosodyEmotions?: { name: string; score: number }[];\n  facialEmotions?: { name: string; score: number }[];\n}\n\ninterface EmotionSnapshot {\n  timestamp: number;\n  participant1Emotions: { name: string; score: number }[];\n  participant2Emotions: { name: string; score: number }[];\n}\n\nconst DOUGIE_CONFIG = {\n  id: 'dougie',\n  name: 'Dougie',\n  avatarUrl: '/avatars/Dougie.glb',\n  humeConfigId: '320d816a-8dac-44e6-b59b-1c3d2b6b24d9',\n  convaiCharacterId: '', \n  venue: '/images/coffee-shop.jpg',\n  personality: 'charming, witty, adventurous',\n  description: 'a charming entrepreneur who loves adventure and deep conversations',\n  speedDatePrompts: [\n    \"So tell me, what brings you to speed dating? I'm always curious about people's stories.\",\n    \"I have to say, you have such an interesting energy about you. What do you do for fun?\",\n    \"What's something you're really passionate about? I love hearing what makes people's eyes light up.\"\n  ]\n};\n\nconst SPEED_DATE_DURATION = 300; // 5 minutes in seconds\n\nconst DougieSpeedDate: React.FC = () => {\n  // State management\n  const [isConnected, setIsConnected] = useState(false);\n  const [dateStarted, setDateStarted] = useState(false);\n  const [dateEnded, setDateEnded] = useState(false);\n  const [showReport, setShowReport] = useState(false);\n  const [showTranscript, setShowTranscript] = useState(false);\n  \n  // Emotion tracking\n  const [userFacialEmotions, setUserFacialEmotions] = useState<{ name: string; score: number }[]>([]);\n  const [userProsodyEmotions, setUserProsodyEmotions] = useState<{ name: string; score: number }[]>([]);\n  const [dougieEmotions, setDougieEmotions] = useState<{ name: string; score: number }[]>([]);\n  const [emotionHistory, setEmotionHistory] = useState<EmotionSnapshot[]>([]);\n  \n  // Transcript tracking\n  const [transcriptSegments, setTranscriptSegments] = useState<TranscriptSegment[]>([]);\n  const [currentTranscript, setCurrentTranscript] = useState('');\n  \n  // Audio and animation\n  const [audioData, setAudioData] = useState<Uint8Array>(new Uint8Array(128));\n  const [animationName, setAnimationName] = useState('idle');\n  const [emotionalBlendshapes, setEmotionalBlendshapes] = useState<Record<string, number>>({});\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  \n  // Timer\n  const [timeRemaining, setTimeRemaining] = useState(SPEED_DATE_DURATION);\n  const [dateStartTime, setDateStartTime] = useState<number>(0);\n  \n  // Services\n  const voiceServiceRef = useRef<HybridVoiceService | null>(null);\n  const expressionServiceRef = useRef<HumeExpressionService | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const emotionSnapshotRef = useRef<NodeJS.Timeout | null>(null);\n  \n  // Audio context and analyser\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const audioPlayerRef = useRef<HTMLAudioElement>(new Audio());\n  const audioSourceCreatedRef = useRef<boolean>(false);\n  \n  const [showUserAvatar, setShowUserAvatar] = useState(false);\n  const [cameraLocked, setCameraLocked] = useState(false);\n  const controlsRef = useRef<any>(null);\n\n  // Delay showing user avatar to avoid WebGL conflicts\n  useEffect(() => {\n    if (isConnected && dateStarted) {\n      // Longer delay to ensure main canvas is fully initialized\n      const timer = setTimeout(() => setShowUserAvatar(true), 2000);\n      return () => clearTimeout(timer);\n    }\n  }, [isConnected, dateStarted]);\n\n  // Initialize services and audio context\n  useEffect(() => {\n    console.log('[DougieSpeedDate] Initializing services...');\n    \n    // Create our audio player first and mark it\n    const audioPlayer = new Audio();\n    audioPlayer.dataset.dougieSpeedDate = 'true';\n    audioPlayerRef.current = audioPlayer;\n    \n    // Mute any other audio elements that get created\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        mutation.addedNodes.forEach((node) => {\n          if (node instanceof HTMLAudioElement && !node.dataset.dougieSpeedDate) {\n            console.log('[DougieSpeedDate] Muting external audio element');\n            node.muted = true;\n            node.volume = 0;\n          }\n        });\n      });\n    });\n    \n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n    \n    // Initialize AudioContext\n    const AudioContextClass = window.AudioContext || (window as any).webkitAudioContext;\n    audioContextRef.current = new AudioContextClass({ sampleRate: 48000 });\n    console.log('[DougieSpeedDate] AudioContext initialized');\n    \n    // Initialize voice service\n    if (!voiceServiceRef.current) {\n      voiceServiceRef.current = new HybridVoiceService();\n      voiceServiceRef.current.setUseHumeForConversation(true);\n      console.log('[DougieSpeedDate] HybridVoiceService initialized');\n    }\n    \n    // Initialize expression service\n    expressionServiceRef.current = new HumeExpressionService();\n    \n    return () => {\n      observer.disconnect();\n      cleanup();\n    };\n  }, []);\n\n  // Set up voice service callbacks and connect\n  useEffect(() => {\n    if (!voiceServiceRef.current || isConnected) return;\n    \n    const setupVoiceService = async () => {\n      try {\n        console.log('[DougieSpeedDate] Setting up voice service callbacks...');\n        \n        // Set up callbacks\n        voiceServiceRef.current!.onAudio((audioBlob: Blob) => {\n          console.log('[DougieSpeedDate] Audio received, size:', audioBlob.size);\n          if (audioBlob.size > 0) {\n            setIsSpeaking(true);\n            setAnimationName('talking');\n            playAudio(audioBlob);\n          }\n        });\n        \n        voiceServiceRef.current!.onMessage((message: any) => {\n          console.log('[DougieSpeedDate] Message received:', message);\n          const messageText = typeof message === 'string' ? message : \n                            (message?.message?.content || message?.content || \n                             JSON.stringify(message));\n          \n          if (messageText && messageText.trim()) {\n            setCurrentTranscript(messageText);\n          }\n        });\n        \n        voiceServiceRef.current!.onEmotion((emotions: Array<{name: string, score: number}>) => {\n          console.log('[DougieSpeedDate] Emotions received:', emotions);\n          setDougieEmotions(emotions);\n        });\n        \n        voiceServiceRef.current!.onUserMessage((message: string) => {\n          console.log('[DougieSpeedDate] User message:', message);\n        });\n        \n        voiceServiceRef.current!.onError((error: Error) => {\n          console.error('[DougieSpeedDate] Voice service error:', error);\n        });\n        \n        // Connect to the service\n        await voiceServiceRef.current!.connect(DOUGIE_CONFIG.humeConfigId);\n        setIsConnected(true);\n        console.log('[DougieSpeedDate] Voice service connected successfully');\n        \n      } catch (error) {\n        console.error('[DougieSpeedDate] Failed to connect voice service:', error);\n      }\n    };\n    \n    setupVoiceService();\n  }, []);\n\n  // Cleanup function\n  const cleanup = () => {\n    if (timerRef.current) clearInterval(timerRef.current);\n    if (emotionSnapshotRef.current) clearInterval(emotionSnapshotRef.current);\n    if (voiceServiceRef.current) voiceServiceRef.current.disconnect();\n    if (expressionServiceRef.current) expressionServiceRef.current.stopTracking();\n    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n      audioContextRef.current.close();\n    }\n  };\n\n  // Start the speed date\n  const startDate = async () => {\n    try {\n      // Ensure AudioContext is resumed (user interaction required)\n      if (audioContextRef.current && audioContextRef.current.state === 'suspended') {\n        await audioContextRef.current.resume();\n        console.log('[DougieSpeedDate] AudioContext resumed');\n      }\n      \n      setDateStarted(true);\n      setDateStartTime(Date.now());\n      \n      // Start facial expression tracking\n      if (videoRef.current) {\n        await expressionServiceRef.current!.startTracking(videoRef.current);\n        expressionServiceRef.current!.setOnEmotionCallback((emotions: any[]) => {\n          const formattedEmotions = emotions.map(e => ({ \n            name: 'emotion' in e ? (e as any).emotion : e.name, \n            score: e.score \n          }));\n          setUserFacialEmotions(formattedEmotions);\n        });\n      }\n\n      // Start the date\n      setTimeout(() => {\n        console.log('[DougieSpeedDate] Sending initial greeting to trigger conversation');\n        voiceServiceRef.current!.sendMessage(\"Hi!\");\n        \n        // Start timer\n        timerRef.current = setInterval(() => {\n          setTimeRemaining(prev => {\n            if (prev <= 1) {\n              endDate();\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n\n        // Start emotion snapshot collection\n        emotionSnapshotRef.current = setInterval(() => {\n          const snapshot: EmotionSnapshot = {\n            timestamp: (Date.now() - dateStartTime) / 1000,\n            participant1Emotions: [...userFacialEmotions],\n            participant2Emotions: [...dougieEmotions]\n          };\n          setEmotionHistory(prev => [...prev, snapshot]);\n        }, 5000); // Every 5 seconds\n\n      }, 1500);\n\n    } catch (error) {\n      console.error('Failed to start date:', error);\n      alert('Failed to connect. Please check your connection and try again.');\n    }\n  };\n\n  // Play audio with lip sync analysis\n  const playAudio = async (audioBlob: Blob) => {\n    // Add unique ID to track this audio playback\n    const audioId = Date.now() + Math.random();\n    console.log(`[DougieSpeedDate] Starting audio playback ${audioId}, blob size:`, audioBlob.size);\n    \n    // Create URL for the audio blob\n    const audioUrl = URL.createObjectURL(audioBlob);\n    audioPlayerRef.current.src = audioUrl;\n    \n    // Setup audio analyzer for lip sync BEFORE playing (like coaches do)\n    if (!audioSourceCreatedRef.current) {\n      try {\n        if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\n          audioContextRef.current = new AudioContext();\n          console.log('[DougieSpeedDate] Created new AudioContext');\n        }\n        \n        if (audioContextRef.current.state === 'suspended') {\n          audioContextRef.current.resume();\n          console.log('[DougieSpeedDate] Resumed AudioContext');\n        }\n        \n        const analyser = audioContextRef.current.createAnalyser();\n        analyser.fftSize = 256;\n        const source = audioContextRef.current.createMediaElementSource(audioPlayerRef.current);\n        source.connect(analyser);\n        analyser.connect(audioContextRef.current.destination);\n        \n        analyserRef.current = analyser;\n        audioSourceCreatedRef.current = true;\n        console.log('[DougieSpeedDate] Audio analyzer setup complete');\n      } catch (error) {\n        console.error('[DougieSpeedDate] Error setting up audio analyzer:', error);\n      }\n    }\n    \n    // Use a local flag for the animation loop\n    let isPlaying = true;\n    \n    // Play the audio\n    audioPlayerRef.current.play()\n      .then(() => {\n        console.log('[DougieSpeedDate] Audio playing successfully');\n        \n        // Start lip sync animation\n        const updateLipSync = () => {\n          if (!isPlaying || !analyserRef.current) return;\n          \n          const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n          analyserRef.current.getByteFrequencyData(dataArray);\n          setAudioData(dataArray);\n          \n          requestAnimationFrame(updateLipSync);\n        };\n        updateLipSync();\n      })\n      .catch(e => {\n        console.error('[DougieSpeedDate] Error playing audio:', e);\n        isPlaying = false;\n      });\n    \n    // Handle audio end\n    audioPlayerRef.current.onended = () => {\n      console.log('[DougieSpeedDate] Audio playback ended');\n      URL.revokeObjectURL(audioUrl);\n      isPlaying = false;\n      // Reset audio data and animation\n      setAudioData(new Uint8Array(128));\n      setIsSpeaking(false);\n      setAnimationName('idle');\n    };\n  };\n\n  // End the date\n  const endDate = () => {\n    if (timerRef.current) clearInterval(timerRef.current);\n    if (emotionSnapshotRef.current) clearInterval(emotionSnapshotRef.current);\n    \n    setDateEnded(true);\n    setAnimationName('idle');\n    \n    // Send closing message\n    if (voiceServiceRef.current && isConnected) {\n      voiceServiceRef.current.sendMessage(\n        \"Wow, time really flies when you're having fun! This has been wonderful. I'd love to see you again!\"\n      );\n    }\n    \n    // Show report after a delay\n    setTimeout(() => {\n      setShowReport(true);\n    }, 3000);\n  };\n\n  // Format time display\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${String(secs).padStart(2, '0')}`;\n  };\n\n  // Map prosody emotions to blendshapes\n  useEffect(() => {\n    const blendshapes: Record<string, number> = {};\n    dougieEmotions.forEach(emotion => {\n      const value = emotion.score / 100;\n      switch (emotion.name.toLowerCase()) {\n        case 'joy':\n        case 'amusement':\n          blendshapes.happy = Math.max(blendshapes.happy || 0, value);\n          break;\n        case 'interest':\n        case 'excitement':\n          blendshapes.surprised = Math.max(blendshapes.surprised || 0, value * 0.5);\n          break;\n        case 'confusion':\n          blendshapes.confused = value;\n          break;\n        case 'sadness':\n          blendshapes.sad = value;\n          break;\n      }\n    });\n    setEmotionalBlendshapes(blendshapes);\n  }, [dougieEmotions]);\n\n  // Convert emotions to tracking data format for UserAvatarPiP\n  const userTrackingData = useMemo(() => {\n    if (!userFacialEmotions || userFacialEmotions.length === 0) return null;\n    \n    // Convert emotions array to facial expressions object\n    const facialExpressions: any = {};\n    userFacialEmotions.forEach(emotion => {\n      facialExpressions[emotion.name] = emotion.score / 100; // Convert to 0-1 range\n    });\n    \n    return {\n      facialExpressions,\n      posture: null,\n      hands: null,\n      headRotation: null,\n      landmarks: null\n    };\n  }, [userFacialEmotions]);\n\n  // Render report view\n  if (showReport && !showTranscript) {\n    return (\n      <div className=\"dougie-speed-date report-view\">\n        <ChemistryReport\n          emotionHistory={emotionHistory}\n          participant1Name=\"You\"\n          participant2Name={DOUGIE_CONFIG.name}\n          callDuration={300 - timeRemaining}\n          transcriptSegments={transcriptSegments}\n          onClose={() => setShowReport(false)}\n        />\n        <button \n          className=\"view-transcript-btn\"\n          onClick={() => setShowTranscript(true)}\n        >\n          View Full Transcript\n        </button>\n      </div>\n    );\n  }\n\n  // Render transcript view\n  if (showTranscript) {\n    return (\n      <div className=\"dougie-speed-date transcript-view\">\n        <div className=\"transcript-header\">\n          <h2>Speed Date Transcript with {DOUGIE_CONFIG.name}</h2>\n          <button onClick={() => setShowTranscript(false)}>Back to Report</button>\n        </div>\n        <TranscriptTimeline\n          segments={transcriptSegments}\n          callDuration={SPEED_DATE_DURATION - timeRemaining}\n        />\n      </div>\n    );\n  }\n\n  // Main date interface\n  return (\n    <div className=\"dougie-speed-date\">\n      {/* Hidden video for face tracking */}\n      <video ref={videoRef} style={{ display: 'none' }} autoPlay playsInline />\n      \n      {/* Pre-date screen */}\n      {!dateStarted && !showReport && (\n        <div className=\"pre-date-screen\">\n          <h1>Speed Date with {DOUGIE_CONFIG.name}</h1>\n          <p>{DOUGIE_CONFIG.description}</p>\n          \n          <div className=\"date-rules\">\n            <h3>Speed Date Rules</h3>\n            <ul>\n              <li>Be yourself and have fun!</li>\n              <li>Ask questions and share stories</li>\n              <li>Keep it light and engaging</li>\n              <li>You have 5 minutes to make a connection</li>\n            </ul>\n          </div>\n          \n          <button className=\"start-button\" onClick={startDate}>\n            Start Your Date\n          </button>\n        </div>\n      )}\n      \n      {/* Date screen */}\n      {dateStarted && !showReport && (\n        <>\n          {/* Background Image Layer */}\n          <div \n            className=\"absolute inset-0\"\n            style={{\n              backgroundImage: 'url(/Venues/GreatBistro.png)',\n              backgroundSize: 'cover',\n              backgroundPosition: 'center',\n              backgroundRepeat: 'no-repeat',\n              zIndex: 0\n            }}\n          />\n          \n          {/* 3D Scene Layer - Main Avatar */}\n          <div className=\"absolute inset-0\" style={{ zIndex: 1 }}>\n            <Canvas\n              camera={{ position: [0, 0, 5], fov: 50 }}\n              gl={{ \n                antialias: true,\n                alpha: true,\n                preserveDrawingBuffer: true\n              }}\n            >\n              <ambientLight intensity={0.5} />\n              <directionalLight position={[5, 5, 5]} intensity={1} />\n              \n              <React.Suspense fallback={null}>\n                <PresenceAvatarWithGender\n                  avatarUrl={DOUGIE_CONFIG.avatarUrl}\n                  position={[0, -0.2, 0]} // Raise avatar slightly\n                  scale={1.0}\n                  trackingData={undefined}\n                  animationName={animationName}\n                  emotionalBlendshapes={emotionalBlendshapes}\n                  audioData={audioData}\n                  participantId=\"dougie\"\n                  gender=\"male\"\n                />\n              </React.Suspense>\n              <OrbitControls \n                ref={controlsRef}\n                enablePan={!cameraLocked}\n                enableZoom={!cameraLocked}\n                enableRotate={!cameraLocked}\n                target={[0, 1.5, 0]} // Focus on face level\n                minDistance={1.5}\n                maxDistance={5}\n                minPolarAngle={Math.PI / 4}\n                maxPolarAngle={Math.PI / 2}\n                autoRotate={false}\n                autoRotateSpeed={0}\n                enableDamping={true}\n                dampingFactor={0.05}\n              />\n            </Canvas>\n          </div>\n          \n          {/* UI Overlay Layer */}\n          <div className=\"absolute inset-0 pointer-events-none\" style={{ zIndex: 10000 }}>\n            {/* End Date Button - MAXIMUM VISIBILITY */}\n            <div \n              className=\"absolute top-4 left-4\"\n              style={{ \n                zIndex: 999999,\n                position: 'fixed',\n                pointerEvents: 'auto'\n              }}\n            >\n              <button\n                onClick={endDate}\n                className=\"bg-red-600 hover:bg-red-700 text-white text-2xl font-bold px-8 py-4 rounded-lg shadow-2xl border-4 border-white\"\n                style={{\n                  cursor: 'pointer',\n                  zIndex: 999999\n                }}\n              >\n                END DATE\n              </button>\n              <div className=\"mt-4 bg-black text-white px-6 py-3 rounded-lg text-2xl font-bold\">\n                {Math.floor(timeRemaining / 60)}:{(timeRemaining % 60).toString().padStart(2, '0')}\n              </div>\n            </div>\n            \n            {/* Camera Lock Button */}\n            <div className=\"absolute bottom-4 right-4 pointer-events-auto\">\n              <button\n                onClick={() => setCameraLocked(!cameraLocked)}\n                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-all ${\n                  cameraLocked \n                    ? 'bg-green-600 hover:bg-green-700 text-white' \n                    : 'bg-gray-600 hover:bg-gray-700 text-white'\n                }`}\n                title={cameraLocked ? 'Unlock camera' : 'Lock camera position'}\n              >\n                {cameraLocked ? (\n                  <>\n                    <FaLock className=\"w-5 h-5\" />\n                    Camera Locked\n                  </>\n                ) : (\n                  <>\n                    <FaLockOpen className=\"w-5 h-5\" />\n                    Lock Camera\n                  </>\n                )}\n              </button>\n            </div>\n            \n            {/* Camera Instructions */}\n            {!cameraLocked && (\n              <div className=\"absolute top-4 right-4 bg-black/70 text-white p-3 rounded-lg max-w-xs pointer-events-auto\">\n                <p className=\"text-sm\">\n                  <strong>Camera Controls:</strong><br/>\n                  • Left click + drag to rotate<br/>\n                  • Right click + drag to pan<br/>\n                  • Scroll to zoom<br/>\n                  Click \"Lock Camera\" when ready\n                </p>\n              </div>\n            )}\n          </div>\n          \n          {/* Emotion displays */}\n          <div className=\"emotion-displays\">\n            <div className=\"user-emotions\">\n              <h3>Your Emotions</h3>\n              <RealTimeEmotionSliders\n                emotions={userFacialEmotions.map(e => ({ emotion: e.name, score: e.score }))}\n                participantName=\"You\"\n              />\n            </div>\n            <div className=\"dougie-emotions\">\n              <h3>{DOUGIE_CONFIG.name}'s Emotions</h3>\n              <RealTimeEmotionSliders\n                emotions={dougieEmotions.map(e => ({ emotion: e.name, score: e.score }))}\n                participantName={DOUGIE_CONFIG.name}\n              />\n            </div>\n          </div>\n\n          {/* Current transcript */}\n          {currentTranscript && (\n            <div className=\"current-transcript\">\n              {currentTranscript}\n            </div>\n          )}\n        </>\n      )}\n      \n      {/* Chemistry Report */}\n      {showReport && (\n        <ChemistryReport\n          emotionHistory={emotionHistory}\n          participant1Name=\"You\"\n          participant2Name={DOUGIE_CONFIG.name}\n          callDuration={300 - timeRemaining}\n          transcriptSegments={transcriptSegments}\n          onClose={() => {\n            // Reset everything\n            setShowReport(false);\n            setDateStarted(false);\n            setTimeRemaining(300);\n            setTranscriptSegments([]);\n            setCurrentTranscript('');\n            setIsConnected(false);\n            setIsSpeaking(false);\n            setAnimationName('idle');\n            setUserFacialEmotions([]);\n            setDougieEmotions([]);\n            setEmotionalBlendshapes({});\n            setAudioData(new Uint8Array(128));\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default DougieSpeedDate;\n"],"names":["HUME_TO_RPM_MAPPING","target","amplify","EMOTION_TO_BLENDSHAPE","joy","sadness","anger","fear","surprise","disgust","contempt","HEAD_ROTATION_LIMITS","min","max","NECK_ROTATION_FACTOR","neck","head","clampRotation","value","limits","Math","lerp","current","factor","tempEuler","THREE","PresenceAvatarWithGender","React","_ref","avatarUrl","trackingData","position","scale","participantId","animationName","emotionalBlendshapes","audioData","gender","detectedGender","useMemo","url","toLowerCase","includes","isCoachAvatar","undefined","avatarType","instanceIdRef","useRef","random","toString","substr","useEffect","console","log","concat","hasTrackingData","timestamp","Date","now","scene","useGLTF","clone","SkeletonUtils","nodes","useGraph","genderPrefix","idleAnimationUrl","animations","idleAnimations","talkingAnimationUrls","talking1","talking2","talking3","talking4","talking5","talking6","talkingAnimations","forEach","preload","allAnimations","combined","length","actions","mixer","useAnimations","lastTalkingAnimationRef","lastAnimationNameRef","animationChangeTimeoutRef","Object","keys","clearTimeout","setTimeout","values","action","fadeOut","entries","filter","_ref2","name","selectedAnimation","availableAnimations","_ref3","floor","animName","reset","setLoop","Infinity","fadeIn","timeScale","play","idleAnimation","find","_ref4","meshesWithMorphTargets","headBone","neckBone","traverse","child","morphTargetDictionary","push","smoothedRotation","pitch","yaw","roll","audioAnalyser","volume","frequency","morphTargetsDebuggedRef","frameCount","useFrame","sum","i","hasAudioData","dataLength","map","mesh","morphTargets","morphTargetInfluences","_ref5","emotion","blendshapes","blendshape","mapping","morphIndex","amplifiedValue","MathUtils","clamp","audioDataLength","possibleJawTargets","jawTargetFound","targetValue","currentValue","meshName","secondaryIndex","secondaryValue","warn","mouthSmileLeftIndex","mouthSmileRightIndex","smileValue","rotation","set","quaternion","setFromEuler","expressions","_ref6","expression","positionVector","Array","isArray","_jsx","children","object","displayName","DOUGIE_CONFIG","DougieSpeedDate","isConnected","setIsConnected","useState","dateStarted","setDateStarted","dateEnded","setDateEnded","showReport","setShowReport","showTranscript","setShowTranscript","userFacialEmotions","setUserFacialEmotions","userProsodyEmotions","setUserProsodyEmotions","dougieEmotions","setDougieEmotions","emotionHistory","setEmotionHistory","transcriptSegments","setTranscriptSegments","currentTranscript","setCurrentTranscript","setAudioData","Uint8Array","setAnimationName","setEmotionalBlendshapes","isSpeaking","setIsSpeaking","timeRemaining","setTimeRemaining","dateStartTime","setDateStartTime","voiceServiceRef","expressionServiceRef","videoRef","timerRef","emotionSnapshotRef","audioContextRef","analyserRef","audioPlayerRef","Audio","audioSourceCreatedRef","showUserAvatar","setShowUserAvatar","cameraLocked","setCameraLocked","controlsRef","timer","audioPlayer","dataset","dougieSpeedDate","observer","MutationObserver","mutations","mutation","addedNodes","node","HTMLAudioElement","muted","observe","document","body","childList","subtree","AudioContextClass","window","AudioContext","webkitAudioContext","sampleRate","HybridVoiceService","setUseHumeForConversation","HumeExpressionService","disconnect","cleanup","async","onAudio","audioBlob","size","playAudio","onMessage","message","_message$message","messageText","content","JSON","stringify","trim","onEmotion","emotions","onUserMessage","onError","error","connect","setupVoiceService","clearInterval","stopTracking","state","close","audioId","audioUrl","URL","createObjectURL","src","resume","analyser","createAnalyser","fftSize","createMediaElementSource","destination","isPlaying","then","updateLipSync","dataArray","frequencyBinCount","getByteFrequencyData","requestAnimationFrame","catch","e","onended","revokeObjectURL","endDate","sendMessage","score","happy","surprised","confused","sad","facialExpressions","posture","hands","headRotation","landmarks","_jsxs","className","ChemistryReport","participant1Name","participant2Name","callDuration","onClose","onClick","TranscriptTimeline","segments","ref","style","display","autoPlay","playsInline","startTracking","setOnEmotionCallback","formattedEmotions","setInterval","prev","snapshot","participant1Emotions","participant2Emotions","alert","_Fragment","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","zIndex","Canvas","camera","fov","gl","antialias","alpha","preserveDrawingBuffer","intensity","fallback","OrbitControls","enablePan","enableZoom","enableRotate","minDistance","maxDistance","minPolarAngle","PI","maxPolarAngle","autoRotate","autoRotateSpeed","enableDamping","dampingFactor","pointerEvents","cursor","padStart","title","FaLock","FaLockOpen","RealTimeEmotionSliders","participantName"],"sourceRoot":""}