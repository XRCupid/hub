{"version":3,"file":"static/js/1740.a4dbe8a9.chunk.js","mappings":"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","sources":["components/SimpleHumeEVI.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport SimulationAvatar3D from './TestAvatar';\n\n// Default blendshape values for the avatar\nconst DEFAULT_BLENDSHAPES = {\n  // Mouth\n  mouthClose: 0.8,\n  mouthFunnel: 0,\n  mouthPucker: 0,\n  mouthLeft: 0,\n  mouthRight: 0,\n  mouthSmileLeft: 0.2,\n  mouthSmileRight: 0.2,\n  jawOpen: 0.1,\n  // Add other blendshapes as needed\n};\n\n// Map Hume EVI phonemes to blendshape values\nconst PHONEME_TO_BLENDSHAPE: Record<string, Partial<typeof DEFAULT_BLENDSHAPES>> = {\n  // Vowels\n  'AA': { jawOpen: 0.7, mouthClose: 0.3 }, // father\n  'AE': { jawOpen: 0.6, mouthClose: 0.4 }, // cat\n  'AH': { jawOpen: 0.5, mouthClose: 0.5 }, // cut\n  'AO': { jawOpen: 0.7, mouthClose: 0.3 }, // dog\n  'AW': { jawOpen: 0.6, mouthFunnel: 0.8 }, // cow\n  'AY': { jawOpen: 0.5, mouthSmileLeft: 0.6, mouthSmileRight: 0.6 }, // say\n  'EH': { jawOpen: 0.4, mouthLeft: 0.5, mouthRight: 0.5 }, // bed (using mouthLeft/Right instead of stretch)\n  'ER': { mouthFunnel: 0.7, jawOpen: 0.3 }, // bird\n  'EY': { jawOpen: 0.4, mouthSmileLeft: 0.8, mouthSmileRight: 0.8 }, // hey\n  'IH': { jawOpen: 0.3, mouthLeft: 0.4, mouthRight: 0.4 }, // it (using mouthLeft/Right instead of stretch)\n  'IY': { jawOpen: 0.2, mouthSmileLeft: 0.9, mouthSmileRight: 0.9 }, // happy\n  'OW': { jawOpen: 0.6, mouthPucker: 0.7 }, // show\n  'OY': { jawOpen: 0.5, mouthFunnel: 0.6 }, // boy\n  'UH': { jawOpen: 0.4, mouthFunnel: 0.3 }, // book\n  'UW': { jawOpen: 0.3, mouthPucker: 0.9 }, // you\n  \n  // Consonants - simplified to use only valid blendshape properties\n  'B': { mouthClose: 1.0, jawOpen: 0 },\n  'CH': { mouthClose: 0.8, mouthPucker: 0.6 },\n  'D': { mouthClose: 0.9, jawOpen: 0.1 },\n  'DH': { mouthClose: 0.8, jawOpen: 0.3 }, // Removed tongueOut\n  'F': { mouthClose: 0.7 }, // Removed mouthLowerDownLeft/Right\n  'G': { jawOpen: 0.5, mouthClose: 0.5 },\n  'HH': { jawOpen: 0.4, mouthClose: 0.6 },\n  'JH': { mouthClose: 0.9, mouthPucker: 0.5 },\n  'K': { jawOpen: 0.5, mouthClose: 0.5 },\n  'L': { jawOpen: 0.3 }, // Removed tongueOut\n  'M': { mouthClose: 1.0, jawOpen: 0 },\n  'N': { mouthClose: 0.9, jawOpen: 0.1 },\n  'NG': { mouthClose: 0.8, jawOpen: 0.2 },\n  'P': { mouthClose: 1.0, jawOpen: 0 },\n  'R': { mouthClose: 0.7, mouthLeft: 0.6, mouthRight: 0.6 }, // Using mouthLeft/Right instead of stretch\n  'S': { mouthClose: 0.8, mouthLeft: 0.7, mouthRight: 0.7 }, // Using mouthLeft/Right instead of stretch\n  'SH': { mouthClose: 0.7, mouthPucker: 0.8 },\n  'T': { mouthClose: 0.9, jawOpen: 0.1 },\n  'TH': { mouthClose: 0.8, jawOpen: 0.2 }, // Removed tongueOut\n  'V': { mouthClose: 0.7 }, // Removed mouthLowerDownLeft/Right\n  'W': { jawOpen: 0.4, mouthPucker: 0.9 },\n  'Y': { jawOpen: 0.3, mouthSmileLeft: 0.8, mouthSmileRight: 0.8 },\n  'Z': { mouthClose: 0.7, mouthLeft: 0.8, mouthRight: 0.8 }, // Using mouthLeft/Right instead of stretch\n  'ZH': { mouthClose: 0.6, mouthPucker: 0.7 },\n};\n\nconst SimpleHumeEVI = () => {\n  // Define the BlendShapeMap type based on the default shapes\n  type BlendShapeMap = typeof DEFAULT_BLENDSHAPES;\n  \n  const [blendShapes, setBlendShapes] = useState<BlendShapeMap>(DEFAULT_BLENDSHAPES);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [currentPhoneme, setCurrentPhoneme] = useState<string | null>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  \n  // Replace with your RPM avatar URL\n  const avatarUrl = 'https://models.readyplayer.me/681d6cd903879b2f11528470.glb';\n  \n  // Connect to Hume EVI WebSocket\n  useEffect(() => {\n    const connectWebSocket = async () => {\n      try {\n        // Replace with your Hume API key\n        const apiKey = 'YOUR_HUME_API_KEY';\n        const wsUrl = `wss://api.hume.ai/v0/evi/chat?apiKey=${apiKey}`;\n        \n        wsRef.current = new WebSocket(wsUrl);\n        \n        wsRef.current.onopen = () => {\n          console.log('Connected to Hume EVI');\n          setIsConnected(true);\n          \n          // Send initial configuration\n          const config = {\n            type: 'config',\n            data: {\n              models: {\n                prosody: {}\n              },\n              stream_window_ms: 50, // Low latency for real-time\n              identify_speakers: false,\n              identify_emotions: true,\n              identify_phonemes: true\n            }\n          };\n          \n          wsRef.current?.send(JSON.stringify(config));\n        };\n        \n        wsRef.current.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            \n            // Handle phoneme data for lip-sync\n            if (data.type === 'phonemes' && data.data) {\n              const phonemes = data.data.phonemes;\n              if (phonemes && phonemes.length > 0) {\n                // Get the most recent phoneme\n                const current = phonemes[phonemes.length - 1];\n                setCurrentPhoneme(current.phoneme);\n                \n                // Update blendshapes based on phoneme\n                const phonemeShape = PHONEME_TO_BLENDSHAPE[current.phoneme] || {};\n                setBlendShapes(prev => ({\n                  ...DEFAULT_BLENDSHAPES, // Reset to defaults\n                  ...phonemeShape, // Apply current phoneme shape\n                }));\n              }\n            }\n            \n            // Handle speaking state\n            if (data.type === 'speaking') {\n              setIsSpeaking(data.data.is_speaking);\n              if (!data.data.is_speaking) {\n                // Reset to neutral when not speaking\n                setBlendShapes(DEFAULT_BLENDSHAPES);\n                setCurrentPhoneme(null);\n              }\n            }\n            \n          } catch (error) {\n            console.error('Error processing WebSocket message:', error);\n          }\n        };\n        \n        wsRef.current.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          setIsConnected(false);\n        };\n        \n        wsRef.current.onclose = () => {\n          console.log('WebSocket connection closed');\n          setIsConnected(false);\n        };\n        \n      } catch (error) {\n        console.error('Error setting up WebSocket:', error);\n      }\n    };\n    \n    connectWebSocket();\n    \n    // Clean up\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n  \n  // Simple animation loop for lip-sync (fallback if WebSocket fails)\n  useEffect(() => {\n    if (isSpeaking && !currentPhoneme) {\n      const phonemes = Object.keys(PHONEME_TO_BLENDSHAPE);\n      let index = 0;\n      \n      const animate = () => {\n        if (!isSpeaking) return;\n        \n        const phoneme = phonemes[index % phonemes.length];\n        setCurrentPhoneme(phoneme);\n        \n        const phonemeShape = PHONEME_TO_BLENDSHAPE[phoneme] || {};\n        setBlendShapes(prev => ({\n          ...DEFAULT_BLENDSHAPES,\n          ...phonemeShape,\n        }));\n        \n        index++;\n        setTimeout(animate, 100); // Adjust speed as needed\n      };\n      \n      animate();\n    }\n  }, [isSpeaking, currentPhoneme]);\n  \n  return (\n    <div style={{ width: '100%', height: '100vh', display: 'flex', flexDirection: 'column' }}>\n      <div style={{ padding: '1rem', background: '#f0f0f0' }}>\n        <h2>Hume EVI + Ready Player Me</h2>\n        <div>Status: {isConnected ? 'Connected to Hume EVI' : 'Disconnected'}</div>\n        <div>Speaking: {isSpeaking ? 'Yes' : 'No'}</div>\n        <div>Current Phoneme: {currentPhoneme || 'None'}</div>\n      </div>\n      \n      <div style={{ flex: 1, position: 'relative' }}>\n        <Canvas camera={{ position: [0, 1.6, 2], fov: 45 }}>\n          <ambientLight intensity={0.5} />\n          <pointLight position={[10, 10, 10]} />\n          <OrbitControls \n            enableZoom={true}\n            enablePan={true}\n            minPolarAngle={Math.PI / 4}\n            maxPolarAngle={Math.PI / 2}\n          />\n          <SimulationAvatar3D \n            avatarUrl=\"/bro.glb\" // Added default avatar URL\n            position={[0, -1.6, 0]}\n            scale={[1, 1, 1]}\n          />\n        </Canvas>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleHumeEVI;\n"],"names":["DEFAULT_BLENDSHAPES","mouthClose","mouthFunnel","mouthPucker","mouthLeft","mouthRight","mouthSmileLeft","mouthSmileRight","jawOpen","PHONEME_TO_BLENDSHAPE","SimpleHumeEVI","blendShapes","setBlendShapes","useState","isConnected","setIsConnected","isSpeaking","setIsSpeaking","currentPhoneme","setCurrentPhoneme","wsRef","useRef","useEffect","async","wsUrl","concat","current","WebSocket","onopen","_wsRef$current","console","log","send","JSON","stringify","type","data","models","prosody","stream_window_ms","identify_speakers","identify_emotions","identify_phonemes","onmessage","event","parse","phonemes","length","phoneme","phonemeShape","prev","_objectSpread","is_speaking","error","onerror","onclose","connectWebSocket","close","Object","keys","index","animate","setTimeout","_jsxs","style","width","height","display","flexDirection","children","padding","background","_jsx","flex","position","Canvas","camera","fov","intensity","OrbitControls","enableZoom","enablePan","minPolarAngle","Math","PI","maxPolarAngle","SimulationAvatar3D","avatarUrl","scale"],"sourceRoot":""}