import React, { useState, useEffect, useRef, useCallback } from 'react';
// import { Avatar } from '@readyplayerme/visage';
import { useToast } from '@/components/ui/use-toast';

// Custom hooks
import { HumeService } from '@/services/humeService';
import { useVoice } from '@/hooks/useVoice';
import useAvatarBlendShapes from '@/hooks/useAvatarBlendShapes';
import { BlendshapeKey, EMOTION_TO_BLENDSHAPE, PHONEME_TO_BLENDSHAPE } from '@/utils/blendshapes';

interface SimulationViewProps {
  onClose?: () => void;
}

const SimulationView: React.FC<SimulationViewProps> = ({ onClose }) => {
  const { toast } = useToast();
  const [isConnected, setIsConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [message, setMessage] = useState('');
  const [conversation, setConversation] = useState<Array<{ role: 'user' | 'assistant'; content: string }>>([]);
  
  // Avatar state
  const [avatarUrl, setAvatarUrl] = useState('https://models.readyplayer.me/681d6cd903879b2f11528470.glb');
  
  // Initialize Hume service
  const humeServiceRef = useRef<HumeService | null>(null);
  
  // Initialize voice and blendshape hooks
  const {
    isListening,
    isSpeaking,
    transcript,
    currentPhoneme,
    startListening,
    stopListening,
    speak,
    stopSpeaking,
  } = useVoice(handlePhonemeChange);
  
  const {
    blendShapes,
    applyPhoneme,
    resetBlendShapes,
  } = useAvatarBlendShapes(null);

  // Handle phoneme changes from voice hook
  function handlePhonemeChange(phoneme: string) {
    applyPhoneme(phoneme);
  }

  // Initialize Hume service
  useEffect(() => {
    const apiKey = process.env.REACT_APP_HUME_API_KEY;
    if (!apiKey) {
      setError('Hume API key is not configured');
      setIsLoading(false);
      return;
    }

    humeServiceRef.current = new HumeService(
      apiKey,
      handleHumeMessage,
      handleHumeError,
      handleHumeClose
    );

    return () => {
      if (humeServiceRef.current) {
        humeServiceRef.current.close();
      }
    };
  }, []);

  // Handle incoming messages from Hume
  const handleHumeMessage = useCallback((message: any) => {
    if (!message) return;

    switch (message.type) {
      case 'emotion_data':
        // Emotion data is handled by the useAvatarBlendShapes hook
        // when the emotionData prop changes
        break;
        
      case 'chat_response':
        // Handle chat response
        if (message.data?.text) {
          setConversation(prev => [...prev, { role: 'assistant', content: message.data.text }]);
          // Speak the response
          speak(message.data.text);
        }
        break;
        
      case 'error':
        setError(message.error || 'An unknown error occurred');
        break;
    }
  }, [speak]);

  const handleHumeError = useCallback((error: any) => {
    console.error('Hume WebSocket error:', error);
    setError('Connection to Hume AI failed. Please try again.');
    setIsConnected(false);
  }, []);

  const handleHumeClose = useCallback((event: CloseEvent) => {
    console.log('Hume WebSocket closed:', event);
    setIsConnected(false);
    
    if (!event.wasClean) {
      setError('Connection to Hume AI was lost. Reconnecting...');
    }
  }, []);

  // Send message to Hume
  const sendMessage = useCallback(async () => {
    if (!message.trim() || !humeServiceRef.current) return;
    
    try {
      // Add user message to conversation
      const userMessage = { role: 'user' as const, content: message };
      setConversation(prev => [...prev, userMessage]);
      setMessage('');
      
      // Send to Hume
      if (humeServiceRef.current) {
        // @ts-ignore - We know this method exists on the HumeService instance
        await humeServiceRef.current.sendMessage(message);
      }
      
    } catch (err) {
      console.error('Error sending message:', err);
      // Use the error method from toast
      toast.error('Failed to send message. Please try again.');
    }
  }, [message, toast]);

  // Toggle listening
  const toggleListening = useCallback(() => {
    if (isListening) {
      stopListening();
    } else {
      startListening();
    }
  }, [isListening, startListening, stopListening]);

  // Handle key press for message input
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 text-red-500 bg-red-50 rounded-lg">
        <p>{error}</p>
        <button 
          onClick={() => window.location.reload()}
          className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Retry
        </button>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b">
        <h2 className="text-xl font-semibold">Avatar Simulation</h2>
        <div className="flex items-center space-x-2">
          <div className={`h-3 w-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
          <span className="text-sm text-gray-500">
            {isConnected ? 'Connected' : 'Disconnected'}
          </span>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex overflow-hidden">
        {/* Avatar View */}
        <div className="w-1/3 p-4 border-r">
          <div className="relative w-full aspect-square bg-gray-100 rounded-lg overflow-hidden">
            <div className="w-full h-full">
              {/* <Avatar
                modelSrc={avatarUrl}
                style={{ width: '100%', height: '100%' }}
                // @ts-ignore - The Avatar component accepts blendShapes as a prop
                blendShapes={blendShapes as any}
              /> */}
              <div style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: '#e0e0e0' }}>Visage Avatar temporarily removed</div>
            </div>
          </div>
          
          <div className="mt-4">
            <h3 className="font-medium mb-2">Current State:</h3>
            <div className="space-y-1 text-sm">
              <div>Speaking: {isSpeaking ? 'Yes' : 'No'}</div>
              <div>Listening: {isListening ? 'Yes' : 'No'}</div>
              {currentPhoneme && (
                <div>Phoneme: {currentPhoneme}</div>
              )}
            </div>
          </div>
        </div>

        {/* Chat Interface */}
        <div className="flex-1 flex flex-col">
          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {conversation.map((msg, index) => (
              <div 
                key={index} 
                className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div 
                  className={`max-w-3/4 rounded-lg px-4 py-2 ${
                    msg.role === 'user' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-gray-100 text-gray-800'
                  }`}
                >
                  {msg.content}
                </div>
              </div>
            ))}
          </div>

          {/* Input */}
          <div className="border-t p-4">
            <div className="flex space-x-2">
              <div className="flex-1 relative">
                <textarea
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onKeyDown={handleKeyDown}
                  placeholder="Type a message..."
                  className="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                  rows={1}
                />
                <div className="absolute right-2 bottom-2 text-xs text-gray-400">
                  {message.length}/500
                </div>
              </div>
              <button
                onClick={sendMessage}
                disabled={!message.trim()}
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Send
              </button>
              <button
                onClick={toggleListening}
                className={`p-2 rounded-full ${
                  isListening ? 'bg-red-500' : 'bg-gray-200'
                }`}
                title={isListening ? 'Stop listening' : 'Start listening'}
              >
                ðŸŽ¤
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SimulationView;
