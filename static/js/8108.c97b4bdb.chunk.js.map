{"version":3,"file":"static/js/8108.c97b4bdb.chunk.js","mappings":"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","sources":["webpack://hub/./src/components/NPCDateCall.css?ebc4","components/NPCDateCall.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, { useState, useEffect, useRef } from 'react';\nimport { HumeVoiceService } from '../services/humeVoiceService';\nimport { ML5FaceMeshService } from '../services/ML5FaceMeshService';\nimport { PostureTrackingService } from '../services/PostureTrackingService';\nimport './NPCDateCall.css';\n\ninterface NPCDateCallProps {\n  npcName: string;\n  npcArchetype: string;\n  userName: string;\n  onCallEnd: () => void;\n}\n\nconst NPCDateCall: React.FC<NPCDateCallProps> = ({ \n  npcName, \n  npcArchetype, \n  userName,\n  onCallEnd \n}) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [userEmotions, setUserEmotions] = useState<any>({});\n  const [conversationScore, setConversationScore] = useState(0);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const humeService = useRef<HumeVoiceService | null>(null);\n  const faceMeshService = useRef<ML5FaceMeshService | null>(null);\n  const postureService = useRef<PostureTrackingService | null>(null);\n\n  useEffect(() => {\n    initializeCall();\n    return () => {\n      cleanupServices();\n    };\n  }, []);\n\n  const initializeCall = async () => {\n    try {\n      // Initialize video stream\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: true, \n        audio: true \n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n\n      // Initialize tracking services\n      faceMeshService.current = new ML5FaceMeshService();\n      postureService.current = new PostureTrackingService();\n      \n      // Initialize Hume voice service\n      humeService.current = new HumeVoiceService();\n      \n      // Simulate emotion tracking for demo\n      const emotionCheckInterval = setInterval(() => {\n        // Simulate emotion values for demo purposes\n        const simulatedEmotions = {\n          joy: Math.random() * 0.5 + 0.3,\n          interest: Math.random() * 0.4 + 0.4,\n          excitement: Math.random() * 0.3 + 0.2\n        };\n        setUserEmotions(simulatedEmotions);\n        updateConversationScore(simulatedEmotions);\n      }, 2000);\n      \n      // Store interval for cleanup\n      (window as any).emotionInterval = emotionCheckInterval;\n\n      // Simulate NPC personality based on archetype\n      const npcPersonality = getNPCPersonality(npcArchetype);\n      \n      setIsLoading(false);\n      setIsConnected(true);\n      \n      // Welcome message from NPC\n      simulateNPCMessage(`Hi ${userName}! I'm ${npcName}. ${npcPersonality.greeting}`);\n      \n    } catch (error) {\n      console.error('Error initializing NPC date call:', error);\n      setIsLoading(false);\n    }\n  };\n\n  const getNPCPersonality = (archetype: string) => {\n    const personalities: Record<string, any> = {\n      'Adventurous Artist': {\n        greeting: \"I just got back from this amazing street art festival. What kind of creative things are you into?\",\n        topics: ['art', 'travel', 'creativity', 'experiences'],\n        responseStyle: 'enthusiastic and imaginative'\n      },\n      'Tech Entrepreneur': {\n        greeting: \"I've been working on this fascinating AI project. Are you interested in technology?\",\n        topics: ['innovation', 'startups', 'future', 'technology'],\n        responseStyle: 'analytical and forward-thinking'\n      },\n      'Wellness Coach': {\n        greeting: \"You have such positive energy! What do you do to stay centered?\",\n        topics: ['wellness', 'mindfulness', 'health', 'balance'],\n        responseStyle: 'calm and supportive'\n      },\n      'Travel Blogger': {\n        greeting: \"I love meeting new people! What's the most interesting place you've been to?\",\n        topics: ['travel', 'culture', 'adventure', 'stories'],\n        responseStyle: 'curious and adventurous'\n      }\n    };\n    \n    return personalities[archetype] || personalities['Adventurous Artist'];\n  };\n\n  const updateConversationScore = (emotions: any) => {\n    // Calculate score based on positive emotions\n    const positiveEmotions = ['joy', 'interest', 'excitement', 'amusement'];\n    const positiveScore = positiveEmotions.reduce((sum, emotion) => \n      sum + (emotions[emotion] || 0), 0\n    );\n    \n    setConversationScore(prev => Math.min(100, prev + positiveScore * 10));\n  };\n\n  const simulateNPCMessage = (message: string) => {\n    // In a real implementation, this would use Hume's voice API\n    console.log(`${npcName}: ${message}`);\n  };\n\n  const cleanupServices = () => {\n    if (videoRef.current?.srcObject) {\n      const stream = videoRef.current.srcObject as MediaStream;\n      stream.getTracks().forEach(track => track.stop());\n    }\n    \n    // Clean up emotion check interval\n    if ((window as any).emotionInterval) {\n      clearInterval((window as any).emotionInterval);\n    }\n    \n    faceMeshService.current = null;\n    postureService.current = null;\n    humeService.current?.disconnect();\n    humeService.current = null;\n  };\n\n  const endCall = () => {\n    cleanupServices();\n    onCallEnd();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"npc-date-call loading\">\n        <div className=\"loading-content\">\n          <div className=\"loading-spinner\" />\n          <p>Connecting with {npcName}...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"npc-date-call\">\n      <div className=\"call-container\">\n        <div className=\"video-section\">\n          <div className=\"npc-video\">\n            <div className=\"npc-avatar-placeholder\">\n              <img \n                src={`https://ui-avatars.com/api/?name=${npcName}&size=200&background=FF6B6B&color=fff`} \n                alt={npcName}\n              />\n              <div className=\"npc-speaking-indicator\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n            <div className=\"npc-info\">\n              <h3>{npcName}</h3>\n              <p>{npcArchetype}</p>\n            </div>\n          </div>\n          \n          <div className=\"user-video\">\n            <video \n              ref={videoRef} \n              autoPlay \n              muted \n              playsInline\n              className=\"user-video-element\"\n            />\n            <div className=\"user-info\">\n              <h4>{userName}</h4>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"interaction-panel\">\n          <div className=\"emotion-display\">\n            <h4>Your Vibe</h4>\n            <div className=\"emotion-indicators\">\n              {Object.entries(userEmotions).slice(0, 3).map(([emotion, value]) => (\n                <div key={emotion} className=\"emotion-item\">\n                  <span className=\"emotion-label\">{emotion}</span>\n                  <div className=\"emotion-bar\">\n                    <div \n                      className=\"emotion-fill\"\n                      style={{ width: `${(value as number) * 100}%` }}\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"chemistry-meter\">\n            <h4>Chemistry Level</h4>\n            <div className=\"chemistry-visual\">\n              <div \n                className=\"chemistry-progress\"\n                style={{ height: `${conversationScore}%` }}\n              />\n              <span className=\"chemistry-value\">{Math.round(conversationScore)}%</span>\n            </div>\n          </div>\n          \n          <div className=\"conversation-hints\">\n            <h4>Conversation Tips</h4>\n            <ul>\n              <li>Ask about their {npcArchetype.toLowerCase()} experiences</li>\n              <li>Share a personal story</li>\n              <li>Find common interests</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"call-controls\">\n        <button \n          className=\"end-call-button\"\n          onClick={endCall}\n        >\n          End Date\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default NPCDateCall;\n"],"names":["_ref","npcName","npcArchetype","userName","onCallEnd","isConnected","setIsConnected","useState","isLoading","setIsLoading","userEmotions","setUserEmotions","conversationScore","setConversationScore","videoRef","useRef","humeService","faceMeshService","postureService","useEffect","initializeCall","cleanupServices","async","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","ML5FaceMeshService","PostureTrackingService","HumeVoiceService","emotionCheckInterval","setInterval","simulatedEmotions","joy","Math","random","interest","excitement","updateConversationScore","window","emotionInterval","npcPersonality","getNPCPersonality","simulateNPCMessage","concat","greeting","error","console","archetype","personalities","topics","responseStyle","emotions","positiveScore","reduce","sum","emotion","prev","min","message","log","_videoRef$current","_humeService$current","getTracks","forEach","track","stop","clearInterval","disconnect","_jsx","className","children","_jsxs","src","alt","ref","autoPlay","muted","playsInline","Object","entries","slice","map","_ref2","value","style","width","height","round","toLowerCase","onClick","endCall"],"sourceRoot":""}