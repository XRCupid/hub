{"version":3,"file":"static/js/9238.45233bbe.chunk.js","mappings":"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","sources":["components/RPMAvatar.tsx","utils/rpmAvatars.ts","components/ProceduralAvatar.tsx","components/ProfileGallery.tsx","webpack://hub/./src/components/RPMAvatar.css?9aaa"],"sourcesContent":["import React, { useRef, useState, useEffect, useMemo, FC } from 'react';\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\nimport { OrbitControls, Text, Environment, useAnimations } from '@react-three/drei';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\nimport { RPMAvatarGenerator } from '../utils/rpmAvatars';\nimport { FacialBlendShapes } from '../services/AvatarMirrorSystem';\nimport './RPMAvatar.css';\nimport { ProceduralAvatar, generateAvatarConfig } from './ProceduralAvatar';\n\ninterface RPMAvatarProps {\n  avatarUrl: string;\n  emotions?: { [key: string]: number };\n  isAnimating?: boolean;\n  scale?: number;\n  position?: [number, number, number];\n  enableControls?: boolean;\n  className?: string;\n  blendShapes?: Partial<FacialBlendShapes>;\n}\n\ninterface BlendShapeData {\n  [key: string]: number;\n}\n\n// Mapping of RPM blendshapes to emotions\nconst EMOTION_BLENDSHAPE_MAP: { [key: string]: string } = {\n  // Joy/Happiness\n  'mouthSmile_L': 'joy',\n  'mouthSmile_R': 'joy',\n  'cheekSquint_L': 'joy',\n  'cheekSquint_R': 'joy',\n  \n  // Sadness\n  'mouthFrown_L': 'sadness',\n  'mouthFrown_R': 'sadness',\n  'browInnerUp': 'sadness',\n  \n  // Anger\n  'browDown_L': 'anger',\n  'browDown_R': 'anger',\n  'mouthPress_L': 'anger',\n  'mouthPress_R': 'anger',\n  'nostrilDilate_L': 'anger',\n  'nostrilDilate_R': 'anger',\n  \n  // Fear\n  'eyeWide_L_fear': 'fear',\n  'eyeWide_R_fear': 'fear',\n  'browUp_L_fear': 'fear',\n  'browUp_R_fear': 'fear',\n  'mouthOpen_fear': 'fear',\n  \n  // Surprise\n  'eyeWide_L_surprise': 'surprise',\n  'eyeWide_R_surprise': 'surprise',\n  'browUp_L_surprise': 'surprise',\n  'browUp_R_surprise': 'surprise',\n  'mouthOpen_surprise': 'surprise',\n  \n  // Disgust\n  'noseSneer_L': 'disgust',\n  'noseSneer_R': 'disgust',\n  'mouthUpperUp_L': 'disgust',\n  'mouthUpperUp_R': 'disgust',\n  \n  // Contempt\n  'mouthSmile_L_contempt': 'contempt', // asymmetric\n  'noseSneer_L_contempt': 'contempt',\n  \n  // Excitement\n  'mouthSmile_L_excitement': 'excitement',\n  'mouthSmile_R_excitement': 'excitement',\n  'eyeWide_L_excitement': 'excitement',\n  'eyeWide_R_excitement': 'excitement',\n  \n  // Concentration\n  'browDown_L_concentration': 'concentration',\n  'browDown_R_concentration': 'concentration',\n  'eyeSquint_L': 'concentration',\n  'eyeSquint_R': 'concentration'\n};\n\n// Fallback Avatar Component - defined outside to avoid issues\nconst FallbackAvatar: React.FC<{ \n  avatarUrl?: string; \n  position?: [number, number, number];\n  blendShapes?: any \n}> = ({ \n  avatarUrl, \n  position = [0, 0, 0],\n  blendShapes \n}) => {\n  // Generate avatar config based on URL or random\n  const avatarConfig = React.useMemo(() => {\n    // Parse avatar ID to generate consistent config\n    const seed = avatarUrl || 'default';\n    const hash = seed.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    \n    return generateAvatarConfig({\n      gender: hash % 2 === 0 ? 'male' : 'female',\n      ethnicity: ['caucasian', 'asian', 'african', 'hispanic'][hash % 4],\n      style: ['professional', 'casual', 'creative', 'elegant'][hash % 4],\n      age: hash % 3 === 0 ? 'young' : 'middle'\n    });\n  }, [avatarUrl]);\n  \n  return (\n    <ProceduralAvatar\n      {...avatarConfig}\n      position={position}\n      blendShapes={blendShapes}\n    />\n  );\n};\n\n// Avatar3D component - handles loading and displaying avatars\nconst Avatar3D: FC<{ \n  avatarUrl: string; \n  emotions?: BlendShapeData;\n  isAnimating?: boolean;\n  position?: [number, number, number];\n  blendShapes?: Partial<FacialBlendShapes>;\n}> = ({ avatarUrl, emotions = {}, isAnimating = false, position = [0, 0, 0], blendShapes = {} }) => {\n  const meshRef = useRef<THREE.Group>(null);\n  const [morphTargets, setMorphTargets] = useState<THREE.Mesh[]>([]);\n  const [loadError, setLoadError] = useState<boolean>(false);\n  const [gltf, setGltf] = useState<any>(null);\n  const [blinkTime, setBlinkTime] = useState(0);\n  const { actions, names } = useAnimations(gltf?.animations || [], meshRef);\n\n  // Load avatar with error handling\n  useEffect(() => {\n    if (!avatarUrl) {\n      console.log('RPMAvatar: No avatar URL provided, showing fallback');\n      setLoadError(true);\n      return;\n    }\n\n    console.log('RPMAvatar: Attempting to load avatar from:', avatarUrl);\n    const loader = new GLTFLoader();\n    loader.load(\n      avatarUrl,\n      (loadedGltf) => {\n        console.log('RPMAvatar: Successfully loaded avatar:', loadedGltf);\n        setGltf(loadedGltf);\n        setLoadError(false);\n      },\n      (progress) => {\n        console.log('RPMAvatar: Loading progress:', progress);\n      },\n      (error) => {\n        console.error('RPMAvatar: Failed to load avatar from', avatarUrl, 'Error:', error);\n        setLoadError(true);\n      }\n    );\n  }, [avatarUrl]);\n  \n  useEffect(() => {\n    if (gltf && gltf.scene && gltf.scene.children) {\n      // Find meshes with morph targets (face)\n      const meshesWithMorphs: THREE.Mesh[] = [];\n      \n      gltf.scene.traverse((child: THREE.Object3D) => {\n        if (child instanceof THREE.Mesh && child.morphTargetDictionary) {\n          console.log('🎯 Available morph targets:', Object.keys(child.morphTargetDictionary));\n          meshesWithMorphs.push(child);\n          \n          // Initialize with a slight smile\n          const smileLeft = child.morphTargetDictionary['mouthSmileLeft'];\n          const smileRight = child.morphTargetDictionary['mouthSmileRight'];\n          if (smileLeft !== undefined && smileRight !== undefined && child.morphTargetInfluences) {\n            child.morphTargetInfluences[smileLeft] = 0.2;\n            child.morphTargetInfluences[smileRight] = 0.2;\n          }\n          \n          // Check for blink morph targets\n          const leftBlink = child.morphTargetDictionary['eyeBlinkLeft'];\n          const rightBlink = child.morphTargetDictionary['eyeBlinkRight'];\n          console.log('👁️ Blink morph targets found:', { \n            leftBlink: leftBlink !== undefined, \n            rightBlink: rightBlink !== undefined \n          });\n        }\n      });\n      \n      setMorphTargets(meshesWithMorphs);\n    }\n  }, [gltf]);\n  \n  // Load and apply idle animation\n  useEffect(() => {\n    if (!gltf || !meshRef.current) return;\n    \n    // Load idle animation from public folder\n    const loader = new GLTFLoader();\n    loader.load(\n      '/animations/Idle.glb', // Standard idle animation\n      (animGltf) => {\n        if (animGltf.animations.length > 0 && meshRef.current) {\n          // Apply animation to our avatar\n          const mixer = new THREE.AnimationMixer(meshRef.current);\n          const action = mixer.clipAction(animGltf.animations[0]);\n          action.play();\n          \n          // Store mixer for updates\n          (meshRef.current as any).mixer = mixer;\n        }\n      },\n      undefined,\n      (error) => {\n        console.log('Could not load idle animation, avatar will remain in T-pose');\n      }\n    );\n  }, [gltf]);\n  \n  // Apply emotions to morph targets\n  useEffect(() => {\n    if (morphTargets.length > 0) {\n      morphTargets.forEach(mesh => {\n        // Reset all morph targets\n        if (mesh.morphTargetInfluences) {\n          mesh.morphTargetInfluences.fill(0);\n        }\n        \n        // Apply emotion-based morph targets\n        Object.entries(emotions).forEach(([emotion, intensity]) => {\n          // Find corresponding RPM blendshapes for this emotion\n          Object.entries(EMOTION_BLENDSHAPE_MAP).forEach(([blendshape, mappedEmotion]) => {\n            if (mappedEmotion === emotion && mesh.morphTargetDictionary![blendshape] !== undefined) {\n              const index = mesh.morphTargetDictionary![blendshape];\n              if (mesh.morphTargetInfluences && index !== undefined) {\n                mesh.morphTargetInfluences[index] = Math.min(intensity, 1.0);\n              }\n            }\n          });\n        });\n      });\n    }\n  }, [emotions, morphTargets]);\n\n  // Apply blend shapes to the avatar\n  useEffect(() => {\n    if (morphTargets.length > 0) {\n      morphTargets.forEach(mesh => {\n        // Apply each blend shape\n        Object.entries(blendShapes).forEach(([shapeName, value]) => {\n          if (mesh.morphTargetDictionary && mesh.morphTargetInfluences) {\n            const index = mesh.morphTargetDictionary[shapeName];\n            if (index !== undefined) {\n              mesh.morphTargetInfluences[index] = value as number;\n            }\n          }\n        });\n      });\n    }\n  }, [morphTargets, blendShapes]);\n\n  // Animation loop\n  useFrame((state, delta) => {\n    if (isAnimating && meshRef.current) {\n      // Removed rotation animation to keep avatar facing forward\n      // meshRef.current.rotation.y += 0.005;\n    }\n    \n    // Update animation mixer\n    if (meshRef.current && (meshRef.current as any).mixer) {\n      (meshRef.current as any).mixer.update(delta);\n    }\n    \n    // Blinking animation\n    setBlinkTime(prev => prev + delta);\n    if (morphTargets.length > 0 && blinkTime > 2) { // Blink every 2 seconds instead of 3\n      morphTargets.forEach(mesh => {\n        if (mesh.morphTargetDictionary && mesh.morphTargetInfluences) {\n          const leftBlink = mesh.morphTargetDictionary['eyeBlinkLeft'];\n          const rightBlink = mesh.morphTargetDictionary['eyeBlinkRight'];\n          \n          if (leftBlink !== undefined && rightBlink !== undefined) {\n            // Quick blink animation\n            const blinkProgress = (blinkTime - 2) * 15; // Faster blink (was 10)\n            if (blinkProgress < 1) {\n              const blinkValue = Math.sin(blinkProgress * Math.PI);\n              mesh.morphTargetInfluences[leftBlink] = blinkValue;\n              mesh.morphTargetInfluences[rightBlink] = blinkValue;\n            } else {\n              mesh.morphTargetInfluences[leftBlink] = 0;\n              mesh.morphTargetInfluences[rightBlink] = 0;\n              if (blinkProgress > 1.5) setBlinkTime(0); // Reset blink timer\n            }\n          }\n        }\n      });\n    }\n    \n    // Subtle breathing animation\n    if (meshRef.current) {\n      const breathingOffset = Math.sin(state.clock.elapsedTime * 0.5) * 0.01;\n      meshRef.current.scale.y = 1 + breathingOffset;\n    }\n  });\n\n  // Handle loading error or missing URL - AFTER all hooks\n  if (loadError || !avatarUrl) {\n    console.log('🎭 Avatar3D: Rendering fallback avatar. loadError:', loadError, 'avatarUrl:', avatarUrl);\n    \n    return (\n      <FallbackAvatar \n        avatarUrl={avatarUrl} \n        position={position} \n        blendShapes={blendShapes} \n      />\n    );\n  }\n  \n  if (!gltf) {\n    console.log('🎭 Avatar3D: No GLTF loaded yet, returning null');\n    return null;\n  }\n  \n  return (\n    <group ref={meshRef} position={position}>\n      <primitive object={gltf.scene} />\n    </group>\n  );\n};\n\nexport const RPMAvatar: FC<RPMAvatarProps> = ({ \n  avatarUrl, \n  emotions = {}, \n  isAnimating = true,\n  scale = 1,\n  position = [0, -1, 0],\n  enableControls = false,\n  className = '',\n  blendShapes = {}\n}) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  const handleLoadingComplete = () => {\n    setIsLoading(false);\n  };\n  \n  const handleError = (error: any) => {\n    console.error('RPM Avatar loading error:', error);\n    setError('Failed to load avatar');\n    setIsLoading(false);\n  };\n\n  // Log setup instructions on first render\n  useEffect(() => {\n    console.log(' RPMAvatar render - URL:', avatarUrl, 'isEmpty:', !avatarUrl);\n    if (!avatarUrl) {\n      console.log(' RPM Avatar: No URL provided, showing fallback avatar');\n      setIsLoading(false); // Don't show loading for fallback\n      RPMAvatarGenerator.logSetupInstructions();\n    }\n  }, [avatarUrl]);\n\n  return (\n    <div className={`rpm-avatar-container ${className}`} style={{ width: '100%', height: '100%', position: 'relative' }}>\n      {isLoading && (\n        <div className=\"avatar-loading\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading avatar...</p>\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"avatar-error\">\n          <p> {error}</p>\n          <p>Using fallback image</p>\n        </div>\n      )}\n      \n      <Canvas\n        camera={{ position: [0, 1.6, 1.2], fov: 30 }}\n        style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', width: '100%', height: '100%' }}\n        gl={{ \n          preserveDrawingBuffer: true,\n          antialias: true,\n          alpha: true\n        }}\n        onCreated={(state) => {\n          console.log('🎨 Canvas created successfully!', state);\n          // Add context lost/restored handlers\n          const canvas = state.gl.domElement;\n          canvas.addEventListener('webglcontextlost', (e) => {\n            console.warn('🚨 WebGL context lost, preventing default');\n            e.preventDefault();\n          });\n          canvas.addEventListener('webglcontextrestored', () => {\n            console.log('✅ WebGL context restored');\n          });\n          handleLoadingComplete();\n        }}\n        onError={(error) => {\n          console.error('🚨 Canvas error:', error);\n          handleError(error);\n        }}\n      >\n        <ambientLight intensity={0.5} />\n        <directionalLight position={[0, 2, 3]} intensity={1.2} />\n        <pointLight position={[-2, 1, 2]} intensity={0.8} color=\"#ffd700\" />\n        <pointLight position={[2, 1, 2]} intensity={0.6} color=\"#87ceeb\" />\n        \n        <Avatar3D \n          avatarUrl={avatarUrl} \n          emotions={emotions}\n          isAnimating={isAnimating}\n          position={position}\n          blendShapes={blendShapes}\n        />\n        \n        <OrbitControls \n          enableZoom={false}\n          enablePan={false}\n          enableRotate={false}\n          target={[0, 1.5, 0]}\n        />\n        \n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n};\n\nexport default RPMAvatar;\n","// Ready Player Me Avatar Utilities\n// This file contains sample RPM avatar URLs and utilities for avatar generation\n\nexport interface RPMAvatarConfig {\n  id: string;\n  name: string;\n  gender: 'male' | 'female';\n  style: 'realistic' | 'cartoon';\n  avatarUrl: string;\n}\n\n// Demo RPM Avatars - Using official Ready Player Me demo URLs\nexport const DEMO_RPM_AVATARS: RPMAvatarConfig[] = [\n  {\n    id: 'demo-male-1',\n    name: 'Alex',\n    gender: 'male',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5d.glb' // Official RPM demo male\n  },\n  {\n    id: 'demo-female-1', \n    name: 'Jordan',\n    gender: 'female',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5e.glb' // Official RPM demo female\n  },\n  {\n    id: 'demo-female-2',\n    name: 'Sam',\n    gender: 'female',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5f.glb' // Official RPM demo female\n  },\n  {\n    id: 'demo-male-2',\n    name: 'River',\n    gender: 'male',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d60.glb' // Official RPM demo male\n  },\n  {\n    id: 'haseeb-avatar',\n    name: 'Haseeb',\n    gender: 'male',\n    style: 'realistic',\n    avatarUrl: '/avatars/Haseeb.glb' // Local custom avatar\n  },\n  {\n    id: 'dougie-avatar',\n    name: 'Dougie',\n    gender: 'male',\n    style: 'realistic',\n    avatarUrl: '/avatars/Dougie.glb' // Local custom avatar\n  }\n];\n\n// Instructions for getting real RPM avatars\nexport const RPM_SETUP_INSTRUCTIONS = `\n🎭 HOW TO GET REAL RPM AVATARS:\n\n1. CREATE AVATARS:\n   • Visit https://readyplayer.me\n   • Create free avatars for your NPCs\n   • Copy the .glb URLs (e.g., https://models.readyplayer.me/your-avatar-id.glb)\n\n2. UPDATE AVATAR URLS:\n   • Replace empty URLs in DEMO_RPM_AVATARS with your real avatar URLs\n   • Or use the RPMAvatarCreator component to let users input custom URLs\n\n3. CURRENT STATUS:\n   • Fallback geometric avatars are showing (blue 3D shapes with simple faces)\n   • These demonstrate the 3D avatar positioning and emotion system\n   • Replace URLs to see actual RPM avatars with realistic faces and bodies\n\n4. WHERE TO SEE AVATARS:\n   • Dating Simulation → Match with someone → Chat → Video Date\n   • The 3D avatar appears in the video call interface\n   • Emotions change based on conversation (via Hume AI)\n`;\n\n// RPM Avatar Generator Integration\nexport class RPMAvatarGenerator {\n  private static readonly RPM_SUBDOMAIN = 'demo'; // Replace with your subdomain\n  private static readonly RPM_API_BASE = 'https://api.readyplayer.me/v1';\n  \n  /**\n   * Generate Avatar Creator URL for custom avatar creation\n   * Users can create their own avatars using this URL\n   */\n  static getAvatarCreatorUrl(config?: {\n    bodyType?: 'halfbody' | 'fullbody';\n    quickStart?: boolean;\n    clearCache?: boolean;\n  }): string {\n    const params = new URLSearchParams();\n    \n    if (config?.bodyType) params.set('bodyType', config.bodyType);\n    if (config?.quickStart) params.set('quickStart', 'true');\n    if (config?.clearCache) params.set('clearCache', 'true');\n    \n    const queryString = params.toString();\n    const baseUrl = `https://${this.RPM_SUBDOMAIN}.readyplayer.me/avatar`;\n    \n    return queryString ? `${baseUrl}?${queryString}` : baseUrl;\n  }\n  \n  /**\n   * Validate if an avatar URL is properly formatted\n   */\n  static isValidAvatarUrl(url: string): boolean {\n    const rpmUrlPattern = /^https:\\/\\/(models\\.readyplayer\\.me|d1a370nemizbjq\\.cloudfront\\.net)\\/.+\\.glb$/;\n    return rpmUrlPattern.test(url);\n  }\n  \n  /**\n   * Get a random demo avatar for testing\n   */\n  static getRandomDemoAvatar(): RPMAvatarConfig {\n    const avatars = DEMO_RPM_AVATARS;\n    return avatars[Math.floor(Math.random() * avatars.length)];\n  }\n  \n  /**\n   * Get avatar by character name\n   */\n  static getAvatarByName(name: string): RPMAvatarConfig | null {\n    return DEMO_RPM_AVATARS.find(avatar => \n      avatar.name.toLowerCase() === name.toLowerCase()\n    ) || null;\n  }\n\n  /**\n   * Log setup instructions to console\n   */\n  static logSetupInstructions(): void {\n    console.log(RPM_SETUP_INSTRUCTIONS);\n  }\n}\n\n// Avatar URL validation and fallback\nexport const getValidAvatarUrl = (url?: string): string | undefined => {\n  if (!url) return undefined;\n  \n  // If it's a valid RPM URL, return it\n  if (RPMAvatarGenerator.isValidAvatarUrl(url)) {\n    return url;\n  }\n  \n  // Otherwise return undefined to use fallback\n  return undefined;\n};\n\nexport default {\n  DEMO_RPM_AVATARS,\n  RPMAvatarGenerator,\n  getValidAvatarUrl,\n  RPM_SETUP_INSTRUCTIONS\n};\n","import React, { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\ninterface ProceduralAvatarProps {\n  gender: 'male' | 'female';\n  skinTone: string;\n  hairColor: string;\n  hairStyle: 'short' | 'medium' | 'long' | 'bald';\n  clothingColor: string;\n  position?: [number, number, number];\n  blendShapes?: any;\n}\n\nexport const ProceduralAvatar: React.FC<ProceduralAvatarProps> = ({\n  gender,\n  skinTone,\n  hairColor,\n  hairStyle,\n  clothingColor,\n  position = [0, 0, 0],\n  blendShapes = {}\n}) => {\n  const groupRef = useRef<THREE.Group>(null);\n  const headRef = useRef<THREE.Mesh>(null);\n  \n  // Generate avatar colors\n  const skinColor = useMemo(() => {\n    const tones: Record<string, string> = {\n      light: '#fdbcb4',\n      medium: '#d4a574',\n      dark: '#8b6f47',\n      pale: '#ffe0bd',\n      tan: '#cd853f'\n    };\n    return tones[skinTone] || tones.medium;\n  }, [skinTone]);\n\n  // Body proportions based on gender\n  const proportions = useMemo(() => {\n    return gender === 'female' ? {\n      shoulderWidth: 0.35,\n      hipWidth: 0.4,\n      chestSize: 0.15,\n      waistSize: 0.3,\n      headSize: 0.25\n    } : {\n      shoulderWidth: 0.45,\n      hipWidth: 0.35,\n      chestSize: 0.1,\n      waistSize: 0.35,\n      headSize: 0.28\n    };\n  }, [gender]);\n\n  // Animation\n  useFrame((state) => {\n    if (groupRef.current) {\n      // Breathing animation\n      groupRef.current.scale.y = 1 + Math.sin(state.clock.elapsedTime * 2) * 0.01;\n      \n      // Subtle idle movement\n      groupRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.05;\n    }\n    \n    // Apply blend shapes for expressions\n    if (headRef.current && blendShapes) {\n      // Simulate blend shape effects with scale/position adjustments\n      if (blendShapes.mouthSmile) {\n        // Smile effect\n      }\n      if (blendShapes.eyesClosed) {\n        // Blink effect\n      }\n    }\n  });\n\n  return (\n    <group ref={groupRef} position={position}>\n      {/* Head */}\n      <mesh ref={headRef} position={[0, 1.6, 0]}>\n        <sphereGeometry args={[proportions.headSize, 16, 16]} />\n        <meshStandardMaterial color={skinColor} />\n      </mesh>\n      \n      {/* Eyes */}\n      <mesh position={[-0.08, 1.65, 0.2]}>\n        <sphereGeometry args={[0.03, 8, 8]} />\n        <meshStandardMaterial color=\"#333\" />\n      </mesh>\n      <mesh position={[0.08, 1.65, 0.2]}>\n        <sphereGeometry args={[0.03, 8, 8]} />\n        <meshStandardMaterial color=\"#333\" />\n      </mesh>\n      \n      {/* Hair */}\n      {hairStyle !== 'bald' && (\n        <mesh position={[0, 1.75, 0]}>\n          <sphereGeometry args={[\n            proportions.headSize + 0.05,\n            16,\n            16,\n            0,\n            Math.PI * 2,\n            0,\n            hairStyle === 'short' ? Math.PI * 0.4 : \n            hairStyle === 'medium' ? Math.PI * 0.5 : \n            Math.PI * 0.6\n          ]} />\n          <meshStandardMaterial color={hairColor} />\n        </mesh>\n      )}\n      \n      {/* Body/Torso */}\n      <mesh position={[0, 1, 0]}>\n        <cylinderGeometry args={[\n          proportions.shoulderWidth,\n          proportions.hipWidth,\n          0.8,\n          8\n        ]} />\n        <meshStandardMaterial color={clothingColor} />\n      </mesh>\n      \n      {/* Arms */}\n      <mesh position={[-proportions.shoulderWidth - 0.15, 1, 0]} rotation={[0, 0, -0.3]}>\n        <cylinderGeometry args={[0.08, 0.06, 0.7, 8]} />\n        <meshStandardMaterial color={skinColor} />\n      </mesh>\n      <mesh position={[proportions.shoulderWidth + 0.15, 1, 0]} rotation={[0, 0, 0.3]}>\n        <cylinderGeometry args={[0.08, 0.06, 0.7, 8]} />\n        <meshStandardMaterial color={skinColor} />\n      </mesh>\n      \n      {/* Legs */}\n      <mesh position={[-0.15, 0.2, 0]}>\n        <cylinderGeometry args={[0.1, 0.08, 0.8, 8]} />\n        <meshStandardMaterial color=\"#2c3e50\" />\n      </mesh>\n      <mesh position={[0.15, 0.2, 0]}>\n        <cylinderGeometry args={[0.1, 0.08, 0.8, 8]} />\n        <meshStandardMaterial color=\"#2c3e50\" />\n      </mesh>\n    </group>\n  );\n};\n\n// Avatar configuration generator\nexport const generateAvatarConfig = (preferences: {\n  gender?: 'male' | 'female';\n  ethnicity?: string;\n  style?: string;\n  age?: string;\n}) => {\n  // Skin tone based on ethnicity\n  const skinTones: Record<string, string> = {\n    caucasian: 'light',\n    asian: 'pale',\n    african: 'dark',\n    hispanic: 'medium',\n    middleEastern: 'tan'\n  };\n  \n  // Hair colors\n  const hairColors = ['#2c3e50', '#8b4513', '#daa520', '#dc143c', '#696969'];\n  \n  // Clothing colors based on style\n  const clothingColors: Record<string, string> = {\n    professional: '#2c3e50',\n    casual: '#3498db',\n    creative: '#9b59b6',\n    elegant: '#c0392b',\n    athletic: '#27ae60'\n  };\n  \n  return {\n    gender: preferences.gender || 'female',\n    skinTone: skinTones[preferences.ethnicity || 'caucasian'] || 'medium',\n    hairColor: hairColors[Math.floor(Math.random() * hairColors.length)],\n    hairStyle: ['short', 'medium', 'long'][Math.floor(Math.random() * 3)] as any,\n    clothingColor: clothingColors[preferences.style || 'casual'] || '#3498db'\n  };\n};\n","import React, { useState } from 'react';\nimport { GeneratedProfile } from '../utils/avatarGenerator';\nimport { RPMAvatar } from './RPMAvatar';\n\ninterface ProfileGalleryProps {\n  profiles: GeneratedProfile[];\n  onProfileSelect: (profile: GeneratedProfile) => void;\n  onStartChat: (profile: GeneratedProfile) => void;\n  className?: string;\n}\n\nexport const ProfileGallery: React.FC<ProfileGalleryProps> = ({\n  profiles,\n  onProfileSelect,\n  onStartChat,\n  className = ''\n}) => {\n  const [selectedProfile, setSelectedProfile] = useState<GeneratedProfile | null>(null);\n  const [viewMode, setViewMode] = useState<'grid' | 'cards'>('cards');\n\n  const handleProfileClick = (profile: GeneratedProfile) => {\n    setSelectedProfile(profile);\n    onProfileSelect(profile);\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return '#4CAF50';\n      case 'medium': return '#FF9800';\n      case 'hard': return '#F44336';\n      default: return '#666';\n    }\n  };\n\n  const getPersonalityEmoji = (personality: string) => {\n    const emojiMap: Record<string, string> = {\n      outgoing: '🎉',\n      shy: '😊',\n      intellectual: '🤓',\n      artistic: '🎨',\n      adventurous: '🏔️',\n      romantic: '💕'\n    };\n    return emojiMap[personality] || '😄';\n  };\n\n  return (\n    <div className={`profile-gallery ${className}`}>\n      <div className=\"gallery-header\">\n        <div className=\"gallery-title\">\n          <h3>🎭 Generated Dating Profiles</h3>\n          <p>{profiles.length} diverse profiles based on your preferences</p>\n        </div>\n        \n        <div className=\"view-controls\">\n          <button \n            className={`view-btn ${viewMode === 'cards' ? 'active' : ''}`}\n            onClick={() => setViewMode('cards')}\n          >\n            📱 Cards\n          </button>\n          <button \n            className={`view-btn ${viewMode === 'grid' ? 'active' : ''}`}\n            onClick={() => setViewMode('grid')}\n          >\n            🔲 Grid\n          </button>\n        </div>\n      </div>\n\n      <div className={`profiles-container ${viewMode}`}>\n        {profiles.map((profile) => (\n          <div \n            key={profile.id}\n            className={`profile-card ${selectedProfile?.id === profile.id ? 'selected' : ''}`}\n            onClick={() => handleProfileClick(profile)}\n          >\n            {/* Avatar Section */}\n            <div className=\"profile-avatar\">\n              <div className=\"avatar-container\">\n                <RPMAvatar\n                  avatarUrl={profile.avatar.avatarUrl || ''}\n                  emotions={{}}\n                  className=\"profile-avatar-3d\"\n                />\n              </div>\n              \n              {/* Quick Stats Overlay */}\n              <div className=\"avatar-overlay\">\n                <span className=\"age-badge\">{profile.age}</span>\n                <span \n                  className=\"difficulty-badge\"\n                  style={{ backgroundColor: getDifficultyColor(profile.difficulty) }}\n                >\n                  {profile.difficulty}\n                </span>\n              </div>\n            </div>\n\n            {/* Profile Info */}\n            <div className=\"profile-info\">\n              <div className=\"profile-header\">\n                <h4 className=\"profile-name\">\n                  {profile.name}\n                  <span className=\"personality-emoji\">\n                    {getPersonalityEmoji(profile.personalityType)}\n                  </span>\n                </h4>\n                <p className=\"profile-pronouns\">{profile.pronouns}</p>\n              </div>\n\n              <div className=\"profile-details\">\n                <div className=\"detail-row\">\n                  <span className=\"detail-label\">Personality:</span>\n                  <span className=\"detail-value\">{profile.personalityType}</span>\n                </div>\n                <div className=\"detail-row\">\n                  <span className=\"detail-label\">Style:</span>\n                  <span className=\"detail-value\">{profile.conversationStyle}</span>\n                </div>\n                <div className=\"detail-row\">\n                  <span className=\"detail-label\">Background:</span>\n                  <span className=\"detail-value\">{profile.ethnicity}</span>\n                </div>\n              </div>\n\n              <p className=\"profile-bio\">{profile.bio}</p>\n\n              {/* Interests */}\n              <div className=\"profile-interests\">\n                {profile.interests.slice(0, 3).map((interest, index) => (\n                  <span key={index} className=\"interest-tag\">\n                    {interest}\n                  </span>\n                ))}\n                {profile.interests.length > 3 && (\n                  <span className=\"interest-more\">\n                    +{profile.interests.length - 3} more\n                  </span>\n                )}\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"profile-actions\">\n                <button \n                  className=\"action-btn secondary\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    // Show full profile details\n                  }}\n                >\n                  👁️ View Details\n                </button>\n                <button \n                  className=\"action-btn primary\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onStartChat(profile);\n                  }}\n                >\n                  💬 Start Chat\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {profiles.length === 0 && (\n        <div className=\"empty-state\">\n          <div className=\"empty-icon\">🎭</div>\n          <h4>No Profiles Generated Yet</h4>\n          <p>Use the preferences panel above to generate diverse dating profiles</p>\n        </div>\n      )}\n\n      <style>{`\n        .profile-gallery {\n          width: 100%;\n          max-width: 1200px;\n          margin: 0 auto;\n        }\n\n        .gallery-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 24px;\n          padding: 0 8px;\n        }\n\n        .gallery-title h3 {\n          margin: 0 0 4px 0;\n          color: #333;\n          font-size: 24px;\n        }\n\n        .gallery-title p {\n          margin: 0;\n          color: #666;\n          font-size: 14px;\n        }\n\n        .view-controls {\n          display: flex;\n          gap: 8px;\n        }\n\n        .view-btn {\n          padding: 8px 16px;\n          border: 1px solid #ddd;\n          border-radius: 8px;\n          background: white;\n          cursor: pointer;\n          font-size: 14px;\n          transition: all 0.2s;\n        }\n\n        .view-btn.active {\n          background: #4A90E2;\n          color: white;\n          border-color: #4A90E2;\n        }\n\n        .view-btn:hover:not(.active) {\n          background: #f0f7ff;\n          border-color: #4A90E2;\n        }\n\n        .profiles-container {\n          display: grid;\n          gap: 20px;\n        }\n\n        .profiles-container.cards {\n          grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));\n        }\n\n        .profiles-container.grid {\n          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n        }\n\n        .profile-card {\n          background: white;\n          border-radius: 16px;\n          overflow: hidden;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n          cursor: pointer;\n          transition: all 0.3s;\n          border: 2px solid transparent;\n        }\n\n        .profile-card:hover {\n          transform: translateY(-4px);\n          box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\n        }\n\n        .profile-card.selected {\n          border-color: #4A90E2;\n          box-shadow: 0 8px 24px rgba(74, 144, 226, 0.3);\n        }\n\n        .profile-avatar {\n          position: relative;\n          height: 200px;\n          background: linear-gradient(135deg, #f0f7ff 0%, #e1f0ff 100%);\n        }\n\n        .avatar-container {\n          width: 100%;\n          height: 100%;\n        }\n\n        .profile-avatar-3d {\n          border-radius: 0;\n        }\n\n        .avatar-overlay {\n          position: absolute;\n          top: 12px;\n          right: 12px;\n          display: flex;\n          gap: 8px;\n        }\n\n        .age-badge, .difficulty-badge {\n          padding: 4px 8px;\n          border-radius: 12px;\n          font-size: 12px;\n          font-weight: 600;\n          color: white;\n        }\n\n        .age-badge {\n          background: rgba(0, 0, 0, 0.6);\n        }\n\n        .difficulty-badge {\n          text-transform: uppercase;\n          font-size: 10px;\n        }\n\n        .profile-info {\n          padding: 20px;\n        }\n\n        .profile-header {\n          margin-bottom: 16px;\n        }\n\n        .profile-name {\n          margin: 0 0 4px 0;\n          color: #333;\n          font-size: 20px;\n          display: flex;\n          align-items: center;\n          gap: 8px;\n        }\n\n        .personality-emoji {\n          font-size: 18px;\n        }\n\n        .profile-pronouns {\n          margin: 0;\n          color: #666;\n          font-size: 12px;\n          font-style: italic;\n        }\n\n        .profile-details {\n          margin-bottom: 12px;\n        }\n\n        .detail-row {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 4px;\n          font-size: 14px;\n        }\n\n        .detail-label {\n          color: #666;\n          font-weight: 500;\n        }\n\n        .detail-value {\n          color: #333;\n          text-transform: capitalize;\n        }\n\n        .profile-bio {\n          margin: 0 0 16px 0;\n          color: #555;\n          font-size: 14px;\n          line-height: 1.4;\n          display: -webkit-box;\n          -webkit-line-clamp: 3;\n          -webkit-box-orient: vertical;\n          overflow: hidden;\n        }\n\n        .profile-interests {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 6px;\n          margin-bottom: 16px;\n        }\n\n        .interest-tag {\n          background: #f0f7ff;\n          color: #4A90E2;\n          padding: 4px 8px;\n          border-radius: 12px;\n          font-size: 12px;\n          font-weight: 500;\n        }\n\n        .interest-more {\n          color: #666;\n          font-size: 12px;\n          font-style: italic;\n        }\n\n        .profile-actions {\n          display: flex;\n          gap: 8px;\n        }\n\n        .action-btn {\n          flex: 1;\n          padding: 10px 16px;\n          border: none;\n          border-radius: 8px;\n          font-size: 14px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n\n        .action-btn.primary {\n          background: #4A90E2;\n          color: white;\n        }\n\n        .action-btn.primary:hover {\n          background: #357ABD;\n        }\n\n        .action-btn.secondary {\n          background: #f8f9fa;\n          color: #333;\n          border: 1px solid #ddd;\n        }\n\n        .action-btn.secondary:hover {\n          background: #e9ecef;\n        }\n\n        .empty-state {\n          text-align: center;\n          padding: 60px 20px;\n          color: #666;\n        }\n\n        .empty-icon {\n          font-size: 48px;\n          margin-bottom: 16px;\n        }\n\n        .empty-state h4 {\n          margin: 0 0 8px 0;\n          color: #333;\n        }\n\n        .empty-state p {\n          margin: 0;\n          font-size: 14px;\n        }\n\n        @media (max-width: 768px) {\n          .gallery-header {\n            flex-direction: column;\n            gap: 16px;\n            align-items: stretch;\n          }\n\n          .view-controls {\n            justify-content: center;\n          }\n\n          .profiles-container.cards,\n          .profiles-container.grid {\n            grid-template-columns: 1fr;\n          }\n\n          .profile-info {\n            padding: 16px;\n          }\n\n          .action-btn {\n            font-size: 12px;\n            padding: 8px 12px;\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default ProfileGallery;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["EMOTION_BLENDSHAPE_MAP","FallbackAvatar","_ref","avatarUrl","position","blendShapes","avatarConfig","React","hash","split","reduce","acc","char","charCodeAt","generateAvatarConfig","gender","ethnicity","style","age","_jsx","ProceduralAvatar","_objectSpread","Avatar3D","_ref2","emotions","isAnimating","meshRef","useRef","morphTargets","setMorphTargets","useState","loadError","setLoadError","gltf","setGltf","blinkTime","setBlinkTime","actions","names","useAnimations","animations","useEffect","console","log","GLTFLoader","load","loadedGltf","progress","error","scene","children","meshesWithMorphs","traverse","child","THREE","morphTargetDictionary","Object","keys","push","smileLeft","smileRight","undefined","morphTargetInfluences","leftBlink","rightBlink","current","animGltf","length","mixer","clipAction","play","forEach","mesh","fill","entries","_ref3","emotion","intensity","_ref4","blendshape","mappedEmotion","index","Math","min","_ref5","shapeName","value","useFrame","state","delta","update","prev","blinkProgress","blinkValue","sin","PI","breathingOffset","clock","elapsedTime","scale","y","ref","object","RPMAvatar","_ref6","enableControls","className","isLoading","setIsLoading","setError","RPMAvatarGenerator","logSetupInstructions","_jsxs","concat","width","height","Canvas","camera","fov","background","gl","preserveDrawingBuffer","antialias","alpha","onCreated","canvas","domElement","addEventListener","e","warn","preventDefault","onError","handleError","color","OrbitControls","enableZoom","enablePan","enableRotate","target","Environment","preset","DEMO_RPM_AVATARS","id","name","RPM_SETUP_INSTRUCTIONS","getAvatarCreatorUrl","config","params","URLSearchParams","bodyType","set","quickStart","clearCache","queryString","toString","baseUrl","this","RPM_SUBDOMAIN","isValidAvatarUrl","url","test","getRandomDemoAvatar","avatars","floor","random","getAvatarByName","find","avatar","toLowerCase","RPM_API_BASE","skinTone","hairColor","hairStyle","clothingColor","groupRef","headRef","skinColor","useMemo","tones","light","medium","dark","pale","tan","proportions","shoulderWidth","hipWidth","chestSize","waistSize","headSize","rotation","mouthSmile","eyesClosed","args","preferences","hairColors","caucasian","asian","african","hispanic","middleEastern","professional","casual","creative","elegant","athletic","ProfileGallery","profiles","onProfileSelect","onStartChat","selectedProfile","setSelectedProfile","viewMode","setViewMode","getDifficultyColor","difficulty","onClick","map","profile","handleProfileClick","backgroundColor","personality","personalityType","outgoing","shy","intellectual","artistic","adventurous","romantic","pronouns","conversationStyle","bio","interests","slice","interest","stopPropagation"],"sourceRoot":""}