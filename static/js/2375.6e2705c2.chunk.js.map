{"version":3,"file":"static/js/2375.6e2705c2.chunk.js","mappings":"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","sources":["components/FunctionalCoachDemo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { COACHES } from '../config/curriculumStructure';\n\ninterface Message {\n  id: string;\n  speaker: 'user' | 'coach';\n  text: string;\n  timestamp: Date;\n}\n\ninterface CoachResponse {\n  text: string;\n  options?: string[];\n  lesson?: string;\n}\n\nconst FunctionalCoachDemo: React.FC = () => {\n  const [selectedCoach, setSelectedCoach] = useState<string>('grace');\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [userInput, setUserInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentLesson, setCurrentLesson] = useState<string | null>(null);\n\n  const coach = COACHES.find(c => c.id === selectedCoach);\n\n  // Coach conversation logic\n  const getCoachResponse = (userMessage: string): CoachResponse => {\n    const message = userMessage.toLowerCase();\n    \n    if (selectedCoach === 'grace') {\n      if (message.includes('nervous') || message.includes('anxiety')) {\n        return {\n          text: \"I understand that nervousness, darling. It's completely natural to feel that way. Let's practice some breathing techniques and conversation starters that will help you feel more confident.\",\n          options: [\"Practice breathing\", \"Learn conversation starters\", \"Tell me more\"],\n          lesson: \"anxiety_management\"\n        };\n      }\n      if (message.includes('conversation') || message.includes('talk')) {\n        return {\n          text: \"Wonderful! Conversation is truly an art form. The key is active listening and asking thoughtful questions. Shall we practice with a role-play scenario?\",\n          options: [\"Start role-play\", \"Learn listening techniques\", \"Practice questions\"],\n          lesson: \"conversation_mastery\"\n        };\n      }\n      return {\n        text: \"That's a lovely question, dear. Remember, authentic connection comes from being genuinely interested in the other person. What specific situation would you like guidance on?\",\n        options: [\"First date tips\", \"Conversation skills\", \"Dealing with nerves\"]\n      };\n    }\n    \n    if (selectedCoach === 'posie') {\n      if (message.includes('body language') || message.includes('nervous')) {\n        return {\n          text: \"Body language speaks louder than words! When you're nervous, your body tenses up. Let's practice some grounding techniques and confident postures.\",\n          options: [\"Practice posture\", \"Grounding exercise\", \"Eye contact tips\"],\n          lesson: \"body_language_basics\"\n        };\n      }\n      if (message.includes('connection') || message.includes('chemistry')) {\n        return {\n          text: \"Chemistry is about presence and authenticity. It's feeling comfortable in your own skin and being fully present with someone. Want to try a presence exercise?\",\n          options: [\"Presence exercise\", \"Authenticity tips\", \"Building rapport\"],\n          lesson: \"authentic_connection\"\n        };\n      }\n      return {\n        text: \"I love your curiosity! Connection happens when we're truly present. What aspect of presence or body language would you like to explore?\",\n        options: [\"Body language\", \"Eye contact\", \"Creating chemistry\"]\n      };\n    }\n    \n    if (selectedCoach === 'rizzo') {\n      if (message.includes('confidence') || message.includes('shy')) {\n        return {\n          text: \"Hey, confidence isn't about being perfect - it's about owning who you are! Let's turn that shyness into your secret weapon. Ready to get bold?\",\n          options: [\"Build confidence\", \"Practice being bold\", \"Own your style\"],\n          lesson: \"confidence_building\"\n        };\n      }\n      if (message.includes('rejection') || message.includes('scared')) {\n        return {\n          text: \"Rejection? That's just redirection, honey! Every 'no' gets you closer to your perfect 'yes'. Let's practice handling rejection like a boss.\",\n          options: [\"Rejection practice\", \"Mindset shift\", \"Bold moves\"],\n          lesson: \"rejection_resilience\"\n        };\n      }\n      return {\n        text: \"I'm here to help you unleash that magnetic energy! What's holding you back from being your most irresistible self?\",\n        options: [\"Building magnetism\", \"Getting over fear\", \"Making bold moves\"]\n      };\n    }\n    \n    return { text: \"I'm here to help you on your dating journey! What would you like to work on?\" };\n  };\n\n  // Lesson content\n  const getLessonContent = (lessonId: string): string => {\n    const lessons: Record<string, string> = {\n      anxiety_management: `\n🌸 GRACE'S ANXIETY MANAGEMENT LESSON\n\n✨ The 3-Breath Technique:\n1. Inhale for 4 counts through your nose\n2. Hold for 4 counts  \n3. Exhale for 6 counts through your mouth\n4. Repeat 3 times\n\n💫 Confidence Affirmations:\n- \"I am worthy of love and connection\"\n- \"I bring unique value to this conversation\"\n- \"Nervousness shows I care, and that's beautiful\"\n\n🎯 Pre-Date Ritual:\n- Listen to calming music for 5 minutes\n- Practice your breathing technique\n- Remind yourself of 3 things you're excited to share\n      `,\n      conversation_mastery: `\n🌟 GRACE'S CONVERSATION MASTERY\n\n🎨 The Art of Questions:\n- \"What's been the highlight of your week?\"\n- \"What's something you're passionate about lately?\"\n- \"If you could travel anywhere right now, where would you go?\"\n\n👂 Active Listening Techniques:\n- Reflect: \"It sounds like you really enjoy...\"\n- Elaborate: \"Tell me more about that!\"\n- Connect: \"That reminds me of when...\"\n\n✨ Conversation Flow:\nQuestion → Listen → Reflect → Share → Question\nKeep this cycle going naturally!\n      `,\n      body_language_basics: `\n🌺 POSIE'S BODY LANGUAGE BASICS\n\n💃 Confident Posture:\n- Shoulders back and relaxed\n- Chin parallel to the ground\n- Weight evenly distributed\n- Arms uncrossed and open\n\n👀 Eye Contact Mastery:\n- Look into their eyes when they're speaking\n- Break away naturally every 5-7 seconds\n- Return your gaze when making a point\n- Smile with your eyes!\n\n🤝 Mirroring Technique:\n- Subtly match their energy level\n- Mirror their posture (not obviously)\n- Match their speaking pace\n- This creates unconscious rapport!\n      `,\n      confidence_building: `\n🔥 RIZZO'S CONFIDENCE BUILDING\n\n💪 The Power Pose:\n- Stand like a superhero for 2 minutes\n- Hands on hips, chest out, chin up\n- This literally changes your hormone levels!\n\n🎭 The \"Fake It Till You Make It\" Method:\n- Act confident even if you don't feel it\n- Your brain will catch up to your behavior\n- Practice bold eye contact in the mirror\n\n⚡ Energy Boosters:\n- Play your pump-up song before dates\n- Dance for 30 seconds to get energized  \n- Remember: You're not trying to impress them, you're deciding if you like them!\n      `\n    };\n    return lessons[lessonId] || \"Lesson content coming soon!\";\n  };\n\n  const sendMessage = () => {\n    if (!userInput.trim()) return;\n\n    // Add user message\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      speaker: 'user',\n      text: userInput,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Clear input and show typing\n    setUserInput('');\n    setIsTyping(true);\n\n    // Simulate typing delay\n    setTimeout(() => {\n      const response = getCoachResponse(userInput);\n      const coachMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        speaker: 'coach',\n        text: response.text,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, coachMessage]);\n      setIsTyping(false);\n\n      // Set lesson if provided\n      if (response.lesson) {\n        setCurrentLesson(response.lesson);\n      }\n    }, 1000 + Math.random() * 1000);\n  };\n\n  const handleOptionClick = (option: string) => {\n    setUserInput(option);\n    sendMessage();\n  };\n\n  useEffect(() => {\n    // Welcome message\n    if (coach && messages.length === 0) {\n      const welcomeMessage: Message = {\n        id: 'welcome',\n        speaker: 'coach',\n        text: `Hi! I'm ${coach.name}. ${coach.description} How can I help you today?`,\n        timestamp: new Date()\n      };\n      setMessages([welcomeMessage]);\n    }\n  }, [selectedCoach, coach, messages.length]);\n\n  return (\n    <div style={{ padding: '2rem', maxWidth: '1200px', margin: '0 auto' }}>\n      <h1>🎯 Interactive Coach Sessions</h1>\n      \n      {/* Coach Selection */}\n      <div style={{ marginBottom: '2rem' }}>\n        <h3>Choose Your Coach:</h3>\n        <div style={{ display: 'flex', gap: '1rem', marginBottom: '1rem' }}>\n          {COACHES.map(c => (\n            <button\n              key={c.id}\n              onClick={() => {\n                setSelectedCoach(c.id);\n                setMessages([]);\n                setCurrentLesson(null);\n              }}\n              style={{\n                padding: '0.5rem 1rem',\n                backgroundColor: selectedCoach === c.id ? '#FF6B9D' : '#f0f0f0',\n                color: selectedCoach === c.id ? 'white' : 'black',\n                border: 'none',\n                borderRadius: '8px',\n                cursor: 'pointer'\n              }}\n            >\n              {c.name}\n            </button>\n          ))}\n        </div>\n        {coach && (\n          <p style={{ color: '#666', fontStyle: 'italic' }}>\n            {coach.specialty} - {coach.description}\n          </p>\n        )}\n      </div>\n\n      <div style={{ display: 'flex', gap: '2rem' }}>\n        {/* Chat Interface */}\n        <div style={{ flex: '1' }}>\n          <div style={{\n            border: '1px solid #ddd',\n            borderRadius: '8px',\n            height: '400px',\n            overflowY: 'auto',\n            padding: '1rem',\n            backgroundColor: '#f9f9f9'\n          }}>\n            {messages.map(message => (\n              <div\n                key={message.id}\n                style={{\n                  marginBottom: '1rem',\n                  textAlign: message.speaker === 'user' ? 'right' : 'left'\n                }}\n              >\n                <div style={{\n                  display: 'inline-block',\n                  padding: '0.5rem 1rem',\n                  borderRadius: '12px',\n                  backgroundColor: message.speaker === 'user' ? '#007bff' : '#e9ecef',\n                  color: message.speaker === 'user' ? 'white' : 'black',\n                  maxWidth: '70%'\n                }}>\n                  <strong>{message.speaker === 'user' ? 'You' : coach?.name}:</strong> {message.text}\n                </div>\n              </div>\n            ))}\n            {isTyping && (\n              <div style={{ fontStyle: 'italic', color: '#666' }}>\n                {coach?.name} is typing...\n              </div>\n            )}\n          </div>\n\n          {/* Input Area */}\n          <div style={{ marginTop: '1rem', display: 'flex', gap: '0.5rem' }}>\n            <input\n              type=\"text\"\n              value={userInput}\n              onChange={(e) => setUserInput(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n              placeholder=\"Type your message...\"\n              style={{\n                flex: '1',\n                padding: '0.5rem',\n                border: '1px solid #ddd',\n                borderRadius: '4px'\n              }}\n            />\n            <button\n              onClick={sendMessage}\n              style={{\n                padding: '0.5rem 1rem',\n                backgroundColor: '#007bff',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            >\n              Send\n            </button>\n          </div>\n\n          {/* Quick Options */}\n          <div style={{ marginTop: '1rem' }}>\n            <p><strong>Try asking about:</strong></p>\n            <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\n              {['I feel nervous about dating', 'How do I start conversations?', 'I need confidence help', 'Body language tips'].map(option => (\n                <button\n                  key={option}\n                  onClick={() => handleOptionClick(option)}\n                  style={{\n                    padding: '0.25rem 0.5rem',\n                    backgroundColor: '#f8f9fa',\n                    border: '1px solid #ddd',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    fontSize: '0.8rem'\n                  }}\n                >\n                  {option}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Lesson Panel */}\n        {currentLesson && (\n          <div style={{ flex: '1', padding: '1rem', backgroundColor: '#f0f8ff', borderRadius: '8px' }}>\n            <h3>📚 Current Lesson</h3>\n            <pre style={{ whiteSpace: 'pre-wrap', fontSize: '0.9rem', lineHeight: '1.4' }}>\n              {getLessonContent(currentLesson)}\n            </pre>\n            <button\n              onClick={() => setCurrentLesson(null)}\n              style={{\n                marginTop: '1rem',\n                padding: '0.5rem 1rem',\n                backgroundColor: '#dc3545',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            >\n              Close Lesson\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FunctionalCoachDemo;\n"],"names":["FunctionalCoachDemo","selectedCoach","setSelectedCoach","useState","messages","setMessages","userInput","setUserInput","isTyping","setIsTyping","currentLesson","setCurrentLesson","coach","COACHES","find","c","id","sendMessage","trim","userMessage","Date","now","toString","speaker","text","timestamp","prev","setTimeout","response","message","toLowerCase","includes","options","lesson","getCoachResponse","coachMessage","Math","random","useEffect","length","welcomeMessage","concat","name","description","_jsxs","style","padding","maxWidth","margin","children","_jsx","marginBottom","display","gap","map","onClick","backgroundColor","color","border","borderRadius","cursor","fontStyle","specialty","flex","height","overflowY","textAlign","marginTop","type","value","onChange","e","target","onKeyPress","key","placeholder","flexWrap","option","handleOptionClick","fontSize","whiteSpace","lineHeight","lessonId","anxiety_management","conversation_mastery","body_language_basics","confidence_building"],"sourceRoot":""}