{"version":3,"file":"static/js/4473.1ffa2e8e.chunk.js","mappings":"6NAcA,MAAMA,GAAeC,EAAAA,EAAAA,oBAA4CC,GAEpDC,EAAmDC,IAAmB,IAAlB,SAAEC,GAAUD,EAC3E,MAAM,OAAEE,EAAM,MAAEC,EAAK,aAAEC,IAAiBC,EAAAA,EAAAA,WAExC,OACEC,EAAAA,EAAAA,MAACV,EAAaW,SAAQ,CAACC,MAAO,CAAEL,SAAQF,SAAA,CACrCA,GACDQ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYT,SACxBC,EAAOS,KAAKR,IACXM,EAAAA,EAAAA,KAACG,EAAAA,QAAc,CAEbT,MAAOA,EACPU,UAAWT,GAFND,EAAMW,YAUVC,EAAkBA,KAC7B,MAAMC,GAAUC,EAAAA,EAAAA,YAAWrB,GAC3B,IAAKoB,EACH,MAAM,IAAIE,MAAM,uDAElB,OAAOF,GAGT,G,yFC5BO,SAASX,IACd,MAAOH,EAAQiB,IAAaC,EAAAA,EAAAA,UAAkB,IAExCC,GAAYC,EAAAA,EAAAA,cAAY,SAACC,GAA2E,IAA1DC,EAAeC,UAAAC,OAAA,QAAA5B,IAAA2B,UAAA,GAAAA,UAAA,GAAG,OAAQE,EAAqBF,UAAAC,OAAA,QAAA5B,IAAA2B,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjG,MAAMX,EAAKc,KAAKC,MACV1B,GAAY2B,EAAAA,EAAAA,GAAA,CAChBhB,KACAS,UACAC,QACGG,GAGLR,GAAUY,GAAQ,IAAIA,EAAM5B,KAG5B,MAAM6B,EAAWL,EAAQK,UAAY,IAOrC,OANIA,EAAW,GACbC,YAAW,KACT7B,EAAaU,KACZkB,GAGElB,CACT,GAAG,IAEGV,GAAekB,EAAAA,EAAAA,cAAaR,IAChCK,GAAUY,GAAQA,EAAKG,QAAO/B,GAASA,EAAMW,KAAOA,QACnD,IAUH,MAAO,CAAEZ,SAAQC,MARH,CACZgC,QAASA,CAACZ,EAAiBI,IAA2BN,EAAUE,EAAS,UAAWI,GACpFS,MAAOA,CAACb,EAAiBI,IAA2BN,EAAUE,EAAS,QAASI,GAChFU,KAAMA,CAACd,EAAiBI,IAA2BN,EAAUE,EAAS,OAAQI,GAC9EW,QAASA,CAACf,EAAiBI,IAA2BN,EAAUE,EAAS,UAAWI,GACpFY,QAASnC,GAGaA,eAC1B,CAEA,S,+FC/CA,MAAMoC,EAAsC,CAC1CL,QAAS,0BACTC,MAAO,wBACPC,KAAM,yBACNC,QAAS,4BAGE1B,EAAuCZ,IAA2B,IAA1B,MAAEG,EAAK,UAAEU,GAAWb,EACvE,MAAOyC,EAAWC,IAAgBtB,EAAAA,EAAAA,WAAS,IAE3CuB,EAAAA,EAAAA,YAAU,KACRD,GAAa,KACZ,IAOH,OACEjC,EAAAA,EAAAA,KAAA,OACEC,UAAS,qEAAAkC,OACPH,EAAY,4BAA8B,0BAAyB,KAAAG,OACjEJ,EAAYrC,EAAMqB,MAAK,KAAAoB,OACN,aAAnBzC,EAAM0C,SAA0B,eACb,cAAnB1C,EAAM0C,SAA2B,gBACd,gBAAnB1C,EAAM0C,SAA6B,kBACnC,oBACC5C,UAEHK,EAAAA,EAAAA,MAAA,OAAKI,UAAU,oBAAmBT,SAAA,EAChCQ,EAAAA,EAAAA,KAAA,QAAAR,SAAOE,EAAMoB,WACbd,EAAAA,EAAAA,KAAA,UACEqC,QAnBcC,KACpBL,GAAa,GACbT,YAAW,IAAMpB,EAAUV,EAAMW,KAAK,MAkBhCJ,UAAU,yBACV,aAAW,UAAST,SACrB,eAQT,G","sources":["components/ui/toast-provider.tsx","components/ui/use-toast.ts","components/ui/toast.tsx"],"sourcesContent":["import React, { createContext, useContext, useRef, ReactNode } from 'react';\nimport useToast, { Toast, ToastOptions } from './use-toast';\nimport ToastComponent from './toast';\n\ninterface ToastContextType {\n  toast: {\n    success: (message: string, options?: ToastOptions) => number;\n    error: (message: string, options?: ToastOptions) => number;\n    info: (message: string, options?: ToastOptions) => number;\n    warning: (message: string, options?: ToastOptions) => number;\n    dismiss: (id: number) => void;\n  };\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\nexport const ToastProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const { toasts, toast, dismissToast } = useToast();\n  \n  return (\n    <ToastContext.Provider value={{ toast }}>\n      {children}\n      <div className=\"fixed z-50\">\n        {toasts.map((toast) => (\n          <ToastComponent\n            key={toast.id}\n            toast={toast}\n            onDismiss={dismissToast}\n          />\n        ))}\n      </div>\n    </ToastContext.Provider>\n  );\n};\n\nexport const useToastContext = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToastContext must be used within a ToastProvider');\n  }\n  return context;\n};\n\nexport default ToastProvider;\n","import { useState, useCallback } from 'react';\n\ntype ToastType = 'success' | 'error' | 'info' | 'warning';\n\nexport interface ToastOptions {\n  duration?: number;\n  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n}\n\nexport interface Toast extends ToastOptions {\n  id: number;\n  message: string;\n  type: ToastType;\n}\n\nexport function useToast() {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n  \n  const showToast = useCallback((message: string, type: ToastType = 'info', options: ToastOptions = {}) => {\n    const id = Date.now();\n    const toast: Toast = {\n      id,\n      message,\n      type,\n      ...options\n    };\n    \n    setToasts(prev => [...prev, toast]);\n    \n    // Auto-dismiss\n    const duration = options.duration || 3000;\n    if (duration > 0) {\n      setTimeout(() => {\n        dismissToast(id);\n      }, duration);\n    }\n    \n    return id;\n  }, []);\n  \n  const dismissToast = useCallback((id: number) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id));\n  }, []);\n  \n  const toast = {\n    success: (message: string, options?: ToastOptions) => showToast(message, 'success', options),\n    error: (message: string, options?: ToastOptions) => showToast(message, 'error', options),\n    info: (message: string, options?: ToastOptions) => showToast(message, 'info', options),\n    warning: (message: string, options?: ToastOptions) => showToast(message, 'warning', options),\n    dismiss: dismissToast,\n  };\n  \n  return { toasts, toast, dismissToast };\n}\n\nexport default useToast;\n","import React, { useEffect, useState } from 'react';\nimport { Toast as ToastType } from './use-toast';\n\ninterface ToastProps {\n  toast: ToastType;\n  onDismiss: (id: number) => void;\n}\n\nconst toastStyles: Record<string, string> = {\n  success: 'bg-green-500 text-white',\n  error: 'bg-red-500 text-white',\n  info: 'bg-blue-500 text-white',\n  warning: 'bg-yellow-500 text-black',\n};\n\nexport const ToastComponent: React.FC<ToastProps> = ({ toast, onDismiss }) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const handleDismiss = () => {\n    setIsVisible(false);\n    setTimeout(() => onDismiss(toast.id), 300);\n  };\n\n  return (\n    <div\n      className={`fixed p-4 rounded shadow-lg transition-all duration-300 transform ${\n        isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'\n      } ${toastStyles[toast.type]} ${\n        toast.position === 'top-left' ? 'top-4 left-4' :\n        toast.position === 'top-right' ? 'top-4 right-4' :\n        toast.position === 'bottom-left' ? 'bottom-4 left-4' :\n        'bottom-4 right-4'\n      }`}\n    >\n      <div className=\"flex items-center\">\n        <span>{toast.message}</span>\n        <button\n          onClick={handleDismiss}\n          className=\"ml-4 text-lg font-bold\"\n          aria-label=\"Dismiss\"\n        >\n          &times;\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ToastComponent;\n"],"names":["ToastContext","createContext","undefined","ToastProvider","_ref","children","toasts","toast","dismissToast","useToast","_jsxs","Provider","value","_jsx","className","map","ToastComponent","onDismiss","id","useToastContext","context","useContext","Error","setToasts","useState","showToast","useCallback","message","type","arguments","length","options","Date","now","_objectSpread","prev","duration","setTimeout","filter","success","error","info","warning","dismiss","toastStyles","isVisible","setIsVisible","useEffect","concat","position","onClick","handleDismiss"],"sourceRoot":""}