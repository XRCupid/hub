{"version":3,"file":"static/js/8989.92e691d5.chunk.js","mappings":"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","sources":["components/HumeRPMIntegration.tsx","utils/prosodyToBlendshapes.ts"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport { useVoice, type JSONMessage } from '@humeai/voice-react';\nimport { RPMAnimatedAvatar } from './RPMAnimatedAvatar';\nimport type { BlendShapeMap } from '../types/blendshapes';\nimport { prosodyToBlendshapes } from '../utils/prosodyToBlendshapes';\n\ninterface HumeRPMIntegrationProps {\n  avatarId: string;\n  position?: [number, number, number];\n  scale?: number;\n  showControls?: boolean;\n}\n\n// Map Hume prosody to viseme shapes\nfunction humeToVisemeShapes(prosody: any): Partial<BlendShapeMap> {\n  const shapes: Partial<BlendShapeMap> = {};\n  \n  if (!prosody) return shapes;\n  \n  // Basic mapping from prosody to mouth shapes\n  const { power = 0, pitch = 0, speed = 0 } = prosody;\n  \n  // Jaw opening based on power (volume)\n  shapes.jawOpen = Math.min(power * 0.8, 0.8);\n  \n  // Mouth shapes based on pitch and speed\n  if (pitch > 0.5) {\n    shapes.mouthSmileLeft = 0.3;\n    shapes.mouthSmileRight = 0.3;\n  }\n  \n  if (speed > 0.5) {\n    shapes.mouthFunnel = 0.2;\n  }\n  \n  // Add some variation for natural movement\n  const time = Date.now() * 0.001;\n  shapes.mouthLeft = Math.sin(time * 3) * 0.05;\n  shapes.mouthRight = Math.cos(time * 3) * 0.05;\n  \n  return shapes;\n}\n\nexport function HumeRPMIntegration({\n  avatarId,\n  position = [0, -0.8, 0],\n  scale = 1.2,\n  showControls = true\n}: HumeRPMIntegrationProps) {\n  const { messages, sendSessionSettings } = useVoice();\n  const [emotionShapes, setEmotionShapes] = useState<Partial<BlendShapeMap>>({});\n  const [visemeShapes, setVisemeShapes] = useState<Partial<BlendShapeMap>>({});\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const lastMessageRef = useRef<string>('');\n\n  // Configure Hume session\n  useEffect(() => {\n    sendSessionSettings({\n      context: {\n        text: \"You are a friendly conversational partner in a dating simulation. Be warm, engaging, and responsive.\"\n      }\n    });\n  }, [sendSessionSettings]);\n\n  // Process Hume messages\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    if (!lastMessage) return;\n\n    // Handle different message types\n    if (lastMessage.type === 'assistant_message') {\n      const content = lastMessage.message?.content;\n      if (content && content !== lastMessageRef.current) {\n        lastMessageRef.current = content;\n        console.log('[HumeRPM] Assistant speaking:', content);\n        setIsSpeaking(true);\n      }\n    } else if (lastMessage.type === 'assistant_end') {\n      console.log('[HumeRPM] Assistant finished speaking');\n      setIsSpeaking(false);\n      setVisemeShapes({});\n    }\n\n    // Extract prosody data if available\n    const prosody = (lastMessage as any).models?.prosody;\n    if (prosody && isSpeaking) {\n      const shapes = humeToVisemeShapes(prosody);\n      setVisemeShapes(shapes);\n    }\n\n    // Extract emotion data\n    const emotions = (lastMessage as any).models?.face?.predictions?.[0]?.emotions;\n    if (emotions) {\n      const emotionBlendshapes = prosodyToBlendshapes({ emotions });\n      setEmotionShapes(emotionBlendshapes);\n    }\n  }, [messages, isSpeaking]);\n\n  // Simulate viseme animation when speaking\n  useEffect(() => {\n    if (!isSpeaking) return;\n\n    const interval = setInterval(() => {\n      // Create dynamic mouth movements\n      const time = Date.now() * 0.001;\n      const baseJaw = 0.2 + Math.sin(time * 8) * 0.3;\n      \n      setVisemeShapes({\n        jawOpen: baseJaw,\n        mouthFunnel: Math.sin(time * 10) * 0.2,\n        mouthPucker: Math.cos(time * 7) * 0.1,\n        mouthLeft: Math.sin(time * 5) * 0.1,\n        mouthRight: Math.cos(time * 5) * 0.1,\n        mouthSmileLeft: 0.1,\n        mouthSmileRight: 0.1,\n        mouthStretchLeft: Math.sin(time * 6) * 0.1,\n        mouthStretchRight: Math.cos(time * 6) * 0.1,\n      });\n    }, 50);\n\n    return () => clearInterval(interval);\n  }, [isSpeaking]);\n\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      <Canvas camera={{ position: [0, 0, 2.5], fov: 45 }}>\n        <ambientLight intensity={0.6} />\n        <directionalLight position={[5, 5, 5]} intensity={0.5} />\n        <directionalLight position={[-5, 5, -5]} intensity={0.3} />\n        \n        <RPMAnimatedAvatar\n          avatarId={avatarId}\n          emotionShapes={emotionShapes}\n          visemeShapes={visemeShapes}\n          isSpeaking={isSpeaking}\n          position={position}\n          scale={scale}\n        />\n        \n        {showControls && <OrbitControls />}\n      </Canvas>\n      \n      {/* Debug info */}\n      <div style={{ \n        position: 'absolute', \n        bottom: 10, \n        left: 10, \n        background: 'rgba(0,0,0,0.7)', \n        color: 'white', \n        padding: '10px',\n        borderRadius: '5px',\n        fontSize: '12px'\n      }}>\n        <div>Speaking: {isSpeaking ? 'Yes' : 'No'}</div>\n        <div>Jaw Open: {(visemeShapes.jawOpen || 0).toFixed(2)}</div>\n        <div>Messages: {messages.length}</div>\n      </div>\n    </div>\n  );\n}\n","import { ARKitBlendshapeNamesList, type BlendshapeKey, type BlendShapeMap } from '../types/blendshapes';\n\nconst PROSODY_BLENDSHAPE_AMPLIFICATION_FACTOR = 7.0; // Increased for more dramatic expressions\n\n// Map each prosody emotion to blendshape contributions (values are multipliers for score)\nconst PROSODY_EMOTION_TO_BLENDSHAPE: Record<string, Partial<BlendShapeMap>> = {\n  joy: {\n    mouthSmileLeft: 1.2,\n    mouthSmileRight: 1.2,\n    cheekSquintLeft: 0.8,\n    cheekSquintRight: 0.8,\n    eyeWideLeft: 0.3,\n    eyeWideRight: 0.3,\n    browOuterUpLeft: 1.0, // Strong eyebrow raise for joy\n    browOuterUpRight: 1.0,\n    cheekPuff: 0.2, // Slight cheek puff for happiness\n  },\n  sadness: {\n    mouthFrownLeft: 1.2,\n    mouthFrownRight: 1.2,\n    browInnerUp: 1.0, // Strong inner brow raise (sad puppy eyes)\n    browDownLeft: 0.6,\n    browDownRight: 0.6,\n    eyeLookDownLeft: 0.4,\n    eyeLookDownRight: 0.4,\n    mouthLowerDownLeft: 0.5, // Droopy mouth corners\n    mouthLowerDownRight: 0.5,\n  },\n  anger: {\n    browDownLeft: 1.2, // Very strong brow furrow\n    browDownRight: 1.2,\n    browInnerUp: 0.3, // Slight inner brow tension\n    mouthPressLeft: 0.8,\n    mouthPressRight: 0.8,\n    eyeSquintLeft: 0.6,\n    eyeSquintRight: 0.6,\n    noseSneerLeft: 0.4, // Nostril flare for anger\n    noseSneerRight: 0.4,\n    mouthUpperUpLeft: 0.3, // Slight snarl\n    mouthUpperUpRight: 0.3,\n  },\n  surprise: {\n    jawOpen: 0.9,\n    eyeWideLeft: 1.2, // Very wide eyes\n    eyeWideRight: 1.2,\n    browOuterUpLeft: 1.2, // Dramatic eyebrow raise\n    browOuterUpRight: 1.2,\n    browInnerUp: 0.8, // Full brow raise\n    mouthFunnel: 0.3, // Slight \"O\" mouth shape\n  },\n  fear: {\n    mouthStretchLeft: 0.9,\n    mouthStretchRight: 0.9,\n    eyeWideLeft: 1.0,\n    eyeWideRight: 1.0,\n    browInnerUp: 1.0, // Strong worried brow\n    browOuterUpLeft: 0.7,\n    browOuterUpRight: 0.7,\n    jawOpen: 0.4, // Slight jaw drop in fear\n  },\n  disgust: {\n    noseSneerLeft: 0.8,\n    noseSneerRight: 0.8,\n    mouthUpperUpLeft: 0.7, // Upper lip curl\n    mouthUpperUpRight: 0.7,\n    eyeSquintLeft: 0.5,\n    eyeSquintRight: 0.5,\n    browDownLeft: 0.4,\n    browDownRight: 0.4,\n  },\n  contempt: {\n    mouthSmileLeft: 0.2, // Asymmetric smirk\n    mouthSmileRight: 0.7,\n    eyeSquintLeft: 0.3,\n    eyeSquintRight: 0.6,\n    browDownLeft: 0.2,\n    browDownRight: 0.5,\n  },\n  excitement: {\n    mouthSmileLeft: 1.0,\n    mouthSmileRight: 1.0,\n    eyeWideLeft: 0.8,\n    eyeWideRight: 0.8,\n    browOuterUpLeft: 0.9,\n    browOuterUpRight: 0.9,\n    cheekSquintLeft: 0.6,\n    cheekSquintRight: 0.6,\n    jawOpen: 0.3, // Slight excitement jaw drop\n  },\n  contentment: {\n    mouthSmileLeft: 0.4,\n    mouthSmileRight: 0.4,\n    eyeSquintLeft: 0.2, // Gentle squint for contentment\n    eyeSquintRight: 0.2,\n    browOuterUpLeft: 0.2,\n    browOuterUpRight: 0.2,\n  },\n  confusion: {\n    browDownLeft: 0.6,\n    browOuterUpRight: 0.8, // Asymmetric brow for confusion\n    browInnerUp: 0.4,\n    mouthPucker: 0.4,\n    eyeSquintLeft: 0.3,\n    jawOpen: 0.2,\n  },\n  calm: {\n    mouthSmileLeft: 0.15,\n    mouthSmileRight: 0.15,\n    eyeSquintLeft: 0.1, // Very subtle relaxed expression\n    eyeSquintRight: 0.1,\n  },\n  // Add more emotions that might come from Hume\n  amusement: {\n    mouthSmileLeft: 0.8,\n    mouthSmileRight: 0.8,\n    cheekSquintLeft: 0.7,\n    cheekSquintRight: 0.7,\n    browOuterUpLeft: 0.5,\n    browOuterUpRight: 0.5,\n  },\n  concentration: {\n    browDownLeft: 0.5,\n    browDownRight: 0.5,\n    browInnerUp: 0.3,\n    eyeSquintLeft: 0.4,\n    eyeSquintRight: 0.4,\n  },\n};\n\nexport const prosodyToBlendshapes = (prosodyScores: Record<string, number>): BlendShapeMap => {\n  console.log('[prosodyToBlendshapes] Received prosodyScore keys:', Object.keys(prosodyScores).join(', '));\n\n  // Start with all zeros  // Initialize blendshapes to 0\n  const blendshapes: BlendShapeMap = ARKitBlendshapeNamesList.reduce((acc: BlendShapeMap, shapeName: BlendshapeKey) => {\n    acc[shapeName] = 0;\n    return acc;\n  }, {} as BlendShapeMap);\n\n  console.log('[prosodyToBlendshapes] Processing emotions...');\n  for (const [emotion, score] of Object.entries(prosodyScores)) {\n    const weights = PROSODY_EMOTION_TO_BLENDSHAPE[emotion.toLowerCase()];\n    if (!weights) {\n      console.log(`[prosodyToBlendshapes] No weights found for emotion: ${emotion}. Skipping.`);\n      continue;\n    }\n    console.log(`[prosodyToBlendshapes] Processing emotion: ${emotion}, Score: ${score.toFixed(4)}`);\n    for (const [blend, weight] of Object.entries(weights)) {\n      const shapeKey = blend as BlendshapeKey;\n      const currentVal = blendshapes[shapeKey] || 0;\n      const addition = score * (weight as number) * PROSODY_BLENDSHAPE_AMPLIFICATION_FACTOR;\n      blendshapes[shapeKey] = Math.min(1, Math.max(0, currentVal + addition));\n      // Optional detailed logging for each blendshape change:\n      // console.log(`[prosodyToBlendshapes]   - Blendshape: ${shapeKey}, Weight: ${weight}, Addition: ${addition.toFixed(4)}, New Value: ${blendshapes[shapeKey].toFixed(4)}`);\n    }\n  }\n  console.log(`[prosodyToBlendshapes] Final combined blendshapes count: ${Object.keys(blendshapes).length}, sum of values: ${Object.values(blendshapes).reduce((s, v) => s + v, 0).toFixed(4)}`);\n  return blendshapes;\n}\n"],"names":["HumeRPMIntegration","_ref","avatarId","position","scale","showControls","messages","sendSessionSettings","useVoice","emotionShapes","setEmotionShapes","useState","visemeShapes","setVisemeShapes","isSpeaking","setIsSpeaking","lastMessageRef","useRef","useEffect","context","text","_models","_models2","_models2$face","_models2$face$predict","_models2$face$predict2","lastMessage","length","type","_lastMessage$message","content","message","current","console","log","prosody","models","shapes","power","pitch","speed","jawOpen","Math","min","mouthSmileLeft","mouthSmileRight","mouthFunnel","time","Date","now","mouthLeft","sin","mouthRight","cos","humeToVisemeShapes","emotions","face","predictions","emotionBlendshapes","prosodyToBlendshapes","interval","setInterval","baseJaw","mouthPucker","mouthStretchLeft","mouthStretchRight","clearInterval","_jsxs","style","width","height","children","Canvas","camera","fov","_jsx","intensity","RPMAnimatedAvatar","OrbitControls","bottom","left","background","color","padding","borderRadius","fontSize","toFixed","PROSODY_EMOTION_TO_BLENDSHAPE","joy","cheekSquintLeft","cheekSquintRight","eyeWideLeft","eyeWideRight","browOuterUpLeft","browOuterUpRight","cheekPuff","sadness","mouthFrownLeft","mouthFrownRight","browInnerUp","browDownLeft","browDownRight","eyeLookDownLeft","eyeLookDownRight","mouthLowerDownLeft","mouthLowerDownRight","anger","mouthPressLeft","mouthPressRight","eyeSquintLeft","eyeSquintRight","noseSneerLeft","noseSneerRight","mouthUpperUpLeft","mouthUpperUpRight","surprise","fear","disgust","contempt","excitement","contentment","confusion","calm","amusement","concentration","prosodyScores","Object","keys","join","blendshapes","ARKitBlendshapeNamesList","reduce","acc","shapeName","emotion","score","entries","weights","toLowerCase","concat","blend","weight","shapeKey","currentVal","addition","max","values","s","v"],"sourceRoot":""}