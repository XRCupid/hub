{"version":3,"file":"static/js/879.753e33ad.chunk.js","mappings":"iKAeO,SAASA,IACd,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAkB,IAExCC,GAAYC,EAAAA,EAAAA,cAAY,SAACC,GAA2E,IAA1DC,EAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OAAQG,EAAqBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjG,MAAMI,EAAKC,KAAKC,MACVC,GAAYC,EAAAA,EAAAA,GAAA,CAChBJ,KACAN,UACAC,QACGI,GAGLT,GAAUe,GAAQ,IAAIA,EAAMF,KAG5B,MAAMG,EAAWP,EAAQO,UAAY,IAOrC,OANIA,EAAW,GACbC,YAAW,KACTC,EAAaR,KACZM,GAGEN,CACT,GAAG,IAEGQ,GAAef,EAAAA,EAAAA,cAAaO,IAChCV,GAAUe,GAAQA,EAAKI,QAAON,GAASA,EAAMH,KAAOA,QACnD,IAUH,MAAO,CAAEX,SAAQc,MARH,CACZO,QAASA,CAAChB,EAAiBK,IAA2BP,EAAUE,EAAS,UAAWK,GACpFY,MAAOA,CAACjB,EAAiBK,IAA2BP,EAAUE,EAAS,QAASK,GAChFa,KAAMA,CAAClB,EAAiBK,IAA2BP,EAAUE,EAAS,OAAQK,GAC9Ec,QAASA,CAACnB,EAAiBK,IAA2BP,EAAUE,EAAS,UAAWK,GACpFe,QAASN,GAGaA,eAC1B,CAEA,S","sources":["components/ui/use-toast.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\n\ntype ToastType = 'success' | 'error' | 'info' | 'warning';\n\nexport interface ToastOptions {\n  duration?: number;\n  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n}\n\nexport interface Toast extends ToastOptions {\n  id: number;\n  message: string;\n  type: ToastType;\n}\n\nexport function useToast() {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n  \n  const showToast = useCallback((message: string, type: ToastType = 'info', options: ToastOptions = {}) => {\n    const id = Date.now();\n    const toast: Toast = {\n      id,\n      message,\n      type,\n      ...options\n    };\n    \n    setToasts(prev => [...prev, toast]);\n    \n    // Auto-dismiss\n    const duration = options.duration || 3000;\n    if (duration > 0) {\n      setTimeout(() => {\n        dismissToast(id);\n      }, duration);\n    }\n    \n    return id;\n  }, []);\n  \n  const dismissToast = useCallback((id: number) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id));\n  }, []);\n  \n  const toast = {\n    success: (message: string, options?: ToastOptions) => showToast(message, 'success', options),\n    error: (message: string, options?: ToastOptions) => showToast(message, 'error', options),\n    info: (message: string, options?: ToastOptions) => showToast(message, 'info', options),\n    warning: (message: string, options?: ToastOptions) => showToast(message, 'warning', options),\n    dismiss: dismissToast,\n  };\n  \n  return { toasts, toast, dismissToast };\n}\n\nexport default useToast;\n"],"names":["useToast","toasts","setToasts","useState","showToast","useCallback","message","type","arguments","length","undefined","options","id","Date","now","toast","_objectSpread","prev","duration","setTimeout","dismissToast","filter","success","error","info","warning","dismiss"],"sourceRoot":""}