{"version":3,"file":"static/js/6067.3ee56646.chunk.js","mappings":"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","sources":["components/ProceduralAvatar.tsx"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\ninterface ProceduralAvatarProps {\n  gender: 'male' | 'female';\n  skinTone: string;\n  hairColor: string;\n  hairStyle: 'short' | 'medium' | 'long' | 'bald';\n  clothingColor: string;\n  position?: [number, number, number];\n  blendShapes?: any;\n}\n\nexport const ProceduralAvatar: React.FC<ProceduralAvatarProps> = ({\n  gender,\n  skinTone,\n  hairColor,\n  hairStyle,\n  clothingColor,\n  position = [0, 0, 0],\n  blendShapes = {}\n}) => {\n  const groupRef = useRef<THREE.Group>(null);\n  const headRef = useRef<THREE.Mesh>(null);\n  \n  // Generate avatar colors\n  const skinColor = useMemo(() => {\n    const tones: Record<string, string> = {\n      light: '#fdbcb4',\n      medium: '#d4a574',\n      dark: '#8b6f47',\n      pale: '#ffe0bd',\n      tan: '#cd853f'\n    };\n    return tones[skinTone] || tones.medium;\n  }, [skinTone]);\n\n  // Body proportions based on gender\n  const proportions = useMemo(() => {\n    return gender === 'female' ? {\n      shoulderWidth: 0.35,\n      hipWidth: 0.4,\n      chestSize: 0.15,\n      waistSize: 0.3,\n      headSize: 0.25\n    } : {\n      shoulderWidth: 0.45,\n      hipWidth: 0.35,\n      chestSize: 0.1,\n      waistSize: 0.35,\n      headSize: 0.28\n    };\n  }, [gender]);\n\n  // Animation\n  useFrame((state) => {\n    if (groupRef.current) {\n      // Breathing animation\n      groupRef.current.scale.y = 1 + Math.sin(state.clock.elapsedTime * 2) * 0.01;\n      \n      // Subtle idle movement\n      groupRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.05;\n    }\n    \n    // Apply blend shapes for expressions\n    if (headRef.current && blendShapes) {\n      // Simulate blend shape effects with scale/position adjustments\n      if (blendShapes.mouthSmile) {\n        // Smile effect\n      }\n      if (blendShapes.eyesClosed) {\n        // Blink effect\n      }\n    }\n  });\n\n  return (\n    <group ref={groupRef} position={position}>\n      {/* Head */}\n      <mesh ref={headRef} position={[0, 1.6, 0]}>\n        <sphereGeometry args={[proportions.headSize, 16, 16]} />\n        <meshStandardMaterial color={skinColor} />\n      </mesh>\n      \n      {/* Eyes */}\n      <mesh position={[-0.08, 1.65, 0.2]}>\n        <sphereGeometry args={[0.03, 8, 8]} />\n        <meshStandardMaterial color=\"#333\" />\n      </mesh>\n      <mesh position={[0.08, 1.65, 0.2]}>\n        <sphereGeometry args={[0.03, 8, 8]} />\n        <meshStandardMaterial color=\"#333\" />\n      </mesh>\n      \n      {/* Hair */}\n      {hairStyle !== 'bald' && (\n        <mesh position={[0, 1.75, 0]}>\n          <sphereGeometry args={[\n            proportions.headSize + 0.05,\n            16,\n            16,\n            0,\n            Math.PI * 2,\n            0,\n            hairStyle === 'short' ? Math.PI * 0.4 : \n            hairStyle === 'medium' ? Math.PI * 0.5 : \n            Math.PI * 0.6\n          ]} />\n          <meshStandardMaterial color={hairColor} />\n        </mesh>\n      )}\n      \n      {/* Body/Torso */}\n      <mesh position={[0, 1, 0]}>\n        <cylinderGeometry args={[\n          proportions.shoulderWidth,\n          proportions.hipWidth,\n          0.8,\n          8\n        ]} />\n        <meshStandardMaterial color={clothingColor} />\n      </mesh>\n      \n      {/* Arms */}\n      <mesh position={[-proportions.shoulderWidth - 0.15, 1, 0]} rotation={[0, 0, -0.3]}>\n        <cylinderGeometry args={[0.08, 0.06, 0.7, 8]} />\n        <meshStandardMaterial color={skinColor} />\n      </mesh>\n      <mesh position={[proportions.shoulderWidth + 0.15, 1, 0]} rotation={[0, 0, 0.3]}>\n        <cylinderGeometry args={[0.08, 0.06, 0.7, 8]} />\n        <meshStandardMaterial color={skinColor} />\n      </mesh>\n      \n      {/* Legs */}\n      <mesh position={[-0.15, 0.2, 0]}>\n        <cylinderGeometry args={[0.1, 0.08, 0.8, 8]} />\n        <meshStandardMaterial color=\"#2c3e50\" />\n      </mesh>\n      <mesh position={[0.15, 0.2, 0]}>\n        <cylinderGeometry args={[0.1, 0.08, 0.8, 8]} />\n        <meshStandardMaterial color=\"#2c3e50\" />\n      </mesh>\n    </group>\n  );\n};\n\n// Avatar configuration generator\nexport const generateAvatarConfig = (preferences: {\n  gender?: 'male' | 'female';\n  ethnicity?: string;\n  style?: string;\n  age?: string;\n}) => {\n  // Skin tone based on ethnicity\n  const skinTones: Record<string, string> = {\n    caucasian: 'light',\n    asian: 'pale',\n    african: 'dark',\n    hispanic: 'medium',\n    middleEastern: 'tan'\n  };\n  \n  // Hair colors\n  const hairColors = ['#2c3e50', '#8b4513', '#daa520', '#dc143c', '#696969'];\n  \n  // Clothing colors based on style\n  const clothingColors: Record<string, string> = {\n    professional: '#2c3e50',\n    casual: '#3498db',\n    creative: '#9b59b6',\n    elegant: '#c0392b',\n    athletic: '#27ae60'\n  };\n  \n  return {\n    gender: preferences.gender || 'female',\n    skinTone: skinTones[preferences.ethnicity || 'caucasian'] || 'medium',\n    hairColor: hairColors[Math.floor(Math.random() * hairColors.length)],\n    hairStyle: ['short', 'medium', 'long'][Math.floor(Math.random() * 3)] as any,\n    clothingColor: clothingColors[preferences.style || 'casual'] || '#3498db'\n  };\n};\n"],"names":["ProceduralAvatar","_ref","gender","skinTone","hairColor","hairStyle","clothingColor","position","blendShapes","groupRef","useRef","headRef","skinColor","useMemo","tones","light","medium","dark","pale","tan","proportions","shoulderWidth","hipWidth","chestSize","waistSize","headSize","useFrame","state","current","scale","y","Math","sin","clock","elapsedTime","rotation","mouthSmile","eyesClosed","_jsxs","ref","children","_jsx","args","color","PI","generateAvatarConfig","preferences","hairColors","caucasian","asian","african","hispanic","middleEastern","ethnicity","floor","random","length","professional","casual","creative","elegant","athletic","style"],"sourceRoot":""}