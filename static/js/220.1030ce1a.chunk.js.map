{"version":3,"file":"static/js/220.1030ce1a.chunk.js","mappings":"6PA0DA,EApD2BA,EAAAA,YAAiB,CAAAC,EAAgEC,KAAS,IAAxE,UAAEC,EAAS,YAAEC,EAAW,cAAEC,EAAa,SAAEC,GAAoBL,EAAPM,GAAKC,EAAAA,EAAAA,GAAAP,EAAAQ,GACtG,MAAM,MAAEC,EAAK,MAAEC,IAAUC,EAAAA,EAAAA,GAAQT,GAE3BU,IADYC,EAAAA,EAAAA,WACGA,EAAAA,EAAAA,WA0CrB,OAvCAd,EAAAA,WAAgB,KACVU,IACFA,EAAMK,UAAUC,IACVA,EAAMC,QAAUD,EAAME,wBACxBL,EAAaM,QAAUH,MAIvBX,GACFA,EAAc,CAAEK,UAEdJ,GACFA,OAGH,CAACI,EAAOL,EAAeC,KAG1Bc,EAAAA,EAAAA,IAAS,KAQP,GANIlB,GAAOA,EAAIiB,UACbjB,EAAIiB,QAAQE,SAASC,EAAI,EACzBpB,EAAIiB,QAAQE,SAASE,EAAI,EACzBrB,EAAIiB,QAAQE,SAASG,EAAI,IAGtBX,EAAaM,QAAS,OAC3B,MAAMM,EAAOZ,EAAaM,QAAQD,sBAC5BQ,EAAab,EAAaM,QAAQQ,sBACpCF,GAAQC,GAActB,GACxBwB,OAAOC,QAAQzB,GAAa0B,SAAQC,IAAoB,IAAlBC,EAAMC,GAAMF,EAChD,MAAMG,EAAMT,EAAKO,QACLG,IAARD,IACFR,EAAWQ,GAAOD,GAAS,UAOjCG,EAAAA,EAAAA,KAAA,SAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAOnC,IAAKA,GAASK,GAAK,IAAA+B,UACxBF,EAAAA,EAAAA,KAAA,aAAWG,OAAQ7B,S","sources":["components/SimulationAvatar3D.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport { useFrame, useLoader } from '@react-three/fiber';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { useGLTF } from '@react-three/drei';\n\n// This component is ONLY for use inside <Canvas>!\nconst SimulationAvatar3D = React.forwardRef(({ avatarUrl, blendShapes, onModelLoaded, onLoaded, ...props }, ref) => {\n  const { scene, nodes } = useGLTF(avatarUrl);\n  const avatarRef = useRef();\n  const morphMeshRef = useRef();\n\n  // Set up morph targets on load\n  React.useEffect(() => {\n    if (scene) {\n      scene.traverse((child) => {\n        if (child.isMesh && child.morphTargetDictionary) {\n          morphMeshRef.current = child;\n        }\n      });\n      \n      if (onModelLoaded) {\n        onModelLoaded({ scene });\n      }\n      if (onLoaded) {\n        onLoaded();\n      }\n    }\n  }, [scene, onModelLoaded, onLoaded]);\n\n  // Apply blendshapes every frame\n  useFrame(() => {\n    // Lock rotation to prevent any spinning\n    if (ref && ref.current) {\n      ref.current.rotation.y = 0;\n      ref.current.rotation.x = 0;\n      ref.current.rotation.z = 0;\n    }\n    \n    if (!morphMeshRef.current) return;\n    const dict = morphMeshRef.current.morphTargetDictionary;\n    const influences = morphMeshRef.current.morphTargetInfluences;\n    if (dict && influences && blendShapes) {\n      Object.entries(blendShapes).forEach(([name, value]) => {\n        const idx = dict[name];\n        if (idx !== undefined) {\n          influences[idx] = value || 0;\n        }\n      });\n    }\n  });\n\n  return (\n    <group ref={ref} {...props}>\n      <primitive object={scene} />\n    </group>\n  );\n});\n\nexport default SimulationAvatar3D;\n"],"names":["React","_ref","ref","avatarUrl","blendShapes","onModelLoaded","onLoaded","props","_objectWithoutProperties","_excluded","scene","nodes","useGLTF","morphMeshRef","useRef","traverse","child","isMesh","morphTargetDictionary","current","useFrame","rotation","y","x","z","dict","influences","morphTargetInfluences","Object","entries","forEach","_ref2","name","value","idx","undefined","_jsx","_objectSpread","children","object"],"sourceRoot":""}