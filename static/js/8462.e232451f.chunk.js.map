{"version":3,"file":"static/js/8462.e232451f.chunk.js","mappings":"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","sources":["webpack://hub/./src/components/NPCSpeedDatingModule.css?09f6","components/NPCSpeedDatingModule.tsx","webpack://hub/./src/components/NPCDateCall.css?ebc4","components/NPCDateCall.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, { useState, useEffect } from 'react';\nimport NPCDateCall from './NPCDateCall';\nimport './NPCSpeedDatingModule.css';\n\ninterface NPCProfile {\n  id: string;\n  name: string;\n  archetype: string;\n  description: string;\n  image: string;\n  chemistry: number;\n  conversationStyle: string;\n}\n\nconst NPC_PROFILES: NPCProfile[] = [\n  {\n    id: 'sofia',\n    name: 'Sofia',\n    archetype: 'Adventurous Artist',\n    description: 'Creative soul who loves exploring galleries and hidden cafes',\n    image: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=300',\n    chemistry: 0,\n    conversationStyle: 'playful and creative'\n  },\n  {\n    id: 'maya',\n    name: 'Maya',\n    archetype: 'Tech Entrepreneur',\n    description: 'Startup founder passionate about AI and sustainability',\n    image: 'https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?w=300',\n    chemistry: 0,\n    conversationStyle: 'intellectual and driven'\n  },\n  {\n    id: 'luna',\n    name: 'Luna',\n    archetype: 'Wellness Coach',\n    description: 'Yoga instructor focused on mindfulness and healthy living',\n    image: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=300',\n    chemistry: 0,\n    conversationStyle: 'calm and insightful'\n  },\n  {\n    id: 'ava',\n    name: 'Ava',\n    archetype: 'Travel Blogger',\n    description: 'Globetrotter with stories from every continent',\n    image: 'https://images.unsplash.com/photo-1517841905240-472988babdf9?w=300',\n    chemistry: 0,\n    conversationStyle: 'adventurous and spontaneous'\n  }\n];\n\nconst NPCSpeedDatingModule: React.FC = () => {\n  const [currentNPC, setCurrentNPC] = useState<NPCProfile | null>(null);\n  const [matchHistory, setMatchHistory] = useState<NPCProfile[]>([]);\n  const [isInDate, setIsInDate] = useState(false);\n  const [timeRemaining, setTimeRemaining] = useState(180); // 3 minutes per date\n  const [showResults, setShowResults] = useState(false);\n  const [userName, setUserName] = useState('');\n  const [hasStarted, setHasStarted] = useState(false);\n\n  // Timer for speed dating rounds\n  useEffect(() => {\n    if (isInDate && timeRemaining > 0) {\n      const timer = setTimeout(() => setTimeRemaining(prev => prev - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (isInDate && timeRemaining === 0) {\n      endCurrentDate();\n    }\n  }, [isInDate, timeRemaining]);\n\n  const startSpeedDating = () => {\n    if (!userName.trim()) return;\n    setHasStarted(true);\n    startNextDate();\n  };\n\n  const startNextDate = () => {\n    const availableNPCs = NPC_PROFILES.filter(\n      npc => !matchHistory.find(match => match.id === npc.id)\n    );\n    \n    if (availableNPCs.length === 0) {\n      setShowResults(true);\n      return;\n    }\n    \n    const nextNPC = availableNPCs[Math.floor(Math.random() * availableNPCs.length)];\n    setCurrentNPC(nextNPC);\n    setIsInDate(true);\n    setTimeRemaining(180);\n  };\n\n  const endCurrentDate = () => {\n    if (currentNPC) {\n      // Simulate chemistry score based on interaction\n      const chemistryScore = Math.floor(Math.random() * 30) + 70; // 70-100\n      const npcWithChemistry = { ...currentNPC, chemistry: chemistryScore };\n      setMatchHistory(prev => [...prev, npcWithChemistry]);\n    }\n    setIsInDate(false);\n    setCurrentNPC(null);\n  };\n\n  const handleDateEnd = () => {\n    endCurrentDate();\n    if (matchHistory.length + 1 < NPC_PROFILES.length) {\n      setTimeout(startNextDate, 2000);\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getTopMatches = () => {\n    return [...matchHistory]\n      .sort((a, b) => b.chemistry - a.chemistry)\n      .slice(0, 3);\n  };\n\n  if (showResults) {\n    const topMatches = getTopMatches();\n    \n    return (\n      <div className=\"speed-dating-results\">\n        <div className=\"results-card riso-card\">\n          <h2 className=\"results-title riso-text-offset\">Your Speed Dating Results!</h2>\n          \n          <div className=\"matches-section\">\n            <h3>Top Matches 💕</h3>\n            <div className=\"top-matches\">\n              {topMatches.map((match, index) => (\n                <div key={match.id} className=\"match-card\">\n                  <div className=\"match-rank\">#{index + 1}</div>\n                  <img src={match.image} alt={match.name} className=\"match-avatar\" />\n                  <h4>{match.name}</h4>\n                  <p className=\"match-archetype\">{match.archetype}</p>\n                  <div className=\"chemistry-score\">\n                    <span className=\"chemistry-label\">Chemistry</span>\n                    <div className=\"chemistry-bar\">\n                      <div \n                        className=\"chemistry-fill\"\n                        style={{ width: `${match.chemistry}%` }}\n                      />\n                    </div>\n                    <span className=\"chemistry-percent\">{match.chemistry}%</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <button \n            className=\"riso-button primary\"\n            onClick={() => window.location.reload()}\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!hasStarted) {\n    return (\n      <div className=\"speed-dating-module\">\n        <div className=\"intro-card riso-card\">\n          <h1 className=\"module-title riso-text-offset\">NPC Speed Dating</h1>\n          <p className=\"module-subtitle\">Meet 4 unique AI personalities in 3-minute dates!</p>\n          \n          <div className=\"npc-preview\">\n            {NPC_PROFILES.map(npc => (\n              <div key={npc.id} className=\"npc-preview-card\">\n                <img src={npc.image} alt={npc.name} />\n                <h4>{npc.name}</h4>\n                <p>{npc.archetype}</p>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"start-section\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter your name\"\n              value={userName}\n              onChange={(e) => setUserName(e.target.value)}\n              className=\"riso-input\"\n              onKeyPress={(e) => e.key === 'Enter' && startSpeedDating()}\n            />\n            <button \n              className=\"riso-button primary\"\n              onClick={startSpeedDating}\n              disabled={!userName.trim()}\n            >\n              Start Speed Dating\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isInDate && currentNPC) {\n    return (\n      <div className=\"speed-dating-active\">\n        <div className=\"date-header riso-card\">\n          <div className=\"date-info\">\n            <h3>Speed Dating with {currentNPC.name}</h3>\n            <p>{currentNPC.archetype} - {currentNPC.conversationStyle}</p>\n          </div>\n          <div className=\"timer\">\n            <span className=\"timer-label\">Time Remaining</span>\n            <span className=\"timer-value\">{formatTime(timeRemaining)}</span>\n          </div>\n          <div className=\"date-progress\">\n            Date {matchHistory.length + 1} of {NPC_PROFILES.length}\n          </div>\n        </div>\n        \n        <NPCDateCall\n          npcName={currentNPC.name}\n          npcArchetype={currentNPC.archetype}\n          userName={userName}\n          onCallEnd={handleDateEnd}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"speed-dating-loading\">\n      <div className=\"riso-card\">\n        <h3>Preparing next date...</h3>\n        <div className=\"loading-spinner\" />\n      </div>\n    </div>\n  );\n};\n\nexport default NPCSpeedDatingModule;\n","// extracted by mini-css-extract-plugin\nexport default {};","import React, { useState, useEffect, useRef } from 'react';\nimport { HumeVoiceService } from '../services/humeVoiceService';\nimport { ML5FaceMeshService } from '../services/ML5FaceMeshService';\nimport { PostureTrackingService } from '../services/PostureTrackingService';\nimport './NPCDateCall.css';\n\ninterface NPCDateCallProps {\n  npcName: string;\n  npcArchetype: string;\n  userName: string;\n  onCallEnd: () => void;\n}\n\nconst NPCDateCall: React.FC<NPCDateCallProps> = ({ \n  npcName, \n  npcArchetype, \n  userName,\n  onCallEnd \n}) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [userEmotions, setUserEmotions] = useState<any>({});\n  const [conversationScore, setConversationScore] = useState(0);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const humeService = useRef<HumeVoiceService | null>(null);\n  const faceMeshService = useRef<ML5FaceMeshService | null>(null);\n  const postureService = useRef<PostureTrackingService | null>(null);\n\n  useEffect(() => {\n    initializeCall();\n    return () => {\n      cleanupServices();\n    };\n  }, []);\n\n  const initializeCall = async () => {\n    try {\n      // Initialize video stream\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: true, \n        audio: true \n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n\n      // Initialize tracking services\n      faceMeshService.current = new ML5FaceMeshService();\n      postureService.current = new PostureTrackingService();\n      \n      // Initialize Hume voice service\n      humeService.current = new HumeVoiceService();\n      \n      // Simulate emotion tracking for demo\n      const emotionCheckInterval = setInterval(() => {\n        // Simulate emotion values for demo purposes\n        const simulatedEmotions = {\n          joy: Math.random() * 0.5 + 0.3,\n          interest: Math.random() * 0.4 + 0.4,\n          excitement: Math.random() * 0.3 + 0.2\n        };\n        setUserEmotions(simulatedEmotions);\n        updateConversationScore(simulatedEmotions);\n      }, 2000);\n      \n      // Store interval for cleanup\n      (window as any).emotionInterval = emotionCheckInterval;\n\n      // Simulate NPC personality based on archetype\n      const npcPersonality = getNPCPersonality(npcArchetype);\n      \n      setIsLoading(false);\n      setIsConnected(true);\n      \n      // Welcome message from NPC\n      simulateNPCMessage(`Hi ${userName}! I'm ${npcName}. ${npcPersonality.greeting}`);\n      \n    } catch (error) {\n      console.error('Error initializing NPC date call:', error);\n      setIsLoading(false);\n    }\n  };\n\n  const getNPCPersonality = (archetype: string) => {\n    const personalities: Record<string, any> = {\n      'Adventurous Artist': {\n        greeting: \"I just got back from this amazing street art festival. What kind of creative things are you into?\",\n        topics: ['art', 'travel', 'creativity', 'experiences'],\n        responseStyle: 'enthusiastic and imaginative'\n      },\n      'Tech Entrepreneur': {\n        greeting: \"I've been working on this fascinating AI project. Are you interested in technology?\",\n        topics: ['innovation', 'startups', 'future', 'technology'],\n        responseStyle: 'analytical and forward-thinking'\n      },\n      'Wellness Coach': {\n        greeting: \"You have such positive energy! What do you do to stay centered?\",\n        topics: ['wellness', 'mindfulness', 'health', 'balance'],\n        responseStyle: 'calm and supportive'\n      },\n      'Travel Blogger': {\n        greeting: \"I love meeting new people! What's the most interesting place you've been to?\",\n        topics: ['travel', 'culture', 'adventure', 'stories'],\n        responseStyle: 'curious and adventurous'\n      }\n    };\n    \n    return personalities[archetype] || personalities['Adventurous Artist'];\n  };\n\n  const updateConversationScore = (emotions: any) => {\n    // Calculate score based on positive emotions\n    const positiveEmotions = ['joy', 'interest', 'excitement', 'amusement'];\n    const positiveScore = positiveEmotions.reduce((sum, emotion) => \n      sum + (emotions[emotion] || 0), 0\n    );\n    \n    setConversationScore(prev => Math.min(100, prev + positiveScore * 10));\n  };\n\n  const simulateNPCMessage = (message: string) => {\n    // In a real implementation, this would use Hume's voice API\n    console.log(`${npcName}: ${message}`);\n  };\n\n  const cleanupServices = () => {\n    if (videoRef.current?.srcObject) {\n      const stream = videoRef.current.srcObject as MediaStream;\n      stream.getTracks().forEach(track => track.stop());\n    }\n    \n    // Clean up emotion check interval\n    if ((window as any).emotionInterval) {\n      clearInterval((window as any).emotionInterval);\n    }\n    \n    faceMeshService.current = null;\n    postureService.current = null;\n    humeService.current?.disconnect();\n    humeService.current = null;\n  };\n\n  const endCall = () => {\n    cleanupServices();\n    onCallEnd();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"npc-date-call loading\">\n        <div className=\"loading-content\">\n          <div className=\"loading-spinner\" />\n          <p>Connecting with {npcName}...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"npc-date-call\">\n      <div className=\"call-container\">\n        <div className=\"video-section\">\n          <div className=\"npc-video\">\n            <div className=\"npc-avatar-placeholder\">\n              <img \n                src={`https://ui-avatars.com/api/?name=${npcName}&size=200&background=FF6B6B&color=fff`} \n                alt={npcName}\n              />\n              <div className=\"npc-speaking-indicator\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n            <div className=\"npc-info\">\n              <h3>{npcName}</h3>\n              <p>{npcArchetype}</p>\n            </div>\n          </div>\n          \n          <div className=\"user-video\">\n            <video \n              ref={videoRef} \n              autoPlay \n              muted \n              playsInline\n              className=\"user-video-element\"\n            />\n            <div className=\"user-info\">\n              <h4>{userName}</h4>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"interaction-panel\">\n          <div className=\"emotion-display\">\n            <h4>Your Vibe</h4>\n            <div className=\"emotion-indicators\">\n              {Object.entries(userEmotions).slice(0, 3).map(([emotion, value]) => (\n                <div key={emotion} className=\"emotion-item\">\n                  <span className=\"emotion-label\">{emotion}</span>\n                  <div className=\"emotion-bar\">\n                    <div \n                      className=\"emotion-fill\"\n                      style={{ width: `${(value as number) * 100}%` }}\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"chemistry-meter\">\n            <h4>Chemistry Level</h4>\n            <div className=\"chemistry-visual\">\n              <div \n                className=\"chemistry-progress\"\n                style={{ height: `${conversationScore}%` }}\n              />\n              <span className=\"chemistry-value\">{Math.round(conversationScore)}%</span>\n            </div>\n          </div>\n          \n          <div className=\"conversation-hints\">\n            <h4>Conversation Tips</h4>\n            <ul>\n              <li>Ask about their {npcArchetype.toLowerCase()} experiences</li>\n              <li>Share a personal story</li>\n              <li>Find common interests</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"call-controls\">\n        <button \n          className=\"end-call-button\"\n          onClick={endCall}\n        >\n          End Date\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default NPCDateCall;\n"],"names":["NPC_PROFILES","id","name","archetype","description","image","chemistry","conversationStyle","NPCSpeedDatingModule","currentNPC","setCurrentNPC","useState","matchHistory","setMatchHistory","isInDate","setIsInDate","timeRemaining","setTimeRemaining","showResults","setShowResults","userName","setUserName","hasStarted","setHasStarted","useEffect","timer","setTimeout","prev","clearTimeout","endCurrentDate","startSpeedDating","trim","startNextDate","availableNPCs","filter","npc","find","match","length","nextNPC","Math","floor","random","chemistryScore","npcWithChemistry","_objectSpread","handleDateEnd","formatTime","seconds","mins","secs","concat","toString","padStart","topMatches","sort","a","b","slice","_jsx","className","children","_jsxs","map","index","src","alt","style","width","onClick","window","location","reload","NPCDateCall","npcName","npcArchetype","onCallEnd","type","placeholder","value","onChange","e","target","onKeyPress","key","disabled","_ref","isConnected","setIsConnected","isLoading","setIsLoading","userEmotions","setUserEmotions","conversationScore","setConversationScore","videoRef","useRef","humeService","faceMeshService","postureService","initializeCall","cleanupServices","async","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","ML5FaceMeshService","PostureTrackingService","HumeVoiceService","emotionCheckInterval","setInterval","simulatedEmotions","joy","interest","excitement","updateConversationScore","emotionInterval","npcPersonality","getNPCPersonality","simulateNPCMessage","greeting","error","console","personalities","topics","responseStyle","emotions","positiveScore","reduce","sum","emotion","min","message","log","_videoRef$current","_humeService$current","getTracks","forEach","track","stop","clearInterval","disconnect","ref","autoPlay","muted","playsInline","Object","entries","_ref2","height","round","toLowerCase","endCall"],"sourceRoot":""}