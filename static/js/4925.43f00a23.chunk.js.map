{"version":3,"file":"static/js/4925.43f00a23.chunk.js","mappings":"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","sources":["components/RPMConfiguredAvatar.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, Suspense } from 'react';\nimport { useFrame, useLoader, useThree } from '@react-three/fiber';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\nimport { FacialBlendShapes } from '../services/AvatarMirrorSystem';\nimport { KTX2Loader } from 'three/examples/jsm/loaders/KTX2Loader.js';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\n\ninterface RPMConfiguredAvatarProps {\n  avatarUrl: string;\n  blendShapes?: FacialBlendShapes;\n  position?: [number, number, number];\n  scale?: number;\n  fallbackComponent?: React.ReactNode;\n}\n\n// Component to handle the actual GLB loading\nconst RPMModel: React.FC<{\n  url: string;\n  blendShapes?: FacialBlendShapes;\n  position?: [number, number, number];\n  scale?: number;\n}> = ({ url, blendShapes, position = [0, 0, 0], scale = 1 }) => {\n  const gltf = useLoader(GLTFLoader, url);\n  const modelRef = useRef<THREE.Group>(null);\n  const mixer = useRef<THREE.AnimationMixer | null>(null);\n\n  useEffect(() => {\n    if (gltf && modelRef.current) {\n      // Set up animation mixer if animations exist\n      if (gltf.animations && gltf.animations.length > 0) {\n        mixer.current = new THREE.AnimationMixer(modelRef.current);\n        const action = mixer.current.clipAction(gltf.animations[0]);\n        action.play();\n      }\n\n      // Find mesh with morph targets for blend shapes\n      modelRef.current.traverse((child) => {\n        if (child instanceof THREE.SkinnedMesh) {\n          child.frustumCulled = false;\n          \n          // Apply blend shapes if available\n          if (child.morphTargetDictionary && child.morphTargetInfluences && blendShapes) {\n            Object.entries(blendShapes).forEach(([key, value]) => {\n              const index = child.morphTargetDictionary![key];\n              if (index !== undefined) {\n                child.morphTargetInfluences![index] = value;\n              }\n            });\n          }\n        }\n      });\n    }\n  }, [gltf, blendShapes]);\n\n  useFrame((state, delta) => {\n    if (mixer.current) {\n      mixer.current.update(delta);\n    }\n  });\n\n  return (\n    <primitive\n      ref={modelRef}\n      object={gltf.scene}\n      position={position}\n      scale={scale}\n    />\n  );\n};\n\n// Error boundary for handling loading failures\nclass RPMErrorBoundary extends React.Component<\n  { children: React.ReactNode; fallback: React.ReactNode },\n  { hasError: boolean }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback;\n    }\n    return this.props.children;\n  }\n}\n\n// Main component with proper error handling and CORS configuration\nexport const RPMConfiguredAvatar: React.FC<RPMConfiguredAvatarProps> = ({\n  avatarUrl,\n  blendShapes,\n  position = [0, 0, 0],\n  scale = 1,\n  fallbackComponent\n}) => {\n  const [processedUrl, setProcessedUrl] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { gl } = useThree();\n\n  useEffect(() => {\n    // Process the avatar URL to ensure it works with CORS\n    const processAvatarUrl = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        // Extract avatar ID from URL\n        let avatarId = '';\n        \n        // Handle different URL formats\n        if (avatarUrl.includes('models.readyplayer.me')) {\n          // Direct model URL: https://models.readyplayer.me/[id].glb\n          const match = avatarUrl.match(/models\\.readyplayer\\.me\\/([^\\/]+)\\.glb/);\n          if (match) {\n            avatarId = match[1];\n          }\n        } else if (avatarUrl.includes('readyplayer.me/')) {\n          // Avatar page URL: https://[subdomain].readyplayer.me/[id]\n          const match = avatarUrl.match(/readyplayer\\.me\\/([^\\/\\?]+)/);\n          if (match) {\n            avatarId = match[1];\n          }\n        } else {\n          // Assume it's just the avatar ID\n          avatarId = avatarUrl.replace('.glb', '');\n        }\n\n        if (!avatarId) {\n          throw new Error('Invalid avatar URL or ID');\n        }\n\n        // Construct proper GLB URL with quality parameters\n        const params = new URLSearchParams({\n          morphTargets: 'ARKit,Oculus Visemes',\n          textureAtlas: '1024',\n          pose: 'T',\n          lod: '0',\n          useHands: 'true',\n          meshCompression: 'false'\n        });\n        const glbUrl = `https://models.readyplayer.me/${avatarId}.glb?${params.toString()}`;\n        \n        // Test if URL is accessible\n        const response = await fetch(glbUrl, { method: 'HEAD' });\n        if (!response.ok) {\n          throw new Error(`Avatar not accessible: ${response.status}`);\n        }\n\n        setProcessedUrl(glbUrl);\n        setIsLoading(false);\n      } catch (err) {\n        console.error('Error processing avatar URL:', err);\n        setError(err instanceof Error ? err.message : 'Failed to load avatar');\n        setIsLoading(false);\n      }\n    };\n\n    if (avatarUrl) {\n      processAvatarUrl();\n    }\n  }, [avatarUrl]);\n\n  // Default fallback\n  const defaultFallback = (\n    <mesh position={position} scale={scale}>\n      <boxGeometry args={[1, 2, 0.5]} />\n      <meshStandardMaterial color=\"#4A90E2\" />\n    </mesh>\n  );\n\n  if (isLoading) {\n    return (\n      <mesh position={position} scale={scale}>\n        <boxGeometry args={[1, 2, 0.5]} />\n        <meshStandardMaterial color=\"#cccccc\" wireframe />\n      </mesh>\n    );\n  }\n\n  if (error || !processedUrl) {\n    console.error('RPM Avatar Error:', error);\n    return <>{fallbackComponent || defaultFallback}</>;\n  }\n\n  const loader = new GLTFLoader();\n  const ktx2Loader = new KTX2Loader();\n  ktx2Loader.setTranscoderPath('/basis/');\n  ktx2Loader.detectSupport(gl);\n  loader.setKTX2Loader(ktx2Loader);\n\n  const dracoLoader = new DRACOLoader();\n  dracoLoader.setDecoderPath('/draco/');\n  loader.setDRACOLoader(dracoLoader);\n\n  loader.setMeshoptDecoder(MeshoptDecoder);\n\n  return (\n    <RPMErrorBoundary fallback={fallbackComponent || defaultFallback}>\n      <Suspense fallback={\n        <mesh position={position} scale={scale}>\n          <boxGeometry args={[1, 2, 0.5]} />\n          <meshStandardMaterial color=\"#cccccc\" wireframe />\n        </mesh>\n      }>\n        <RPMModel\n          url={processedUrl}\n          blendShapes={blendShapes}\n          position={position}\n          scale={scale}\n        />\n      </Suspense>\n    </RPMErrorBoundary>\n  );\n};\n"],"names":["RPMModel","_ref","url","blendShapes","position","scale","gltf","useLoader","GLTFLoader","modelRef","useRef","mixer","useEffect","current","animations","length","THREE","clipAction","play","traverse","child","frustumCulled","morphTargetDictionary","morphTargetInfluences","Object","entries","forEach","_ref2","key","value","index","undefined","useFrame","state","delta","update","_jsx","ref","object","scene","RPMErrorBoundary","React","constructor","props","super","this","hasError","getDerivedStateFromError","render","fallback","children","RPMConfiguredAvatar","_ref3","avatarUrl","fallbackComponent","processedUrl","setProcessedUrl","useState","isLoading","setIsLoading","error","setError","gl","useThree","async","avatarId","includes","match","replace","Error","params","URLSearchParams","morphTargets","textureAtlas","pose","lod","useHands","meshCompression","glbUrl","concat","toString","response","fetch","method","ok","status","err","console","message","processAvatarUrl","defaultFallback","_jsxs","args","color","wireframe","_Fragment","loader","ktx2Loader","KTX2Loader","setTranscoderPath","detectSupport","setKTX2Loader","dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","setMeshoptDecoder","MeshoptDecoder","Suspense"],"sourceRoot":""}