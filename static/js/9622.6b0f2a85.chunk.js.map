{"version":3,"file":"static/js/9622.6b0f2a85.chunk.js","mappings":"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","sources":["components/ConversationSummary.js","components/VideoChat.js","webpack://hub/./src/components/VideoChat.css?2224","webpack://hub/./src/components/ConversationSummary.css?cbb3","components/CoachCallTab.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer,\r\n  BarChart, Bar, PieChart, Pie, Cell, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar\r\n} from 'recharts';\r\nimport './ConversationSummary.css';\r\n\r\n// Emotion config\r\nconst emotionConfig = [\r\n  { name: 'Joy', color: '#5cb85c' },\r\n  { name: 'Interest', color: '#5bc0de' },\r\n  { name: 'Concentration', color: '#428bca' },\r\n  { name: 'Boredom', color: '#777777' },\r\n  { name: 'Confusion', color: '#ff7f0e' },\r\n  { name: 'Doubt', color: '#d9534f' },\r\n  { name: 'Sadness', color: '#5253a3' },\r\n  { name: 'Disgust', color: '#a94442' },\r\n  { name: 'Anxiety', color: '#d62728' },\r\n];\r\n\r\n// Emoji mapping for emotions\r\nconst emotionEmojis = {\r\n  Joy: '😊',\r\n  Interest: '🙂',\r\n  Concentration: '😐',\r\n  Boredom: '😒',\r\n  Confusion: '😕',\r\n  Doubt: '🤔',\r\n  Sadness: '😢',\r\n  Disgust: '😖',\r\n  Anxiety: '😨',\r\n};\r\n\r\nconst ConversationSummary = ({ summaryData, userId, roomId, onClose }) => {\r\n  const [aiAnalysis, setAiAnalysis] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [downloadUrl, setDownloadUrl] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (summaryData) {\r\n      generateAISummary(summaryData);\r\n    }\r\n  }, [summaryData]);\r\n\r\n  // Call OpenAI API to generate text summary\r\n  const generateAISummary = async (data) => {\r\n    setLoading(true);\r\n    try {\r\n      // Get OpenAI API key from environment variable\r\n      const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\r\n\r\n\r\n\r\n      // Analyze the emotion data\r\n      const user1DominantEmotions = getTopEmotions(data.user1.dominantEmotions, 3);\r\n      const user2DominantEmotions = getTopEmotions(data.user2.dominantEmotions, 3);\r\n      \r\n      // Calculate conversation duration\r\n      const durationMs = Date.now() - data.startTime;\r\n      const minutes = Math.floor(durationMs / 60000);\r\n      const seconds = Math.floor((durationMs % 60000) / 1000);\r\n      \r\n      // Prepare emotion trends data\r\n      const user1EmotionTrends = prepareEmotionTrends(data.user1.emotionTrends);\r\n      const user2EmotionTrends = prepareEmotionTrends(data.user2.emotionTrends);\r\n      \r\n      // Create prompt for GPT\r\n      const prompt = {\r\n        model: \"gpt-4\",\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content: \"You are an expert in analyzing emotional data from conversations. Your task is to generate an insightful, helpful, and positive summary of a video chat conversation based on the emotional data provided. Format your response in Markdown.\"\r\n          },\r\n          {\r\n            role: \"user\",\r\n            content: `Please analyze this video chat conversation data and provide a personalized summary:\r\n\r\nConversation duration: ${minutes} minutes and ${seconds} seconds\r\n\r\nUser emotions:\r\n${user1DominantEmotions.map(e => `- ${e.name}: ${e.count} occurrences (${e.emoji})`).join('\\n')}\r\n\r\nPartner emotions:\r\n${user2DominantEmotions.map(e => `- ${e.name}: ${e.count} occurrences (${e.emoji})`).join('\\n')}\r\n\r\nEmotion trends for user:\r\n${JSON.stringify(user1EmotionTrends)}\r\n\r\nEmotion trends for partner:\r\n${JSON.stringify(user2EmotionTrends)}\r\n\r\nTopics discussed:\r\n${data.topics.length > 0 ? data.topics.join(', ') : 'General conversation'}\r\n\r\nPlease generate a friendly, personalized summary with the following sections:\r\n1. Conversation Overview (duration and general tone)\r\n2. Emotional Dynamics (how emotions changed, patterns noticed)\r\n3. Connection Analysis (compatibility based on emotional responses)\r\n4. Conversation Highlights (what went well, interesting moments)\r\n5. Tips for Future Conversations (based on the emotional patterns)\r\n\r\nFormat as Markdown with appropriate headers and sections. Keep the tone positive and supportive, but honest.`\r\n          }\r\n        ]\r\n      };\r\n      \r\n      // Call OpenAI API\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`\r\n        },\r\n        body: JSON.stringify(prompt)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);\r\n      }\r\n      \r\n      const responseData = await response.json();\r\n      const summaryText = responseData.choices[0].message.content;\r\n      \r\n      setAiAnalysis(summaryText);\r\n      \r\n      // Generate a downloadable file\r\n      const blob = new Blob([summaryText], { type: 'text/markdown' });\r\n      const url = URL.createObjectURL(blob);\r\n      setDownloadUrl(url);\r\n      \r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error generating AI summary:', error);\r\n      setError(error.message);\r\n      \r\n      // Fallback to a basic summary if API fails\r\n      const fallbackSummary = generateFallbackSummary(data);\r\n      setAiAnalysis(fallbackSummary);\r\n      \r\n      // Create downloadable file for fallback summary\r\n      const blob = new Blob([fallbackSummary], { type: 'text/markdown' });\r\n      const url = URL.createObjectURL(blob);\r\n      setDownloadUrl(url);\r\n      \r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Helper function to prepare emotion trends for the API\r\n  const prepareEmotionTrends = (emotionTrends) => {\r\n    if (!emotionTrends || emotionTrends.length < 2) {\r\n      return [];\r\n    }\r\n    \r\n    // Find timestamps at regular intervals\r\n    const startTime = emotionTrends[0].timestamp;\r\n    const endTime = emotionTrends[emotionTrends.length - 1].timestamp;\r\n    const duration = endTime - startTime;\r\n    const intervals = Math.min(5, emotionTrends.length);\r\n    \r\n    const result = [];\r\n    for (let i = 0; i < intervals; i++) {\r\n      const targetTime = startTime + (duration * i / (intervals - 1));\r\n      \r\n      // Find closest data point\r\n      const closestPoint = emotionTrends.reduce((prev, curr) => {\r\n        return (Math.abs(curr.timestamp - targetTime) < Math.abs(prev.timestamp - targetTime))\r\n          ? curr : prev;\r\n      });\r\n      \r\n      const topEmotions = Object.entries(closestPoint.emotions)\r\n        .sort((a, b) => b[1] - a[1])\r\n        .slice(0, 2)\r\n        .map(([name, value]) => ({ name, value: Math.round(value * 100) }));\r\n      \r\n      result.push({\r\n        timeIndex: i,\r\n        relativeTime: i === 0 ? \"Start\" : i === intervals - 1 ? \"End\" : `${Math.round((i / (intervals - 1)) * 100)}%`,\r\n        topEmotions\r\n      });\r\n    }\r\n    \r\n    return result;\r\n  };\r\n\r\n  // Generate fallback summary if API call fails\r\n  const generateFallbackSummary = (data) => {\r\n    const user1DominantEmotions = getTopEmotions(data.user1.dominantEmotions, 2);\r\n    const user2DominantEmotions = getTopEmotions(data.user2.dominantEmotions, 2);\r\n    \r\n    const durationMs = Date.now() - data.startTime;\r\n    const minutes = Math.floor(durationMs / 60000);\r\n    const seconds = Math.floor((durationMs % 60000) / 1000);\r\n    \r\n    return `\r\n# Conversation Summary\r\n\r\nYour conversation lasted ${minutes} minutes and ${seconds} seconds.\r\n\r\n## Emotional Overview\r\n\r\nDuring this conversation, your dominant emotions were ${user1DominantEmotions.map(e => `${e.name} (${e.emoji})`).join(' and ')}.\r\nYour partner primarily expressed ${user2DominantEmotions.map(e => `${e.name} (${e.emoji})`).join(' and ')}.\r\n\r\n## Conversation Highlights\r\n\r\nYou both showed genuine interest in each other's perspectives. The emotional tone was generally positive, with moments of curiosity and thoughtful consideration. \r\n\r\nTopics that stood out in your conversation:\r\n${data.topics.length > 0 ? data.topics.map(topic => `- ${topic}`).join('\\n') : '- General conversation and getting to know each other'}\r\n\r\n## Compatibility Analysis\r\n\r\nBased on your emotional responses, you appear to have good conversational chemistry. The balance of interest and joy suggests a positive foundation for continued interaction.\r\n\r\nThank you for using XRCupid! We hope this analysis helps you reflect on your conversation experience.\r\n    `;\r\n  };\r\n\r\n  // Helper to get top emotions\r\n  const getTopEmotions = (emotionsObj, count = 2) => {\r\n    if (!emotionsObj || Object.keys(emotionsObj).length === 0) {\r\n      return [{ name: 'Neutral', count: 1, emoji: '😐' }];\r\n    }\r\n    \r\n    const emotionsList = Object.entries(emotionsObj).map(([name, count]) => ({\r\n      name,\r\n      count,\r\n      emoji: emotionEmojis[name] || ''\r\n    }));\r\n    \r\n    return emotionsList\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, count);\r\n  };\r\n\r\n  // Prepare emotion trend data\r\n  const prepareEmotionTrendData = (emotionTrends) => {\r\n    if (!emotionTrends || emotionTrends.length < 2) {\r\n      return [];\r\n    }\r\n    \r\n    // Get top emotions to track\r\n    const emotionCounts = {};\r\n    emotionTrends.forEach(point => {\r\n      Object.entries(point.emotions).forEach(([emotion, value]) => {\r\n        if (value > 0.2) { // Only count significant emotions\r\n          emotionCounts[emotion] = (emotionCounts[emotion] || 0) + value;\r\n        }\r\n      });\r\n    });\r\n    \r\n    const topEmotions = Object.entries(emotionCounts)\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, 3)\r\n      .map(([name]) => name);\r\n    \r\n    // Create chart data with regular intervals\r\n    const firstTimestamp = emotionTrends[0].timestamp;\r\n    const lastTimestamp = emotionTrends[emotionTrends.length - 1].timestamp;\r\n    const duration = lastTimestamp - firstTimestamp;\r\n    const points = Math.min(10, emotionTrends.length);\r\n    const interval = duration / (points - 1);\r\n    \r\n    const chartData = [];\r\n    for (let i = 0; i < points; i++) {\r\n      const targetTime = firstTimestamp + (i * interval);\r\n      \r\n      // Find closest data point\r\n      const closestPoint = emotionTrends.reduce((prev, curr) => {\r\n        return (Math.abs(curr.timestamp - targetTime) < Math.abs(prev.timestamp - targetTime))\r\n          ? curr : prev;\r\n      });\r\n      \r\n      const dataPoint = {\r\n        time: new Date(targetTime).toLocaleTimeString([], {\r\n          hour: '2-digit',\r\n          minute: '2-digit'\r\n        })\r\n      };\r\n      \r\n      // Add top emotions\r\n      topEmotions.forEach(emotion => {\r\n        dataPoint[emotion] = closestPoint.emotions[emotion] \r\n          ? Math.round(closestPoint.emotions[emotion] * 100) \r\n          : 0;\r\n      });\r\n      \r\n      chartData.push(dataPoint);\r\n    }\r\n    \r\n    return { chartData, topEmotions };\r\n  };\r\n\r\n  // Process dominant emotions for pie chart\r\n  const prepareDominantEmotionsData = (dominantEmotions) => {\r\n    if (!dominantEmotions || Object.keys(dominantEmotions).length === 0) {\r\n      return [{ name: 'Neutral', value: 1 }];\r\n    }\r\n    \r\n    return Object.entries(dominantEmotions)\r\n      .map(([name, count]) => ({\r\n        name,\r\n        value: count\r\n      }))\r\n      .sort((a, b) => b.value - a.value)\r\n      .slice(0, 5); // Show top 5 emotions\r\n  };\r\n\r\n  // Handle download summary\r\n  const downloadSummary = () => {\r\n    if (downloadUrl) {\r\n      const link = document.createElement('a');\r\n      link.href = downloadUrl;\r\n      link.download = `XRCupid-Summary-${new Date().toISOString().split('T')[0]}.md`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  };\r\n\r\n  // Conditional rendering - must be INSIDE the component function\r\n  if (!summaryData) {\r\n    return (\r\n      <div className=\"conversation-summary-container\">\r\n        <div className=\"summary-header\">\r\n          <h2>No conversation data available</h2>\r\n          <button className=\"close-button\" onClick={onClose}>Close</button>\r\n        </div>\r\n        <p>There is no data available to generate a summary.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Prepare chart data\r\n  const user1TrendData = prepareEmotionTrendData(summaryData.user1.emotionTrends);\r\n  const user2TrendData = prepareEmotionTrendData(summaryData.user2.emotionTrends);\r\n  const user1PieData = prepareDominantEmotionsData(summaryData.user1.dominantEmotions);\r\n  const user2PieData = prepareDominantEmotionsData(summaryData.user2.dominantEmotions);\r\n\r\n  return (\r\n    <div className=\"conversation-summary-container\">\r\n      <div className=\"summary-header\">\r\n        <h2>Conversation Summary</h2>\r\n        <div className=\"header-buttons\">\r\n          <button className=\"download-button\" onClick={downloadSummary}>\r\n            Download Summary\r\n          </button>\r\n          <button className=\"close-button\" onClick={onClose}>\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div className=\"loading-container\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <p>Analyzing your conversation data...</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"summary-content\">\r\n          {error && (\r\n            <div className=\"error-message\">\r\n              <p>There was an error generating the AI analysis: {error}</p>\r\n              <p>Showing a basic summary instead.</p>\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"text-summary\">\r\n            <div className=\"markdown-content\">\r\n              {aiAnalysis.split('\\n').map((line, index) => {\r\n                if (line.startsWith('# ')) {\r\n                  return <h1 key={index}>{line.substring(2)}</h1>;\r\n                } else if (line.startsWith('## ')) {\r\n                  return <h2 key={index}>{line.substring(3)}</h2>;\r\n                } else if (line.startsWith('### ')) {\r\n                  return <h3 key={index}>{line.substring(4)}</h3>;\r\n                } else if (line.startsWith('- ')) {\r\n                  return <div className=\"list-item\" key={index}>{line}</div>;\r\n                } else if (line === '') {\r\n                  return <br key={index} />;\r\n                } else {\r\n                  return <p key={index}>{line}</p>;\r\n                }\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"charts-container\">\r\n            <div className=\"chart-section\">\r\n              <h3>Your Emotional Journey</h3>\r\n              <div className=\"chart-wrapper\">\r\n                {user1TrendData.chartData && user1TrendData.chartData.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <LineChart data={user1TrendData.chartData}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"time\" />\r\n                      <YAxis domain={[0, 100]} />\r\n                      <Tooltip formatter={(value) => [`${value}%`]} />\r\n                      <Legend />\r\n                      {user1TrendData.topEmotions.map((emotion) => {\r\n                        const config = emotionConfig.find(e => e.name === emotion) || { color: '#999' };\r\n                        return (\r\n                          <Line\r\n                            key={emotion}\r\n                            type=\"monotone\"\r\n                            dataKey={emotion}\r\n                            stroke={config.color}\r\n                            name={`${emotion} ${emotionEmojis[emotion] || ''}`}\r\n                          />\r\n                        );\r\n                      })}\r\n                    </LineChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"no-data-message\">Not enough data to visualize emotion trends</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"chart-section\">\r\n              <h3>Your Dominant Emotions</h3>\r\n              <div className=\"chart-wrapper\">\r\n                {user1PieData.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={user1PieData}\r\n                        dataKey=\"value\"\r\n                        nameKey=\"name\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={80}\r\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\r\n                      >\r\n                        {user1PieData.map((entry, index) => {\r\n                          const emotion = emotionConfig.find(e => e.name === entry.name);\r\n                          return (\r\n                            <Cell \r\n                              key={`cell-${index}`} \r\n                              fill={emotion ? emotion.color : `hsl(${index * 45}, 70%, 60%)`} \r\n                            />\r\n                          );\r\n                        })}\r\n                      </Pie>\r\n                      <Tooltip formatter={(value, name) => [`${value} occurrences`, name]} />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"no-data-message\">No dominant emotions detected</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"chart-section\">\r\n              <h3>Partner's Emotional Journey</h3>\r\n              <div className=\"chart-wrapper\">\r\n                {user2TrendData.chartData && user2TrendData.chartData.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <LineChart data={user2TrendData.chartData}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"time\" />\r\n                      <YAxis domain={[0, 100]} />\r\n                      <Tooltip formatter={(value) => [`${value}%`]} />\r\n                      <Legend />\r\n                      {user2TrendData.topEmotions.map((emotion) => {\r\n                        const config = emotionConfig.find(e => e.name === emotion) || { color: '#999' };\r\n                        return (\r\n                          <Line\r\n                            key={emotion}\r\n                            type=\"monotone\"\r\n                            dataKey={emotion}\r\n                            stroke={config.color}\r\n                            name={`${emotion} ${emotionEmojis[emotion] || ''}`}\r\n                          />\r\n                        );\r\n                      })}\r\n                    </LineChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"no-data-message\">Not enough data to visualize emotion trends</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"chart-section\">\r\n              <h3>Partner's Dominant Emotions</h3>\r\n              <div className=\"chart-wrapper\">\r\n                {user2PieData.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={user2PieData}\r\n                        dataKey=\"value\"\r\n                        nameKey=\"name\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={80}\r\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\r\n                      >\r\n                        {user2PieData.map((entry, index) => {\r\n                          const emotion = emotionConfig.find(e => e.name === entry.name);\r\n                          return (\r\n                            <Cell \r\n                              key={`cell-${index}`} \r\n                              fill={emotion ? emotion.color : `hsl(${index * 45}, 70%, 60%)`} \r\n                            />\r\n                          );\r\n                        })}\r\n                      </Pie>\r\n                      <Tooltip formatter={(value, name) => [`${value} occurrences`, name]} />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"no-data-message\">No dominant emotions detected</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"chart-section full-width\">\r\n              <h3>Emotional Compatibility</h3>\r\n              <div className=\"chart-wrapper\">\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <RadarChart outerRadius={90} data={emotionConfig}>\r\n                    <PolarGrid />\r\n                    <PolarAngleAxis dataKey=\"name\" />\r\n                    <PolarRadiusAxis angle={30} domain={[0, 100]} />\r\n                    <Radar\r\n                      name=\"You\"\r\n                      dataKey={(entry) => {\r\n                        const emotion = summaryData.user1.dominantEmotions[entry.name];\r\n                        return emotion ? Math.min(emotion * 10, 100) : 0;\r\n                      }}\r\n                      stroke=\"#8884d8\"\r\n                      fill=\"#8884d8\"\r\n                      fillOpacity={0.5}\r\n                    />\r\n                    <Radar\r\n                      name=\"Partner\"\r\n                      dataKey={(entry) => {\r\n                        const emotion = summaryData.user2.dominantEmotions[entry.name];\r\n                        return emotion ? Math.min(emotion * 10, 100) : 0;\r\n                      }}\r\n                      stroke=\"#82ca9d\"\r\n                      fill=\"#82ca9d\"\r\n                      fillOpacity={0.5}\r\n                    />\r\n                    <Legend />\r\n                  </RadarChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConversationSummary;","import React, { useState, useEffect, useRef } from 'react';\nimport Peer from 'simple-peer';\nimport { database } from '../firebase';\nimport { ref, set, onValue, onChildAdded, onChildRemoved, remove, update } from 'firebase/database';\nimport EmotionAnalysis from './EmotionAnalysis';\nimport ConversationSummary from './ConversationSummary';\nimport AvatarView from './AvatarView'; // For NPC Coach\nimport './VideoChat.css';\n\n// ICE servers for NAT traversal\nconst iceServers = {\n  iceServers: [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n  ]\n};\n\nconst VideoChat = () => {\n  const [localStream, setLocalStream] = useState(null);\n  const [peers, setPeers] = useState([]);\n  const [roomId, setRoomId] = useState('');\n  const [isInRoom, setIsInRoom] = useState(false);\n  const [isCopied, setIsCopied] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [connectionStatus] = useState('');\n  const [showEmotionAnalysis, setShowEmotionAnalysis] = useState(false);\n  const [humeApiKey, setHumeApiKey] = useState('');\n  \n  // New state variables for summary\n  const [showSummary, setShowSummary] = useState(false);\n  const [summaryData, setSummaryData] = useState(null);\n  const [detectedTopics, setDetectedTopics] = useState([]);\n  const [emotionKeywords, setEmotionKeywords] = useState({});\n\n  const userVideoRef = useRef(null);\n  const peersRef = useRef([]);\n  const roomRef = useRef(null);\n  const myPeerIdRef = useRef(null);\n  \n  // Set a unique user ID when component mounts\n  useEffect(() => {\n    myPeerIdRef.current = generateUserId();\n  }, []);\n  \n  // Generate a unique user ID\n  const generateUserId = () => {\n    return 'user_' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  };\n  \n  // Global refs to store stream data\n  const remoteStreamsRef = useRef({});\n  \n  // Track emotion data for summary\n  const emotionDataRef = useRef({\n    user1: {\n      emotionTrends: [],\n      dominantEmotions: {},\n      keywords: {}\n    },\n    user2: {\n      emotionTrends: [],\n      dominantEmotions: {},\n      keywords: {}\n    },\n    startTime: Date.now(),\n    topics: []\n  });\n\n  // Initialize media streams\n  useEffect(() => {\n    let currentStream; \n    \n    navigator.mediaDevices.getUserMedia({ \n      video: true, \n      audio: true \n    })\n      .then((stream) => {\n        setLocalStream(stream);\n        currentStream = stream; \n        if (userVideoRef.current) {\n          userVideoRef.current.srcObject = stream;\n        }\n      })\n      .catch((error) => {\n        console.error('Error accessing media devices:', error);\n        setErrorMessage('Could not access camera or microphone. Please check your permissions.');\n      });\n\n    return () => {\n      if (currentStream) {\n        currentStream.getTracks().forEach((track) => track.stop());\n      }\n      leaveRoom(false);\n    };\n  }, []);\n\n  // Toggle audio based on isMuted state\n  useEffect(() => {\n    if (localStream) {\n      localStream.getAudioTracks().forEach(track => {\n        track.enabled = !isMuted;\n      });\n    }\n  }, [isMuted, localStream]);\n\n  // Toggle video based on isVideoOff state\n  useEffect(() => {\n    if (localStream) {\n      localStream.getVideoTracks().forEach(track => {\n        track.enabled = !isVideoOff;\n      });\n    }\n  }, [isVideoOff, localStream]);\n\n  // Monitor room for other user leaving\n  useEffect(() => {\n    if (isInRoom && roomRef.current) {\n      const roomReference = ref(database, `rooms/${roomRef.current}`);\n      \n      const unsubscribe = onValue(roomReference, (snapshot) => {\n        if (!snapshot.exists()) {\n          // Room was deleted (probably by host)\n          console.log(\"Room no longer exists\");\n          \n          if (!showSummary) {\n            handleRemoteUserLeft();\n          }\n          return;\n        }\n        \n        const roomData = snapshot.val();\n        \n        // Check if we're the host or guest\n        const isHost = roomData.hostId === myPeerIdRef.current;\n        \n        // Check if the other user left\n        if ((isHost && roomData.guestLeft) || (!isHost && roomData.hostLeft)) {\n          console.log(\"Other user left flag detected:\", isHost ? \"guest left\" : \"host left\");\n          \n          if (!showSummary) {\n            handleRemoteUserLeft();\n          }\n        }\n      });\n      \n      // Return cleanup function\n      return () => {\n        console.log(\"Cleaning up room monitoring\");\n        unsubscribe();\n      };\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isInRoom, showSummary]);\n\n  // Handler for when the remote user leaves\n  const handleRemoteUserLeft = () => {\n    console.log(\"Remote user has left, preparing summary...\");\n    \n    // Small delay to ensure we have latest data\n    setTimeout(() => {\n      prepareSummaryData();\n      // Show notification to the user\n      setErrorMessage('The other user has left the conversation. Generating conversation summary...');\n    }, 1000);\n  };\n\n  // Join an existing room\n  const joinRoom = () => {\n    if (!localStream) {\n      setErrorMessage('Camera and microphone access is required to join a room.');\n      return;\n    }\n    \n    if (!roomId.trim()) {\n      setErrorMessage('Please enter a room ID.');\n      return;\n    }\n    \n    const roomReference = ref(database, `rooms/${roomId}`);\n    onValue(roomReference, (snapshot) => {\n      const roomData = snapshot.val();\n      if (!roomData) {\n        setErrorMessage('Room does not exist.');\n        return;\n      }\n\n      // Check if anyone has left the room\n      if (roomData.hostLeft || roomData.guestLeft) {\n        setErrorMessage('The conversation has ended. This room is no longer active.');\n        return;\n      }\n      \n      roomRef.current = roomId;\n      const hostId = roomData.hostId;\n      \n      // Create a peer instance as the initiator\n      const peer = new Peer({\n        initiator: true,\n        trickle: false,\n        stream: localStream,\n        config: iceServers\n      });\n      \n      // Set up stream handler BEFORE signaling\n      peer.on('stream', (stream) => {\n        // Store stream in ref\n        remoteStreamsRef.current[hostId] = stream;\n        \n        // Update peers state with stream\n        setPeers(prevPeers => {\n          const updatedPeers = prevPeers.map(p => {\n            if (p.peerId === hostId) {\n              return { ...p, stream };\n            }\n            return p;\n          });\n          return updatedPeers;\n        });\n      });\n      \n      // Handle connection established\n      peer.on('connect', () => {\n        console.log(\"Connection established with host\");\n      });\n      \n      // Handle errors\n      peer.on('error', (err) => {\n        console.error(\"Peer connection error:\", err);\n      });\n      \n      // When we generate a signal, send it to the host\n      peer.on('signal', (data) => {\n        set(ref(database, `rooms/${roomId}/peers/${myPeerIdRef.current}`), {\n          signal: JSON.stringify(data),\n          userId: myPeerIdRef.current,\n          timestamp: Date.now()\n        });\n      });\n      \n      // Create a peer object with empty stream initially\n      const peerObj = { peerId: hostId, peer, stream: null };\n      \n      // Store peer reference\n      peersRef.current.push(peerObj);\n      setPeers([peerObj]);\n      \n      // Listen for signal response from host\n      const signalRef = ref(database, `rooms/${roomId}/signals/${myPeerIdRef.current}`);\n      onValue(signalRef, (snapshot) => {\n        const signalData = snapshot.val();\n        if (signalData && signalData.signal) {\n          try {\n            // Process the host's signal\n            peer.signal(JSON.parse(signalData.signal));\n            setIsInRoom(true);\n            \n            // Initialize emotion data in Firebase\n            initEmotionData(roomId, myPeerIdRef.current);\n          } catch (err) {\n            console.error(\"Error processing host signal:\", err);\n          }\n        }\n      });\n    }, { onlyOnce: true });\n  };\n\n  // Create a new room\n  const createRoom = () => {\n    if (!localStream) {\n      setErrorMessage('Camera and microphone access is required to create a room.');\n      return;\n    }\n    \n    setErrorMessage('');\n    const newRoomId = Math.random().toString(36).substring(2, 9);\n    setRoomId(newRoomId);\n    roomRef.current = newRoomId;\n    \n    // Create room in Firebase with left flags initialized to false\n    const roomReference = ref(database, `rooms/${newRoomId}`);\n    set(roomReference, {\n      createdAt: Date.now(),\n      hostId: myPeerIdRef.current,\n      hostLeft: false,\n      guestLeft: false\n    });\n    \n    // Initialize emotion data in Firebase\n    initEmotionData(newRoomId, myPeerIdRef.current);\n    \n    // Listen for peers joining the room\n    const peersReference = ref(database, `rooms/${newRoomId}/peers`);\n    \n    onChildAdded(peersReference, (snapshot) => {\n      const peerData = snapshot.val();\n      const peerId = snapshot.key;\n      \n      // Don't connect to yourself\n      if (peerId !== myPeerIdRef.current && peerData.signal) {\n        console.log(\"New peer joined:\", peerId);\n        \n        // Create a new peer instance as the receiver\n        const peer = new Peer({\n          initiator: false,\n          trickle: false,\n          stream: localStream,\n          config: iceServers\n        });\n        \n        // Set up stream listener BEFORE signaling\n        peer.on('stream', (stream) => {\n          console.log(\"Received remote stream from peer:\", peerId);\n          console.log(\"Stream has tracks:\", stream.getTracks().length);\n          \n          // Store stream in ref to ensure it persists\n          remoteStreamsRef.current[peerId] = stream;\n          \n          // Update peers state with the new stream\n          setPeers(prevPeers => {\n            const updatedPeers = prevPeers.map(p => {\n              if (p.peerId === peerId) {\n                return { ...p, stream };\n              }\n              return p;\n            });\n            return updatedPeers;\n          });\n        });\n        \n        // Handle connection established\n        peer.on('connect', () => {\n          console.log(\"Connection established with peer:\", peerId);\n        });\n        \n        // When we get a signal, send it back\n        peer.on('signal', (data) => {\n          console.log(\"Host created return signal for peer\");\n          set(ref(database, `rooms/${newRoomId}/signals/${peerId}`), {\n            signal: JSON.stringify(data),\n            from: myPeerIdRef.current,\n            timestamp: Date.now()\n          });\n        });\n        \n        // Handle errors\n        peer.on('error', (err) => {\n          console.error(\"Peer connection error:\", err);\n        });\n        \n        try {\n          // Process the incoming signal\n          peer.signal(JSON.parse(peerData.signal));\n          \n          // Store the peer reference with stream\n          const peerObj = { peerId, peer, stream: remoteStreamsRef.current[peerId] };\n          peersRef.current.push(peerObj);\n          \n          // Update the state with the new peer\n          setPeers(prevPeers => [...prevPeers, peerObj]);\n        } catch (err) {\n          console.error(\"Error processing peer signal:\", err);\n        }\n      }\n    });\n    \n    // Listen for peers leaving the room\n    onChildRemoved(peersReference, (snapshot) => {\n      const peerId = snapshot.key;\n      console.log(\"Peer left:\", peerId);\n      \n      // Clean up the associated peer\n      const peerObj = peersRef.current.find(p => p.peerId === peerId);\n      if (peerObj && peerObj.peer) {\n        peerObj.peer.destroy();\n      }\n      \n      // Remove from our refs\n      peersRef.current = peersRef.current.filter(p => p.peerId !== peerId);\n      delete remoteStreamsRef.current[peerId];\n      \n      // Update state\n      setPeers(prevPeers => prevPeers.filter(p => p.peerId !== peerId));\n    });\n    \n    setIsInRoom(true);\n  };\n\n  // Initialize emotion data structure in Firebase\n  const initEmotionData = (roomId, userId) => {\n    const emotionDataRef = ref(database, `emotionData/${roomId}`);\n    set(emotionDataRef, {\n      startTime: Date.now(),\n      topics: [],\n      users: {\n        [userId]: {\n          emotionTrends: [],\n          dominantEmotions: {},\n          keywords: {}\n        }\n      }\n    });\n  };\n\n  // Update emotion data in Firebase\n  const updateEmotionData = (data) => {\n    if (!data || !data.roomId || !data.userId || !data.summaryData) return;\n    \n    // Update local summary data ref\n    emotionDataRef.current = data.summaryData;\n    \n    // Update Firebase\n    const userEmotionRef = ref(database, `emotionData/${data.roomId}/users/${data.userId}`);\n    update(userEmotionRef, {\n      emotionTrends: data.summaryData.user1.emotionTrends,\n      dominantEmotions: data.summaryData.user1.dominantEmotions,\n      keywords: data.summaryData.user1.keywords\n    });\n    \n    // Update topics if any detected\n    if (data.summaryData.topics && data.summaryData.topics.length > 0) {\n      const topicsRef = ref(database, `emotionData/${data.roomId}/topics`);\n      update(topicsRef, data.summaryData.topics);\n    }\n  };\n\n  // Copy room ID to clipboard\n  const copyRoomId = () => {\n    navigator.clipboard.writeText(roomId);\n    setIsCopied(true);\n    setTimeout(() => setIsCopied(false), 2000);\n  };\n\n  // Leave room and cleanup connections/data\n  const leaveRoom = (showSummaryPage = true) => {\n    if (roomRef.current) {\n      // If we want to show the summary page, prepare the data\n      if (showSummaryPage) {\n        prepareSummaryData();\n      }\n      \n      const roomReference = ref(database, `rooms/${roomRef.current}`);\n      onValue(roomReference, (snapshot) => {\n        const roomData = snapshot.val();\n        if (roomData) {\n          if (roomData.hostId === myPeerIdRef.current) {\n            // We're the host, update the hostLeft flag\n            update(roomReference, {\n              hostLeft: true,\n              leftAt: Date.now()\n            }).then(() => {\n              // After updating, remove the entire room after a delay\n              // This delay gives the other user time to receive the notification\n              setTimeout(() => {\n                remove(roomReference);\n              }, 10000);\n            });\n          } else {\n            // We're a guest, update the guestLeft flag\n            update(roomReference, {\n              guestLeft: true,\n              leftAt: Date.now()\n            });\n            \n            // Also remove our peer data\n            remove(ref(database, `rooms/${roomRef.current}/peers/${myPeerIdRef.current}`));\n            remove(ref(database, `rooms/${roomRef.current}/signals/${myPeerIdRef.current}`));\n          }\n        }\n      }, { onlyOnce: true });\n      \n      // Clean up all peer connections\n      peersRef.current.forEach(({ peer }) => {\n        if (peer) {\n          peer.destroy();\n        }\n      });\n      \n      // Reset everything\n      peersRef.current = [];\n      remoteStreamsRef.current = {};\n      setPeers([]);\n      setIsInRoom(false);\n      \n      if (!showSummaryPage) {\n        window.location.reload();\n      }\n    }\n  };\n\n  // Prepare summary data from Firebase and local data\n  const prepareSummaryData = async () => {\n    // Prevent duplicate summary preparation\n    if (showSummary) {\n      console.log(\"Summary already being shown, skipping preparation\");\n      return;\n    }\n  \n    console.log(\"Preparing summary data\");\n    \n    // Fetch the latest emotion data from Firebase\n    const emotionDataFirebaseRef = ref(database, `emotionData/${roomRef.current}`);\n    onValue(emotionDataFirebaseRef, (snapshot) => {\n      const firebaseData = snapshot.val();\n      if (firebaseData) {\n        // Get all user IDs to collect data\n        const userIds = Object.keys(firebaseData.users || {});\n        const currentUserId = myPeerIdRef.current;\n        const otherUserId = userIds.find(id => id !== currentUserId);\n        \n        console.log(\"User IDs:\", { currentUserId, otherUserId });\n        \n        // Build data structure for summary\n        const summaryDataObj = {\n          startTime: firebaseData.startTime || emotionDataRef.current.startTime,\n          topics: firebaseData.topics || emotionDataRef.current.topics || [],\n          user1: {\n            emotionTrends: [],\n            dominantEmotions: {},\n            keywords: {}\n          },\n          user2: {\n            emotionTrends: [],\n            dominantEmotions: {},\n            keywords: {}\n          }\n        };\n        \n        // Add current user's data as user1\n        if (currentUserId && firebaseData.users[currentUserId]) {\n          summaryDataObj.user1 = {\n            emotionTrends: firebaseData.users[currentUserId].emotionTrends || [],\n            dominantEmotions: firebaseData.users[currentUserId].dominantEmotions || {},\n            keywords: firebaseData.users[currentUserId].keywords || {}\n          };\n        } else {\n          // Fallback to local data\n          summaryDataObj.user1 = emotionDataRef.current.user1;\n        }\n        \n        // Add other user's data as user2\n        if (otherUserId && firebaseData.users[otherUserId]) {\n          summaryDataObj.user2 = {\n            emotionTrends: firebaseData.users[otherUserId].emotionTrends || [],\n            dominantEmotions: firebaseData.users[otherUserId].dominantEmotions || {},\n            keywords: firebaseData.users[otherUserId].keywords || {}\n          };\n        } else {\n          // Fallback to local data\n          summaryDataObj.user2 = emotionDataRef.current.user2;\n        }\n        \n        console.log(\"Prepared summary data:\", summaryDataObj);\n        \n        // Set the summary data and show the summary page\n        setSummaryData(summaryDataObj);\n        setShowSummary(true);\n      } else {\n        // If no Firebase data, just use local data\n        console.log(\"No Firebase data found, using local data\");\n        setSummaryData(emotionDataRef.current);\n        setShowSummary(true);\n      }\n    }, { onlyOnce: true });\n  };\n\n  // Toggle mute state for audio\n  const toggleMute = () => {\n    setIsMuted(prev => !prev);\n  };\n\n  // Toggle video state\n  const toggleVideo = () => {\n    setIsVideoOff(prev => !prev);\n  };\n  \n  // Toggle emotion analysis\n  const toggleEmotionAnalysis = () => {\n    setShowEmotionAnalysis(prev => !prev);\n  };\n  \n  // Setup Hume API Key\n  const setHumeKey = (key) => {\n    setHumeApiKey(key);\n    localStorage.setItem('humeApiKey', key);\n  };\n  \n  // Load Hume API Key from localStorage on component mount\n  useEffect(() => {\n    // First try environment variable\n    const envKey = window.REACT_APP_HUME_API_KEY || \n                   window.REACT_APP_HUME_API_KEY ||\n                   window.NEXT_PUBLIC_HUME_API_KEY;\n    \n    if (envKey) {\n      setHumeApiKey(envKey);\n    } else {\n      // Fall back to localStorage\n      const savedKey = localStorage.getItem('humeApiKey');\n      if (savedKey) {\n        setHumeApiKey(savedKey);\n      }\n    }\n  }, []);\n\n  // Method to get a remote stream for emotion analysis\n  const getRemoteStream = () => {\n    // Try to find the first peer with a valid stream\n    const peerWithStream = peers.find(peer => peer.stream);\n    return peerWithStream ? peerWithStream.stream : null;\n  };\n  \n  // Handle closing the summary\n  const handleCloseSummary = () => {\n    setShowSummary(false);\n    window.location.reload();\n  };\n  \n  // Render the remote video component\n  const RemoteVideo = ({ peer }) => {\n    const videoRef = useRef(null);\n    const [connected, setConnected] = useState(false);\n    const streamRef = useRef(null);\n    const playAttemptRef = useRef(null);\n    const mountedRef = useRef(true);\n  \n    // Clean up function to handle unmounting\n    useEffect(() => {\n      return () => {\n        mountedRef.current = false;\n        if (playAttemptRef.current) {\n          clearTimeout(playAttemptRef.current);\n        }\n      };\n    }, []);\n  \n    // Use a separate effect to track the stream\n    useEffect(() => {\n      // Store the stream in our ref\n      streamRef.current = peer.stream;\n  \n      // Clean up function\n      return () => {\n        if (playAttemptRef.current) {\n          clearTimeout(playAttemptRef.current);\n        }\n      };\n    }, [peer.stream]);\n  \n    // Use a separate useEffect for video element handling to avoid race conditions\n    useEffect(() => {\n      const videoElement = videoRef.current;\n      const stream = streamRef.current;\n      \n      // Only proceed if we have both video element and stream\n      if (!videoElement || !stream) return;\n      \n      // Check if stream has changed\n      if (videoElement.srcObject !== stream) {\n        videoElement.srcObject = stream;\n      }\n      \n      // Define a function to handle playback\n      const attemptPlay = () => {\n        if (!mountedRef.current) return;\n        \n        if (videoElement.paused) {\n          const playPromise = videoElement.play();\n          \n          if (playPromise !== undefined) {\n            playPromise\n              .then(() => {\n                if (mountedRef.current) {\n                  setConnected(true);\n                }\n              })\n              .catch(err => {\n                // Only retry if component is still mounted and error is AbortError\n                if (mountedRef.current && err.name === 'AbortError') {\n                  // Schedule retry with delay\n                  playAttemptRef.current = setTimeout(attemptPlay, 1000);\n                }\n              });\n          }\n        } else {\n          // Video is already playing\n          if (mountedRef.current) {\n            setConnected(true);\n          }\n        }\n      };\n      \n      // Add event listeners to help with playback\n      const handleCanPlay = () => {\n        attemptPlay();\n      };\n      \n      const handleLoadedMetadata = () => {\n        attemptPlay();\n      };\n      \n      // Add event listeners\n      videoElement.addEventListener('canplay', handleCanPlay);\n      videoElement.addEventListener('loadedmetadata', handleLoadedMetadata);\n      \n      // Attempt to play right away\n      attemptPlay();\n      \n      // Cleanup function\n      return () => {\n        videoElement.removeEventListener('canplay', handleCanPlay);\n        videoElement.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        \n        if (playAttemptRef.current) {\n          clearTimeout(playAttemptRef.current);\n        }\n      };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n  \n    return (\n        <div className=\"video-wrapper\">\n          <video\n            ref={videoRef}\n            autoPlay\n            playsInline\n            className=\"video-player\"\n            style={{\n              width: '100%',\n              height: '100%'\n            }}\n          />\n          {!connected && (\n            <div className=\"connection-status\">\n              {peer.stream ? 'Connecting...' : 'Waiting for stream...'}\n            </div>\n          )}\n        </div>\n    );\n  };\n\n  return (\n    <div className=\"video-chat-container\">\n      <h1>XRCupid</h1>\n      \n      {errorMessage && (\n        <div className=\"error-message\">{errorMessage}</div>\n      )}\n\n      {/* Summary overlay */}\n      {showSummary && (\n        <ConversationSummary\n          summaryData={summaryData}\n          userId={myPeerIdRef.current}\n          roomId={roomRef.current}\n          onClose={handleCloseSummary}\n        />\n      )}\n\n      <div className=\"video-container\">\n        {/* NPC Coach Avatar */}\n        <div className=\"video-box npc-coach-avatar\"> {/* Added a specific class for styling */}\n          <h2>NPC Coach</h2>\n          <div style={{ width: '100%', height: '240px', border: '1px solid green', position: 'relative', backgroundColor: '#222' }}> \n            <AvatarView />\n          </div>\n        </div>\n\n        <div className=\"video-box\">\n          <h2>You</h2>\n          <video\n            ref={userVideoRef}\n            autoPlay\n            muted\n            playsInline\n            className={`video-player ${isVideoOff ? 'video-off' : ''}`}\n          />\n          {isVideoOff && (\n            <p className=\"text-small\">Camera Off</p>\n          )}\n        {peers.length === 0 && isInRoom && (\n          <div className=\"video-box empty\">\n            <h2>Remote User</h2>\n            <p className=\"text-small\">Waiting for someone to join...</p>\n          </div>\n        )}\n        </div> {/* Closes the video-box from line 769 */}\n      </div> {/* Closes the video-container */}\n\n      {/* Emotion Analysis Section */}\n      {showEmotionAnalysis && (\n        <div className=\"emotion-analysis-section\">\n          {!humeApiKey ? (\n            <div className=\"api-key-form\">\n              <h3>Enter Hume AI API Key</h3>\n              <input\n                type=\"text\"\n                placeholder=\"Your Hume AI API Key\"\n                onChange={(e) => setHumeKey(e.target.value)}\n                className=\"form-control\"\n              />\n              <p className=\"info-text\">\n                You need a Hume AI API key to use the emotion analysis feature.\n                Get one at <a href=\"https://hume.ai\" target=\"_blank\" rel=\"noopener noreferrer\">hume.ai</a>\n              </p>\n            </div>\n          ) : (\n            <EmotionAnalysis\n              localStream={localStream}\n              remoteStream={getRemoteStream()}\n              apiKey={humeApiKey}\n              roomId={roomRef.current}\n              userId={myPeerIdRef.current}\n              onEmotionDataUpdate={updateEmotionData}\n            />\n          )}\n        </div>\n      )}\n\n      <div className=\"controls-container\">\n        {!isInRoom ? (\n          <div className=\"room-controls\">\n            <button onClick={createRoom} className=\"btn-primary\">\n              Create New Room\n            </button>\n            <div className=\"room-join\">\n              <input\n                type=\"text\"\n                placeholder=\"Enter Room ID\"\n                value={roomId}\n                onChange={(e) => setRoomId(e.target.value)}\n                className=\"form-control\"\n              />\n              <button onClick={joinRoom} className=\"btn-primary\">\n                Join Room\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"connected-controls\">\n            {roomId && (\n              <div className=\"room-info\">\n                <p>\n                  Room ID: <span className=\"room-id-text\">{roomId}</span>\n                </p>\n                <button onClick={copyRoomId} className=\"btn-secondary\">\n                  {isCopied ? 'Copied!' : 'Copy Room ID'}\n                </button>\n                <p className=\"info-text\">\n                  Share this ID with someone to join your room\n                </p>\n              </div>\n            )}\n            <div className=\"media-controls\">\n              <button\n                onClick={toggleMute}\n                className={`btn-secondary ${isMuted ? 'active' : ''}`}\n              >\n                {isMuted ? 'Unmute' : 'Mute'}\n              </button>\n              <button\n                onClick={toggleVideo}\n                className={`btn-secondary ${isVideoOff ? 'active' : ''}`}\n              >\n                {isVideoOff ? 'Turn On Camera' : 'Turn Off Camera'}\n              </button>\n              <button\n                onClick={toggleEmotionAnalysis}\n                className={`btn-secondary ${showEmotionAnalysis ? 'active' : ''}`}\n              >\n                {showEmotionAnalysis ? 'Hide Emotions' : 'Show Emotions'}\n              </button>\n              <button onClick={() => leaveRoom(true)} className=\"btn-primary\">\n                Leave Room\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default VideoChat;","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport VideoChat from './VideoChat';\n\nfunction CoachCallTab() {\n  return (\n    <div className=\"content-card\">\n      <h2>Coach Call</h2>\n      <VideoChat />\n    </div>\n  );\n}\n\nexport default CoachCallTab;\n"],"names":["emotionConfig","name","color","emotionEmojis","Joy","Interest","Concentration","Boredom","Confusion","Doubt","Sadness","Disgust","Anxiety","_ref","summaryData","userId","roomId","onClose","aiAnalysis","setAiAnalysis","useState","loading","setLoading","downloadUrl","setDownloadUrl","error","setError","useEffect","generateAISummary","async","apiKey","process","user1DominantEmotions","getTopEmotions","data","user1","dominantEmotions","user2DominantEmotions","user2","durationMs","Date","now","startTime","minutes","Math","floor","seconds","user1EmotionTrends","prepareEmotionTrends","emotionTrends","user2EmotionTrends","prompt","model","messages","role","content","concat","map","e","count","emoji","join","JSON","stringify","topics","length","response","fetch","method","headers","body","ok","_errorData$error","errorData","json","Error","message","statusText","summaryText","choices","blob","Blob","type","url","URL","createObjectURL","console","fallbackSummary","generateFallbackSummary","timestamp","duration","intervals","min","result","i","targetTime","closestPoint","reduce","prev","curr","abs","topEmotions","Object","entries","emotions","sort","a","b","slice","_ref2","value","round","push","timeIndex","relativeTime","topic","emotionsObj","arguments","undefined","keys","emotionsList","_ref3","prepareEmotionTrendData","emotionCounts","forEach","point","_ref4","emotion","_ref5","firstTimestamp","points","interval","chartData","dataPoint","time","toLocaleTimeString","hour","minute","prepareDominantEmotionsData","_ref6","_jsxs","className","children","_jsx","onClick","user1TrendData","user2TrendData","user1PieData","user2PieData","downloadSummary","link","document","createElement","href","download","toISOString","split","appendChild","click","removeChild","line","index","startsWith","substring","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","Tooltip","formatter","Legend","config","find","Line","stroke","PieChart","Pie","nameKey","cx","cy","outerRadius","label","_ref7","percent","toFixed","entry","Cell","fill","_ref8","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","angle","Radar","fillOpacity","iceServers","urls","VideoChat","localStream","setLocalStream","peers","setPeers","setRoomId","isInRoom","setIsInRoom","isCopied","setIsCopied","errorMessage","setErrorMessage","isMuted","setIsMuted","isVideoOff","setIsVideoOff","connectionStatus","showEmotionAnalysis","setShowEmotionAnalysis","humeApiKey","setHumeApiKey","showSummary","setShowSummary","setSummaryData","detectedTopics","setDetectedTopics","emotionKeywords","setEmotionKeywords","userVideoRef","useRef","peersRef","roomRef","myPeerIdRef","current","generateUserId","random","toString","remoteStreamsRef","emotionDataRef","keywords","currentStream","navigator","mediaDevices","getUserMedia","video","audio","then","stream","srcObject","catch","getTracks","track","stop","leaveRoom","getAudioTracks","enabled","getVideoTracks","roomReference","ref","database","unsubscribe","onValue","snapshot","exists","log","handleRemoteUserLeft","roomData","val","isHost","hostId","guestLeft","hostLeft","setTimeout","prepareSummaryData","initEmotionData","set","users","showSummaryPage","update","leftAt","remove","onlyOnce","peer","destroy","window","location","reload","emotionDataFirebaseRef","firebaseData","userIds","currentUserId","otherUserId","id","summaryDataObj","envKey","REACT_APP_HUME_API_KEY","NEXT_PUBLIC_HUME_API_KEY","savedKey","localStorage","getItem","ConversationSummary","handleCloseSummary","style","border","position","backgroundColor","AvatarView","autoPlay","muted","playsInline","EmotionAnalysis","remoteStream","getRemoteStream","peerWithStream","onEmotionDataUpdate","userEmotionRef","topicsRef","placeholder","onChange","setHumeKey","key","target","setItem","rel","copyRoomId","clipboard","writeText","toggleMute","toggleVideo","toggleEmotionAnalysis","createRoom","newRoomId","createdAt","peersReference","onChildAdded","peerData","peerId","signal","Peer","initiator","trickle","on","prevPeers","p","_objectSpread","from","err","parse","peerObj","onChildRemoved","filter","joinRoom","trim","signalRef","signalData"],"sourceRoot":""}