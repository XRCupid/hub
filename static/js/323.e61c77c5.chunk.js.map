{"version":3,"file":"static/js/323.e61c77c5.chunk.js","mappings":"6JAGA,MAAMA,EAAiB,CACrBC,QAAS,CAAC,IAAK,IAAK,KACpBC,MAAO,CAAC,IAAK,IAAK,GAClBC,IAAK,CAAC,IAAK,IAAK,KAChBC,QAAS,CAAC,IAAK,IAAK,KACpBC,UAAW,CAAC,IAAK,IAAK,MAuExB,QApEyBC,IAIlB,IAJmB,SACxBC,GAAW,EAAK,QAChBC,EAAU,UAAS,gBACnBC,EAAkB,IACnBH,EACC,MAAMI,GAAYC,EAAAA,EAAAA,UA8BlB,OA5BAC,EAAAA,EAAAA,YAAU,KACR,IAAIC,EAAa,IAAIC,EAAAA,GAAIC,IACvBA,EAAOC,MAAQ,KACED,EAAOE,aAAa,IAAK,KACjCC,OAAOR,EAAUS,UAG1BJ,EAAOK,KAAO,KACZL,EAAOM,QAGP,MAAOC,EAAGC,EAAGC,GAAKxB,EAAeQ,IAAYR,EAAeC,QAC5Dc,EAAOU,KAAKH,EAAGC,EAAGC,GAClBT,EAAOW,QAAQ,IAAK,IAAK,IAAK,KAkBtC,SAAkBX,EAAQP,GACxBO,EAAOU,KAAK,GACZ,MAAME,EAAe,CACnB,MAAS,CAAEC,EAAG,EAAGC,OAAQ,GAAKC,OAAQ,IACtC,IAAO,CAAEF,GAAI,EAAGC,OAAQ,IAAKC,OAAQ,KACrC,UAAa,CAAEF,EAAG,EAAGC,OAAQ,IAAKC,OAAQ,KAC1C,QAAW,CAAEF,EAAG,EAAGC,OAAQ,EAAGC,OAAQ,IAGlCC,EAAMJ,EAAanB,IAAYmB,EAAsB,QAG3DZ,EAAOW,QAAQ,IAAK,IAAMK,EAAIH,EAAG,GAAKG,EAAIF,OAAQ,GAAKE,EAAID,QAE3Df,EAAOW,QAAQ,IAAK,IAAMK,EAAIH,EAAG,GAAKG,EAAIF,OAAQ,GAAKE,EAAID,OAC7D,CA9BQE,CAASjB,EAAQP,GAgCzB,SAAmBO,EAAQR,EAAU0B,GACnClB,EAAOU,KAAK,GACZ,MAAMS,EAAY,GACZC,EAAa,GAGbC,EAAgB7B,EAClB4B,EAA0B,GAAZF,EACdE,EAEJpB,EAAOsB,KAAK,IAAK,IAAKH,EAAWE,EAAe,GAClD,CAxCQE,CAAUvB,EAAQR,EAAUE,OAIhC,MAAO,KACLI,EAAW0B,YAEZ,CAAChC,EAAUC,EAASC,KAEhB+B,EAAAA,EAAAA,KAAA,OAAKC,IAAK/B,EAAWgC,MAAO,CAACC,MAAO,QAASC,OAAQ,W","sources":["components/ProceduralAvatar.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport p5 from 'p5';\n\nconst EMOTION_COLORS = {\n  neutral: [220, 220, 220],\n  happy: [255, 220, 0],\n  sad: [100, 150, 255],\n  excited: [255, 100, 100],\n  surprised: [255, 180, 100]\n};\n\nconst ProceduralAvatar = ({ \n  speaking = false, \n  emotion = 'neutral',\n  speechIntensity = 0.5 \n}) => {\n  const sketchRef = useRef();\n\n  useEffect(() => {\n    let p5Instance = new p5((sketch) => {\n      sketch.setup = () => {\n        const canvas = sketch.createCanvas(300, 400);\n        canvas.parent(sketchRef.current);\n      };\n\n      sketch.draw = () => {\n        sketch.clear();\n        \n        // Head shape\n        const [r, g, b] = EMOTION_COLORS[emotion] || EMOTION_COLORS.neutral;\n        sketch.fill(r, g, b);\n        sketch.ellipse(150, 200, 180, 200);\n\n        // Eyes with emotion-based modifications\n        drawEyes(sketch, emotion);\n\n        // Mouth with speaking dynamics\n        drawMouth(sketch, speaking, speechIntensity);\n      };\n    });\n\n    return () => {\n      p5Instance.remove();\n    };\n  }, [speaking, emotion, speechIntensity]);\n\n  return <div ref={sketchRef} style={{width: '300px', height: '400px'}}></div>;\n};\n\nfunction drawEyes(sketch, emotion) {\n  sketch.fill(0);\n  const eyeModifiers = {\n    'happy': { y: 5, scaleX: 0.8, scaleY: 0.6 },\n    'sad': { y: -5, scaleX: 1.2, scaleY: 1.4 },\n    'surprised': { y: 0, scaleX: 1.3, scaleY: 1.3 },\n    'neutral': { y: 0, scaleX: 1, scaleY: 1 }\n  };\n\n  const mod = eyeModifiers[emotion] || eyeModifiers['neutral'];\n\n  // Left eye\n  sketch.ellipse(110, 180 + mod.y, 30 * mod.scaleX, 20 * mod.scaleY);\n  // Right eye\n  sketch.ellipse(190, 180 + mod.y, 30 * mod.scaleX, 20 * mod.scaleY);\n}\n\nfunction drawMouth(sketch, speaking, intensity) {\n  sketch.fill(0);\n  const baseWidth = 60;\n  const baseHeight = 10;\n  \n  // Dynamic mouth based on speaking\n  const dynamicHeight = speaking \n    ? baseHeight + (intensity * 20) \n    : baseHeight;\n\n  sketch.rect(120, 250, baseWidth, dynamicHeight, 10);\n}\n\nexport default ProceduralAvatar;\n"],"names":["EMOTION_COLORS","neutral","happy","sad","excited","surprised","_ref","speaking","emotion","speechIntensity","sketchRef","useRef","useEffect","p5Instance","p5","sketch","setup","createCanvas","parent","current","draw","clear","r","g","b","fill","ellipse","eyeModifiers","y","scaleX","scaleY","mod","drawEyes","intensity","baseWidth","baseHeight","dynamicHeight","rect","drawMouth","remove","_jsx","ref","style","width","height"],"sourceRoot":""}