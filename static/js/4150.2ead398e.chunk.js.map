{"version":3,"file":"static/js/4150.2ead398e.chunk.js","mappings":"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","sources":["components/RPMAvatar.tsx","utils/rpmAvatars.ts","components/RPMAvatarGenerator.tsx","components/ProceduralAvatar.tsx","components/RPMAvatarCreatorModal.tsx","webpack://hub/./src/components/RPMAvatar.css?9aaa"],"sourcesContent":["import React, { useRef, useState, useEffect, useMemo, FC } from 'react';\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\nimport { OrbitControls, Text, Environment, useAnimations } from '@react-three/drei';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\nimport { RPMAvatarGenerator } from '../utils/rpmAvatars';\nimport { FacialBlendShapes } from '../services/AvatarMirrorSystem';\nimport './RPMAvatar.css';\nimport { ProceduralAvatar, generateAvatarConfig } from './ProceduralAvatar';\n\ninterface RPMAvatarProps {\n  avatarUrl: string;\n  emotions?: { [key: string]: number };\n  isAnimating?: boolean;\n  scale?: number;\n  position?: [number, number, number];\n  enableControls?: boolean;\n  className?: string;\n  blendShapes?: Partial<FacialBlendShapes>;\n}\n\ninterface BlendShapeData {\n  [key: string]: number;\n}\n\n// Mapping of RPM blendshapes to emotions\nconst EMOTION_BLENDSHAPE_MAP: { [key: string]: string } = {\n  // Joy/Happiness\n  'mouthSmile_L': 'joy',\n  'mouthSmile_R': 'joy',\n  'cheekSquint_L': 'joy',\n  'cheekSquint_R': 'joy',\n  \n  // Sadness\n  'mouthFrown_L': 'sadness',\n  'mouthFrown_R': 'sadness',\n  'browInnerUp': 'sadness',\n  \n  // Anger\n  'browDown_L': 'anger',\n  'browDown_R': 'anger',\n  'mouthPress_L': 'anger',\n  'mouthPress_R': 'anger',\n  'nostrilDilate_L': 'anger',\n  'nostrilDilate_R': 'anger',\n  \n  // Fear\n  'eyeWide_L_fear': 'fear',\n  'eyeWide_R_fear': 'fear',\n  'browUp_L_fear': 'fear',\n  'browUp_R_fear': 'fear',\n  'mouthOpen_fear': 'fear',\n  \n  // Surprise\n  'eyeWide_L_surprise': 'surprise',\n  'eyeWide_R_surprise': 'surprise',\n  'browUp_L_surprise': 'surprise',\n  'browUp_R_surprise': 'surprise',\n  'mouthOpen_surprise': 'surprise',\n  \n  // Disgust\n  'noseSneer_L': 'disgust',\n  'noseSneer_R': 'disgust',\n  'mouthUpperUp_L': 'disgust',\n  'mouthUpperUp_R': 'disgust',\n  \n  // Contempt\n  'mouthSmile_L_contempt': 'contempt', // asymmetric\n  'noseSneer_L_contempt': 'contempt',\n  \n  // Excitement\n  'mouthSmile_L_excitement': 'excitement',\n  'mouthSmile_R_excitement': 'excitement',\n  'eyeWide_L_excitement': 'excitement',\n  'eyeWide_R_excitement': 'excitement',\n  \n  // Concentration\n  'browDown_L_concentration': 'concentration',\n  'browDown_R_concentration': 'concentration',\n  'eyeSquint_L': 'concentration',\n  'eyeSquint_R': 'concentration'\n};\n\n// Fallback Avatar Component - defined outside to avoid issues\nconst FallbackAvatar: React.FC<{ \n  avatarUrl?: string; \n  position?: [number, number, number];\n  blendShapes?: any \n}> = ({ \n  avatarUrl, \n  position = [0, 0, 0],\n  blendShapes \n}) => {\n  // Generate avatar config based on URL or random\n  const avatarConfig = React.useMemo(() => {\n    // Parse avatar ID to generate consistent config\n    const seed = avatarUrl || 'default';\n    const hash = seed.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    \n    return generateAvatarConfig({\n      gender: hash % 2 === 0 ? 'male' : 'female',\n      ethnicity: ['caucasian', 'asian', 'african', 'hispanic'][hash % 4],\n      style: ['professional', 'casual', 'creative', 'elegant'][hash % 4],\n      age: hash % 3 === 0 ? 'young' : 'middle'\n    });\n  }, [avatarUrl]);\n  \n  return (\n    <ProceduralAvatar\n      {...avatarConfig}\n      position={position}\n      blendShapes={blendShapes}\n    />\n  );\n};\n\n// Avatar3D component - handles loading and displaying avatars\nconst Avatar3D: FC<{ \n  avatarUrl: string; \n  emotions?: BlendShapeData;\n  isAnimating?: boolean;\n  position?: [number, number, number];\n  blendShapes?: Partial<FacialBlendShapes>;\n}> = ({ avatarUrl, emotions = {}, isAnimating = false, position = [0, 0, 0], blendShapes = {} }) => {\n  const meshRef = useRef<THREE.Group>(null);\n  const [morphTargets, setMorphTargets] = useState<THREE.Mesh[]>([]);\n  const [loadError, setLoadError] = useState<boolean>(false);\n  const [gltf, setGltf] = useState<any>(null);\n  const [blinkTime, setBlinkTime] = useState(0);\n  const { actions, names } = useAnimations(gltf?.animations || [], meshRef);\n\n  // Load avatar with error handling\n  useEffect(() => {\n    if (!avatarUrl) {\n      console.log('RPMAvatar: No avatar URL provided, showing fallback');\n      setLoadError(true);\n      return;\n    }\n\n    console.log('RPMAvatar: Attempting to load avatar from:', avatarUrl);\n    const loader = new GLTFLoader();\n    loader.load(\n      avatarUrl,\n      (loadedGltf) => {\n        console.log('RPMAvatar: Successfully loaded avatar:', loadedGltf);\n        setGltf(loadedGltf);\n        setLoadError(false);\n      },\n      (progress) => {\n        console.log('RPMAvatar: Loading progress:', progress);\n      },\n      (error) => {\n        console.error('RPMAvatar: Failed to load avatar from', avatarUrl, 'Error:', error);\n        setLoadError(true);\n      }\n    );\n  }, [avatarUrl]);\n  \n  useEffect(() => {\n    if (gltf && gltf.scene && gltf.scene.children) {\n      // Find meshes with morph targets (face)\n      const meshesWithMorphs: THREE.Mesh[] = [];\n      \n      gltf.scene.traverse((child: THREE.Object3D) => {\n        if (child instanceof THREE.Mesh && child.morphTargetDictionary) {\n          console.log('🎯 Available morph targets:', Object.keys(child.morphTargetDictionary));\n          meshesWithMorphs.push(child);\n          \n          // Initialize with a slight smile\n          const smileLeft = child.morphTargetDictionary['mouthSmileLeft'];\n          const smileRight = child.morphTargetDictionary['mouthSmileRight'];\n          if (smileLeft !== undefined && smileRight !== undefined && child.morphTargetInfluences) {\n            child.morphTargetInfluences[smileLeft] = 0.2;\n            child.morphTargetInfluences[smileRight] = 0.2;\n          }\n          \n          // Check for blink morph targets\n          const leftBlink = child.morphTargetDictionary['eyeBlinkLeft'];\n          const rightBlink = child.morphTargetDictionary['eyeBlinkRight'];\n          console.log('👁️ Blink morph targets found:', { \n            leftBlink: leftBlink !== undefined, \n            rightBlink: rightBlink !== undefined \n          });\n        }\n      });\n      \n      setMorphTargets(meshesWithMorphs);\n    }\n  }, [gltf]);\n  \n  // Load and apply idle animation\n  useEffect(() => {\n    if (!gltf || !meshRef.current) return;\n    \n    // Load idle animation from public folder\n    const loader = new GLTFLoader();\n    loader.load(\n      '/animations/Idle.glb', // Standard idle animation\n      (animGltf) => {\n        if (animGltf.animations.length > 0 && meshRef.current) {\n          // Apply animation to our avatar\n          const mixer = new THREE.AnimationMixer(meshRef.current);\n          const action = mixer.clipAction(animGltf.animations[0]);\n          action.play();\n          \n          // Store mixer for updates\n          (meshRef.current as any).mixer = mixer;\n        }\n      },\n      undefined,\n      (error) => {\n        console.log('Could not load idle animation, avatar will remain in T-pose');\n      }\n    );\n  }, [gltf]);\n  \n  // Apply emotions to morph targets\n  useEffect(() => {\n    if (morphTargets.length > 0) {\n      morphTargets.forEach(mesh => {\n        // Reset all morph targets\n        if (mesh.morphTargetInfluences) {\n          mesh.morphTargetInfluences.fill(0);\n        }\n        \n        // Apply emotion-based morph targets\n        Object.entries(emotions).forEach(([emotion, intensity]) => {\n          // Find corresponding RPM blendshapes for this emotion\n          Object.entries(EMOTION_BLENDSHAPE_MAP).forEach(([blendshape, mappedEmotion]) => {\n            if (mappedEmotion === emotion && mesh.morphTargetDictionary![blendshape] !== undefined) {\n              const index = mesh.morphTargetDictionary![blendshape];\n              if (mesh.morphTargetInfluences && index !== undefined) {\n                mesh.morphTargetInfluences[index] = Math.min(intensity, 1.0);\n              }\n            }\n          });\n        });\n      });\n    }\n  }, [emotions, morphTargets]);\n\n  // Apply blend shapes to the avatar\n  useEffect(() => {\n    if (morphTargets.length > 0) {\n      morphTargets.forEach(mesh => {\n        // Apply each blend shape\n        Object.entries(blendShapes).forEach(([shapeName, value]) => {\n          if (mesh.morphTargetDictionary && mesh.morphTargetInfluences) {\n            const index = mesh.morphTargetDictionary[shapeName];\n            if (index !== undefined) {\n              mesh.morphTargetInfluences[index] = value as number;\n            }\n          }\n        });\n      });\n    }\n  }, [morphTargets, blendShapes]);\n\n  // Animation loop\n  useFrame((state, delta) => {\n    if (isAnimating && meshRef.current) {\n      // Removed rotation animation to keep avatar facing forward\n      // meshRef.current.rotation.y += 0.005;\n    }\n    \n    // Update animation mixer\n    if (meshRef.current && (meshRef.current as any).mixer) {\n      (meshRef.current as any).mixer.update(delta);\n    }\n    \n    // Blinking animation\n    setBlinkTime(prev => prev + delta);\n    if (morphTargets.length > 0 && blinkTime > 2) { // Blink every 2 seconds instead of 3\n      morphTargets.forEach(mesh => {\n        if (mesh.morphTargetDictionary && mesh.morphTargetInfluences) {\n          const leftBlink = mesh.morphTargetDictionary['eyeBlinkLeft'];\n          const rightBlink = mesh.morphTargetDictionary['eyeBlinkRight'];\n          \n          if (leftBlink !== undefined && rightBlink !== undefined) {\n            // Quick blink animation\n            const blinkProgress = (blinkTime - 2) * 15; // Faster blink (was 10)\n            if (blinkProgress < 1) {\n              const blinkValue = Math.sin(blinkProgress * Math.PI);\n              mesh.morphTargetInfluences[leftBlink] = blinkValue;\n              mesh.morphTargetInfluences[rightBlink] = blinkValue;\n            } else {\n              mesh.morphTargetInfluences[leftBlink] = 0;\n              mesh.morphTargetInfluences[rightBlink] = 0;\n              if (blinkProgress > 1.5) setBlinkTime(0); // Reset blink timer\n            }\n          }\n        }\n      });\n    }\n    \n    // Subtle breathing animation\n    if (meshRef.current) {\n      const breathingOffset = Math.sin(state.clock.elapsedTime * 0.5) * 0.01;\n      meshRef.current.scale.y = 1 + breathingOffset;\n    }\n  });\n\n  // Handle loading error or missing URL - AFTER all hooks\n  if (loadError || !avatarUrl) {\n    console.log('🎭 Avatar3D: Rendering fallback avatar. loadError:', loadError, 'avatarUrl:', avatarUrl);\n    \n    return (\n      <FallbackAvatar \n        avatarUrl={avatarUrl} \n        position={position} \n        blendShapes={blendShapes} \n      />\n    );\n  }\n  \n  if (!gltf) {\n    console.log('🎭 Avatar3D: No GLTF loaded yet, returning null');\n    return null;\n  }\n  \n  return (\n    <group ref={meshRef} position={position}>\n      <primitive object={gltf.scene} />\n    </group>\n  );\n};\n\nexport const RPMAvatar: FC<RPMAvatarProps> = ({ \n  avatarUrl, \n  emotions = {}, \n  isAnimating = true,\n  scale = 1,\n  position = [0, -1, 0],\n  enableControls = false,\n  className = '',\n  blendShapes = {}\n}) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  const handleLoadingComplete = () => {\n    setIsLoading(false);\n  };\n  \n  const handleError = (error: any) => {\n    console.error('RPM Avatar loading error:', error);\n    setError('Failed to load avatar');\n    setIsLoading(false);\n  };\n\n  // Log setup instructions on first render\n  useEffect(() => {\n    console.log(' RPMAvatar render - URL:', avatarUrl, 'isEmpty:', !avatarUrl);\n    if (!avatarUrl) {\n      console.log(' RPM Avatar: No URL provided, showing fallback avatar');\n      setIsLoading(false); // Don't show loading for fallback\n      RPMAvatarGenerator.logSetupInstructions();\n    }\n  }, [avatarUrl]);\n\n  return (\n    <div className={`rpm-avatar-container ${className}`} style={{ width: '100%', height: '100%', position: 'relative' }}>\n      {isLoading && (\n        <div className=\"avatar-loading\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading avatar...</p>\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"avatar-error\">\n          <p> {error}</p>\n          <p>Using fallback image</p>\n        </div>\n      )}\n      \n      <Canvas\n        camera={{ position: [0, 1.6, 1.2], fov: 30 }}\n        style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', width: '100%', height: '100%' }}\n        gl={{ \n          preserveDrawingBuffer: true,\n          antialias: true,\n          alpha: true\n        }}\n        onCreated={(state) => {\n          console.log('🎨 Canvas created successfully!', state);\n          // Add context lost/restored handlers\n          const canvas = state.gl.domElement;\n          canvas.addEventListener('webglcontextlost', (e) => {\n            console.warn('🚨 WebGL context lost, preventing default');\n            e.preventDefault();\n          });\n          canvas.addEventListener('webglcontextrestored', () => {\n            console.log('✅ WebGL context restored');\n          });\n          handleLoadingComplete();\n        }}\n        onError={(error) => {\n          console.error('🚨 Canvas error:', error);\n          handleError(error);\n        }}\n      >\n        <ambientLight intensity={0.5} />\n        <directionalLight position={[0, 2, 3]} intensity={1.2} />\n        <pointLight position={[-2, 1, 2]} intensity={0.8} color=\"#ffd700\" />\n        <pointLight position={[2, 1, 2]} intensity={0.6} color=\"#87ceeb\" />\n        \n        <Avatar3D \n          avatarUrl={avatarUrl} \n          emotions={emotions}\n          isAnimating={isAnimating}\n          position={position}\n          blendShapes={blendShapes}\n        />\n        \n        <OrbitControls \n          enableZoom={false}\n          enablePan={false}\n          enableRotate={false}\n          target={[0, 1.5, 0]}\n        />\n        \n        <Environment preset=\"studio\" />\n      </Canvas>\n    </div>\n  );\n};\n\nexport default RPMAvatar;\n","// Ready Player Me Avatar Utilities\n// This file contains sample RPM avatar URLs and utilities for avatar generation\n\nexport interface RPMAvatarConfig {\n  id: string;\n  name: string;\n  gender: 'male' | 'female';\n  style: 'realistic' | 'cartoon';\n  avatarUrl: string;\n}\n\n// Demo RPM Avatars - Using official Ready Player Me demo URLs\nexport const DEMO_RPM_AVATARS: RPMAvatarConfig[] = [\n  {\n    id: 'demo-male-1',\n    name: 'Alex',\n    gender: 'male',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5d.glb' // Official RPM demo male\n  },\n  {\n    id: 'demo-female-1', \n    name: 'Jordan',\n    gender: 'female',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5e.glb' // Official RPM demo female\n  },\n  {\n    id: 'demo-female-2',\n    name: 'Sam',\n    gender: 'female',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5f.glb' // Official RPM demo female\n  },\n  {\n    id: 'demo-male-2',\n    name: 'River',\n    gender: 'male',\n    style: 'realistic',\n    avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d60.glb' // Official RPM demo male\n  }\n];\n\n// Instructions for getting real RPM avatars\nexport const RPM_SETUP_INSTRUCTIONS = `\n🎭 HOW TO GET REAL RPM AVATARS:\n\n1. CREATE AVATARS:\n   • Visit https://readyplayer.me\n   • Create free avatars for your NPCs\n   • Copy the .glb URLs (e.g., https://models.readyplayer.me/your-avatar-id.glb)\n\n2. UPDATE AVATAR URLS:\n   • Replace empty URLs in DEMO_RPM_AVATARS with your real avatar URLs\n   • Or use the RPMAvatarCreator component to let users input custom URLs\n\n3. CURRENT STATUS:\n   • Fallback geometric avatars are showing (blue 3D shapes with simple faces)\n   • These demonstrate the 3D avatar positioning and emotion system\n   • Replace URLs to see actual RPM avatars with realistic faces and bodies\n\n4. WHERE TO SEE AVATARS:\n   • Dating Simulation → Match with someone → Chat → Video Date\n   • The 3D avatar appears in the video call interface\n   • Emotions change based on conversation (via Hume AI)\n`;\n\n// RPM Avatar Generator Integration\nexport class RPMAvatarGenerator {\n  private static readonly RPM_SUBDOMAIN = 'demo'; // Replace with your subdomain\n  private static readonly RPM_API_BASE = 'https://api.readyplayer.me/v1';\n  \n  /**\n   * Generate Avatar Creator URL for custom avatar creation\n   * Users can create their own avatars using this URL\n   */\n  static getAvatarCreatorUrl(config?: {\n    bodyType?: 'halfbody' | 'fullbody';\n    quickStart?: boolean;\n    clearCache?: boolean;\n  }): string {\n    const params = new URLSearchParams();\n    \n    if (config?.bodyType) params.set('bodyType', config.bodyType);\n    if (config?.quickStart) params.set('quickStart', 'true');\n    if (config?.clearCache) params.set('clearCache', 'true');\n    \n    const queryString = params.toString();\n    const baseUrl = `https://${this.RPM_SUBDOMAIN}.readyplayer.me/avatar`;\n    \n    return queryString ? `${baseUrl}?${queryString}` : baseUrl;\n  }\n  \n  /**\n   * Validate if an avatar URL is properly formatted\n   */\n  static isValidAvatarUrl(url: string): boolean {\n    const rpmUrlPattern = /^https:\\/\\/(models\\.readyplayer\\.me|d1a370nemizbjq\\.cloudfront\\.net)\\/.+\\.glb$/;\n    return rpmUrlPattern.test(url);\n  }\n  \n  /**\n   * Get a random demo avatar for testing\n   */\n  static getRandomDemoAvatar(): RPMAvatarConfig {\n    const avatars = DEMO_RPM_AVATARS;\n    return avatars[Math.floor(Math.random() * avatars.length)];\n  }\n  \n  /**\n   * Get avatar by character name\n   */\n  static getAvatarByName(name: string): RPMAvatarConfig | null {\n    return DEMO_RPM_AVATARS.find(avatar => \n      avatar.name.toLowerCase() === name.toLowerCase()\n    ) || null;\n  }\n\n  /**\n   * Log setup instructions to console\n   */\n  static logSetupInstructions(): void {\n    console.log(RPM_SETUP_INSTRUCTIONS);\n  }\n}\n\n// Avatar URL validation and fallback\nexport const getValidAvatarUrl = (url?: string): string | undefined => {\n  if (!url) return undefined;\n  \n  // If it's a valid RPM URL, return it\n  if (RPMAvatarGenerator.isValidAvatarUrl(url)) {\n    return url;\n  }\n  \n  // Otherwise return undefined to use fallback\n  return undefined;\n};\n\nexport default {\n  DEMO_RPM_AVATARS,\n  RPMAvatarGenerator,\n  getValidAvatarUrl,\n  RPM_SETUP_INSTRUCTIONS\n};\n","import React, { useState, useEffect } from 'react';\nimport RPMAvatar from './RPMAvatar';\nimport RPMAvatarCreatorModal from './RPMAvatarCreatorModal';\n\ninterface RPMAvatarProfile {\n  id: string;\n  name: string;\n  avatarUrl: string;\n  gender: 'male' | 'female' | 'non-binary';\n  style: 'realistic' | 'stylized' | 'anime';\n  personality: string[];\n  emotions: { [key: string]: number };\n}\n\n// Pre-made RPM avatar URLs for different NPCs\nconst SAMPLE_RPM_AVATARS: RPMAvatarProfile[] = [\n  {\n    id: 'alex',\n    name: 'Alex',\n    avatarUrl: 'https://models.readyplayer.me/64bfa15f0e72c63d7c3f5a1e.glb', // Example URL\n    gender: 'male',\n    style: 'realistic',\n    personality: ['intellectual', 'thoughtful', 'adventurous'],\n    emotions: { concentration: 0.3, joy: 0.2 }\n  },\n  {\n    id: 'jamie',\n    name: 'Jamie',\n    avatarUrl: 'https://models.readyplayer.me/64bfa15f0e72c63d7c3f5a2f.glb', // Example URL\n    gender: 'female',\n    style: 'realistic',\n    personality: ['creative', 'passionate', 'witty'],\n    emotions: { joy: 0.4, excitement: 0.3 }\n  },\n  {\n    id: 'sam',\n    name: 'Sam',\n    avatarUrl: 'https://models.readyplayer.me/64bfa15f0e72c63d7c3f5a3g.glb', // Example URL\n    gender: 'female',\n    style: 'realistic',\n    personality: ['ambitious', 'practical', 'warm'],\n    emotions: { concentration: 0.2, joy: 0.3 }\n  },\n  {\n    id: 'river',\n    name: 'River',\n    avatarUrl: 'https://models.readyplayer.me/64bfa15f0e72c63d7c3f5a4h.glb', // Example URL\n    gender: 'male',\n    style: 'stylized',\n    personality: ['artistic', 'mysterious', 'sensitive'],\n    emotions: { contemplation: 0.4, mystery: 0.3 }\n  }\n];\n\ninterface RPMAvatarGeneratorProps {\n  onAvatarSelect?: (avatar: RPMAvatarProfile) => void;\n  selectedAvatarId?: string;\n  showGenerator?: boolean;\n}\n\nexport const RPMAvatarGenerator: React.FC<RPMAvatarGeneratorProps> = ({\n  onAvatarSelect,\n  selectedAvatarId,\n  showGenerator = true\n}) => {\n  const [selectedAvatar, setSelectedAvatar] = useState<RPMAvatarProfile | null>(null);\n  const [customAvatarUrl, setCustomAvatarUrl] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generatorMode, setGeneratorMode] = useState<'preset' | 'custom' | 'generate' | 'creator'>('preset');\n  const [showRPMCreator, setShowRPMCreator] = useState(false);\n\n  useEffect(() => {\n    if (selectedAvatarId) {\n      const avatar = SAMPLE_RPM_AVATARS.find(a => a.id === selectedAvatarId);\n      if (avatar) {\n        setSelectedAvatar(avatar);\n      }\n    }\n  }, [selectedAvatarId]);\n\n  const handleAvatarSelect = (avatar: RPMAvatarProfile) => {\n    setSelectedAvatar(avatar);\n    onAvatarSelect?.(avatar);\n  };\n\n  const generateNewAvatar = async () => {\n    setIsGenerating(true);\n    \n    // In a real implementation, this would call the RPM API\n    // For now, we'll simulate the process\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Generate random avatar URL (in real implementation, this comes from RPM API)\n      const newAvatarUrl = `https://models.readyplayer.me/generated-${Date.now()}.glb`;\n      \n      const newAvatar: RPMAvatarProfile = {\n        id: `generated-${Date.now()}`,\n        name: 'Generated Avatar',\n        avatarUrl: newAvatarUrl,\n        gender: 'non-binary',\n        style: 'realistic',\n        personality: ['unique', 'generated'],\n        emotions: { neutral: 0.5 }\n      };\n      \n      handleAvatarSelect(newAvatar);\n    } catch (error) {\n      console.error('Avatar generation failed:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleCustomUrl = () => {\n    if (customAvatarUrl.trim()) {\n      const customAvatar: RPMAvatarProfile = {\n        id: `custom-${Date.now()}`,\n        name: 'Custom Avatar',\n        avatarUrl: customAvatarUrl.trim(),\n        gender: 'non-binary',\n        style: 'realistic',\n        personality: ['custom'],\n        emotions: { neutral: 0.5 }\n      };\n      \n      handleAvatarSelect(customAvatar);\n      setCustomAvatarUrl('');\n    }\n  };\n\n  const handleRPMAvatarCreated = (avatarUrl: string) => {\n    const newAvatar: RPMAvatarProfile = {\n      id: `rpm-${Date.now()}`,\n      name: 'My Avatar',\n      avatarUrl: avatarUrl,\n      gender: 'non-binary',\n      style: 'realistic',\n      personality: ['custom', 'unique'],\n      emotions: { neutral: 0.5 }\n    };\n    \n    handleAvatarSelect(newAvatar);\n    setShowRPMCreator(false);\n  };\n\n  if (!showGenerator) {\n    return selectedAvatar ? (\n      <RPMAvatar\n        avatarUrl={selectedAvatar.avatarUrl}\n        emotions={selectedAvatar.emotions}\n        className=\"selected-avatar\"\n      />\n    ) : null;\n  }\n\n  return (\n    <div className=\"rpm-avatar-generator\">\n      <div className=\"generator-header\">\n        <h3>🎭 Choose Your Avatar</h3>\n        <div className=\"mode-selector\">\n          <button \n            className={generatorMode === 'preset' ? 'active' : ''}\n            onClick={() => setGeneratorMode('preset')}\n          >\n            📋 Presets\n          </button>\n          <button \n            className={generatorMode === 'generate' ? 'active' : ''}\n            onClick={() => setGeneratorMode('generate')}\n          >\n            🎲 Generate\n          </button>\n          <button \n            className={generatorMode === 'custom' ? 'active' : ''}\n            onClick={() => setGeneratorMode('custom')}\n          >\n            🔗 Custom URL\n          </button>\n          <button \n            className={generatorMode === 'creator' ? 'active' : ''}\n            onClick={() => {\n              setGeneratorMode('creator');\n              setShowRPMCreator(true);\n            }}\n          >\n            🎨 Create\n          </button>\n        </div>\n      </div>\n\n      {generatorMode === 'preset' && (\n        <div className=\"preset-avatars\">\n          <div className=\"avatar-grid\">\n            {SAMPLE_RPM_AVATARS.map((avatar) => (\n              <div \n                key={avatar.id}\n                className={`avatar-card ${selectedAvatar?.id === avatar.id ? 'selected' : ''}`}\n                onClick={() => handleAvatarSelect(avatar)}\n              >\n                <div className=\"avatar-preview\">\n                  <RPMAvatar\n                    avatarUrl={avatar.avatarUrl}\n                    emotions={avatar.emotions}\n                    isAnimating={false}\n                    enableControls={false}\n                  />\n                </div>\n                <div className=\"avatar-info\">\n                  <h4>{avatar.name}</h4>\n                  <div className=\"avatar-tags\">\n                    <span className={`gender-tag ${avatar.gender}`}>\n                      {avatar.gender}\n                    </span>\n                    <span className={`style-tag ${avatar.style}`}>\n                      {avatar.style}\n                    </span>\n                  </div>\n                  <div className=\"personality-tags\">\n                    {avatar.personality.slice(0, 2).map((trait, index) => (\n                      <span key={index} className=\"personality-tag\">\n                        {trait}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {generatorMode === 'generate' && (\n        <div className=\"avatar-generator\">\n          <div className=\"generator-options\">\n            <h4>🎨 Generate New Avatar</h4>\n            <p>Create a unique avatar using Ready Player Me's generator</p>\n            \n            <div className=\"generation-controls\">\n              <div className=\"option-group\">\n                <label>Gender:</label>\n                <select>\n                  <option value=\"random\">Random</option>\n                  <option value=\"male\">Male</option>\n                  <option value=\"female\">Female</option>\n                  <option value=\"non-binary\">Non-binary</option>\n                </select>\n              </div>\n              \n              <div className=\"option-group\">\n                <label>Style:</label>\n                <select>\n                  <option value=\"realistic\">Realistic</option>\n                  <option value=\"stylized\">Stylized</option>\n                  <option value=\"anime\">Anime</option>\n                </select>\n              </div>\n            </div>\n            \n            <button \n              className=\"generate-btn\"\n              onClick={generateNewAvatar}\n              disabled={isGenerating}\n            >\n              {isGenerating ? '🎲 Generating...' : '🎲 Generate Avatar'}\n            </button>\n            \n            <div className=\"rpm-integration-note\">\n              <p>💡 <strong>Pro Tip:</strong> Visit <a href=\"https://readyplayer.me\" target=\"_blank\" rel=\"noopener noreferrer\">ReadyPlayer.Me</a> to create custom avatars</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {generatorMode === 'custom' && (\n        <div className=\"custom-avatar\">\n          <h4>🔗 Custom Avatar URL</h4>\n          <p>Enter a Ready Player Me avatar URL (.glb file)</p>\n          \n          <div className=\"url-input-group\">\n            <input\n              type=\"url\"\n              placeholder=\"https://models.readyplayer.me/your-avatar.glb\"\n              value={customAvatarUrl}\n              onChange={(e) => setCustomAvatarUrl(e.target.value)}\n            />\n            <button onClick={handleCustomUrl} disabled={!customAvatarUrl.trim()}>\n              Load Avatar\n            </button>\n          </div>\n          \n          <div className=\"url-help\">\n            <h5>How to get your avatar URL:</h5>\n            <ol>\n              <li>Visit <a href=\"https://readyplayer.me\" target=\"_blank\" rel=\"noopener noreferrer\">ReadyPlayer.Me</a></li>\n              <li>Create or customize your avatar</li>\n              <li>Copy the .glb model URL</li>\n              <li>Paste it above</li>\n            </ol>\n          </div>\n        </div>\n      )}\n\n      {generatorMode === 'creator' && (\n        <RPMAvatarCreatorModal\n          isOpen={showRPMCreator}\n          onClose={() => setShowRPMCreator(false)}\n          onAvatarCreated={handleRPMAvatarCreated}\n        />\n      )}\n\n      {selectedAvatar && (\n        <div className=\"selected-avatar-preview\">\n          <h4>Selected Avatar: {selectedAvatar.name}</h4>\n          <div className=\"preview-container\">\n            <RPMAvatar\n              avatarUrl={selectedAvatar.avatarUrl}\n              emotions={selectedAvatar.emotions}\n              enableControls={true}\n            />\n          </div>\n        </div>\n      )}\n\n      <style>{`\n        .rpm-avatar-generator {\n          background: white;\n          border-radius: 12px;\n          padding: 24px;\n          box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n        }\n\n        .generator-header {\n          margin-bottom: 24px;\n        }\n\n        .generator-header h3 {\n          margin: 0 0 16px 0;\n          color: #333;\n        }\n\n        .mode-selector {\n          display: flex;\n          gap: 8px;\n          background: #f5f5f5;\n          padding: 4px;\n          border-radius: 8px;\n        }\n\n        .mode-selector button {\n          flex: 1;\n          padding: 8px 16px;\n          border: none;\n          background: transparent;\n          border-radius: 6px;\n          cursor: pointer;\n          transition: all 0.2s ease;\n          font-size: 14px;\n        }\n\n        .mode-selector button.active {\n          background: white;\n          box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n          color: #667eea;\n          font-weight: 600;\n        }\n\n        .avatar-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n          gap: 16px;\n        }\n\n        .avatar-card {\n          border: 2px solid #e9ecef;\n          border-radius: 12px;\n          padding: 16px;\n          cursor: pointer;\n          transition: all 0.2s ease;\n          background: white;\n        }\n\n        .avatar-card:hover {\n          border-color: #667eea;\n          transform: translateY(-2px);\n          box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);\n        }\n\n        .avatar-card.selected {\n          border-color: #667eea;\n          background: #f8f9ff;\n        }\n\n        .avatar-preview {\n          height: 200px;\n          margin-bottom: 12px;\n          border-radius: 8px;\n          overflow: hidden;\n          background: #f8f9fa;\n        }\n\n        .avatar-info h4 {\n          margin: 0 0 8px 0;\n          color: #333;\n        }\n\n        .avatar-tags {\n          display: flex;\n          gap: 8px;\n          margin-bottom: 8px;\n        }\n\n        .gender-tag, .style-tag {\n          padding: 4px 8px;\n          border-radius: 12px;\n          font-size: 12px;\n          font-weight: 600;\n          text-transform: capitalize;\n        }\n\n        .gender-tag.male { background: #e3f2fd; color: #1976d2; }\n        .gender-tag.female { background: #fce4ec; color: #c2185b; }\n        .gender-tag.non-binary { background: #f3e5f5; color: #7b1fa2; }\n\n        .style-tag.realistic { background: #e8f5e8; color: #2e7d32; }\n        .style-tag.stylized { background: #fff3e0; color: #f57c00; }\n        .style-tag.anime { background: #e1f5fe; color: #0277bd; }\n\n        .personality-tags {\n          display: flex;\n          gap: 4px;\n          flex-wrap: wrap;\n        }\n\n        .personality-tag {\n          background: #f5f5f5;\n          color: #666;\n          padding: 2px 6px;\n          border-radius: 8px;\n          font-size: 11px;\n        }\n\n        .generator-options {\n          text-align: center;\n          padding: 24px;\n        }\n\n        .generation-controls {\n          display: flex;\n          gap: 16px;\n          justify-content: center;\n          margin: 20px 0;\n        }\n\n        .option-group {\n          display: flex;\n          flex-direction: column;\n          gap: 4px;\n        }\n\n        .option-group label {\n          font-size: 14px;\n          font-weight: 600;\n          color: #333;\n        }\n\n        .option-group select {\n          padding: 8px 12px;\n          border: 1px solid #ddd;\n          border-radius: 6px;\n          font-size: 14px;\n        }\n\n        .generate-btn {\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          color: white;\n          border: none;\n          padding: 12px 24px;\n          border-radius: 8px;\n          font-size: 16px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: transform 0.2s ease;\n        }\n\n        .generate-btn:hover:not(:disabled) {\n          transform: translateY(-2px);\n        }\n\n        .generate-btn:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        .rpm-integration-note {\n          margin-top: 20px;\n          padding: 16px;\n          background: #f8f9ff;\n          border-radius: 8px;\n          border-left: 4px solid #667eea;\n        }\n\n        .rpm-integration-note a {\n          color: #667eea;\n          text-decoration: none;\n          font-weight: 600;\n        }\n\n        .url-input-group {\n          display: flex;\n          gap: 8px;\n          margin: 16px 0;\n        }\n\n        .url-input-group input {\n          flex: 1;\n          padding: 12px;\n          border: 1px solid #ddd;\n          border-radius: 6px;\n          font-size: 14px;\n        }\n\n        .url-input-group button {\n          background: #667eea;\n          color: white;\n          border: none;\n          padding: 12px 20px;\n          border-radius: 6px;\n          cursor: pointer;\n          font-weight: 600;\n        }\n\n        .url-help {\n          background: #f8f9fa;\n          padding: 16px;\n          border-radius: 8px;\n          text-align: left;\n        }\n\n        .url-help h5 {\n          margin: 0 0 8px 0;\n          color: #333;\n        }\n\n        .url-help ol {\n          margin: 0;\n          padding-left: 20px;\n        }\n\n        .url-help li {\n          margin-bottom: 4px;\n        }\n\n        .selected-avatar-preview {\n          margin-top: 24px;\n          padding-top: 24px;\n          border-top: 1px solid #e9ecef;\n        }\n\n        .selected-avatar-preview h4 {\n          margin: 0 0 16px 0;\n          color: #333;\n        }\n\n        .preview-container {\n          height: 300px;\n          border-radius: 12px;\n          overflow: hidden;\n          background: #f8f9fa;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default RPMAvatarGenerator;\n","import React, { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\ninterface ProceduralAvatarProps {\n  gender: 'male' | 'female';\n  skinTone: string;\n  hairColor: string;\n  hairStyle: 'short' | 'medium' | 'long' | 'bald';\n  clothingColor: string;\n  position?: [number, number, number];\n  blendShapes?: any;\n}\n\nexport const ProceduralAvatar: React.FC<ProceduralAvatarProps> = ({\n  gender,\n  skinTone,\n  hairColor,\n  hairStyle,\n  clothingColor,\n  position = [0, 0, 0],\n  blendShapes = {}\n}) => {\n  const groupRef = useRef<THREE.Group>(null);\n  const headRef = useRef<THREE.Mesh>(null);\n  \n  // Generate avatar colors\n  const skinColor = useMemo(() => {\n    const tones: Record<string, string> = {\n      light: '#fdbcb4',\n      medium: '#d4a574',\n      dark: '#8b6f47',\n      pale: '#ffe0bd',\n      tan: '#cd853f'\n    };\n    return tones[skinTone] || tones.medium;\n  }, [skinTone]);\n\n  // Body proportions based on gender\n  const proportions = useMemo(() => {\n    return gender === 'female' ? {\n      shoulderWidth: 0.35,\n      hipWidth: 0.4,\n      chestSize: 0.15,\n      waistSize: 0.3,\n      headSize: 0.25\n    } : {\n      shoulderWidth: 0.45,\n      hipWidth: 0.35,\n      chestSize: 0.1,\n      waistSize: 0.35,\n      headSize: 0.28\n    };\n  }, [gender]);\n\n  // Animation\n  useFrame((state) => {\n    if (groupRef.current) {\n      // Breathing animation\n      groupRef.current.scale.y = 1 + Math.sin(state.clock.elapsedTime * 2) * 0.01;\n      \n      // Subtle idle movement\n      groupRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.05;\n    }\n    \n    // Apply blend shapes for expressions\n    if (headRef.current && blendShapes) {\n      // Simulate blend shape effects with scale/position adjustments\n      if (blendShapes.mouthSmile) {\n        // Smile effect\n      }\n      if (blendShapes.eyesClosed) {\n        // Blink effect\n      }\n    }\n  });\n\n  return (\n    <group ref={groupRef} position={position}>\n      {/* Head */}\n      <mesh ref={headRef} position={[0, 1.6, 0]}>\n        <sphereGeometry args={[proportions.headSize, 16, 16]} />\n        <meshStandardMaterial color={skinColor} />\n      </mesh>\n      \n      {/* Eyes */}\n      <mesh position={[-0.08, 1.65, 0.2]}>\n        <sphereGeometry args={[0.03, 8, 8]} />\n        <meshStandardMaterial color=\"#333\" />\n      </mesh>\n      <mesh position={[0.08, 1.65, 0.2]}>\n        <sphereGeometry args={[0.03, 8, 8]} />\n        <meshStandardMaterial color=\"#333\" />\n      </mesh>\n      \n      {/* Hair */}\n      {hairStyle !== 'bald' && (\n        <mesh position={[0, 1.75, 0]}>\n          <sphereGeometry args={[\n            proportions.headSize + 0.05,\n            16,\n            16,\n            0,\n            Math.PI * 2,\n            0,\n            hairStyle === 'short' ? Math.PI * 0.4 : \n            hairStyle === 'medium' ? Math.PI * 0.5 : \n            Math.PI * 0.6\n          ]} />\n          <meshStandardMaterial color={hairColor} />\n        </mesh>\n      )}\n      \n      {/* Body/Torso */}\n      <mesh position={[0, 1, 0]}>\n        <cylinderGeometry args={[\n          proportions.shoulderWidth,\n          proportions.hipWidth,\n          0.8,\n          8\n        ]} />\n        <meshStandardMaterial color={clothingColor} />\n      </mesh>\n      \n      {/* Arms */}\n      <mesh position={[-proportions.shoulderWidth - 0.15, 1, 0]} rotation={[0, 0, -0.3]}>\n        <cylinderGeometry args={[0.08, 0.06, 0.7, 8]} />\n        <meshStandardMaterial color={skinColor} />\n      </mesh>\n      <mesh position={[proportions.shoulderWidth + 0.15, 1, 0]} rotation={[0, 0, 0.3]}>\n        <cylinderGeometry args={[0.08, 0.06, 0.7, 8]} />\n        <meshStandardMaterial color={skinColor} />\n      </mesh>\n      \n      {/* Legs */}\n      <mesh position={[-0.15, 0.2, 0]}>\n        <cylinderGeometry args={[0.1, 0.08, 0.8, 8]} />\n        <meshStandardMaterial color=\"#2c3e50\" />\n      </mesh>\n      <mesh position={[0.15, 0.2, 0]}>\n        <cylinderGeometry args={[0.1, 0.08, 0.8, 8]} />\n        <meshStandardMaterial color=\"#2c3e50\" />\n      </mesh>\n    </group>\n  );\n};\n\n// Avatar configuration generator\nexport const generateAvatarConfig = (preferences: {\n  gender?: 'male' | 'female';\n  ethnicity?: string;\n  style?: string;\n  age?: string;\n}) => {\n  // Skin tone based on ethnicity\n  const skinTones: Record<string, string> = {\n    caucasian: 'light',\n    asian: 'pale',\n    african: 'dark',\n    hispanic: 'medium',\n    middleEastern: 'tan'\n  };\n  \n  // Hair colors\n  const hairColors = ['#2c3e50', '#8b4513', '#daa520', '#dc143c', '#696969'];\n  \n  // Clothing colors based on style\n  const clothingColors: Record<string, string> = {\n    professional: '#2c3e50',\n    casual: '#3498db',\n    creative: '#9b59b6',\n    elegant: '#c0392b',\n    athletic: '#27ae60'\n  };\n  \n  return {\n    gender: preferences.gender || 'female',\n    skinTone: skinTones[preferences.ethnicity || 'caucasian'] || 'medium',\n    hairColor: hairColors[Math.floor(Math.random() * hairColors.length)],\n    hairStyle: ['short', 'medium', 'long'][Math.floor(Math.random() * 3)] as any,\n    clothingColor: clothingColors[preferences.style || 'casual'] || '#3498db'\n  };\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { rpmService } from '../services/readyPlayerMeService';\n\ninterface RPMAvatarCreatorModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onAvatarCreated: (avatarUrl: string) => void;\n  title?: string;\n}\n\nconst RPMAvatarCreatorModal: React.FC<RPMAvatarCreatorModalProps> = ({\n  isOpen,\n  onClose,\n  onAvatarCreated,\n  title = \"Create Your Avatar\"\n}) => {\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    // Setup message listener for avatar creation\n    const cleanup = rpmService.setupAvatarCreatorListener(\n      (avatarUrl: string) => {\n        console.log('Avatar created successfully:', avatarUrl);\n        onAvatarCreated(avatarUrl);\n        onClose();\n      },\n      (error: string) => {\n        console.error('Avatar creation error:', error);\n        setError(error);\n      }\n    );\n\n    return cleanup;\n  }, [isOpen, onAvatarCreated, onClose]);\n\n  const handleIframeLoad = () => {\n    setIsLoading(false);\n  };\n\n  const handleIframeError = () => {\n    setIsLoading(false);\n    setError('Failed to load avatar creator. Please check your RPM configuration.');\n  };\n\n  if (!isOpen) return null;\n\n  const avatarCreatorUrl = rpmService.getAvatarCreatorUrl({\n    bodyType: 'halfbody',\n    quickStart: false,\n    clearCache: true\n  });\n\n  return (\n    <div className=\"rpm-modal-overlay\">\n      <div className=\"rpm-modal\">\n        <div className=\"rpm-modal-header\">\n          <h2>{title}</h2>\n          <button className=\"rpm-close-btn\" onClick={onClose}>\n            ✕\n          </button>\n        </div>\n        \n        <div className=\"rpm-modal-content\">\n          {isLoading && (\n            <div className=\"rpm-loading\">\n              <div className=\"rpm-spinner\"></div>\n              <p>Loading avatar creator...</p>\n            </div>\n          )}\n          \n          {error && (\n            <div className=\"rpm-error\">\n              <h3>Configuration Required</h3>\n              <p>{error}</p>\n              <div className=\"rpm-setup-instructions\">\n                <h4>Setup Instructions:</h4>\n                <ol>\n                  <li>Go to <a href=\"https://studio.readyplayer.me\" target=\"_blank\" rel=\"noopener noreferrer\">studio.readyplayer.me</a></li>\n                  <li>Create a free developer account</li>\n                  <li>Create a new Application</li>\n                  <li>Copy your subdomain and App ID</li>\n                  <li>Update the configuration in <code>src/services/readyPlayerMeService.ts</code></li>\n                </ol>\n              </div>\n            </div>\n          )}\n          \n          <iframe\n            ref={iframeRef}\n            src={avatarCreatorUrl}\n            className=\"rpm-iframe\"\n            onLoad={handleIframeLoad}\n            onError={handleIframeError}\n            allow=\"camera; microphone\"\n          />\n        </div>\n      </div>\n\n      <style>{`\n        .rpm-modal-overlay {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(0, 0, 0, 0.8);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          z-index: 1000;\n        }\n\n        .rpm-modal {\n          background: white;\n          border-radius: 12px;\n          width: 90vw;\n          height: 90vh;\n          max-width: 800px;\n          max-height: 600px;\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n        }\n\n        .rpm-modal-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 20px;\n          border-bottom: 1px solid #eee;\n          background: #f8f9fa;\n        }\n\n        .rpm-modal-header h2 {\n          margin: 0;\n          color: #333;\n        }\n\n        .rpm-close-btn {\n          background: none;\n          border: none;\n          font-size: 24px;\n          cursor: pointer;\n          color: #666;\n          padding: 0;\n          width: 30px;\n          height: 30px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .rpm-close-btn:hover {\n          color: #333;\n        }\n\n        .rpm-modal-content {\n          flex: 1;\n          position: relative;\n          display: flex;\n          flex-direction: column;\n        }\n\n        .rpm-iframe {\n          width: 100%;\n          height: 100%;\n          border: none;\n          flex: 1;\n        }\n\n        .rpm-loading {\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          background: white;\n          z-index: 10;\n        }\n\n        .rpm-spinner {\n          width: 40px;\n          height: 40px;\n          border: 4px solid #f3f3f3;\n          border-top: 4px solid #007bff;\n          border-radius: 50%;\n          animation: rpm-spin 1s linear infinite;\n          margin-bottom: 16px;\n        }\n\n        @keyframes rpm-spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n\n        .rpm-error {\n          padding: 40px;\n          text-align: center;\n          color: #666;\n        }\n\n        .rpm-error h3 {\n          color: #dc3545;\n          margin-bottom: 16px;\n        }\n\n        .rpm-setup-instructions {\n          background: #f8f9fa;\n          padding: 20px;\n          border-radius: 8px;\n          margin-top: 20px;\n          text-align: left;\n        }\n\n        .rpm-setup-instructions h4 {\n          margin-top: 0;\n          color: #333;\n        }\n\n        .rpm-setup-instructions ol {\n          margin: 16px 0;\n          padding-left: 20px;\n        }\n\n        .rpm-setup-instructions li {\n          margin-bottom: 8px;\n        }\n\n        .rpm-setup-instructions a {\n          color: #007bff;\n          text-decoration: none;\n        }\n\n        .rpm-setup-instructions a:hover {\n          text-decoration: underline;\n        }\n\n        .rpm-setup-instructions code {\n          background: #e9ecef;\n          padding: 2px 6px;\n          border-radius: 4px;\n          font-family: 'Monaco', 'Consolas', monospace;\n          font-size: 14px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default RPMAvatarCreatorModal;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["EMOTION_BLENDSHAPE_MAP","FallbackAvatar","_ref","avatarUrl","position","blendShapes","avatarConfig","React","hash","split","reduce","acc","char","charCodeAt","generateAvatarConfig","gender","ethnicity","style","age","_jsx","ProceduralAvatar","_objectSpread","Avatar3D","_ref2","emotions","isAnimating","meshRef","useRef","morphTargets","setMorphTargets","useState","loadError","setLoadError","gltf","setGltf","blinkTime","setBlinkTime","actions","names","useAnimations","animations","useEffect","console","log","GLTFLoader","load","loadedGltf","progress","error","scene","children","meshesWithMorphs","traverse","child","THREE","morphTargetDictionary","Object","keys","push","smileLeft","smileRight","undefined","morphTargetInfluences","leftBlink","rightBlink","current","animGltf","length","mixer","clipAction","play","forEach","mesh","fill","entries","_ref3","emotion","intensity","_ref4","blendshape","mappedEmotion","index","Math","min","_ref5","shapeName","value","useFrame","state","delta","update","prev","blinkProgress","blinkValue","sin","PI","breathingOffset","clock","elapsedTime","scale","y","ref","object","RPMAvatar","_ref6","enableControls","className","isLoading","setIsLoading","setError","RPMAvatarGenerator","logSetupInstructions","_jsxs","concat","width","height","Canvas","camera","fov","background","gl","preserveDrawingBuffer","antialias","alpha","onCreated","canvas","domElement","addEventListener","e","warn","preventDefault","onError","handleError","color","OrbitControls","enableZoom","enablePan","enableRotate","target","Environment","preset","DEMO_RPM_AVATARS","id","name","RPM_SETUP_INSTRUCTIONS","getAvatarCreatorUrl","config","params","URLSearchParams","bodyType","set","quickStart","clearCache","queryString","toString","baseUrl","this","RPM_SUBDOMAIN","isValidAvatarUrl","url","test","getRandomDemoAvatar","avatars","floor","random","getAvatarByName","find","avatar","toLowerCase","RPM_API_BASE","SAMPLE_RPM_AVATARS","personality","concentration","joy","excitement","contemplation","mystery","onAvatarSelect","selectedAvatarId","showGenerator","selectedAvatar","setSelectedAvatar","customAvatarUrl","setCustomAvatarUrl","isGenerating","setIsGenerating","generatorMode","setGeneratorMode","showRPMCreator","setShowRPMCreator","a","handleAvatarSelect","onClick","map","slice","trait","async","Promise","resolve","setTimeout","newAvatarUrl","Date","now","newAvatar","neutral","disabled","href","rel","type","placeholder","onChange","handleCustomUrl","trim","customAvatar","RPMAvatarCreatorModal","isOpen","onClose","onAvatarCreated","skinTone","hairColor","hairStyle","clothingColor","groupRef","headRef","skinColor","useMemo","tones","light","medium","dark","pale","tan","proportions","shoulderWidth","hipWidth","chestSize","waistSize","headSize","rotation","mouthSmile","eyesClosed","args","preferences","hairColors","caucasian","asian","african","hispanic","middleEastern","professional","casual","creative","elegant","athletic","title","iframeRef","cleanup","rpmService","setupAvatarCreatorListener","avatarCreatorUrl","src","onLoad","handleIframeLoad","handleIframeError","allow"],"sourceRoot":""}