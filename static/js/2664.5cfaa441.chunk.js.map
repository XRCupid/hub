{"version":3,"file":"static/js/2664.5cfaa441.chunk.js","mappings":"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","sources":["components/LightweightPostProcessing.tsx","components/StylizedAvatarScene.tsx","../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","components/RisographPostProcessing.tsx"],"sourcesContent":["import React from 'react';\nimport { EffectComposer, Bloom, ChromaticAberration, Noise, Vignette, SMAA } from '@react-three/postprocessing';\nimport { BlendFunction, KernelSize } from 'postprocessing';\n\ninterface LightweightPostProcessingProps {\n  enabled?: boolean;\n  quality?: 'low' | 'medium' | 'high';\n}\n\nexport const LightweightPostProcessing: React.FC<LightweightPostProcessingProps> = ({ \n  enabled = true,\n  quality = 'medium' \n}) => {\n  // Quality presets for performance\n  const qualitySettings = {\n    low: {\n      bloom: { intensity: 0.5, kernelSize: KernelSize.SMALL },\n      chromatic: 0.0002,\n      noise: 0.02,\n      vignette: 0.3,\n      smaa: false\n    },\n    medium: {\n      bloom: { intensity: 0.8, kernelSize: KernelSize.MEDIUM },\n      chromatic: 0.0003,\n      noise: 0.03,\n      vignette: 0.4,\n      smaa: true\n    },\n    high: {\n      bloom: { intensity: 1.0, kernelSize: KernelSize.LARGE },\n      chromatic: 0.0004,\n      noise: 0.04,\n      vignette: 0.5,\n      smaa: true\n    }\n  };\n\n  const settings = qualitySettings[quality];\n\n  if (!enabled) {\n    return <></>;\n  }\n\n  // Common effects\n  const commonEffects = (\n    <>\n      <Bloom\n        intensity={settings.bloom.intensity}\n        kernelSize={settings.bloom.kernelSize}\n        luminanceThreshold={0.9}\n        luminanceSmoothing={0.025}\n      />\n      \n      <ChromaticAberration\n        offset={[settings.chromatic, settings.chromatic]}\n        radialModulation={false}\n        modulationOffset={0}\n      />\n      \n      <Noise\n        premultiply\n        blendFunction={BlendFunction.ADD}\n        opacity={settings.noise}\n      />\n      \n      <Vignette\n        darkness={settings.vignette}\n        offset={0.2}\n      />\n    </>\n  );\n\n  // Return with SMAA if enabled\n  if (settings.smaa) {\n    return (\n      <EffectComposer multisampling={0}>\n        <SMAA />\n        {commonEffects}\n      </EffectComposer>\n    );\n  }\n\n  // Return without SMAA\n  return (\n    <EffectComposer multisampling={0}>\n      {commonEffects}\n    </EffectComposer>\n  );\n};\n","import React, { useState, Suspense } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Environment, ContactShadows } from '@react-three/drei';\nimport { PresenceAvatar } from './PresenceAvatar';\nimport { LightweightPostProcessing } from './LightweightPostProcessing';\nimport { RisographPostProcessing } from './RisographPostProcessing';\nimport * as THREE from 'three';\n\ninterface StylizedAvatarSceneProps {\n  avatarUrl: string;\n  trackingData?: any;\n  postProcessingStyle?: 'lightweight' | 'risograph' | 'none';\n  quality?: 'low' | 'medium' | 'high';\n}\n\nexport const StylizedAvatarScene: React.FC<StylizedAvatarSceneProps> = ({\n  avatarUrl,\n  trackingData,\n  postProcessingStyle = 'lightweight',\n  quality = 'medium'\n}) => {\n  const [intensity, setIntensity] = useState(0.5);\n\n  return (\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\n      <Canvas\n        camera={{ position: [0, 0, 2.5], fov: 45 }}\n        gl={{ \n          antialias: false, // Disable for better performance with post-processing\n          toneMapping: THREE.ACESFilmicToneMapping,\n          toneMappingExposure: 1.2\n        }}\n        shadows\n      >\n        {/* Stylized lighting setup */}\n        <ambientLight intensity={0.4} color=\"#FFE4E1\" />\n        <directionalLight\n          position={[5, 5, 5]}\n          intensity={0.8}\n          color=\"#FFF0F5\"\n          castShadow\n          shadow-mapSize={[1024, 1024]}\n        />\n        <directionalLight\n          position={[-3, 3, -3]}\n          intensity={0.4}\n          color=\"#E0FFFF\"\n        />\n        \n        {/* Rim light for stylized edge */}\n        <spotLight\n          position={[0, 5, -5]}\n          intensity={0.5}\n          color=\"#FFB6C1\"\n          angle={0.6}\n          penumbra={1}\n        />\n\n        {/* Avatar */}\n        <Suspense fallback={null}>\n          <group position={[0, -1, 0]}>\n            <PresenceAvatar\n              avatarUrl={avatarUrl}\n              trackingData={trackingData}\n              scale={1.2}\n            />\n          </group>\n        </Suspense>\n\n        {/* Stylized ground shadow */}\n        <ContactShadows\n          position={[0, -1, 0]}\n          opacity={0.3}\n          scale={3}\n          blur={2}\n          far={3}\n          color=\"#8B7D7B\"\n        />\n\n        {/* Optional environment for reflections */}\n        <Environment preset=\"studio\" />\n\n        {/* Camera controls */}\n        <OrbitControls\n          enablePan={false}\n          enableZoom={true}\n          minDistance={1.5}\n          maxDistance={5}\n          target={[0, 0, 0]}\n        />\n\n        {/* Post-processing effects */}\n        {postProcessingStyle === 'lightweight' && (\n          <LightweightPostProcessing quality={quality} />\n        )}\n        {postProcessingStyle === 'risograph' && (\n          <RisographPostProcessing intensity={intensity} preset={quality === 'low' ? 'subtle' : quality === 'high' ? 'intense' : 'medium'} />\n        )}\n      </Canvas>\n\n      {/* UI Controls */}\n      <div style={{\n        position: 'absolute',\n        bottom: 20,\n        left: 20,\n        background: 'rgba(255, 255, 255, 0.9)',\n        padding: '15px',\n        borderRadius: '10px',\n        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\n      }}>\n        <h4 style={{ margin: '0 0 10px 0' }}>Post-Processing Style</h4>\n        <select\n          value={postProcessingStyle}\n          onChange={(e) => window.location.reload()} // Simple reload for demo\n          style={{ marginBottom: '10px', width: '100%' }}\n        >\n          <option value=\"none\">None</option>\n          <option value=\"lightweight\">Lightweight Effects</option>\n          <option value=\"risograph\">Risograph Style</option>\n        </select>\n\n        {postProcessingStyle === 'risograph' && (\n          <>\n            <h4 style={{ margin: '10px 0 5px 0' }}>Intensity</h4>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.1\"\n              value={intensity}\n              onChange={(e) => setIntensity(parseFloat(e.target.value))}\n              style={{ width: '100%' }}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tname: ( shader.name !== undefined ) ? shader.name : 'unspecified',\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import React, { useRef, useMemo } from 'react';\nimport { useFrame, useThree, extend } from '@react-three/fiber';\nimport { EffectComposer } from '@react-three/postprocessing';\nimport { \n  ChromaticAberration, \n  Noise, \n  Vignette, \n  Bloom,\n  DotScreen,\n  HueSaturation,\n  BrightnessContrast,\n  ToneMapping,\n  DepthOfField\n} from '@react-three/postprocessing';\nimport { BlendFunction, KernelSize, ToneMappingMode } from 'postprocessing';\nimport * as THREE from 'three';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass';\n\n// Custom Risograph-style shader\nconst RisographShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    time: { value: 0 },\n    paperTexture: { value: 0.15 },\n    inkBleed: { value: 0.02 },\n    registration: { value: new THREE.Vector2(0.001, 0.001) },\n    colorSeparation: { value: 0.003 },\n    grainAmount: { value: 0.08 }\n  },\n  vertexShader: `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  fragmentShader: `\n    uniform sampler2D tDiffuse;\n    uniform float time;\n    uniform float paperTexture;\n    uniform float inkBleed;\n    uniform vec2 registration;\n    uniform float colorSeparation;\n    uniform float grainAmount;\n    \n    varying vec2 vUv;\n    \n    // Simple noise function\n    float random(vec2 st) {\n      return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n    }\n    \n    // Paper texture simulation\n    float paperNoise(vec2 uv) {\n      vec2 i = floor(uv * 300.0);\n      vec2 f = fract(uv * 300.0);\n      float a = random(i);\n      float b = random(i + vec2(1.0, 0.0));\n      float c = random(i + vec2(0.0, 1.0));\n      float d = random(i + vec2(1.0, 1.0));\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n    }\n    \n    // Halftone pattern\n    float halftone(vec2 uv, float size) {\n      vec2 p = mod(uv * size, 1.0);\n      float d = distance(p, vec2(0.5));\n      return smoothstep(0.3, 0.32, d);\n    }\n    \n    void main() {\n      // Misregistration effect\n      vec2 uvR = vUv + registration * sin(time * 0.5);\n      vec2 uvG = vUv;\n      vec2 uvB = vUv - registration * cos(time * 0.3);\n      \n      // Color separation\n      vec3 colorR = texture2D(tDiffuse, uvR + vec2(colorSeparation, 0.0)).rgb;\n      vec3 colorG = texture2D(tDiffuse, uvG).rgb;\n      vec3 colorB = texture2D(tDiffuse, uvB - vec2(colorSeparation, 0.0)).rgb;\n      \n      vec3 color = vec3(colorR.r, colorG.g, colorB.b);\n      \n      // Convert to limited color palette (risograph style)\n      vec3 risoColors[5];\n      risoColors[0] = vec3(1.0, 0.4, 0.6);  // Fluorescent Pink\n      risoColors[1] = vec3(0.0, 0.7, 0.9);  // Blue\n      risoColors[2] = vec3(1.0, 0.9, 0.0);  // Yellow\n      risoColors[3] = vec3(0.0, 0.6, 0.4);  // Green\n      risoColors[4] = vec3(1.0, 0.3, 0.0);  // Orange\n      \n      // Find closest riso color\n      float minDist = 999.0;\n      vec3 closestColor = risoColors[0];\n      for (int i = 0; i < 5; i++) {\n        float dist = distance(color, risoColors[i]);\n        if (dist < minDist) {\n          minDist = dist;\n          closestColor = risoColors[i];\n        }\n      }\n      \n      // Mix original with riso color\n      color = mix(color, closestColor, 0.3);\n      \n      // Add halftone effect\n      float lum = dot(color, vec3(0.299, 0.587, 0.114));\n      float pattern = halftone(vUv, 120.0);\n      color *= mix(0.8, 1.0, pattern * lum);\n      \n      // Ink bleeding simulation\n      vec2 bleedOffset = vec2(\n        sin(vUv.y * 200.0 + time) * inkBleed,\n        cos(vUv.x * 200.0 + time) * inkBleed\n      );\n      vec3 bleedColor = texture2D(tDiffuse, vUv + bleedOffset).rgb;\n      color = mix(color, bleedColor, 0.1);\n      \n      // Paper texture\n      float paper = paperNoise(vUv + time * 0.01);\n      color = mix(color, vec3(0.95, 0.93, 0.88), paper * paperTexture);\n      \n      // Film grain\n      float grain = random(vUv + time) * grainAmount;\n      color += vec3(grain) - grainAmount * 0.5;\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  `\n};\n\ninterface RisographPostProcessingProps {\n  intensity?: number;\n  preset?: 'subtle' | 'medium' | 'intense';\n}\n\nexport const RisographPostProcessing: React.FC<RisographPostProcessingProps> = ({ \n  intensity = 0.5,\n  preset = 'medium' \n}) => {\n  const { gl, size } = useThree();\n  const composer = useRef<any>();\n  \n  // Preset configurations\n  const presets = {\n    subtle: {\n      chromaticAberration: 0.0002,\n      bloom: 0.3,\n      noise: 0.02,\n      vignette: 0.3,\n      dotScreen: 0,\n      saturation: -0.1,\n      contrast: 0.1,\n      colorA: '#FF69B4',\n      colorB: '#34A85A',\n      colorC: '#FFC107',\n      halftoneScale: 120,\n      inkBleed: 0.02,\n      paperTexture: 0.15,\n      noiseAmount: 0.08\n    },\n    medium: {\n      chromaticAberration: 0.0005,\n      bloom: 0.5,\n      noise: 0.05,\n      vignette: 0.5,\n      dotScreen: 0.3,\n      saturation: -0.2,\n      contrast: 0.2,\n      colorA: '#FF69B4',\n      colorB: '#34A85A',\n      colorC: '#FFC107',\n      halftoneScale: 120,\n      inkBleed: 0.02,\n      paperTexture: 0.15,\n      noiseAmount: 0.08\n    },\n    intense: {\n      chromaticAberration: 0.001,\n      bloom: 0.7,\n      noise: 0.08,\n      vignette: 0.7,\n      dotScreen: 0.5,\n      saturation: -0.3,\n      contrast: 0.3,\n      colorA: '#FF69B4',\n      colorB: '#34A85A',\n      colorC: '#FFC107',\n      halftoneScale: 120,\n      inkBleed: 0.02,\n      paperTexture: 0.15,\n      noiseAmount: 0.08\n    }\n  };\n  \n  const config = presets[preset];\n  \n  const risographPass = useMemo(() => {\n    const pass = new ShaderPass(RisographShader);\n    pass.uniforms.resolution.value.set(size.width, size.height);\n    pass.uniforms.colorSeparation.value = 0.002 * intensity;\n    pass.uniforms.grainAmount.value = 0.05 * intensity;\n    pass.uniforms.paperTexture.value = config.paperTexture * intensity;\n    pass.uniforms.inkBleed.value = config.inkBleed * intensity;\n    return pass;\n  }, [size, intensity, config]);\n  \n  // Update time uniform\n  useFrame((state) => {\n    if (risographPass) {\n      risographPass.uniforms.time.value = state.clock.elapsedTime;\n    }\n  });\n  \n  return (\n    <EffectComposer ref={composer}>\n      <Bloom\n        intensity={config.bloom}\n        kernelSize={KernelSize.LARGE}\n        luminanceThreshold={0.9}\n        luminanceSmoothing={0.025}\n        mipmapBlur\n      />\n      \n      <ChromaticAberration\n        offset={[config.chromaticAberration, config.chromaticAberration * 0.5]}\n        radialModulation={true}\n        modulationOffset={0.15}\n      />\n      \n      <HueSaturation\n        hue={0}\n        saturation={config.saturation}\n        blendFunction={BlendFunction.NORMAL}\n      />\n      \n      <BrightnessContrast\n        brightness={0}\n        contrast={config.contrast}\n        blendFunction={BlendFunction.NORMAL}\n      />\n      \n      <Noise\n        premultiply\n        blendFunction={BlendFunction.ADD}\n        opacity={config.noise}\n      />\n      \n      <Vignette\n        darkness={config.vignette}\n        offset={0.3}\n        blendFunction={BlendFunction.NORMAL}\n      />\n      \n      <ToneMapping\n        mode={ToneMappingMode.ACES_FILMIC}\n        resolution={256}\n        whitePoint={4.0}\n        middleGrey={0.6}\n        minLuminance={0.01}\n        averageLuminance={1.0}\n        adaptationRate={1.0}\n        blendFunction={BlendFunction.NORMAL}\n      />\n    </EffectComposer>\n  );\n};\n\n// Export individual effect components for custom compositions\nexport { ChromaticAberration, Noise, Vignette, Bloom, DotScreen, HueSaturation, BrightnessContrast };\n"],"names":["LightweightPostProcessing","_ref","enabled","quality","settings","low","bloom","intensity","kernelSize","KernelSize","SMALL","chromatic","noise","vignette","smaa","medium","MEDIUM","high","LARGE","_jsx","_Fragment","commonEffects","_jsxs","children","Bloom","luminanceThreshold","luminanceSmoothing","ChromaticAberration","offset","radialModulation","modulationOffset","Noise","premultiply","blendFunction","BlendFunction","ADD","opacity","Vignette","darkness","EffectComposer","multisampling","SMAA","StylizedAvatarScene","avatarUrl","trackingData","postProcessingStyle","setIntensity","useState","style","width","height","position","Canvas","camera","fov","gl","antialias","toneMapping","THREE","toneMappingExposure","shadows","color","castShadow","angle","penumbra","Suspense","fallback","PresenceAvatar","scale","ContactShadows","blur","far","Environment","preset","OrbitControls","enablePan","enableZoom","minDistance","maxDistance","target","RisographPostProcessing","bottom","left","background","padding","borderRadius","boxShadow","margin","value","onChange","e","window","location","reload","marginBottom","type","min","max","step","parseFloat","ShaderPass","Pass","constructor","shader","textureID","super","this","undefined","ShaderMaterial","uniforms","material","UniformsUtils","clone","name","defines","Object","assign","vertexShader","fragmentShader","fsQuad","FullScreenQuad","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil","dispose","RisographShader","tDiffuse","time","paperTexture","inkBleed","registration","colorSeparation","grainAmount","size","useThree","composer","useRef","config","subtle","chromaticAberration","dotScreen","saturation","contrast","colorA","colorB","colorC","halftoneScale","noiseAmount","intense","risographPass","useMemo","pass","resolution","set","useFrame","state","clock","elapsedTime","ref","mipmapBlur","HueSaturation","hue","NORMAL","BrightnessContrast","brightness","ToneMapping","mode","ToneMappingMode","ACES_FILMIC","whitePoint","middleGrey","minLuminance","averageLuminance","adaptationRate"],"sourceRoot":""}