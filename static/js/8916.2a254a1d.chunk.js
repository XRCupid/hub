"use strict";(self.webpackChunkhub=self.webpackChunkhub||[]).push([[8916],{78916:(e,o,t)=>{t.r(o),t.d(o,{PresenceAvatar:()=>u,default:()=>h});var r=t(9950),n=t(69104),i=t(42092),a=t(12880),s=t(13437),l=t(34973),c=t(44414);n.p.preload("/avatars/coach_grace.glb"),n.p.preload("/avatars/AngelChick.glb"),n.p.preload("/avatars/coach_posie.glb"),n.p.preload("/avatars/coach_rizzo.glb");const u=e=>{let{avatarUrl:o="/avatars/AngelChick.glb",idleAnimationUrl:t="/animations/M_Standing_Idle_001.glb",talkAnimationUrl:u="/animations/M_Talking_Variations_001.glb",position:h=[0,0,0],scale:m=1,emotionalState:d="neutral",partnerState:p,trackingData:g,debugMode:f=!1,isUser:y=!1,cameraPosition:v,cameraTarget:A,disableMorphTargets:w=!1}=e;console.log("[PresenceAvatar] Rendering, trackingData:",!!g);const b=(0,r.useRef)(null),R=(0,r.useRef)(null),S=(0,r.useRef)(!1),_=(0,r.useRef)(!1),L=((0,r.useRef)(!1),(0,r.useRef)(null)),x=(0,r.useRef)(null),k=(0,r.useRef)(null),P=(0,r.useRef)({x:0,y:0,z:0}),M=(0,r.useRef)({x:0,y:0,z:0}),F=(0,r.useRef)({x:0,y:0,z:0}),E=(0,r.useRef)({x:0,y:0,z:0}),C=(0,r.useRef)(0),U=(0,r.useRef)(0),z=(0,r.useRef)(!1),{scene:j}=(0,n.p)(o),[D,O]=(0,r.useState)(!0),T=(0,r.useMemo)((()=>{if(console.log("[PresenceAvatar] Cloning scene for:",o),!j)return console.error("[PresenceAvatar] No scene loaded yet"),null;try{const e=l.t.clone(j);return console.log("[PresenceAvatar] Avatar cloned successfully:",{originalChildren:j.children.length,clonedChildren:e.children.length}),e.traverse((e=>{if(e.isMesh||e.isSkinnedMesh){const o=e;o.frustumCulled=!1,o.material&&(Array.isArray(o.material)?o.material.forEach((e=>{e.visible=!0,e.opacity=e.opacity||1,e.transparent=!1})):(o.material.visible=!0,o.material.opacity=o.material.opacity||1,o.material.transparent=!1)),console.log("[PresenceAvatar] Mesh setup:",{name:e.name,visible:o.visible,frustumCulled:o.frustumCulled,materialVisible:o.material?Array.isArray(o.material)?o.material[0].visible:o.material.visible:null})}})),e.position.set(0,0,0),e.scale.set(1,1,1),e.visible=!0,console.log("[PresenceAvatar] Reset cloned scene position, scale, and visibility"),e}catch(e){return console.error("[PresenceAvatar] Error cloning scene:",e),j}}),[j,o]);(0,r.useEffect)((()=>{T&&O(!1)}),[T]),console.log("[PresenceAvatar] Cloned scene:",!!T);const B=(0,r.useCallback)((e=>{const o=e.getObjectByProperty("type","SkinnedMesh");if(null!==o&&void 0!==o&&o.skeleton){const e=o.skeleton.bones,t=e.find((e=>e.name.toLowerCase().includes("head")&&!e.name.toLowerCase().includes("headtop"))),r=e.find((e=>e.name.toLowerCase().includes("neck"))),n=e.find((e=>e.name.toLowerCase().includes("spine")||e.name.toLowerCase().includes("chest")));t&&(L.current=t,E.current={x:t.rotation.x-.1,y:t.rotation.y,z:t.rotation.z},F.current={x:t.position.x,y:t.position.y,z:t.position.z},console.log("[PresenceAvatar] Found head bone:",t.name,"default rotation:",E.current)),r&&(x.current=r,console.log("[PresenceAvatar] Found neck bone:",r.name)),n&&(k.current=n,console.log("[PresenceAvatar] Found spine bone:",n.name))}}),[]);(0,r.useEffect)((()=>{T&&B(T)}),[T,B]),(0,r.useEffect)((()=>{if(!T||_.current)return;console.log("\ud83d\udd27 Applying T-pose fix for PresenceAvatar"),console.log("Avatar URL:",o);let e=!1,t=[];T.traverse((o=>{if(o.isSkinnedMesh){const r=o;if(r.skeleton){e=!0,console.log("Found skeleton with",r.skeleton.bones.length,"bones"),r.skeleton.bones.forEach(((e,o)=>{t.push(e.name),o<20&&console.log("Bone ".concat(o,": ").concat(e.name))}));const o=t.some((e=>e.includes("mixamorig")||e.includes("Hips")||e.includes("Spine")));console.log("Is RPM avatar?",o),console.log("Bone names sample:",t.slice(0,10)),r.skeleton.bones.forEach((e=>{const o=e.name,t=o.toLowerCase();(t.includes("upperarm_l")||"LeftArm"===o||"mixamorig:LeftArm"===o)&&(e.rotation.x=.3,e.rotation.z=.8,e.updateMatrixWorld(!0),console.log("Fixed left arm:",o)),(t.includes("upperarm_r")||"RightArm"===o||"mixamorig:RightArm"===o)&&(e.rotation.x=.3,e.rotation.z=-.8,e.updateMatrixWorld(!0),console.log("Fixed right arm:",o)),(t.includes("shoulder_l")||"LeftShoulder"===o||"mixamorig:LeftShoulder"===o)&&(e.rotation.z=.1,e.updateMatrixWorld(!0),console.log("Fixed left shoulder:",o)),(t.includes("shoulder_r")||"RightShoulder"===o||"mixamorig:RightShoulder"===o)&&(e.rotation.z=-.1,e.updateMatrixWorld(!0),console.log("Fixed right shoulder:",o))})),_.current=!0,console.log("\u2705 T-pose fix applied")}}})),e||console.warn("\u26a0\ufe0f No skeleton found in avatar!")}),[T,o]);const I=(0,n.p)(t),N=(0,n.p)(u),q=(0,r.useMemo)((()=>{const e=[];if(I.animations&&I.animations.length>0){const o=I.animations[0].clone();o.name="idle",e.push(o)}if(N.animations&&N.animations.length>0){const o=N.animations[0].clone();o.name="talk",e.push(o)}return e}),[I.animations,N.animations]),V=(0,r.useMemo)((()=>T||new s.Group),[T]),{actions:G,mixer:W}=(0,i.f)(q,V);(0,r.useEffect)((()=>{console.log("=== ANIMATION DEBUG ==="),console.log("Avatar:",o),console.log("Idle animation:",t),console.log("Talk animation:",u),console.log("Number of animations loaded:",q.length),console.log("Animation names:",q.map((e=>e.name))),console.log("Actions available:",G?Object.keys(G):"none"),console.log("Mixer:",W?"created":"not created"),console.log("Group ref:",b.current?"exists":"null")}),[o,t,u,q,G,W]),(0,r.useEffect)((()=>{if(!G||!W||!T)return;const e=setTimeout((()=>{console.log("=== PRESENCE AVATAR ANIMATION INIT ==="),console.log("Available actions:",Object.keys(G)),Object.values(G).forEach((e=>{e&&e.stop()}));const e=G.idle;e?(e.reset(),e.setEffectiveWeight(1),e.setEffectiveTimeScale(1),e.play(),R.current=e,console.log("\u2705 Started idle animation immediately"),W.update(0)):console.error("\u274c No idle animation found!")}),100);return()=>{clearTimeout(e),R.current&&R.current.stop()}}),[G,W,o,T]),(0,r.useEffect)((()=>{if(!G||!p)return;const e=p.isSpeaking?G.talk:G.idle;if(e&&R.current!==e){const o=.5;R.current&&R.current.fadeOut(o),e.reset().setEffectiveTimeScale(1).setEffectiveWeight(1).fadeIn(o).play(),R.current=e,console.log("Switched to ".concat(p.isSpeaking?"talk":"idle"," animation"))}}),[null===p||void 0===p?void 0:p.isSpeaking,G]),(0,a.F)(((e,o)=>{U.current++;const t=!!g;var r,n,i,a,l,c,u;t!==z.current&&(console.log("[PresenceAvatar] TRACKING STATE CHANGED:",{from:z.current,to:t,groupVisible:null===(r=b.current)||void 0===r?void 0:r.visible,clonedSceneVisible:null===T||void 0===T?void 0:T.visible,groupPosition:null===(n=b.current)||void 0===n?void 0:n.position.toArray(),groupScale:null===(i=b.current)||void 0===i?void 0:i.scale.toArray(),clonedScenePosition:null===T||void 0===T?void 0:T.position.toArray(),clonedSceneScale:null===T||void 0===T?void 0:T.scale.toArray()}),z.current=t);if(U.current%60===0&&(console.log("[PresenceAvatar] Frame update:",{frame:U.current,hasTrackingData:!!g,hasClonedScene:!!T,clonedSceneVisible:null===T||void 0===T?void 0:T.visible,groupVisible:null===(a=b.current)||void 0===a?void 0:a.visible,groupPosition:null===(l=b.current)||void 0===l?void 0:l.position.toArray(),groupScale:null===(c=b.current)||void 0===c?void 0:c.scale.toArray(),clonedSceneInGroup:!!T&&(null===(u=b.current)||void 0===u?void 0:u.children.includes(T))}),T&&b.current&&!b.current.children.some((e=>e===T))&&console.error("[PresenceAvatar] CLONED SCENE REMOVED FROM GROUP!"),T)){const e=T.position.toArray(),o=T.scale.toArray(),t=[...e,...o].some((e=>isNaN(e))),r=o.some((e=>0===e));(t||r)&&console.error("[PresenceAvatar] INVALID TRANSFORM:",{position:e,scale:o,hasNaN:t,hasZeroScale:r})}if(b.current&&T){var h;if(Math.random()<.02)console.log("[PresenceAvatar] useFrame - tracking data check:",{hasTrackingData:!!g,hasFacialExpressions:!(null===g||void 0===g||!g.facialExpressions),hasHeadRotation:!(null===g||void 0===g||!g.headRotation),sampleExpression:null===g||void 0===g||null===(h=g.facialExpressions)||void 0===h?void 0:h.mouthSmile});if(W){W.update(o);if((x.current||L.current)&&g){const e=g.headRotation;if(e){Math.random()<.02&&(console.log("[PresenceAvatar] Head rotation raw:",{pitch:e.pitch.toFixed(2),yaw:e.yaw.toFixed(2),roll:e.roll.toFixed(2)}),console.log("[PresenceAvatar] Head rotation applied:",{x:(.15*e.pitch).toFixed(3),y:(.12*-e.yaw).toFixed(3),z:(.08*-e.roll).toFixed(3)}));const o={pitch:.15,yaw:.12,roll:.08},t={x:e.pitch*o.pitch,y:-e.yaw*o.yaw,z:-e.roll*o.roll};P.current.x=s.MathUtils.lerp(P.current.x,t.x,.05),P.current.y=s.MathUtils.lerp(P.current.y,t.y,.05),P.current.z=s.MathUtils.lerp(P.current.z,t.z,.05),L.current&&(L.current.rotation.x=E.current.x+P.current.x,L.current.rotation.y=E.current.y+P.current.y,L.current.rotation.z=E.current.z+P.current.z);const r=g.landmarks;if(r&&r.length>0&&L.current){const e=r[356]||r[234]||r[454],o=r[127]||r[10]||r[234];if(e&&o){const t=Math.sqrt(Math.pow(o[0]-e[0],2)+Math.pow(o[1]-e[1],2)),r=2.5*(t-.45),n=s.MathUtils.clamp(.05*r,-.03,.03);M.current.z=s.MathUtils.lerp(M.current.z,n,.05),L.current.position.z=F.current.z+M.current.z,Math.random()<.05&&console.log("[PresenceAvatar] Head depth:",{faceWidth:t.toFixed(3),normalizedDistance:r.toFixed(3),targetZ:n.toFixed(3),smoothedZ:M.current.z.toFixed(3),applied:(F.current.z+M.current.z).toFixed(3)})}else console.log("[PresenceAvatar] No face landmarks found for depth calculation")}}else P.current.x=s.MathUtils.lerp(P.current.x,0,.05),P.current.y=s.MathUtils.lerp(P.current.y,0,.05),P.current.z=s.MathUtils.lerp(P.current.z,0,.05),M.current.z=s.MathUtils.lerp(M.current.z,0,.05),L.current&&(L.current.rotation.x=E.current.x+P.current.x,L.current.rotation.y=E.current.y+P.current.y,L.current.rotation.z=E.current.z+P.current.z,L.current.position.z=F.current.z+M.current.z);if(null!==g&&void 0!==g&&g.posture&&T){const e=T.getObjectByProperty("type","SkinnedMesh");if(null!==e&&void 0!==e&&e.skeleton){const o=e.skeleton.bones.find((e=>e.name.toLowerCase().includes("spine")||e.name.toLowerCase().includes("chest")));if(o){const e=g.posture;if(e.keypoints.leftShoulder&&e.keypoints.rightShoulder){const t=.5*(e.keypoints.leftShoulder.y-e.keypoints.rightShoulder.y),r=s.MathUtils.clamp(t,-.2,.2);Math.random()<.02&&console.log("[PresenceAvatar] Applying posture:",{leftY:e.keypoints.leftShoulder.y.toFixed(3),rightY:e.keypoints.rightShoulder.y.toFixed(3),tilt:t.toFixed(3),clampedTilt:r.toFixed(3)}),o.rotation.z=s.MathUtils.lerp(o.rotation.z,r,.05)}}else Math.random()<.01&&console.log("[PresenceAvatar] No spine/chest bone found in skeleton")}}if(null!==g&&void 0!==g&&g.facialExpressions&&T&&!w){const e=T.visible,o=T.position.clone(),t=T.scale.clone();Math.random()<.05&&console.log("[PresenceAvatar] BEFORE morph targets:",{visible:e,position:o.toArray(),scale:t.toArray()});let r=null;if(T.traverse((e=>{if(e.isSkinnedMesh){const o=e;o.morphTargetDictionary&&o.morphTargetInfluences&&(r=o)}})),Math.random()<.05&&console.log("[PresenceAvatar] Found mesh:",!!r),r){const e=r;if(e.morphTargetDictionary&&e.morphTargetInfluences){const o=e.morphTargetDictionary,t=e.morphTargetInfluences;S.current||(console.log("=== Available Morph Targets ==="),console.log("Total morph targets:",Object.keys(o).length),Object.keys(o).forEach(((e,o)=>{console.log("  ".concat(o,": ").concat(e))})),S.current=!0);const n=g.facialExpressions,i=[];Object.entries(n).forEach((e=>{let[o,t]=e;t>.01&&i.push("".concat(o,":").concat(t.toFixed(2)))}));const a=Date.now();i.length>0&&a-C.current>3e3&&(console.log("[PresenceAvatar] Active expressions:",{expressions:i.join(", "),hasMesh:!0,morphTargetCount:Object.keys(o).length}),C.current=a);const s=e=>{if(!o)return null;for(const t of e)if(o.hasOwnProperty(t))return t;return null},l=(e,r)=>{const n=(r.mouthSmileLeft||0)>.15||(r.mouthSmileRight||0)>.15,i=(r.mouthFrownLeft||0)>.15||(r.mouthFrownRight||0)>.15,a=(r.mouthPucker||0)>.15,l={eyeBlinkLeft:["eyeBlinkLeft","eyeBlink_L","EyeBlinkLeft","leftEyeClosed","eye_closed_L"],eyeBlinkRight:["eyeBlinkRight","eyeBlink_R","EyeBlinkRight","rightEyeClosed","eye_closed_R"],eyeWideLeft:["eyeWideLeft","eyeWide_L","EyeWideLeft","eye_wide_L"],eyeWideRight:["eyeWideRight","eyeWide_R","EyeWideRight","eye_wide_R"],eyeSquintLeft:["eyeSquintLeft","eyeSquint_L","EyeSquintLeft","eye_squint_L"],eyeSquintRight:["eyeSquintRight","eyeSquint_R","EyeSquintRight","eye_squint_R"],eyebrowRaiseLeft:["browOuterUpLeft","browOuterUp_L","BrowOuterUpLeft","leftBrowUp","brow_up_L"],eyebrowRaiseRight:["browOuterUpRight","browOuterUp_R","BrowOuterUpRight","rightBrowUp","brow_up_R"],eyebrowFurrow:["browInnerUp","browDown","BrowInnerUp","browFurrow","brow_angry"],browDownLeft:["browDownLeft","browDown_L","BrowDownLeft","brow_down_L"],browDownRight:["browDownRight","browDown_R","BrowDownRight","brow_down_R"],browInnerUp:["browInnerUp","BrowInnerUp","brow_inner_up"],mouthSmile:["mouthSmileLeft","mouthSmile_L","MouthSmileLeft","smile","mouth_smile_L"],mouthSmileRight:["mouthSmileRight","mouthSmile_R","MouthSmileRight","mouth_smile_R"],mouthFrown:["mouthFrownLeft","mouthFrown_L","MouthFrownLeft","frown","mouth_frown_L"],mouthFrownRight:["mouthFrownRight","mouthFrown_R","MouthFrownRight","mouth_frown_R"],mouthPucker:["mouthPucker","MouthPucker","pucker","mouth_pucker"],mouthOpen:["mouthOpen","jawOpen","MouthOpen","mouth_open","jaw_open"],mouthPress:["mouthPress","MouthPress","mouth_press"],mouthPressLeft:["mouthPressLeft","mouthPress_L","MouthPressLeft"],mouthPressRight:["mouthPressRight","mouthPress_R","MouthPressRight"],mouthUpperUpLeft:["mouthUpperUpLeft","mouthUpperUp_L","mouth_upperLip_raise_L"],mouthUpperUpRight:["mouthUpperUpRight","mouthUpperUp_R","mouth_upperLip_raise_R"],mouthLowerDown:["mouthLowerDown","MouthLowerDown","mouth_lowerLip_depress"],mouthStretchLeft:["mouthStretchLeft","mouthStretch_L","mouth_stretch_L"],mouthStretchRight:["mouthStretchRight","mouthStretch_R","mouth_stretch_R"],mouthDimpleLeft:["mouthDimpleLeft","mouthDimple_L","mouth_dimple_L"],mouthDimpleRight:["mouthDimpleRight","mouthDimple_R","mouth_dimple_R"],jawLeft:["jawLeft","JawLeft","jaw_left"],jawRight:["jawRight","JawRight","jaw_right"],jawForward:["jawForward","JawForward","jaw_forward"],cheekPuff:["cheekPuff","CheekPuff","cheek_puff"],cheekSquintLeft:["cheekSquintLeft","cheekSquint_L","cheek_squint_L"],cheekSquintRight:["cheekSquintRight","cheekSquint_R","cheek_squint_R"],noseSneerLeft:["noseSneerLeft","noseSneer_L","nose_sneer_L"],noseSneerRight:["noseSneerRight","noseSneer_R","nose_sneer_R"],tongueOut:["tongueOut","TongueOut","tongue_out"]};Object.entries(r).forEach((e=>{let[r,c]=e;if("number"!==typeof c||c<=0)return;const u=l[r];if(u){const e=s(u);if(e&&o&&t){const s=o[e];let l=1;"jawOpen"===r&&(n||i||a)&&(l=.15,console.log("[PresenceAvatar] Reducing mouth open due to emotional expression"));let u=c*l;const h={mouthSmileLeft:1.8,mouthSmileRight:1.8,mouthFrownLeft:1.5,mouthFrownRight:1.5,browRaiseLeft:2,browRaiseRight:2,eyeBlinkLeft:1.2,eyeBlinkRight:1.2,cheekSquintLeft:1.5,cheekSquintRight:1.5,noseSneerLeft:2,noseSneerRight:2,mouthPucker:1.8,jawOpen:1}[r]||1,m=Math.min(u*h,1);t[s]=m,c>.3&&Math.random()<.05&&console.log("[PresenceAvatar] High expression: ".concat(r," = ").concat(c.toFixed(3)," -> ").concat(e,"[").concat(s,"] = ").concat(m.toFixed(3)))}}}));const c=(e,r)=>{const n=r;if(e&&n&&o&&t){const r=s([e]),i=s([n]);if(r&&i){const e=o[r],n=o[i],a=t[e]||0,s=t[n]||0,l=Math.max(a,s);l>0&&(t[e]=l,t[n]=l)}}};c("mouthSmileLeft","mouthSmileRight"),c("mouthFrownLeft","mouthFrownRight"),c("eyebrowRaiseLeft","eyebrowRaiseRight"),c("eyeBlinkLeft","eyeBlinkRight"),c("cheekSquintLeft","cheekSquintRight")};var m;if(l(r,n),Math.random()<.02)console.log("[PresenceAvatar] After applying expressions:",{meshVisible:e.visible,meshPosition:e.position.toArray(),meshScale:e.scale.toArray(),parentVisible:null===(m=e.parent)||void 0===m?void 0:m.visible,sceneVisible:T.visible})}}T.visible!==e&&console.error("[PresenceAvatar] VISIBILITY CHANGED during morph targets!",{before:e,after:T.visible});const n=T.position,i=T.scale;o.equals(n)&&t.equals(i)||console.error("[PresenceAvatar] TRANSFORM CHANGED during morph targets!",{positionBefore:o.toArray(),positionAfter:n.toArray(),scaleBefore:t.toArray(),scaleAfter:i.toArray()})}}}}else console.warn("[PresenceAvatar] Missing group or clonedScene in useFrame")})),(0,r.useEffect)((()=>(console.log("[PresenceAvatar] Component mounted"),()=>{console.log("[PresenceAvatar] Component unmounting!")})),[]),(0,r.useEffect)((()=>{console.log("[PresenceAvatar] Component mounted with avatarUrl:",o),console.log("[PresenceAvatar] Position:",h),console.log("[PresenceAvatar] Scale:",m)}),[o,h,m]);const H=new s.Vector3(m,m,m);return(0,a.F)((()=>{if(!b.current||!T)return;if(Math.random()<.01){console.log("[PresenceAvatar] === Avatar State Check ==="),console.log("[PresenceAvatar] Group visible:",b.current.visible),console.log("[PresenceAvatar] Group position:",b.current.position.toArray()),console.log("[PresenceAvatar] Group scale:",b.current.scale.toArray()),console.log("[PresenceAvatar] Group children count:",b.current.children.length),console.log("[PresenceAvatar] ClonedScene visible:",T.visible),console.log("[PresenceAvatar] ClonedScene position:",T.position.toArray()),console.log("[PresenceAvatar] ClonedScene scale:",T.scale.toArray()),console.log("[PresenceAvatar] ClonedScene children:",T.children.length);let e=0,o=0;T.traverse((t=>{if(t.isSkinnedMesh){var r,n;e++,t.visible&&o++;const i=t;console.log("[PresenceAvatar] SkinnedMesh:",{name:t.name,visible:t.visible,position:t.position.toArray(),scale:t.scale.toArray(),parentVisible:null===(r=t.parent)||void 0===r?void 0:r.visible,geometry:!!i.geometry,geometryBounds:null!==(n=i.geometry)&&void 0!==n&&n.boundingBox?[i.geometry.boundingBox.min.toArray(),i.geometry.boundingBox.max.toArray()]:null,material:i.material?Array.isArray(i.material)?i.material.length:1:0,materialVisible:i.material?Array.isArray(i.material)?i.material[0].visible:i.material.visible:null,materialOpacity:i.material?Array.isArray(i.material)?i.material[0].opacity:i.material.opacity:null,materialTransparent:i.material?Array.isArray(i.material)?i.material[0].transparent:i.material.transparent:null})}})),console.log("[PresenceAvatar] Total skinned meshes:",e,"Visible:",o),console.log("[PresenceAvatar] ======================")}const e=b.current;if(e){console.log("[PresenceAvatar] useFrame - Avatar group and clonedScene visibility:",{groupVisible:e.visible,groupPosition:e.position.toArray(),groupScale:e.scale.toArray(),clonedSceneVisible:T.visible,clonedScenePosition:T.position.toArray(),clonedSceneScale:T.scale.toArray(),clonedSceneChildren:T.children.length});const o=e.position.toArray(),t=e.scale.toArray(),r=T.position.toArray(),n=T.scale.toArray(),i=[...o,...t,...r,...n].some((e=>isNaN(e)||!isFinite(e))),a=[...t,...n].some((e=>0===e));i&&console.error("[PresenceAvatar] INVALID VALUES DETECTED:",{groupPosition:o,groupScale:t,clonedPosition:r,clonedScale:n}),a&&console.error("[PresenceAvatar] ZERO SCALE DETECTED:",{groupScale:t,clonedScale:n})}})),D&&!T?(console.log("[PresenceAvatar] Loading avatar..."),(0,c.jsx)("group",{position:h,children:(0,c.jsxs)("mesh",{children:[(0,c.jsx)("boxGeometry",{args:[.5,.5,.5]}),(0,c.jsx)("meshBasicMaterial",{color:"gray"})]})})):T?(T.visible||(console.warn("[PresenceAvatar] Cloned scene is not visible, forcing visibility"),T.visible=!0),(0,c.jsxs)("group",{ref:b,position:h,scale:H,children:[(0,c.jsx)("primitive",{object:T}),(0,c.jsxs)("mesh",{position:[0,2.5,0],children:[(0,c.jsx)("boxGeometry",{args:[.3,.3,.3]}),(0,c.jsx)("meshBasicMaterial",{color:"purple"})]}),(0,c.jsxs)("mesh",{rotation:[-Math.PI/2,0,0],position:[0,.01,0],receiveShadow:!0,children:[(0,c.jsx)("planeGeometry",{args:[2,2]}),(0,c.jsx)("shadowMaterial",{opacity:.4})]}),T&&(0,c.jsxs)("mesh",{ref:e=>{if(e){const o=(new s.Box3).setFromObject(T),t=new s.Vector3,r=new s.Vector3;o.getCenter(t),o.getSize(r),e.position.copy(t),e.scale.copy(r)}},children:[(0,c.jsx)("boxGeometry",{args:[1,1,1]}),(0,c.jsx)("meshBasicMaterial",{color:"red",wireframe:!0})]})]})):(console.error("[PresenceAvatar] No cloned scene available after loading"),null)},h=u}}]);