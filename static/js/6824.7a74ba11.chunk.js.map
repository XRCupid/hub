{"version":3,"file":"static/js/6824.7a74ba11.chunk.js","mappings":"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","sources":["webpack://hub/./src/components/TrackingDashboard.css?c838","components/TrackingDashboard.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, { useState } from 'react';\nimport { TrackingMetric } from '../config/trainingModules';\nimport './TrackingDashboard.css';\n\ninterface MetricData {\n  metric: TrackingMetric;\n  currentValue: number;\n  history: { timestamp: Date; value: number }[];\n}\n\ninterface TrackingDashboardProps {\n  metrics: MetricData[];\n  coachColor: string;\n  sessionActive: boolean;\n}\n\nconst TrackingDashboard: React.FC<TrackingDashboardProps> = ({\n  metrics,\n  coachColor,\n  sessionActive\n}) => {\n  const [expandedMetric, setExpandedMetric] = useState<string | null>(null);\n\n  const getMetricStatus = (metric: TrackingMetric, value: number): 'excellent' | 'good' | 'needs-work' => {\n    if (!metric.idealRange) return 'good';\n    \n    if (value >= metric.idealRange.min && value <= metric.idealRange.max) {\n      return 'excellent';\n    } else if (\n      value >= metric.idealRange.min * 0.8 && \n      value <= metric.idealRange.max * 1.2\n    ) {\n      return 'good';\n    }\n    return 'needs-work';\n  };\n\n  const getStatusColor = (status: string): string => {\n    switch (status) {\n      case 'excellent': return '#4CAF50';\n      case 'good': return '#FFC107';\n      case 'needs-work': return '#F44336';\n      default: return '#666';\n    }\n  };\n\n  const formatValue = (value: number, unit: string): string => {\n    switch (unit) {\n      case 'percentage':\n        return `${Math.round(value)}%`;\n      case 'seconds':\n        return `${value.toFixed(1)}s`;\n      case 'ratio':\n        return value.toFixed(2);\n      case 'count':\n        return Math.round(value).toString();\n      case 'score':\n        return `${value.toFixed(1)}/10`;\n      default:\n        return value.toString();\n    }\n  };\n\n  return (\n    <div className=\"tracking-dashboard\">\n      <div className=\"dashboard-header\">\n        <h3>Real-time Performance Tracking</h3>\n        <div className={`session-indicator ${sessionActive ? 'active' : ''}`}>\n          <span className=\"indicator-dot\" />\n          {sessionActive ? 'Recording' : 'Paused'}\n        </div>\n      </div>\n\n      <div className=\"metrics-grid\">\n        {metrics.map((metricData) => {\n          const status = getMetricStatus(metricData.metric, metricData.currentValue);\n          const isExpanded = expandedMetric === metricData.metric.id;\n          \n          return (\n            <div\n              key={metricData.metric.id}\n              className={`metric-card ${status} ${isExpanded ? 'expanded' : ''}`}\n              onClick={() => setExpandedMetric(isExpanded ? null : metricData.metric.id)}\n            >\n              <div className=\"metric-header\">\n                <h4>{metricData.metric.name}</h4>\n                <div \n                  className=\"metric-value\"\n                  style={{ color: getStatusColor(status) }}\n                >\n                  {formatValue(metricData.currentValue, metricData.metric.unit)}\n                </div>\n              </div>\n\n              <div className=\"metric-body\">\n                <p className=\"metric-description\">{metricData.metric.description}</p>\n                \n                {metricData.metric.idealRange && (\n                  <div className=\"ideal-range\">\n                    <span className=\"range-label\">Ideal Range:</span>\n                    <span className=\"range-value\">\n                      {formatValue(metricData.metric.idealRange.min, metricData.metric.unit)}\n                      {' - '}\n                      {formatValue(metricData.metric.idealRange.max, metricData.metric.unit)}\n                    </span>\n                  </div>\n                )}\n\n                <div className=\"metric-progress\">\n                  <div className=\"progress-track\">\n                    <div \n                      className=\"progress-indicator\"\n                      style={{\n                        left: `${Math.min(100, Math.max(0, (metricData.currentValue / 10) * 100))}%`,\n                        backgroundColor: getStatusColor(status)\n                      }}\n                    />\n                  </div>\n                </div>\n\n                {isExpanded && metricData.history.length > 0 && (\n                  <div className=\"metric-history\">\n                    <h5>Recent History</h5>\n                    <div className=\"history-items\">\n                      {metricData.history.slice(-5).map((item, index) => (\n                        <div key={index} className=\"history-item\">\n                          <span className=\"history-time\">\n                            {new Date(item.timestamp).toLocaleTimeString()}\n                          </span>\n                          <span className=\"history-value\">\n                            {formatValue(item.value, metricData.metric.unit)}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"metric-weight\">\n                <div \n                  className=\"weight-bar\"\n                  style={{ \n                    width: `${metricData.metric.weight * 100}%`,\n                    backgroundColor: coachColor\n                  }}\n                />\n                <span className=\"weight-label\">\n                  {Math.round(metricData.metric.weight * 100)}% weight\n                </span>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"dashboard-footer\">\n        <div className=\"overall-score\">\n          <span className=\"score-label\">Overall Module Score:</span>\n          <span className=\"score-value\" style={{ color: coachColor }}>\n            {Math.round(\n              metrics.reduce((sum, m) => {\n                const status = getMetricStatus(m.metric, m.currentValue);\n                const score = status === 'excellent' ? 100 : status === 'good' ? 75 : 50;\n                return sum + (score * m.metric.weight);\n              }, 0) / metrics.reduce((sum, m) => sum + m.metric.weight, 0)\n            )}%\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TrackingDashboard;\n"],"names":["_ref","metrics","coachColor","sessionActive","expandedMetric","setExpandedMetric","useState","getMetricStatus","metric","value","idealRange","min","max","getStatusColor","status","formatValue","unit","concat","Math","round","toFixed","toString","_jsxs","className","children","_jsx","map","metricData","currentValue","isExpanded","id","onClick","name","style","color","description","left","backgroundColor","history","length","slice","item","index","Date","timestamp","toLocaleTimeString","width","weight","reduce","sum","m"],"sourceRoot":""}