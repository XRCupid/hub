{"version":3,"file":"static/js/2937.0f6ee554.chunk.js","mappings":"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","sources":["components/DougieSpeedDateFixed.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, Suspense } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Canvas } from '@react-three/fiber';\nimport { HybridVoiceService } from '../services/hybridVoiceService';\nimport { PresenceAvatar } from './PresenceAvatar';\nimport { UserAvatarPiP } from './UserAvatarPiP';\nimport { EmotionalState } from '../services/humeVoiceService';\nimport { mapEmotionsToBlendshapes } from '../utils/emotionMappings';\nimport './DougieSpeedDate.css';\n\n// Dougie config\nconst DOUGIE_CONFIG = {\n  id: 'dougie',\n  name: 'Dougie',\n  humeConfigId: '320d816a-8dac-44e6-b59b-1c3d2b6b24d9',\n  avatarUrl: '/avatars/Dougie.glb',\n  description: 'A fun speed dating experience'\n};\n\n// Main component - COPIED FROM CoachSession\nconst DougieSpeedDateFixed: React.FC = () => {\n  const navigate = useNavigate();\n  \n  // State management - SAME AS COACH\n  const [isListening, setIsListening] = useState(false);\n  const [currentEmotion, setCurrentEmotion] = useState<EmotionalState>({});\n  const [audioData, setAudioData] = useState<Uint8Array>(new Uint8Array(128));\n  const [coachMessage, setCoachMessage] = useState('');\n  const [userTranscript, setUserTranscript] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [faceTrackingData, setFaceTrackingData] = useState<any>(null);\n  const [messageInput, setMessageInput] = useState('');\n  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);\n  const [hasPermissions, setHasPermissions] = useState(false);\n  const [currentAnimation, setCurrentAnimation] = useState<string>('idle');\n  const [emotionalBlendshapes, setEmotionalBlendshapes] = useState<any>({});\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState<Array<{ role: string; content: string }>>([]);\n  \n  // Speed date specific state\n  const [dateStarted, setDateStarted] = useState(false);\n  const [timeRemaining, setTimeRemaining] = useState(300); // 5 minutes\n  const [showReport, setShowReport] = useState(false);\n  \n  // Service refs - SAME AS COACH\n  const humeVoiceServiceRef = useRef<HybridVoiceService | null>(null);\n  \n  // Audio refs for lip sync - SAME AS COACH\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const audioPlayerRef = useRef<HTMLAudioElement>(new Audio());\n  const audioSourceCreatedRef = useRef<boolean>(false);\n  const audioQueueRef = useRef<Blob[]>([]);\n  const isPlayingRef = useRef<boolean>(false);\n  \n  // Timer ref\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Initialize voice service - SAME AS COACH\n  useEffect(() => {\n    const initHybridVoiceService = async () => {\n      if (!humeVoiceServiceRef.current) {\n        console.log('[DougieSpeedDate] Initializing HybridVoiceService...');\n        humeVoiceServiceRef.current = new HybridVoiceService();\n        \n        // Set up callbacks for audio and messages - SAME AS COACH\n        humeVoiceServiceRef.current.onAudio((audioBlob: Blob) => {\n          console.log('[DougieSpeedDate] Audio received:', audioBlob.size);\n          setIsSpeaking(true);\n          setCurrentAnimation('talking');\n          audioQueueRef.current.push(audioBlob);\n          if (!isPlayingRef.current) {\n            playNextAudioFromQueue();\n          }\n        });\n        \n        humeVoiceServiceRef.current.onMessage((message: any) => {\n          console.log('[DougieSpeedDate] Message received:', message);\n          const messageText = typeof message === 'string' ? message : \n                            (message?.message?.content || message?.content || \n                             JSON.stringify(message));\n          \n          if (messageText && messageText.trim()) {\n            setMessages(prev => [...prev, {\n              role: 'assistant',\n              content: messageText\n            }]);\n            setCoachMessage(messageText);\n            \n            // Handle prosody for emotions\n            if (message?.models?.prosody?.scores) {\n              const scores = message.models.prosody.scores;\n              const emotionsArray = Object.entries(scores).map(([name, score]) => ({\n                name: name.charAt(0).toUpperCase() + name.slice(1),\n                score: score as number\n              }));\n              const blendshapes = mapEmotionsToBlendshapes(emotionsArray);\n              setEmotionalBlendshapes(blendshapes);\n            }\n          }\n        });\n        \n        humeVoiceServiceRef.current.onAssistantEnd(() => {\n          console.log('[DougieSpeedDate] Assistant ended');\n          setIsSpeaking(false);\n          setCurrentAnimation('idle');\n        });\n        \n        humeVoiceServiceRef.current.onUserMessage((transcript: string) => {\n          console.log('[DougieSpeedDate] User message:', transcript);\n          setMessages(prev => [...prev, {\n            role: 'user',\n            content: transcript\n          }]);\n          setUserTranscript(transcript);\n        });\n        \n        humeVoiceServiceRef.current.onError((error: Error) => {\n          console.error('[DougieSpeedDate] Error:', error);\n          setError(error.message);\n        });\n        \n        console.log('[DougieSpeedDate] HybridVoiceService initialized successfully');\n      }\n    };\n    \n    initHybridVoiceService();\n  }, []);\n\n  // Request permissions - SAME AS COACH\n  const requestPermissions = async () => {\n    try {\n      setLoading(true);\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: true, \n        audio: true \n      });\n      setCameraStream(stream);\n      setHasPermissions(true);\n      setLoading(false);\n    } catch (err) {\n      console.error('Permission denied:', err);\n      setError('Camera and microphone permissions are required');\n      setLoading(false);\n    }\n  };\n\n  // Connect to service - MODIFIED FOR DOUGIE\n  const connectToService = async () => {\n    if (!humeVoiceServiceRef.current) return;\n    \n    try {\n      setLoading(true);\n      \n      // Set to use Hume for conversation\n      humeVoiceServiceRef.current.setUseHumeForConversation(true);\n      \n      // Connect with Dougie's config\n      await humeVoiceServiceRef.current.connect(DOUGIE_CONFIG.humeConfigId);\n      \n      setIsConnected(true);\n      setLoading(false);\n      \n      // Send initial greeting\n      setTimeout(() => {\n        humeVoiceServiceRef.current?.sendMessage(\n          \"Hi! I'm Dougie. I'm excited to meet you! Tell me about yourself.\"\n        );\n      }, 1000);\n      \n    } catch (err) {\n      console.error('Connection failed:', err);\n      setError('Failed to connect to voice service');\n      setLoading(false);\n    }\n  };\n\n  // Play audio from queue - EXACT COPY FROM COACH\n  const playNextAudioFromQueue = () => {\n    if (audioQueueRef.current.length === 0) {\n      isPlayingRef.current = false;\n      setIsSpeaking(false);\n      setCurrentAnimation('idle');\n      return;\n    }\n    \n    console.log('[DougieSpeedDate] Playing audio from queue, queue length:', audioQueueRef.current.length);\n    isPlayingRef.current = true;\n    const audioBlob = audioQueueRef.current.shift()!;\n    const audioUrl = URL.createObjectURL(audioBlob);\n    audioPlayerRef.current.src = audioUrl;\n    \n    // Setup audio analyzer for lip sync BEFORE playing\n    if (!audioSourceCreatedRef.current) {\n      try {\n        if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\n          const AudioContext = window.AudioContext || (window as any).webkitAudioContext;\n          audioContextRef.current = new AudioContext({ sampleRate: 48000 });\n          console.log('[DougieSpeedDate] Created new AudioContext');\n        }\n        \n        if (audioContextRef.current.state === 'suspended') {\n          audioContextRef.current.resume();\n          console.log('[DougieSpeedDate] Resumed AudioContext');\n        }\n        \n        const analyser = audioContextRef.current.createAnalyser();\n        analyser.fftSize = 256;\n        const source = audioContextRef.current.createMediaElementSource(audioPlayerRef.current);\n        source.connect(analyser);\n        analyser.connect(audioContextRef.current.destination);\n        \n        analyserRef.current = analyser;\n        audioSourceCreatedRef.current = true;\n        console.log('[DougieSpeedDate] Audio analyzer setup complete');\n      } catch (error) {\n        console.error('[DougieSpeedDate] Error setting up audio analyzer:', error);\n      }\n    }\n    \n    audioPlayerRef.current.play()\n      .then(() => {\n        console.log('[DougieSpeedDate] Audio playing successfully');\n        setIsSpeaking(true);\n        setCurrentAnimation('talking');\n      })\n      .catch(e => {\n        console.error('[DougieSpeedDate] Error playing audio:', e);\n        isPlayingRef.current = false;\n        setIsSpeaking(false);\n        setCurrentAnimation('idle');\n        setTimeout(() => playNextAudioFromQueue(), 100);\n      });\n    \n    audioPlayerRef.current.onended = () => {\n      console.log('[DougieSpeedDate] Audio playback ended');\n      URL.revokeObjectURL(audioUrl);\n      isPlayingRef.current = false;\n      setIsSpeaking(false);\n      setCurrentAnimation('idle');\n      // Play next audio if available\n      setTimeout(() => playNextAudioFromQueue(), 100);\n    };\n  };\n\n  // Update audio data for lip sync - SAME AS COACH\n  useEffect(() => {\n    if (!analyserRef.current) return;\n    \n    const updateAudioData = () => {\n      if (analyserRef.current && isSpeaking) {\n        const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n        analyserRef.current.getByteFrequencyData(dataArray);\n        setAudioData(dataArray);\n      }\n      requestAnimationFrame(updateAudioData);\n    };\n    \n    updateAudioData();\n  }, [isSpeaking]);\n\n  // Start date\n  const startDate = async () => {\n    setDateStarted(true);\n    await requestPermissions();\n    await connectToService();\n    \n    // Start timer\n    timerRef.current = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          endDate();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  // End date\n  const endDate = () => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n    \n    // Disconnect service\n    if (humeVoiceServiceRef.current) {\n      humeVoiceServiceRef.current.disconnect();\n    }\n    \n    setShowReport(true);\n  };\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n      if (humeVoiceServiceRef.current) {\n        humeVoiceServiceRef.current.disconnect();\n      }\n      if (cameraStream) {\n        cameraStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [cameraStream]);\n\n  // Pre-date screen\n  if (!dateStarted && !showReport) {\n    return (\n      <div className=\"dougie-speed-date\">\n        <div className=\"pre-date-screen\">\n          <h1>Speed Date with {DOUGIE_CONFIG.name}</h1>\n          <p>{DOUGIE_CONFIG.description}</p>\n          \n          <div className=\"date-rules\">\n            <h3>Speed Date Rules</h3>\n            <ul>\n              <li>Be yourself and have fun!</li>\n              <li>Ask questions and share stories</li>\n              <li>Keep it light and engaging</li>\n              <li>You have 5 minutes to make a connection</li>\n            </ul>\n          </div>\n          \n          <button className=\"start-button\" onClick={startDate}>\n            Start Your Date\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  // Report screen\n  if (showReport) {\n    return (\n      <div className=\"dougie-speed-date\">\n        <div className=\"date-report\">\n          <h1>Date Complete!</h1>\n          <p>Thanks for speed dating with {DOUGIE_CONFIG.name}!</p>\n          \n          <div className=\"conversation-summary\">\n            <h3>Conversation Summary</h3>\n            {messages.map((msg, idx) => (\n              <div key={idx} className={`message ${msg.role}`}>\n                <strong>{msg.role === 'user' ? 'You' : DOUGIE_CONFIG.name}:</strong> {msg.content}\n              </div>\n            ))}\n          </div>\n          \n          <button onClick={() => navigate('/speed-date')}>\n            Back to Speed Dating\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  // Main date interface - SAME STRUCTURE AS COACH\n  return (\n    <div className=\"dougie-speed-date\">\n      {/* Background */}\n      <div \n        className=\"absolute inset-0\"\n        style={{\n          backgroundImage: 'url(/Venues/GreatBistro.png)',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          zIndex: 0\n        }}\n      />\n      \n      {/* 3D Scene */}\n      <div className=\"absolute inset-0\" style={{ zIndex: 1 }}>\n        <Canvas>\n          <ambientLight intensity={0.8} />\n          <directionalLight position={[5, 5, 5]} intensity={1.2} />\n          \n          <Suspense fallback={null}>\n            <PresenceAvatar\n              avatarUrl={DOUGIE_CONFIG.avatarUrl}\n              animationName={currentAnimation}\n              audioData={audioData}\n              emotionalBlendshapes={emotionalBlendshapes}\n              position={[0, -1, 0]}\n              scale={1.5}\n            />\n          </Suspense>\n        </Canvas>\n      </div>\n      \n      {/* UI Overlay */}\n      <div className=\"absolute inset-0 pointer-events-none\" style={{ zIndex: 9999 }}>\n        {/* Timer and End Date Button - MAXIMUM VISIBILITY */}\n        <div className=\"absolute top-4 left-4 pointer-events-auto\" style={{ zIndex: 10000 }}>\n          <div className=\"bg-black text-white px-8 py-6 rounded-2xl shadow-2xl border-4 border-white\">\n            <div className=\"text-5xl font-bold text-center\">\n              {Math.floor(timeRemaining / 60)}:{(timeRemaining % 60).toString().padStart(2, '0')}\n            </div>\n          </div>\n          <button\n            onClick={endDate}\n            className=\"mt-4 w-full bg-red-600 hover:bg-red-700 text-white text-2xl font-bold px-8 py-6 rounded-2xl shadow-2xl border-4 border-white hover:scale-105 transition-all\"\n            style={{ zIndex: 10000 }}\n          >\n            END DATE\n          </button>\n        </div>\n        \n        {/* Messages */}\n        {coachMessage && (\n          <div className=\"absolute bottom-20 left-1/2 transform -translate-x-1/2 bg-black/80 text-white p-4 rounded-xl max-w-lg pointer-events-auto\">\n            <p>{coachMessage}</p>\n          </div>\n        )}\n        \n        {/* Error */}\n        {error && (\n          <div className=\"absolute top-20 left-1/2 transform -translate-x-1/2 bg-red-600 text-white p-4 rounded-xl pointer-events-auto\">\n            <p>{error}</p>\n          </div>\n        )}\n      </div>\n      \n      {/* User PiP */}\n      {isConnected && cameraStream && (\n        <UserAvatarPiP\n          position=\"top-right\"\n          size=\"medium\"\n          trackingData={faceTrackingData}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default DougieSpeedDateFixed;\n"],"names":["DOUGIE_CONFIG","DougieSpeedDateFixed","navigate","useNavigate","isListening","setIsListening","useState","currentEmotion","setCurrentEmotion","audioData","setAudioData","Uint8Array","coachMessage","setCoachMessage","userTranscript","setUserTranscript","loading","setLoading","error","setError","faceTrackingData","setFaceTrackingData","messageInput","setMessageInput","cameraStream","setCameraStream","hasPermissions","setHasPermissions","currentAnimation","setCurrentAnimation","emotionalBlendshapes","setEmotionalBlendshapes","isSpeaking","setIsSpeaking","isConnected","setIsConnected","messages","setMessages","dateStarted","setDateStarted","timeRemaining","setTimeRemaining","showReport","setShowReport","humeVoiceServiceRef","useRef","audioContextRef","analyserRef","audioPlayerRef","Audio","audioSourceCreatedRef","audioQueueRef","isPlayingRef","timerRef","useEffect","async","current","console","log","HybridVoiceService","onAudio","audioBlob","size","push","playNextAudioFromQueue","onMessage","message","_message$message","messageText","content","JSON","stringify","_message$models","_message$models$proso","trim","prev","role","models","prosody","scores","emotionsArray","Object","entries","map","_ref","name","score","charAt","toUpperCase","slice","blendshapes","mapEmotionsToBlendshapes","onAssistantEnd","onUserMessage","transcript","onError","initHybridVoiceService","length","shift","audioUrl","URL","createObjectURL","src","state","AudioContext","window","webkitAudioContext","sampleRate","resume","analyser","createAnalyser","fftSize","createMediaElementSource","connect","destination","play","then","catch","e","setTimeout","onended","revokeObjectURL","updateAudioData","dataArray","frequencyBinCount","getByteFrequencyData","requestAnimationFrame","startDate","stream","navigator","mediaDevices","getUserMedia","video","audio","err","requestPermissions","setUseHumeForConversation","_humeVoiceServiceRef$","sendMessage","connectToService","setInterval","endDate","clearInterval","disconnect","getTracks","forEach","track","stop","_jsx","className","children","_jsxs","msg","idx","concat","onClick","style","backgroundImage","backgroundSize","backgroundPosition","zIndex","Canvas","intensity","position","Suspense","fallback","PresenceAvatar","avatarUrl","animationName","scale","Math","floor","toString","padStart","UserAvatarPiP","trackingData"],"sourceRoot":""}