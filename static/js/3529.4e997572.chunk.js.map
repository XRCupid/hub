{"version":3,"file":"static/js/3529.4e997572.chunk.js","mappings":"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","sources":["components/CoachSessionWithVoice.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect, Suspense, FC, useMemo, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Canvas } from '@react-three/fiber';\nimport { PerspectiveCamera } from '@react-three/drei';\nimport { VoiceProvider, useVoice } from '@humeai/voice-react';\nimport { PresenceAvatar } from './PresenceAvatar';\nimport { UserAvatarPiP } from './UserAvatarPiP';\nimport { MediaDebug } from './MediaDebug';\nimport { EmotionalState } from '../services/humeVoiceService';\nimport { COACHES } from '../config/coachConfig';\nimport './CoachSession.css';\n\n// Inner component that uses the voice hook\nconst CoachSessionInner: React.FC<{ coach: any; coachId: string }> = ({ coach, coachId }) => {\n  const navigate = useNavigate();\n  const { connect, disconnect, status, sendSessionSettings, messages } = useVoice();\n  \n  // State management\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [currentEmotion, setCurrentEmotion] = useState<EmotionalState>({});\n  const [audioData, setAudioData] = useState<Uint8Array>(new Uint8Array());\n  const [coachMessage, setCoachMessage] = useState('');\n  const [userTranscript, setUserTranscript] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [faceTrackingData, setFaceTrackingData] = useState<any>(null);\n  const [messageInput, setMessageInput] = useState('');\n  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);\n  const [hasPermissions, setHasPermissions] = useState(false);\n  \n  // Refs\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n  const currentAudioRef = useRef<HTMLAudioElement | null>(null);\n\n  const isConnected = status.value === 'connected';\n  \n  // Initialize audio context\n  useEffect(() => {\n    const initAudioContext = async () => {\n      if (!audioContextRef.current) {\n        audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n        analyserRef.current = audioContextRef.current.createAnalyser();\n        analyserRef.current.fftSize = 256;\n      }\n    };\n    \n    initAudioContext();\n    \n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n\n  // Get media permissions\n  useEffect(() => {\n    const getMediaPermissions = async () => {\n      try {\n        console.log('[CoachSession] Requesting camera and microphone permissions...');\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          video: true, \n          audio: true \n        });\n        \n        console.log('[CoachSession] Media permissions granted:', {\n          video: stream.getVideoTracks().length,\n          audio: stream.getAudioTracks().length\n        });\n        setCameraStream(stream);\n        setHasPermissions(true);\n      } catch (error) {\n        console.error('[CoachSession] Error accessing media devices:', error);\n        setError('Please allow camera and microphone access for the coach session');\n      }\n    };\n\n    getMediaPermissions();\n\n    return () => {\n      if (cameraStream) {\n        cameraStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Connect when component mounts and permissions are granted\n  useEffect(() => {\n    if (hasPermissions && !isConnected && status.value === 'disconnected') {\n      connectVoice();\n    }\n  }, [hasPermissions, isConnected, status.value]);\n\n  // Handle messages from Hume\n  useEffect(() => {\n    if (messages.length > 0) {\n      const lastMessage = messages[messages.length - 1];\n      \n      if (lastMessage.type === 'assistant_message') {\n        setCoachMessage(lastMessage.message?.content || '');\n        setIsSpeaking(true);\n      } else if (lastMessage.type === 'user_message') {\n        setUserTranscript(lastMessage.message?.content || '');\n        setIsListening(true);\n      }\n    }\n  }, [messages]);\n\n  const connectVoice = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      console.log('[CoachSession] Connecting to voice...');\n      \n      await connect();\n      \n      console.log('[CoachSession] Connected successfully');\n    } catch (err: any) {\n      console.error('[CoachSession] Failed to connect:', err);\n      setError(err.message || 'Failed to connect to voice service');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    try {\n      await disconnect();\n      navigate('/coaches');\n    } catch (err) {\n      console.error('Failed to disconnect:', err);\n    }\n  };\n\n  const sendMessage = async (text: string) => {\n    if (!text.trim() || !isConnected) return;\n    \n    try {\n      // With the React SDK, sending messages is handled automatically\n      // The SDK will process the text input\n      console.log('[CoachSession] Message will be processed by Hume SDK:', text);\n    } catch (err) {\n      console.error('Failed to send message:', err);\n    }\n  };\n\n  return (\n    <div className=\"coach-session\">\n      <MediaDebug />\n      <div className=\"coach-header\">\n        <h1>Coach Session: {coach?.name || 'Unknown Coach'}</h1>\n        <button onClick={() => navigate('/coaches')} className=\"back-button\">\n          Back to Coaches\n        </button>\n      </div>\n\n      <div className=\"session-container\">\n        <div className=\"avatar-scene\">\n          <Canvas\n            camera={{ position: [0, 0, 3], fov: 45 }}\n            style={{ width: '100%', height: '100%' }}\n          >\n            <PerspectiveCamera makeDefault position={[0, 0, 3]} fov={45} />\n            <ambientLight intensity={0.5} />\n            <directionalLight position={[0, 2, 5]} intensity={1} />\n            \n            <Suspense fallback={null}>\n              <PresenceAvatar\n                audioData={isSpeaking ? audioData : undefined}\n              />\n            </Suspense>\n          </Canvas>\n        </div>\n\n        <div className=\"session-controls\">\n          {!isConnected ? (\n            <div className=\"connection-panel\">\n              <button \n                onClick={connectVoice} \n                disabled={loading}\n                className=\"connect-button\"\n              >\n                {loading ? 'Connecting...' : 'Start Session'}\n              </button>\n              {error && <div className=\"error-message\">{error}</div>}\n            </div>\n          ) : (\n            <>\n              <div className=\"conversation-status\">\n                <p>Coach: {coachMessage || 'Waiting...'}</p>\n                <div className=\"emotion-display\">\n                  Current Emotion: {Object.entries(currentEmotion)\n                    .filter(([_, value]) => value > 0.1)\n                    .map(([emotion, value]) => `${emotion}: ${(value * 100).toFixed(0)}%`)\n                    .join(', ') || 'Neutral'}\n                </div>\n              </div>\n\n              <div className=\"user-section\">\n                <p>You: {userTranscript || (isListening ? 'Listening...' : 'Not speaking')}</p>\n              </div>\n\n              <div className=\"message-input-section\">\n                <input\n                  type=\"text\"\n                  value={messageInput}\n                  onChange={(e) => setMessageInput(e.target.value)}\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      sendMessage(messageInput);\n                      setMessageInput('');\n                    }\n                  }}\n                  placeholder=\"Type a message...\"\n                  className=\"message-input\"\n                />\n                <button \n                  onClick={() => {\n                    sendMessage(messageInput);\n                    setMessageInput('');\n                  }}\n                  disabled={!messageInput.trim()}\n                  className=\"send-button\"\n                >\n                  Send\n                </button>\n              </div>\n\n              <button onClick={handleDisconnect} className=\"disconnect-button\">\n                End Session\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* PiP Avatar with face tracking */}\n      {hasPermissions && cameraStream && (\n        <UserAvatarPiP \n          avatarUrl=\"/avatars/user_avatar.glb\"\n          position=\"bottom-right\"\n          size=\"medium\"\n          trackingData={faceTrackingData}\n          enableOwnTracking={true}\n          cameraStream={cameraStream}\n        />\n      )}\n    </div>\n  );\n};\n\n// Main component with VoiceProvider\nconst CoachSession: React.FC = () => {\n  const { coachId } = useParams<{ coachId: string }>();\n  const coaches = Object.values(COACHES);\n  const coach = coachId ? coaches.find(c => c.id === coachId) : null;\n  \n  const auth = useMemo(() => ({\n    type: 'apiKey' as const,\n    value: process.env.REACT_APP_HUME_API_KEY || ''\n  }), []);\n\n  if (!coach) {\n    return <div>Coach not found</div>;\n  }\n\n  const configId = coach?.humeConfigId || process.env.REACT_APP_HUME_CONFIG_ID;\n  \n  return (\n    <VoiceProvider \n      auth={auth}\n      configId={configId}\n      onError={(error) => console.error('Hume Voice Error:', error)}\n    >\n      <CoachSessionInner coach={coach} coachId={coachId || ''} />\n    </VoiceProvider>\n  );\n};\n\nexport default CoachSession;\n"],"names":["CoachSessionInner","_ref","coach","coachId","navigate","useNavigate","connect","disconnect","status","sendSessionSettings","messages","useVoice","isSpeaking","setIsSpeaking","useState","isListening","setIsListening","currentEmotion","setCurrentEmotion","audioData","setAudioData","Uint8Array","coachMessage","setCoachMessage","userTranscript","setUserTranscript","loading","setLoading","error","setError","faceTrackingData","setFaceTrackingData","messageInput","setMessageInput","cameraStream","setCameraStream","hasPermissions","setHasPermissions","audioContextRef","useRef","analyserRef","animationFrameRef","isConnected","value","useEffect","async","current","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","initAudioContext","cancelAnimationFrame","console","log","stream","navigator","mediaDevices","getUserMedia","video","audio","getVideoTracks","length","getAudioTracks","getMediaPermissions","getTracks","forEach","track","stop","connectVoice","lastMessage","_lastMessage$message","type","message","content","_lastMessage$message2","err","sendMessage","text","trim","_jsxs","className","children","_jsx","MediaDebug","name","onClick","Canvas","camera","position","fov","style","width","height","PerspectiveCamera","makeDefault","intensity","Suspense","fallback","PresenceAvatar","undefined","_Fragment","Object","entries","filter","_ref2","_","map","_ref3","emotion","concat","toFixed","join","onChange","e","target","onKeyPress","key","placeholder","disabled","UserAvatarPiP","avatarUrl","size","trackingData","enableOwnTracking","CoachSession","useParams","coaches","values","COACHES","find","c","id","auth","useMemo","process","configId","humeConfigId","VoiceProvider","onError"],"sourceRoot":""}