{"version":3,"file":"static/js/6920.f371d544.chunk.js","mappings":"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","sources":["components/SimpleAvatar.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei';\nimport * as THREE from 'three';\n\ninterface SimpleAvatarProps {\n  avatarUrl: string;\n  position?: [number, number, number];\n  scale?: number;\n  isSpeaking?: boolean;\n  emotion?: 'neutral' | 'happy' | 'sad' | 'surprised' | 'thinking';\n}\n\nconst SimpleAvatar: React.FC<SimpleAvatarProps> = ({\n  avatarUrl,\n  position = [0, 0, 0],\n  scale = 1,\n  isSpeaking = false,\n  emotion = 'neutral'\n}) => {\n  const groupRef = useRef<THREE.Group>(null);\n  const { scene } = useGLTF(avatarUrl);\n  \n  // Clone scene to avoid conflicts\n  const clonedScene = React.useMemo(() => scene.clone(), [scene]);\n  \n  // Simple idle animation\n  useFrame((state) => {\n    if (!groupRef.current) return;\n    \n    // Breathing animation\n    const breathingScale = 1 + Math.sin(state.clock.elapsedTime * 0.5) * 0.02;\n    groupRef.current.scale.y = breathingScale * scale;\n    \n    // Speaking animation\n    if (isSpeaking) {\n      groupRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 5) * 0.02;\n    }\n    \n    // Subtle sway\n    groupRef.current.rotation.z = Math.sin(state.clock.elapsedTime * 0.3) * 0.01;\n  });\n  \n  // Apply emotion-based pose\n  useEffect(() => {\n    if (!groupRef.current) return;\n    \n    const emotionPoses = {\n      neutral: { x: 0, y: 0, z: 0 },\n      happy: { x: -0.05, y: 0, z: 0 },\n      sad: { x: 0.05, y: 0, z: 0 },\n      surprised: { x: -0.1, y: 0, z: 0 },\n      thinking: { x: 0, y: 0.1, z: 0 }\n    };\n    \n    const pose = emotionPoses[emotion];\n    groupRef.current.rotation.x = pose.x;\n    groupRef.current.rotation.y = pose.y;\n  }, [emotion]);\n  \n  return (\n    <group ref={groupRef} position={position} scale={scale}>\n      <primitive object={clonedScene} />\n    </group>\n  );\n};\n\n// Fallback avatar for when GLB files aren't available\nexport const FallbackAvatar: React.FC<Omit<SimpleAvatarProps, 'avatarUrl'>> = (props) => {\n  const meshRef = useRef<THREE.Mesh>(null);\n  \n  useFrame((state) => {\n    if (!meshRef.current) return;\n    \n    // Simple animations\n    meshRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.1;\n    if (props.isSpeaking) {\n      meshRef.current.scale.y = 1 + Math.sin(state.clock.elapsedTime * 10) * 0.05;\n    }\n  });\n  \n  const color = props.emotion === 'happy' ? '#4ade80' : \n                 props.emotion === 'sad' ? '#60a5fa' :\n                 props.emotion === 'surprised' ? '#f59e0b' : '#a78bfa';\n  \n  return (\n    <group position={props.position} scale={props.scale}>\n      {/* Head */}\n      <mesh ref={meshRef} position={[0, 1.6, 0]}>\n        <sphereGeometry args={[0.3, 32, 32]} />\n        <meshStandardMaterial color={color} />\n      </mesh>\n      \n      {/* Body */}\n      <mesh position={[0, 0.8, 0]}>\n        <cylinderGeometry args={[0.2, 0.3, 1.2, 32]} />\n        <meshStandardMaterial color=\"#667eea\" />\n      </mesh>\n      \n      {/* Eyes */}\n      <mesh position={[-0.1, 1.65, 0.25]}>\n        <sphereGeometry args={[0.05, 16, 16]} />\n        <meshStandardMaterial color=\"#1a1a1a\" />\n      </mesh>\n      <mesh position={[0.1, 1.65, 0.25]}>\n        <sphereGeometry args={[0.05, 16, 16]} />\n        <meshStandardMaterial color=\"#1a1a1a\" />\n      </mesh>\n    </group>\n  );\n};\n\nexport default SimpleAvatar;\n"],"names":["FallbackAvatar","props","meshRef","useRef","useFrame","state","current","rotation","y","Math","sin","clock","elapsedTime","isSpeaking","scale","color","emotion","_jsxs","position","children","ref","_jsx","args","_ref","avatarUrl","groupRef","scene","useGLTF","clonedScene","React","clone","breathingScale","x","z","useEffect","pose","neutral","happy","sad","surprised","thinking","object"],"sourceRoot":""}