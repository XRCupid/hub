{"version":3,"file":"static/js/1043.1bbbff4e.chunk.js","mappings":"2KAUO,MAAMA,EAA4DC,IAGlE,IAHmE,QACxEC,GAAU,EAAI,UACdC,EAAY,IACbF,EACC,MAAM,GAAEG,EAAE,MAAEC,EAAK,OAAEC,IAAWC,EAAAA,EAAAA,KAIxBC,IAHeC,EAAAA,EAAAA,WAGAC,EAAAA,EAAAA,UAAQ,IACpB,IAAIC,EAAAA,kBAAwB,CACjCC,MAAO,IAAID,EAAAA,MAAY,EAAG,GAAK,IAC/BE,aAAa,EACbC,QAAqB,GAAZX,EACTY,SAAUJ,EAAAA,oBAEX,CAACR,KA8BJ,OA5BAa,EAAAA,EAAAA,IAAS,KACP,IAAKd,EAAS,OAGd,MAAMe,EAAqBZ,EAAMa,WACjCb,EAAMa,WAAa,IAAIP,EAAAA,MAAY,GAGnC,MAAMQ,EAAoB,IAAIC,IAE9Bf,EAAMgB,UAAUC,IACVA,aAAiBX,EAAAA,OACnBQ,EAAkBI,IAAID,EAAOA,EAAME,UACnCF,EAAME,SAAWhB,MAKrBJ,EAAGqB,OAAOpB,EAAOC,GAGjBa,EAAkBO,SAAQ,CAACF,EAAUG,KACnCA,EAAKH,SAAWA,KAGlBnB,EAAMa,WAAaD,IAClB,GAII,K","sources":["components/CustomPostProcessing.tsx"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\n\ninterface CustomPostProcessingProps {\n  enabled?: boolean;\n  intensity?: number;\n}\n\n// Simple bloom-like effect using built-in Three.js\nexport const CustomPostProcessing: React.FC<CustomPostProcessingProps> = ({ \n  enabled = true, \n  intensity = 0.5 \n}) => {\n  const { gl, scene, camera } = useThree();\n  const renderTarget = useRef<THREE.WebGLRenderTarget>();\n  \n  // Create a simple glow effect using built-in Three.js\n  const glowMaterial = useMemo(() => {\n    return new THREE.MeshBasicMaterial({\n      color: new THREE.Color(1, 0.8, 0.6),\n      transparent: true,\n      opacity: intensity * 0.3,\n      blending: THREE.AdditiveBlending\n    });\n  }, [intensity]);\n\n  useFrame(() => {\n    if (!enabled) return;\n    \n    // Simple post-processing effect: render scene with glow\n    const originalBackground = scene.background;\n    scene.background = new THREE.Color(0x000000);\n    \n    // Store original materials\n    const originalMaterials = new Map<THREE.Mesh, THREE.Material | THREE.Material[]>();\n    \n    scene.traverse((child) => {\n      if (child instanceof THREE.Mesh) {\n        originalMaterials.set(child, child.material);\n        child.material = glowMaterial;\n      }\n    });\n    \n    // Render glow pass\n    gl.render(scene, camera);\n    \n    // Restore original materials\n    originalMaterials.forEach((material, mesh) => {\n      mesh.material = material;\n    });\n    \n    scene.background = originalBackground;\n  }, 1); // Priority 1 to run after regular render\n\n  if (!enabled) return null;\n  \n  return null;\n};\n"],"names":["CustomPostProcessing","_ref","enabled","intensity","gl","scene","camera","useThree","glowMaterial","useRef","useMemo","THREE","color","transparent","opacity","blending","useFrame","originalBackground","background","originalMaterials","Map","traverse","child","set","material","render","forEach","mesh"],"sourceRoot":""}