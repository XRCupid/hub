{"version":3,"file":"static/js/6264.3f24928c.chunk.js","mappings":"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","sources":["components/WorkingPoseAvatar.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, Suspense, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, useGLTF } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Use the PostureData type from your app\ninterface PostureKeypoint {\n  x: number;\n  y: number;\n  confidence: number;\n}\n\ninterface PostureData {\n  keypoints: {\n    [key: string]: PostureKeypoint;\n  };\n  confidence: number;\n}\n\ninterface AvatarProps {\n  postureData: PostureData | null;\n}\n\nfunction Avatar({ postureData }: AvatarProps) {\n  const group = useRef<THREE.Group>(null);\n  const { scene } = useGLTF('/avatars/AngelChick.glb');\n  const { animations: idleAnimations } = useGLTF('/animations/feminine/idle/F_Standing_Idle_001.glb');\n  \n  // Animation mixer\n  const mixerRef = useRef<THREE.AnimationMixer | null>(null);\n  \n  // Bone references\n  const headBone = useRef<THREE.Bone | null>(null);\n  const neckBone = useRef<THREE.Bone | null>(null);\n  const leftArmBone = useRef<THREE.Bone | null>(null);\n  const rightArmBone = useRef<THREE.Bone | null>(null);\n  const leftForeArmBone = useRef<THREE.Bone | null>(null);\n  const rightForeArmBone = useRef<THREE.Bone | null>(null);\n  \n  // Store initial rotations\n  const initialRotations = useRef<{ [key: string]: THREE.Quaternion }>({});\n  \n  // Initialize bones\n  useEffect(() => {\n    if (scene) {\n      scene.traverse((child) => {\n        if (child instanceof THREE.Bone) {\n          const name = child.name.toLowerCase();\n          \n          if (name.includes('head')) {\n            headBone.current = child;\n            initialRotations.current['head'] = child.quaternion.clone();\n          } else if (name.includes('neck')) {\n            neckBone.current = child;\n            initialRotations.current['neck'] = child.quaternion.clone();\n          } else if (name.includes('leftarm') || name.includes('left_arm') || name.includes('l_arm')) {\n            if (name.includes('forearm') || name.includes('fore')) {\n              leftForeArmBone.current = child;\n              initialRotations.current['leftForeArm'] = child.quaternion.clone();\n            } else {\n              leftArmBone.current = child;\n              initialRotations.current['leftArm'] = child.quaternion.clone();\n            }\n          } else if (name.includes('rightarm') || name.includes('right_arm') || name.includes('r_arm')) {\n            if (name.includes('forearm') || name.includes('fore')) {\n              rightForeArmBone.current = child;\n              initialRotations.current['rightForeArm'] = child.quaternion.clone();\n            } else {\n              rightArmBone.current = child;\n              initialRotations.current['rightArm'] = child.quaternion.clone();\n            }\n          }\n        }\n      });\n      \n      if (group.current) {\n        group.current.clear();\n        group.current.add(scene);\n      }\n    }\n  }, [scene]);\n\n  // Start idle animation\n  useEffect(() => {\n    if (scene && idleAnimations && idleAnimations.length > 0) {\n      const mixer = new THREE.AnimationMixer(scene);\n      mixerRef.current = mixer;\n      \n      const action = mixer.clipAction(idleAnimations[0]);\n      action.reset();\n      action.setLoop(THREE.LoopRepeat, Infinity);\n      action.play();\n    }\n  }, [scene, idleAnimations]);\n\n  useFrame((state, delta) => {\n    if (mixerRef.current) {\n      mixerRef.current.update(delta);\n    }\n    \n    if (!postureData || !postureData.keypoints) {\n      return;\n    }\n    \n    const keypoints = postureData.keypoints;\n    \n    // Head tracking\n    if (keypoints.nose && keypoints.nose.confidence > 0.3 && headBone.current) {\n      const headRotation = new THREE.Euler(\n        (keypoints.nose.y - 0.5) * 0.5,\n        -(keypoints.nose.x - 0.5) * 0.5,\n        0\n      );\n      headBone.current.quaternion.setFromEuler(headRotation);\n    }\n    \n    // Arm tracking using the working approach from memories\n    const applyArmRotation = (\n      shoulderKeypoint: PostureKeypoint,\n      elbowKeypoint: PostureKeypoint,\n      wristKeypoint: PostureKeypoint,\n      armBone: THREE.Bone | null,\n      foreArmBone: THREE.Bone | null,\n      isLeft: boolean\n    ) => {\n      if (!armBone || !shoulderKeypoint || !elbowKeypoint || !wristKeypoint) return;\n      if (shoulderKeypoint.confidence < 0.3 || elbowKeypoint.confidence < 0.3 || wristKeypoint.confidence < 0.3) return;\n      \n      // Normalize coordinates (from memories)\n      const shoulderPos = new THREE.Vector3(\n        (shoulderKeypoint.x / 640 - 0.5) * 2,\n        -(shoulderKeypoint.y / 480 - 0.5) * 2,\n        0\n      );\n      \n      const elbowPos = new THREE.Vector3(\n        (elbowKeypoint.x / 640 - 0.5) * 2,\n        -(elbowKeypoint.y / 480 - 0.5) * 2,\n        -0.15\n      );\n      \n      const wristPos = new THREE.Vector3(\n        (wristKeypoint.x / 640 - 0.5) * 2,\n        -(wristKeypoint.y / 480 - 0.5) * 2,\n        -0.3\n      );\n      \n      // Calculate arm direction\n      const armDir = wristPos.clone().sub(shoulderPos).normalize();\n      \n      // T-pose reference directions (from memories)\n      const tPoseDir = isLeft ? new THREE.Vector3(-1, 0, 0) : new THREE.Vector3(1, 0, 0);\n      \n      // Calculate rotation from T-pose to current pose\n      const rotation = new THREE.Quaternion();\n      rotation.setFromUnitVectors(tPoseDir, armDir);\n      \n      // Apply rotation directly (not combined with idle)\n      armBone.quaternion.copy(rotation);\n      \n      // Forearm rotation\n      if (foreArmBone) {\n        const forearmDir = wristPos.clone().sub(elbowPos).normalize();\n        const upperArmDir = elbowPos.clone().sub(shoulderPos).normalize();\n        \n        const angle = upperArmDir.angleTo(forearmDir);\n        const bendRotation = new THREE.Quaternion();\n        bendRotation.setFromAxisAngle(new THREE.Vector3(0, 0, isLeft ? -1 : 1), angle * 0.5);\n        \n        foreArmBone.quaternion.copy(initialRotations.current[isLeft ? 'leftForeArm' : 'rightForeArm']);\n        foreArmBone.quaternion.multiply(bendRotation);\n      }\n    };\n    \n    // Apply arm tracking\n    if (keypoints.leftShoulder && keypoints.leftElbow && keypoints.leftWrist) {\n      applyArmRotation(\n        keypoints.leftShoulder,\n        keypoints.leftElbow,\n        keypoints.leftWrist,\n        leftArmBone.current,\n        leftForeArmBone.current,\n        true\n      );\n    }\n    \n    if (keypoints.rightShoulder && keypoints.rightElbow && keypoints.rightWrist) {\n      applyArmRotation(\n        keypoints.rightShoulder,\n        keypoints.rightElbow,\n        keypoints.rightWrist,\n        rightArmBone.current,\n        rightForeArmBone.current,\n        false\n      );\n    }\n  });\n\n  return <group ref={group} scale={100} position={[0, -100, 0]} />;\n}\n\n// Pose detection component using the working pattern\nfunction PoseDetection({ onPoseData }: { onPoseData: (data: PostureData | null) => void }) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  \n  useEffect(() => {\n    // Initialize webcam\n    const initWebcam = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: { width: 640, height: 480 }\n        });\n        \n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n          await videoRef.current.play();\n        }\n      } catch (error) {\n        console.error('Error accessing webcam:', error);\n      }\n    };\n    \n    initWebcam();\n    \n    // Load PoseNet\n    const loadPoseNet = async () => {\n      // @ts-ignore - ml5 is loaded via script tag\n      if (typeof ml5 !== 'undefined') {\n        const poseNet = ml5.poseNet(videoRef.current, () => {\n          console.log('PoseNet loaded');\n        });\n        \n        poseNet.on('pose', (results: any) => {\n          if (results.length > 0) {\n            const pose = results[0].pose;\n            const keypoints: { [key: string]: PostureKeypoint } = {};\n            \n            // Convert ml5 keypoints to our format\n            pose.keypoints.forEach((kp: any) => {\n              keypoints[kp.part] = {\n                x: kp.position.x,\n                y: kp.position.y,\n                confidence: kp.score\n              };\n            });\n            \n            onPoseData({\n              keypoints,\n              confidence: pose.score\n            });\n          }\n        });\n      }\n    };\n    \n    // Wait a bit for ml5 to load\n    setTimeout(loadPoseNet, 1000);\n    \n    return () => {\n      if (videoRef.current && videoRef.current.srcObject) {\n        const stream = videoRef.current.srcObject as MediaStream;\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [onPoseData]);\n  \n  return (\n    <video\n      ref={videoRef}\n      style={{\n        position: 'absolute',\n        bottom: 20,\n        right: 20,\n        width: 320,\n        height: 240,\n        transform: 'scaleX(-1)',\n        borderRadius: '10px',\n        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n      }}\n    />\n  );\n}\n\nexport default function WorkingPoseAvatar() {\n  const [postureData, setPostureData] = useState<PostureData | null>(null);\n\n  return (\n    <div style={{ width: '100vw', height: '100vh', position: 'relative' }}>\n      <Canvas camera={{ position: [0, 100, 300], fov: 50 }}>\n        <ambientLight intensity={0.6} />\n        <directionalLight position={[10, 10, 5]} intensity={1} />\n        <Suspense fallback={null}>\n          <Avatar postureData={postureData} />\n        </Suspense>\n        <OrbitControls />\n        <gridHelper args={[500, 50]} />\n      </Canvas>\n      \n      <PoseDetection onPoseData={setPostureData} />\n    </div>\n  );\n}\n\n// Preload models\nuseGLTF.preload('/avatars/AngelChick.glb');\nuseGLTF.preload('/animations/feminine/idle/F_Standing_Idle_001.glb');\n\n// TypeScript declaration for ml5\ndeclare global {\n  interface Window {\n    ml5: any;\n  }\n  const ml5: any;\n}\n"],"names":["Avatar","_ref","postureData","group","useRef","scene","useGLTF","animations","idleAnimations","mixerRef","headBone","neckBone","leftArmBone","rightArmBone","leftForeArmBone","rightForeArmBone","initialRotations","useEffect","traverse","child","THREE","name","toLowerCase","includes","current","quaternion","clone","clear","add","length","mixer","action","clipAction","reset","setLoop","Infinity","play","useFrame","state","delta","update","keypoints","nose","confidence","headRotation","y","x","setFromEuler","applyArmRotation","shoulderKeypoint","elbowKeypoint","wristKeypoint","armBone","foreArmBone","isLeft","shoulderPos","elbowPos","wristPos","armDir","sub","normalize","tPoseDir","rotation","setFromUnitVectors","copy","forearmDir","angle","angleTo","bendRotation","setFromAxisAngle","multiply","leftShoulder","leftElbow","leftWrist","rightShoulder","rightElbow","rightWrist","_jsx","ref","scale","position","PoseDetection","_ref2","onPoseData","videoRef","async","stream","navigator","mediaDevices","getUserMedia","video","width","height","srcObject","error","console","initWebcam","setTimeout","ml5","poseNet","log","on","results","pose","forEach","kp","part","score","getTracks","track","stop","style","bottom","right","transform","borderRadius","boxShadow","WorkingPoseAvatar","setPostureData","useState","_jsxs","children","Canvas","camera","fov","intensity","Suspense","fallback","OrbitControls","args","preload"],"sourceRoot":""}