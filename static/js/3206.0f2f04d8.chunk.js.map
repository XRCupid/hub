{"version":3,"file":"static/js/3206.0f2f04d8.chunk.js","mappings":"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","sources":["webpack://hub/./src/components/CoachCallTab.css?e356","components/CoachCallTab.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, { useState, useEffect, useRef } from 'react';\nimport AvatarView from './AvatarView';\nimport './CoachCallTab.css';\nimport { useVoice } from \"@humeai/voice-react\"; // Import useVoice\n\nconst CoachCallTab: React.FC = () => {\n  const [isVideoVisible, setIsVideoVisible] = useState(true);\n  const [userStream, setUserStream] = useState<MediaStream | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  \n  const { connect, disconnect, status, messages } = useVoice(); // Initialize useVoice\n\n  const toggleUserVideo = async () => {\n    if (isVideoVisible && userStream) {\n      userStream.getTracks().forEach(track => track.stop());\n      setUserStream(null);\n      setIsVideoVisible(false);\n    } else {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });\n        setUserStream(stream);\n        setIsVideoVisible(true);\n      } catch (err) {\n        console.error(\"Error accessing webcam:\", err);\n        setIsVideoVisible(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (isVideoVisible && userStream && videoRef.current) {\n      videoRef.current.srcObject = userStream;\n    }\n  }, [isVideoVisible, userStream]);\n\n  useEffect(() => {\n    let active = true;\n    if (isVideoVisible) {\n        const initVideo = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });\n                if (active) {\n                  setUserStream(stream);\n                }\n            } catch (err) {\n                console.error(\"Error accessing webcam on initial load:\", err);\n                if (active) {\n                  setIsVideoVisible(false);\n                }\n            }\n        };\n        initVideo();\n    }\n    return () => {\n      active = false;\n      if (userStream) {\n        userStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Log Hume EVI messages and update UI\n  useEffect(() => {\n    if (messages.length > 0) {\n      console.log(\"Hume EVI Messages:\", messages);\n      // This effect will run when messages array updates\n    }\n  }, [messages]);\n\n  const handleMicToggle = () => {\n    if (status.value === 'connected') {\n      disconnect();\n    } else if (status.value === 'disconnected' || status.value === 'error') {\n      connect().catch(e => console.error(\"Hume EVI Connection Error:\", e));\n    }\n  };\n\n  const getMicButtonText = () => {\n    switch (status.value) {\n      case 'disconnected':\n        return 'Connect Mic';\n      case 'connecting':\n        return 'Connecting...';\n      case 'connected':\n        return 'Disconnect Mic';\n      case 'error':\n        return 'Mic Error (Retry)';\n      default:\n        return 'Mic';\n    }\n  };\n\n  return (\n    <div className=\"coach-call-container\">\n      <div className=\"main-panel\">\n        <div className=\"npc-panel\">\n          <h2>Coach NPC</h2>\n          <div className=\"avatar-container\">\n            <AvatarView />\n          </div>\n        </div>\n        <div className=\"user-panel\">\n          <div className=\"user-video-controls\">\n            <h3>You</h3>\n            <button onClick={toggleUserVideo} type=\"button\">\n              {isVideoVisible && userStream ? 'Turn Off Video' : 'Turn On Video'}\n            </button>\n          </div>\n          {isVideoVisible && userStream && (\n            <div className=\"user-video-container\">\n              <video ref={videoRef} autoPlay playsInline muted style={{ width: '100%', transform: 'scaleX(-1)' }} />\n            </div>\n          )}\n          {(!isVideoVisible || !userStream) && (\n            <div className=\"user-video-placeholder\">\n              Your video is off.\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"communication-panel\">\n        <button onClick={handleMicToggle} type=\"button\" disabled={status.value === 'connecting'}>\n          {getMicButtonText()}\n        </button>\n        <input type=\"text\" placeholder=\"Type your message (text input coming soon)...\" readOnly />\n        <button type=\"button\">Send (TBD)</button>\n      </div>\n      <div className=\"chat-history-panel\">\n        {messages.map((msg, index) => {\n          // User's finalized chat message\n          if (msg.type === 'user_message' && msg.message && typeof msg.message.content === 'string') {\n            return <p key={`user-${index}`}><strong>You:</strong> {msg.message.content}</p>;\n          }\n          // Assistant's chat message\n          if (msg.type === 'assistant_message' && msg.message && typeof msg.message.content === 'string') {\n            return <p key={`assistant-${index}`}><strong>NPC:</strong> {msg.message.content}</p>;\n          }\n          // Interim user transcript\n          /*\n          if (msg.type === 'transcript_chunk' && msg.message?.text) {\n            // console.log('User transcript chunk:', msg.message.text); // Log if needed\n            // Example: Display interim transcript if desired for live feedback:\n            // return <p key={`transcript-${index}`} style={{ fontStyle: 'italic', color: 'grey' }}>{msg.message.text}</p>;\n            return null; // Not displaying chunks in the main chat UI for now\n          }\n          */\n          \n          // Fallback for any other message types you might want to log or handle\n          // console.log('Other EVI message type:', msg.type, msg); \n          return null; \n        })}\n        {messages.length === 0 && <p>Chat history will appear here...</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default CoachCallTab;\n"],"names":["CoachCallTab","isVideoVisible","setIsVideoVisible","useState","userStream","setUserStream","videoRef","useRef","connect","disconnect","status","messages","useVoice","useEffect","current","srcObject","active","async","stream","navigator","mediaDevices","getUserMedia","video","audio","err","console","error","initVideo","getTracks","forEach","track","stop","length","log","_jsxs","className","children","_jsx","AvatarView","onClick","type","ref","autoPlay","playsInline","muted","style","width","transform","handleMicToggle","value","catch","e","disabled","getMicButtonText","placeholder","readOnly","map","msg","index","message","content","concat"],"sourceRoot":""}