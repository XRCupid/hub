{"version":3,"file":"static/js/4130.91ef45c4.chunk.js","mappings":"yKAGO,SAASA,IACd,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAmB,KACxCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GAErCG,EAAaC,IACjBL,GAAUM,GAAQ,IAAIA,EAAK,GAADC,QAAK,IAAIC,MAAOC,cAAa,MAAAF,OAAKF,OAiG9D,OACEK,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,SAAU,QAASC,OAAQ,UAAWC,SAAA,EACnEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0BAEJL,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEM,aAAc,QAASF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,UAAQE,QAnGSC,UACrBf,EAAU,+BAGV,MAAMgB,EAAW,CACfC,WAAW,EACXC,cAAc,EACdC,cAAeC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,uBAAAA,mDAAAA,0BAAAA,mEAAAA,yBAAAA,uDAAAA,6BAAAA,mEAAAA,2BAAAA,0CAAAA,+BAAAA,gCAAAA,gCAAAA,oDAAAA,8BAAAA,gBAAAA,kCAAAA,8EAAAA,uCAAAA,eAAAA,0BAAAA,4CAAAA,mBAAAA,UAAAA,2BAAAA,uFAAAA,8BAAAA,SAAAA,sBAAAA,+CAAAA,wBAAAA,WAAAA,qBAAAA,2BAAAA,yBAAAA,uKAAAA,6BAAAA,sDAAAA,4BAAAA,OAAAA,kCAAAA,eAAYC,yBAC3BC,cACEF,mDAAmCG,UAAU,EAAG,IAAM,MACxDC,iBACEJ,mEAAsCG,UAAU,EAAG,IAAM,MAC3DE,SAAUL,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,uBAAAA,mDAAAA,0BAAAA,mEAAAA,yBAAAA,uDAAAA,6BAAAA,mEAAAA,2BAAAA,0CAAAA,+BAAAA,gCAAAA,gCAAAA,oDAAAA,8BAAAA,gBAAAA,kCAAAA,8EAAAA,uCAAAA,eAAAA,0BAAAA,4CAAAA,mBAAAA,UAAAA,2BAAAA,uFAAAA,8BAAAA,SAAAA,sBAAAA,+CAAAA,wBAAAA,WAAAA,qBAAAA,2BAAAA,yBAAAA,uKAAAA,6BAAAA,sDAAAA,4BAAAA,OAAAA,kCAAAA,eAAYC,0BAA4B,WAKpD,GAFArB,EAAU,sBAADG,OAAuBuB,KAAKC,UAAUX,EAAU,KAAM,MAE1DA,EAASC,YAAcD,EAASE,eAAiBF,EAASG,YAM7D,OALAnB,EAAU,kDACVA,EAAU,wDACVA,EAAU,4BACVA,EAAU,oCACVA,EAAU,8BAIZ,IAEE4B,EAAAA,EAAiBC,WAAW5B,IAC1BD,EAAU,qBAADG,OAAsBF,OAGjC2B,EAAAA,EAAiBE,SAASC,IACxB/B,EAAU,mBAADG,OAAoB4B,EAAUC,KAAI,cAI7ChC,EAAU,kCACJ4B,EAAAA,EAAiBK,UAEvBjC,EAAU,+BACVD,GAAa,GAGbmC,YAAW,KACLN,EAAAA,EAAiBO,oBACnBnC,EAAU,2BACV4B,EAAAA,EAAiBQ,YAAY,qCAE9B,IAEL,CAAE,MAAOC,GACPrC,EAAU,UAADG,OAAWkC,IACpBC,QAAQD,MAAM,cAAeA,EAC/B,GA6CqCE,SAAUzC,EAAUa,SAAC,oCAGtDC,EAAAA,EAAAA,KAAA,UAAQE,QA7CQC,UACpBf,EAAU,8BAEV,MAAMwC,EAASpB,mDACTqB,EAAYrB,mEAOlB,IAEE,MAAMsB,EAAcC,KAAK,GAADxC,OAAIqC,EAAM,KAAArC,OAAIsC,IAChCG,QAAiBC,MAAM,sCAAuC,CAClEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oCAChB,cAAgB,SAAD5C,OAAWuC,IAE5BM,KAAM,kCAKR,GAFAhD,EAAU,0BAADG,OAA2ByC,EAASjD,SAEzCiD,EAASK,GAAI,CACf,MAAMC,QAAaN,EAASO,OAC5BnD,EAAU,+BAADG,OAAgC+C,EAAKE,WAAU,YAC1D,KAAO,CACL,MAAMC,QAAkBT,EAASU,OACjCtD,EAAU,gBAADG,OAAiBkD,GAC5B,CACF,CAAE,MAAOhB,GACPrC,EAAU,qBAADG,OAAsBkC,GACjC,GAWoC9B,MAAO,CAAEgD,WAAY,QAAS5C,SAAC,wBAKjEC,EAAAA,EAAAA,KAAA,OAAKL,MAAO,CACViD,gBAAiB,UACjBhD,QAAS,OACTiD,aAAc,MACdC,WAAY,YACZC,SAAU,OACVC,UAAW,QACXC,SAAU,QACVlD,SACChB,EAAOmE,KAAI,CAACC,EAAKC,KAChBpD,EAAAA,EAAAA,KAAA,OAAeL,MAAO,CAAEM,aAAc,OAAQF,SAC3CoD,GADOC,SAOpB,C","sources":["components/HumeConnectionTest.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport humeVoiceService from '../services/humeVoiceService';\n\nexport function HumeConnectionTest() {\n  const [status, setStatus] = useState<string[]>([]);\n  const [connected, setConnected] = useState(false);\n  \n  const addStatus = (message: string) => {\n    setStatus(prev => [...prev, `${new Date().toISOString()}: ${message}`]);\n  };\n  \n  const testConnection = async () => {\n    addStatus('Starting connection test...');\n    \n    // Check environment variables\n    const envCheck = {\n      hasApiKey: !!process.env.REACT_APP_HUME_API_KEY,\n      hasSecretKey: !!process.env.REACT_APP_HUME_SECRET_KEY,\n      hasConfigId: !!process.env.REACT_APP_HUME_CONFIG_ID,\n      apiKeyPreview: process.env.REACT_APP_HUME_API_KEY ? \n        process.env.REACT_APP_HUME_API_KEY.substring(0, 10) + '...' : 'NOT SET',\n      secretKeyPreview: process.env.REACT_APP_HUME_SECRET_KEY ? \n        process.env.REACT_APP_HUME_SECRET_KEY.substring(0, 10) + '...' : 'NOT SET',\n      configId: process.env.REACT_APP_HUME_CONFIG_ID || 'NOT SET'\n    };\n    \n    addStatus(`Environment check: ${JSON.stringify(envCheck, null, 2)}`);\n    \n    if (!envCheck.hasApiKey || !envCheck.hasSecretKey || !envCheck.hasConfigId) {\n      addStatus('ERROR: Missing required environment variables!');\n      addStatus('Please ensure these are set in your .env.local file:');\n      addStatus('- REACT_APP_HUME_API_KEY');\n      addStatus('- REACT_APP_HUME_SECRET_KEY');\n      addStatus('- REACT_APP_HUME_CONFIG_ID');\n      return;\n    }\n    \n    try {\n      // Set up callbacks\n      humeVoiceService.onMessage((message: any) => {\n        addStatus(`Message received: ${message}`);\n      });\n      \n      humeVoiceService.onAudio((audioBlob: Blob) => {\n        addStatus(`Audio received: ${audioBlob.size} bytes`);\n      });\n      \n      // Try to connect\n      addStatus('Attempting to connect...');\n      await humeVoiceService.connect();\n      \n      addStatus('SUCCESS: Connected to Hume!');\n      setConnected(true);\n      \n      // Test sending a message\n      setTimeout(() => {\n        if (humeVoiceService.checkConnection()) {\n          addStatus('Sending test message...');\n          humeVoiceService.sendMessage('Hello, this is a test message.');\n        }\n      }, 1000);\n      \n    } catch (error) {\n      addStatus(`ERROR: ${error}`);\n      console.error('Full error:', error);\n    }\n  };\n  \n  const testDirectApi = async () => {\n    addStatus('Testing direct API call...');\n    \n    const apiKey = process.env.REACT_APP_HUME_API_KEY;\n    const secretKey = process.env.REACT_APP_HUME_SECRET_KEY;\n    \n    if (!apiKey || !secretKey) {\n      addStatus('ERROR: Missing API credentials');\n      return;\n    }\n    \n    try {\n      // Test OAuth endpoint\n      const credentials = btoa(`${apiKey}:${secretKey}`);\n      const response = await fetch('https://api.hume.ai/oauth2-cc/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': `Basic ${credentials}`\n        },\n        body: 'grant_type=client_credentials',\n      });\n      \n      addStatus(`OAuth response status: ${response.status}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        addStatus(`Token obtained! Expires in: ${data.expires_in} seconds`);\n      } else {\n        const errorText = await response.text();\n        addStatus(`OAuth error: ${errorText}`);\n      }\n    } catch (error) {\n      addStatus(`Direct API error: ${error}`);\n    }\n  };\n  \n  return (\n    <div style={{ padding: '20px', maxWidth: '800px', margin: '0 auto' }}>\n      <h1>Hume Connection Test</h1>\n      \n      <div style={{ marginBottom: '20px' }}>\n        <button onClick={testConnection} disabled={connected}>\n          Test Hume WebSocket Connection\n        </button>\n        <button onClick={testDirectApi} style={{ marginLeft: '10px' }}>\n          Test Direct API\n        </button>\n      </div>\n      \n      <div style={{ \n        backgroundColor: '#f0f0f0', \n        padding: '10px', \n        borderRadius: '5px',\n        fontFamily: 'monospace',\n        fontSize: '12px',\n        maxHeight: '400px',\n        overflow: 'auto'\n      }}>\n        {status.map((msg, idx) => (\n          <div key={idx} style={{ marginBottom: '5px' }}>\n            {msg}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"names":["HumeConnectionTest","status","setStatus","useState","connected","setConnected","addStatus","message","prev","concat","Date","toISOString","_jsxs","style","padding","maxWidth","margin","children","_jsx","marginBottom","onClick","async","envCheck","hasApiKey","hasSecretKey","hasConfigId","process","REACT_APP_HUME_CONFIG_ID","apiKeyPreview","substring","secretKeyPreview","configId","JSON","stringify","humeVoiceService","onMessage","onAudio","audioBlob","size","connect","setTimeout","checkConnection","sendMessage","error","console","disabled","apiKey","secretKey","credentials","btoa","response","fetch","method","headers","body","ok","data","json","expires_in","errorText","text","marginLeft","backgroundColor","borderRadius","fontFamily","fontSize","maxHeight","overflow","map","msg","idx"],"sourceRoot":""}