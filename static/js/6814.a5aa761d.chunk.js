"use strict";(self.webpackChunkhub=self.webpackChunkhub||[]).push([[6814],{66814:(e,n,o)=>{o.r(n),o.d(n,{Bloom:()=>i.mK,BrightnessContrast:()=>i.UN,ChromaticAberration:()=>i.E8,DotScreen:()=>i.m4,HueSaturation:()=>i.Tl,Noise:()=>i.fL,RisographPostProcessing:()=>m,Vignette:()=>i.fE});var t=o(65043),r=o(79183),i=o(23019),a=o(57047),s=o(29408),l=o(23521);class c extends l.o{constructor(e,n){super(),this.textureID=void 0!==n?n:"tDiffuse",e instanceof s.ShaderMaterial?(this.uniforms=e.uniforms,this.material=e):e&&(this.uniforms=s.UniformsUtils.clone(e.uniforms),this.material=new s.ShaderMaterial({name:void 0!==e.name?e.name:"unspecified",defines:Object.assign({},e.defines),uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})),this.fsQuad=new l.F(this.material)}render(e,n,o){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=o.texture),this.fsQuad.material=this.material,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(n),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),this.fsQuad.render(e))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}var u=o(70579);const f={uniforms:{tDiffuse:{value:null},time:{value:0},paperTexture:{value:.15},inkBleed:{value:.02},registration:{value:new s.Vector2(.001,.001)},colorSeparation:{value:.003},grainAmount:{value:.08}},vertexShader:"\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform float time;\n    uniform float paperTexture;\n    uniform float inkBleed;\n    uniform vec2 registration;\n    uniform float colorSeparation;\n    uniform float grainAmount;\n    \n    varying vec2 vUv;\n    \n    // Simple noise function\n    float random(vec2 st) {\n      return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n    }\n    \n    // Paper texture simulation\n    float paperNoise(vec2 uv) {\n      vec2 i = floor(uv * 300.0);\n      vec2 f = fract(uv * 300.0);\n      float a = random(i);\n      float b = random(i + vec2(1.0, 0.0));\n      float c = random(i + vec2(0.0, 1.0));\n      float d = random(i + vec2(1.0, 1.0));\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n    }\n    \n    // Halftone pattern\n    float halftone(vec2 uv, float size) {\n      vec2 p = mod(uv * size, 1.0);\n      float d = distance(p, vec2(0.5));\n      return smoothstep(0.3, 0.32, d);\n    }\n    \n    void main() {\n      // Misregistration effect\n      vec2 uvR = vUv + registration * sin(time * 0.5);\n      vec2 uvG = vUv;\n      vec2 uvB = vUv - registration * cos(time * 0.3);\n      \n      // Color separation\n      vec3 colorR = texture2D(tDiffuse, uvR + vec2(colorSeparation, 0.0)).rgb;\n      vec3 colorG = texture2D(tDiffuse, uvG).rgb;\n      vec3 colorB = texture2D(tDiffuse, uvB - vec2(colorSeparation, 0.0)).rgb;\n      \n      vec3 color = vec3(colorR.r, colorG.g, colorB.b);\n      \n      // Convert to limited color palette (risograph style)\n      vec3 risoColors[5];\n      risoColors[0] = vec3(1.0, 0.4, 0.6);  // Fluorescent Pink\n      risoColors[1] = vec3(0.0, 0.7, 0.9);  // Blue\n      risoColors[2] = vec3(1.0, 0.9, 0.0);  // Yellow\n      risoColors[3] = vec3(0.0, 0.6, 0.4);  // Green\n      risoColors[4] = vec3(1.0, 0.3, 0.0);  // Orange\n      \n      // Find closest riso color\n      float minDist = 999.0;\n      vec3 closestColor = risoColors[0];\n      for (int i = 0; i < 5; i++) {\n        float dist = distance(color, risoColors[i]);\n        if (dist < minDist) {\n          minDist = dist;\n          closestColor = risoColors[i];\n        }\n      }\n      \n      // Mix original with riso color\n      color = mix(color, closestColor, 0.3);\n      \n      // Add halftone effect\n      float lum = dot(color, vec3(0.299, 0.587, 0.114));\n      float pattern = halftone(vUv, 120.0);\n      color *= mix(0.8, 1.0, pattern * lum);\n      \n      // Ink bleeding simulation\n      vec2 bleedOffset = vec2(\n        sin(vUv.y * 200.0 + time) * inkBleed,\n        cos(vUv.x * 200.0 + time) * inkBleed\n      );\n      vec3 bleedColor = texture2D(tDiffuse, vUv + bleedOffset).rgb;\n      color = mix(color, bleedColor, 0.1);\n      \n      // Paper texture\n      float paper = paperNoise(vUv + time * 0.01);\n      color = mix(color, vec3(0.95, 0.93, 0.88), paper * paperTexture);\n      \n      // Film grain\n      float grain = random(vUv + time) * grainAmount;\n      color += vec3(grain) - grainAmount * 0.5;\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  "},m=e=>{let{intensity:n=.5,preset:o="medium"}=e;const{gl:s,size:l}=(0,r.D)(),m=(0,t.useRef)(),v={subtle:{chromaticAberration:2e-4,bloom:.3,noise:.02,vignette:.3,dotScreen:0,saturation:-.1,contrast:.1,colorA:"#FF69B4",colorB:"#34A85A",colorC:"#FFC107",halftoneScale:120,inkBleed:.02,paperTexture:.15,noiseAmount:.08},medium:{chromaticAberration:5e-4,bloom:.5,noise:.05,vignette:.5,dotScreen:.3,saturation:-.2,contrast:.2,colorA:"#FF69B4",colorB:"#34A85A",colorC:"#FFC107",halftoneScale:120,inkBleed:.02,paperTexture:.15,noiseAmount:.08},intense:{chromaticAberration:.001,bloom:.7,noise:.08,vignette:.7,dotScreen:.5,saturation:-.3,contrast:.3,colorA:"#FF69B4",colorB:"#34A85A",colorC:"#FFC107",halftoneScale:120,inkBleed:.02,paperTexture:.15,noiseAmount:.08}}[o],d=(0,t.useMemo)((()=>{const e=new c(f);return e.uniforms.resolution.value.set(l.width,l.height),e.uniforms.colorSeparation.value=.002*n,e.uniforms.grainAmount.value=.05*n,e.uniforms.paperTexture.value=v.paperTexture*n,e.uniforms.inkBleed.value=v.inkBleed*n,e}),[l,n,v]);return(0,r.F)((e=>{d&&(d.uniforms.time.value=e.clock.elapsedTime)})),(0,u.jsxs)(i.s0,{ref:m,children:[(0,u.jsx)(i.mK,{intensity:v.bloom,kernelSize:a.h_.LARGE,luminanceThreshold:.9,luminanceSmoothing:.025,mipmapBlur:!0}),(0,u.jsx)(i.E8,{offset:[v.chromaticAberration,.5*v.chromaticAberration],radialModulation:!0,modulationOffset:.15}),(0,u.jsx)(i.Tl,{hue:0,saturation:v.saturation,blendFunction:a.cf.NORMAL}),(0,u.jsx)(i.UN,{brightness:0,contrast:v.contrast,blendFunction:a.cf.NORMAL}),(0,u.jsx)(i.fL,{premultiply:!0,blendFunction:a.cf.ADD,opacity:v.noise}),(0,u.jsx)(i.fE,{darkness:v.vignette,offset:.3,blendFunction:a.cf.NORMAL}),(0,u.jsx)(i.bt,{mode:a.se.ACES_FILMIC,resolution:256,whitePoint:4,middleGrey:.6,minLuminance:.01,averageLuminance:1,adaptationRate:1,blendFunction:a.cf.NORMAL})]})}}}]);
//# sourceMappingURL=6814.a5aa761d.chunk.js.map