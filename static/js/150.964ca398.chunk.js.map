{"version":3,"file":"static/js/150.964ca398.chunk.js","mappings":"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","sources":["components/RPMAvatarGenerator.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport RPMAvatar from './RPMAvatar';\nimport RPMAvatarCreatorModal from './RPMAvatarCreatorModal';\n\ninterface RPMAvatarProfile {\n  id: string;\n  name: string;\n  avatarUrl: string;\n  gender: 'male' | 'female' | 'non-binary';\n  style: 'realistic' | 'stylized' | 'anime';\n  personality: string[];\n  emotions: { [key: string]: number };\n}\n\n// Pre-made RPM avatar URLs for different NPCs\nconst SAMPLE_RPM_AVATARS: RPMAvatarProfile[] = [\n  {\n    id: 'alex',\n    name: 'Alex',\n    avatarUrl: 'https://models.readyplayer.me/64bfa15f0e72c63d7c3f5a1e.glb', // Example URL\n    gender: 'male',\n    style: 'realistic',\n    personality: ['intellectual', 'thoughtful', 'adventurous'],\n    emotions: { concentration: 0.3, joy: 0.2 }\n  },\n  {\n    id: 'jamie',\n    name: 'Jamie',\n    avatarUrl: 'https://models.readyplayer.me/64bfa15f0e72c63d7c3f5a2f.glb', // Example URL\n    gender: 'female',\n    style: 'realistic',\n    personality: ['creative', 'passionate', 'witty'],\n    emotions: { joy: 0.4, excitement: 0.3 }\n  },\n  {\n    id: 'sam',\n    name: 'Sam',\n    avatarUrl: 'https://models.readyplayer.me/64bfa15f0e72c63d7c3f5a3g.glb', // Example URL\n    gender: 'female',\n    style: 'realistic',\n    personality: ['ambitious', 'practical', 'warm'],\n    emotions: { concentration: 0.2, joy: 0.3 }\n  },\n  {\n    id: 'river',\n    name: 'River',\n    avatarUrl: 'https://models.readyplayer.me/64bfa15f0e72c63d7c3f5a4h.glb', // Example URL\n    gender: 'male',\n    style: 'stylized',\n    personality: ['artistic', 'mysterious', 'sensitive'],\n    emotions: { contemplation: 0.4, mystery: 0.3 }\n  }\n];\n\ninterface RPMAvatarGeneratorProps {\n  onAvatarSelect?: (avatar: RPMAvatarProfile) => void;\n  selectedAvatarId?: string;\n  showGenerator?: boolean;\n}\n\nexport const RPMAvatarGenerator: React.FC<RPMAvatarGeneratorProps> = ({\n  onAvatarSelect,\n  selectedAvatarId,\n  showGenerator = true\n}) => {\n  const [selectedAvatar, setSelectedAvatar] = useState<RPMAvatarProfile | null>(null);\n  const [customAvatarUrl, setCustomAvatarUrl] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generatorMode, setGeneratorMode] = useState<'preset' | 'custom' | 'generate' | 'creator'>('preset');\n  const [showRPMCreator, setShowRPMCreator] = useState(false);\n\n  useEffect(() => {\n    if (selectedAvatarId) {\n      const avatar = SAMPLE_RPM_AVATARS.find(a => a.id === selectedAvatarId);\n      if (avatar) {\n        setSelectedAvatar(avatar);\n      }\n    }\n  }, [selectedAvatarId]);\n\n  const handleAvatarSelect = (avatar: RPMAvatarProfile) => {\n    setSelectedAvatar(avatar);\n    onAvatarSelect?.(avatar);\n  };\n\n  const generateNewAvatar = async () => {\n    setIsGenerating(true);\n    \n    // In a real implementation, this would call the RPM API\n    // For now, we'll simulate the process\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Generate random avatar URL (in real implementation, this comes from RPM API)\n      const newAvatarUrl = `https://models.readyplayer.me/generated-${Date.now()}.glb`;\n      \n      const newAvatar: RPMAvatarProfile = {\n        id: `generated-${Date.now()}`,\n        name: 'Generated Avatar',\n        avatarUrl: newAvatarUrl,\n        gender: 'non-binary',\n        style: 'realistic',\n        personality: ['unique', 'generated'],\n        emotions: { neutral: 0.5 }\n      };\n      \n      handleAvatarSelect(newAvatar);\n    } catch (error) {\n      console.error('Avatar generation failed:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleCustomUrl = () => {\n    if (customAvatarUrl.trim()) {\n      const customAvatar: RPMAvatarProfile = {\n        id: `custom-${Date.now()}`,\n        name: 'Custom Avatar',\n        avatarUrl: customAvatarUrl.trim(),\n        gender: 'non-binary',\n        style: 'realistic',\n        personality: ['custom'],\n        emotions: { neutral: 0.5 }\n      };\n      \n      handleAvatarSelect(customAvatar);\n      setCustomAvatarUrl('');\n    }\n  };\n\n  const handleRPMAvatarCreated = (avatarUrl: string) => {\n    const newAvatar: RPMAvatarProfile = {\n      id: `rpm-${Date.now()}`,\n      name: 'My Avatar',\n      avatarUrl: avatarUrl,\n      gender: 'non-binary',\n      style: 'realistic',\n      personality: ['custom', 'unique'],\n      emotions: { neutral: 0.5 }\n    };\n    \n    handleAvatarSelect(newAvatar);\n    setShowRPMCreator(false);\n  };\n\n  if (!showGenerator) {\n    return selectedAvatar ? (\n      <RPMAvatar\n        avatarUrl={selectedAvatar.avatarUrl}\n        emotions={selectedAvatar.emotions}\n        className=\"selected-avatar\"\n      />\n    ) : null;\n  }\n\n  return (\n    <div className=\"rpm-avatar-generator\">\n      <div className=\"generator-header\">\n        <h3>🎭 Choose Your Avatar</h3>\n        <div className=\"mode-selector\">\n          <button \n            className={generatorMode === 'preset' ? 'active' : ''}\n            onClick={() => setGeneratorMode('preset')}\n          >\n            📋 Presets\n          </button>\n          <button \n            className={generatorMode === 'generate' ? 'active' : ''}\n            onClick={() => setGeneratorMode('generate')}\n          >\n            🎲 Generate\n          </button>\n          <button \n            className={generatorMode === 'custom' ? 'active' : ''}\n            onClick={() => setGeneratorMode('custom')}\n          >\n            🔗 Custom URL\n          </button>\n          <button \n            className={generatorMode === 'creator' ? 'active' : ''}\n            onClick={() => {\n              setGeneratorMode('creator');\n              setShowRPMCreator(true);\n            }}\n          >\n            🎨 Create\n          </button>\n        </div>\n      </div>\n\n      {generatorMode === 'preset' && (\n        <div className=\"preset-avatars\">\n          <div className=\"avatar-grid\">\n            {SAMPLE_RPM_AVATARS.map((avatar) => (\n              <div \n                key={avatar.id}\n                className={`avatar-card ${selectedAvatar?.id === avatar.id ? 'selected' : ''}`}\n                onClick={() => handleAvatarSelect(avatar)}\n              >\n                <div className=\"avatar-preview\">\n                  <RPMAvatar\n                    avatarUrl={avatar.avatarUrl}\n                    emotions={avatar.emotions}\n                    isAnimating={false}\n                    enableControls={false}\n                  />\n                </div>\n                <div className=\"avatar-info\">\n                  <h4>{avatar.name}</h4>\n                  <div className=\"avatar-tags\">\n                    <span className={`gender-tag ${avatar.gender}`}>\n                      {avatar.gender}\n                    </span>\n                    <span className={`style-tag ${avatar.style}`}>\n                      {avatar.style}\n                    </span>\n                  </div>\n                  <div className=\"personality-tags\">\n                    {avatar.personality.slice(0, 2).map((trait, index) => (\n                      <span key={index} className=\"personality-tag\">\n                        {trait}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {generatorMode === 'generate' && (\n        <div className=\"avatar-generator\">\n          <div className=\"generator-options\">\n            <h4>🎨 Generate New Avatar</h4>\n            <p>Create a unique avatar using Ready Player Me's generator</p>\n            \n            <div className=\"generation-controls\">\n              <div className=\"option-group\">\n                <label>Gender:</label>\n                <select>\n                  <option value=\"random\">Random</option>\n                  <option value=\"male\">Male</option>\n                  <option value=\"female\">Female</option>\n                  <option value=\"non-binary\">Non-binary</option>\n                </select>\n              </div>\n              \n              <div className=\"option-group\">\n                <label>Style:</label>\n                <select>\n                  <option value=\"realistic\">Realistic</option>\n                  <option value=\"stylized\">Stylized</option>\n                  <option value=\"anime\">Anime</option>\n                </select>\n              </div>\n            </div>\n            \n            <button \n              className=\"generate-btn\"\n              onClick={generateNewAvatar}\n              disabled={isGenerating}\n            >\n              {isGenerating ? '🎲 Generating...' : '🎲 Generate Avatar'}\n            </button>\n            \n            <div className=\"rpm-integration-note\">\n              <p>💡 <strong>Pro Tip:</strong> Visit <a href=\"https://readyplayer.me\" target=\"_blank\" rel=\"noopener noreferrer\">ReadyPlayer.Me</a> to create custom avatars</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {generatorMode === 'custom' && (\n        <div className=\"custom-avatar\">\n          <h4>🔗 Custom Avatar URL</h4>\n          <p>Enter a Ready Player Me avatar URL (.glb file)</p>\n          \n          <div className=\"url-input-group\">\n            <input\n              type=\"url\"\n              placeholder=\"https://models.readyplayer.me/your-avatar.glb\"\n              value={customAvatarUrl}\n              onChange={(e) => setCustomAvatarUrl(e.target.value)}\n            />\n            <button onClick={handleCustomUrl} disabled={!customAvatarUrl.trim()}>\n              Load Avatar\n            </button>\n          </div>\n          \n          <div className=\"url-help\">\n            <h5>How to get your avatar URL:</h5>\n            <ol>\n              <li>Visit <a href=\"https://readyplayer.me\" target=\"_blank\" rel=\"noopener noreferrer\">ReadyPlayer.Me</a></li>\n              <li>Create or customize your avatar</li>\n              <li>Copy the .glb model URL</li>\n              <li>Paste it above</li>\n            </ol>\n          </div>\n        </div>\n      )}\n\n      {generatorMode === 'creator' && (\n        <RPMAvatarCreatorModal\n          isOpen={showRPMCreator}\n          onClose={() => setShowRPMCreator(false)}\n          onAvatarCreated={handleRPMAvatarCreated}\n        />\n      )}\n\n      {selectedAvatar && (\n        <div className=\"selected-avatar-preview\">\n          <h4>Selected Avatar: {selectedAvatar.name}</h4>\n          <div className=\"preview-container\">\n            <RPMAvatar\n              avatarUrl={selectedAvatar.avatarUrl}\n              emotions={selectedAvatar.emotions}\n              enableControls={true}\n            />\n          </div>\n        </div>\n      )}\n\n      <style>{`\n        .rpm-avatar-generator {\n          background: white;\n          border-radius: 12px;\n          padding: 24px;\n          box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n        }\n\n        .generator-header {\n          margin-bottom: 24px;\n        }\n\n        .generator-header h3 {\n          margin: 0 0 16px 0;\n          color: #333;\n        }\n\n        .mode-selector {\n          display: flex;\n          gap: 8px;\n          background: #f5f5f5;\n          padding: 4px;\n          border-radius: 8px;\n        }\n\n        .mode-selector button {\n          flex: 1;\n          padding: 8px 16px;\n          border: none;\n          background: transparent;\n          border-radius: 6px;\n          cursor: pointer;\n          transition: all 0.2s ease;\n          font-size: 14px;\n        }\n\n        .mode-selector button.active {\n          background: white;\n          box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n          color: #667eea;\n          font-weight: 600;\n        }\n\n        .avatar-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n          gap: 16px;\n        }\n\n        .avatar-card {\n          border: 2px solid #e9ecef;\n          border-radius: 12px;\n          padding: 16px;\n          cursor: pointer;\n          transition: all 0.2s ease;\n          background: white;\n        }\n\n        .avatar-card:hover {\n          border-color: #667eea;\n          transform: translateY(-2px);\n          box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);\n        }\n\n        .avatar-card.selected {\n          border-color: #667eea;\n          background: #f8f9ff;\n        }\n\n        .avatar-preview {\n          height: 200px;\n          margin-bottom: 12px;\n          border-radius: 8px;\n          overflow: hidden;\n          background: #f8f9fa;\n        }\n\n        .avatar-info h4 {\n          margin: 0 0 8px 0;\n          color: #333;\n        }\n\n        .avatar-tags {\n          display: flex;\n          gap: 8px;\n          margin-bottom: 8px;\n        }\n\n        .gender-tag, .style-tag {\n          padding: 4px 8px;\n          border-radius: 12px;\n          font-size: 12px;\n          font-weight: 600;\n          text-transform: capitalize;\n        }\n\n        .gender-tag.male { background: #e3f2fd; color: #1976d2; }\n        .gender-tag.female { background: #fce4ec; color: #c2185b; }\n        .gender-tag.non-binary { background: #f3e5f5; color: #7b1fa2; }\n\n        .style-tag.realistic { background: #e8f5e8; color: #2e7d32; }\n        .style-tag.stylized { background: #fff3e0; color: #f57c00; }\n        .style-tag.anime { background: #e1f5fe; color: #0277bd; }\n\n        .personality-tags {\n          display: flex;\n          gap: 4px;\n          flex-wrap: wrap;\n        }\n\n        .personality-tag {\n          background: #f5f5f5;\n          color: #666;\n          padding: 2px 6px;\n          border-radius: 8px;\n          font-size: 11px;\n        }\n\n        .generator-options {\n          text-align: center;\n          padding: 24px;\n        }\n\n        .generation-controls {\n          display: flex;\n          gap: 16px;\n          justify-content: center;\n          margin: 20px 0;\n        }\n\n        .option-group {\n          display: flex;\n          flex-direction: column;\n          gap: 4px;\n        }\n\n        .option-group label {\n          font-size: 14px;\n          font-weight: 600;\n          color: #333;\n        }\n\n        .option-group select {\n          padding: 8px 12px;\n          border: 1px solid #ddd;\n          border-radius: 6px;\n          font-size: 14px;\n        }\n\n        .generate-btn {\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          color: white;\n          border: none;\n          padding: 12px 24px;\n          border-radius: 8px;\n          font-size: 16px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: transform 0.2s ease;\n        }\n\n        .generate-btn:hover:not(:disabled) {\n          transform: translateY(-2px);\n        }\n\n        .generate-btn:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        .rpm-integration-note {\n          margin-top: 20px;\n          padding: 16px;\n          background: #f8f9ff;\n          border-radius: 8px;\n          border-left: 4px solid #667eea;\n        }\n\n        .rpm-integration-note a {\n          color: #667eea;\n          text-decoration: none;\n          font-weight: 600;\n        }\n\n        .url-input-group {\n          display: flex;\n          gap: 8px;\n          margin: 16px 0;\n        }\n\n        .url-input-group input {\n          flex: 1;\n          padding: 12px;\n          border: 1px solid #ddd;\n          border-radius: 6px;\n          font-size: 14px;\n        }\n\n        .url-input-group button {\n          background: #667eea;\n          color: white;\n          border: none;\n          padding: 12px 20px;\n          border-radius: 6px;\n          cursor: pointer;\n          font-weight: 600;\n        }\n\n        .url-help {\n          background: #f8f9fa;\n          padding: 16px;\n          border-radius: 8px;\n          text-align: left;\n        }\n\n        .url-help h5 {\n          margin: 0 0 8px 0;\n          color: #333;\n        }\n\n        .url-help ol {\n          margin: 0;\n          padding-left: 20px;\n        }\n\n        .url-help li {\n          margin-bottom: 4px;\n        }\n\n        .selected-avatar-preview {\n          margin-top: 24px;\n          padding-top: 24px;\n          border-top: 1px solid #e9ecef;\n        }\n\n        .selected-avatar-preview h4 {\n          margin: 0 0 16px 0;\n          color: #333;\n        }\n\n        .preview-container {\n          height: 300px;\n          border-radius: 12px;\n          overflow: hidden;\n          background: #f8f9fa;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default RPMAvatarGenerator;\n"],"names":["SAMPLE_RPM_AVATARS","id","name","avatarUrl","gender","style","personality","emotions","concentration","joy","excitement","contemplation","mystery","RPMAvatarGenerator","_ref","onAvatarSelect","selectedAvatarId","showGenerator","selectedAvatar","setSelectedAvatar","useState","customAvatarUrl","setCustomAvatarUrl","isGenerating","setIsGenerating","generatorMode","setGeneratorMode","showRPMCreator","setShowRPMCreator","useEffect","avatar","find","a","handleAvatarSelect","_jsxs","className","children","_jsx","onClick","map","concat","RPMAvatar","isAnimating","enableControls","slice","trait","index","value","async","Promise","resolve","setTimeout","newAvatarUrl","Date","now","newAvatar","neutral","error","console","disabled","href","target","rel","type","placeholder","onChange","e","handleCustomUrl","trim","customAvatar","RPMAvatarCreatorModal","isOpen","onClose","onAvatarCreated"],"sourceRoot":""}