{"version":3,"file":"static/js/8480.4906890d.chunk.js","mappings":"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","sources":["components/CoachSession.june9.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, Suspense, FC } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Canvas } from '@react-three/fiber';\nimport { PerspectiveCamera } from '@react-three/drei';\nimport { PresenceAvatar } from './PresenceAvatar';\nimport { UserAvatarPiP } from './UserAvatarPiP';\nimport humeVoiceService, { EmotionalState } from '../services/humeVoiceService';\nimport { COACHES } from '../config/coachConfig';\nimport './CoachSession.css';\n\nconst CoachSession: React.FC = () => {\n  const { coachId } = useParams<{ coachId: string }>();\n  const navigate = useNavigate();\n  \n  // State management\n  const [isConnected, setIsConnected] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [currentEmotion, setCurrentEmotion] = useState<EmotionalState>({});\n  const [audioData, setAudioData] = useState<Uint8Array>(new Uint8Array());\n  const [coachMessage, setCoachMessage] = useState('');\n  const [userTranscript, setUserTranscript] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [faceTrackingData, setFaceTrackingData] = useState<any>({ facialExpressions: { jawOpen: 0 } });\n  const [messageInput, setMessageInput] = useState('');\n  \n  // Refs\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n  const currentAudioRef = useRef<HTMLAudioElement | null>(null);\n\n  const coach = COACHES[coachId as keyof typeof COACHES];\n  \n  useEffect(() => {\n    if (!coach) {\n      navigate('/training-hub');\n      return;\n    }\n\n    // Initialize audio context\n    const AudioContext = window.AudioContext || (window as any).webkitAudioContext;\n    if (AudioContext) {\n      audioContextRef.current = new AudioContext();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 256;\n      analyserRef.current.smoothingTimeConstant = 0.8;\n    }\n\n    // Set up Hume callbacks\n    humeVoiceService.setOnAudioCallback((audioBlob: Blob) => {\n      playAudioWithAnalysis(audioBlob);\n    });\n\n    humeVoiceService.setOnEmotionCallback((emotions: any[]) => {\n      setCurrentEmotion(emotions as unknown as EmotionalState);\n    });\n\n    humeVoiceService.setOnMessageCallback((message: any) => {\n      // Extract assistant message from Hume message format\n      if (message.type === 'assistant_message' && message.message?.content) {\n        setCoachMessage(message.message.content);\n      }\n    });\n\n    humeVoiceService.setOnUserMessageCallback((transcript: string) => {\n      setUserTranscript(transcript);\n    });\n\n    humeVoiceService.setOnUserInterruptionCallback(() => {\n      setIsSpeaking(false);\n      setIsListening(true);\n    });\n\n    humeVoiceService.setOnErrorCallback((error: Error) => {\n      console.error('[CoachSession] Hume error:', error);\n      setError(error.message);\n      setIsConnected(false);\n    });\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (currentAudioRef.current) {\n        currentAudioRef.current.pause();\n        currentAudioRef.current = null;\n      }\n      if (audioContextRef.current?.state !== 'closed') {\n        audioContextRef.current?.close();\n      }\n    };\n  }, [coach, navigate]);\n\n  useEffect(() => {\n    return () => {\n      console.log('[CoachSession] Cleaning up on unmount');\n      if (isConnected) {\n        humeVoiceService.disconnect();\n      }\n      // Clean up audio analysis\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n\n  const handleConnect = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Use coach-specific config ID if available, otherwise use default\n      const configId = coach.humeConfigId || process.env.REACT_APP_HUME_CONFIG_ID;\n      \n      console.log('[CoachSession] Connecting with:', {\n        coachName: coach.name,\n        configId: configId,\n        humeConfigIdFromCoach: coach.humeConfigId,\n        envGrace: process.env.REACT_APP_HUME_CONFIG_ID_GRACE,\n        envPosie: process.env.REACT_APP_HUME_CONFIG_ID_POSIE,\n        envRizzo: process.env.REACT_APP_HUME_CONFIG_ID_RIZZO\n      });\n      \n      await humeVoiceService.connect(configId);\n      \n      setIsConnected(true);\n      console.log('[CoachSession] Connected to Hume voice service with config:', configId);\n      \n      // The Hume config should automatically start with the greeting\n      // If you need to trigger it, you can send an empty message\n      // setTimeout(() => {\n      //   humeVoiceService.sendMessage('');\n      // }, 1000);\n      \n    } catch (error) {\n      console.error('[CoachSession] Connection error:', error);\n      setError('Failed to connect to coach. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    try {\n      await humeVoiceService.disconnect();\n      setIsConnected(false);\n      setIsSpeaking(false);\n      setIsListening(false);\n    } catch (error) {\n      console.error('[CoachSession] Disconnect error:', error);\n    }\n  };\n\n  const playAudioWithAnalysis = async (audioBlob: Blob) => {\n    try {\n      // Stop any currently playing audio\n      if (currentAudioRef.current) {\n        console.log('[CoachSession] Stopping previous audio');\n        currentAudioRef.current.pause();\n        currentAudioRef.current = null;\n      }\n      \n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      currentAudioRef.current = audio;\n      \n      console.log('[CoachSession] Playing new audio blob, size:', audioBlob.size);\n      \n      audio.addEventListener('canplay', async () => {\n        setIsSpeaking(true);\n        await connectAudioToAnalyser(audio);\n      });\n      \n      audio.addEventListener('ended', () => {\n        console.log('[CoachSession] Audio ended');\n        setIsSpeaking(false);\n        setIsListening(true);\n        URL.revokeObjectURL(audioUrl);\n        if (currentAudioRef.current === audio) {\n          currentAudioRef.current = null;\n        }\n      });\n      \n      await audio.play();\n    } catch (error) {\n      console.error('[CoachSession] Error playing audio:', error);\n      setIsSpeaking(false);\n    }\n  };\n\n  const connectAudioToAnalyser = async (audio: HTMLAudioElement) => {\n    if (!audioContextRef.current || !analyserRef.current) return;\n    \n    // Resume audio context if suspended\n    if (audioContextRef.current.state === 'suspended') {\n      console.log('[CoachSession] Resuming audio context...');\n      await audioContextRef.current.resume();\n    }\n    \n    const source = audioContextRef.current.createMediaElementSource(audio);\n    source.connect(analyserRef.current);\n    analyserRef.current.connect(audioContextRef.current.destination);\n    \n    console.log('[CoachSession] Audio connected:', {\n      contextState: audioContextRef.current.state,\n      analyserConnected: !!analyserRef.current,\n      sourceConnected: !!source\n    });\n    \n    const updateAudioData = () => {\n      if (!analyserRef.current) return;\n      \n      const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n      analyserRef.current.getByteFrequencyData(dataArray);\n      \n      // Debug: Check if we're getting audio data\n      const avgVolume = dataArray.reduce((a, b) => a + b, 0) / dataArray.length;\n      if (avgVolume > 0) {\n        console.log('[CoachSession] Audio data:', { avgVolume, isSpeaking, dataLength: dataArray.length });\n      }\n      \n      setAudioData(dataArray);\n      \n      // Convert audio volume to mouth animation\n      const normalizedVolume = Math.min(avgVolume / 128, 1); // Normalize to 0-1\n      const jawOpen = normalizedVolume * 0.3; // Scale to reasonable jaw movement\n      setFaceTrackingData({\n        facialExpressions: {\n          jawOpen: jawOpen,\n          mouthOpen: jawOpen * 0.8\n        }\n      });\n      \n      if (isSpeaking) {\n        animationFrameRef.current = requestAnimationFrame(updateAudioData);\n      }\n    };\n    \n    updateAudioData();\n  };\n\n  const sendMessage = async (message: string) => {\n    if (!message.trim() || !isConnected) return;\n    \n    try {\n      setUserTranscript(message);\n      humeVoiceService.sendMessage(message);\n    } catch (error) {\n      console.error('[CoachSession] Error sending message:', error);\n    }\n  };\n\n  if (!coach) {\n    return null;\n  }\n\n  return (\n    <div className=\"coach-session\">\n      <div className=\"coach-header\">\n        <button className=\"back-button\" onClick={() => navigate('/training-hub')}>\n          ← Back to Training Hub\n        </button>\n        <h1>Session with {coach.name}</h1>\n        <div className=\"connection-status\">\n          {isConnected ? (\n            <span className=\"status-connected\">● Connected</span>\n          ) : (\n            <span className=\"status-disconnected\">● Disconnected</span>\n          )}\n        </div>\n      </div>\n\n      <div className=\"coach-content\">\n        <div className=\"coach-avatar-scene\" style={{\n          backgroundImage: coach.venue ? `url(/venues/${coach.venue})` : undefined,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n          position: 'relative',\n          zIndex: 1\n        }}>\n          <Canvas shadows camera={{ position: [0, 0, 2.5], fov: 35 }}>\n            <ambientLight intensity={0.8} />\n            <directionalLight position={[0, 1, 2]} intensity={1.2} />\n            \n            <Suspense fallback={null}>\n              <PresenceAvatar\n                avatarUrl={coach.avatar}\n                animationName={isSpeaking ? 'talking' : 'idle'}\n                position={[0, -1.4, 0]}\n                scale={1.0}\n                audioData={isSpeaking ? audioData : undefined}\n              />\n            </Suspense>\n          </Canvas>\n        </div>\n\n        <div className=\"coach-interaction\">\n          {!isConnected ? (\n            <div className=\"connection-panel\">\n              <h2>Ready to start your session?</h2>\n              <p>{coach.description}</p>\n              <button \n                className=\"connect-button\"\n                onClick={handleConnect}\n                disabled={loading}\n              >\n                {loading ? 'Connecting...' : 'Start Session'}\n              </button>\n              {error && <div className=\"error-message\">{error}</div>}\n            </div>\n          ) : (\n            <div className=\"conversation-panel\">\n              <div className=\"coach-message\">\n                <h3>{coach.name} says:</h3>\n                <p>{coachMessage || \"...\"}</p>\n              </div>\n              \n              <div className=\"emotion-display\">\n                <h4>Emotional Analysis</h4>\n                <div className=\"emotion-bars\">\n                  {Object.entries(currentEmotion).map(([emotion, value]) => (\n                    <div key={emotion} className=\"emotion-bar\">\n                      <span className=\"emotion-label\">{emotion}</span>\n                      <div className=\"emotion-progress\">\n                        <div \n                          className=\"emotion-fill\"\n                          style={{ width: `${(value || 0) * 100}%` }}\n                        />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"user-input\">\n                <h4>Your response:</h4>\n                <p>{userTranscript || (isListening ? \"Listening...\" : \"...\")}</p>\n              </div>\n\n              <div className=\"manual-input\" style={{ marginTop: '20px' }}>\n                <input\n                  type=\"text\"\n                  value={messageInput}\n                  onChange={(e) => setMessageInput(e.target.value)}\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      sendMessage(messageInput);\n                      setMessageInput('');\n                    }\n                  }}\n                  placeholder=\"Type a message and press Enter\"\n                  style={{\n                    width: '100%',\n                    padding: '10px',\n                    borderRadius: '5px',\n                    border: '1px solid #ccc',\n                    marginBottom: '10px'\n                  }}\n                />\n                <button \n                  onClick={() => {\n                    sendMessage(messageInput);\n                    setMessageInput('');\n                  }}\n                  style={{\n                    padding: '10px 20px',\n                    backgroundColor: '#4CAF50',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '5px',\n                    cursor: 'pointer'\n                  }}\n                >\n                  Send Message\n                </button>\n              </div>\n\n              <div className=\"session-controls\">\n                <button \n                  className=\"end-session-button\"\n                  onClick={handleDisconnect}\n                >\n                  End Session\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* User Avatar PiP */}\n      {isConnected && (\n        <UserAvatarPiP \n          avatarUrl=\"/avatars/user_avatar.glb\"\n          position=\"top-right\"\n          size=\"medium\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CoachSession;\n"],"names":["CoachSession","coachId","useParams","navigate","useNavigate","isConnected","setIsConnected","useState","isSpeaking","setIsSpeaking","isListening","setIsListening","currentEmotion","setCurrentEmotion","audioData","setAudioData","Uint8Array","coachMessage","setCoachMessage","userTranscript","setUserTranscript","loading","setLoading","error","setError","faceTrackingData","setFaceTrackingData","facialExpressions","jawOpen","messageInput","setMessageInput","audioContextRef","useRef","analyserRef","animationFrameRef","currentAudioRef","coach","COACHES","useEffect","AudioContext","window","webkitAudioContext","current","createAnalyser","fftSize","smoothingTimeConstant","humeVoiceService","setOnAudioCallback","audioBlob","playAudioWithAnalysis","setOnEmotionCallback","emotions","setOnMessageCallback","message","_message$message","type","content","setOnUserMessageCallback","transcript","setOnUserInterruptionCallback","setOnErrorCallback","console","_audioContextRef$curr","_audioContextRef$curr2","cancelAnimationFrame","pause","state","close","log","disconnect","async","audioUrl","URL","createObjectURL","audio","Audio","size","addEventListener","connectAudioToAnalyser","revokeObjectURL","play","resume","source","createMediaElementSource","connect","destination","contextState","analyserConnected","sourceConnected","updateAudioData","dataArray","frequencyBinCount","getByteFrequencyData","avgVolume","reduce","a","b","length","dataLength","Math","min","mouthOpen","requestAnimationFrame","sendMessage","trim","_jsxs","className","children","_jsx","onClick","name","style","backgroundImage","venue","concat","undefined","backgroundSize","backgroundPosition","backgroundRepeat","position","zIndex","Canvas","shadows","camera","fov","intensity","Suspense","fallback","PresenceAvatar","avatarUrl","avatar","animationName","scale","Object","entries","map","_ref","emotion","value","width","marginTop","onChange","e","target","onKeyPress","key","placeholder","padding","borderRadius","border","marginBottom","backgroundColor","color","cursor","description","configId","humeConfigId","process","coachName","humeConfigIdFromCoach","envGrace","envPosie","envRizzo","disabled","UserAvatarPiP"],"sourceRoot":""}