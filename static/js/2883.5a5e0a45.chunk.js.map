{"version":3,"file":"static/js/2883.5a5e0a45.chunk.js","mappings":"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","sources":["webpack://hub/./src/components/DaterAnalyticsDashboard.css?6790","components/DaterAnalyticsDashboard.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, { useState, useEffect } from 'react';\nimport { \n  DateSessionAnalytics, \n  PerformanceMetrics, \n  daterPerformanceAnalytics \n} from '../services/DaterPerformanceAnalytics';\nimport './DaterAnalyticsDashboard.css';\n\ninterface DaterAnalyticsDashboardProps {\n  showForAudience?: boolean;\n  participantNames?: string[];\n}\n\nconst DaterAnalyticsDashboard: React.FC<DaterAnalyticsDashboardProps> = ({\n  showForAudience = false,\n  participantNames = ['Participant 1', 'Participant 2']\n}) => {\n  const [analytics, setAnalytics] = useState<DateSessionAnalytics | null>(null);\n  const [isSessionActive, setIsSessionActive] = useState(false);\n\n  useEffect(() => {\n    const handleUpdate = (newAnalytics: DateSessionAnalytics) => {\n      setAnalytics(newAnalytics);\n    };\n\n    daterPerformanceAnalytics.onUpdate(handleUpdate);\n    \n    return () => {\n      // Cleanup callback if needed\n    };\n  }, []);\n\n  const startSession = () => {\n    daterPerformanceAnalytics.startSession(participantNames);\n    setIsSessionActive(true);\n  };\n\n  const endSession = () => {\n    const finalAnalytics = daterPerformanceAnalytics.endSession();\n    setIsSessionActive(false);\n    if (finalAnalytics) {\n      setAnalytics(finalAnalytics);\n    }\n  };\n\n  const formatDuration = (ms: number): string => {\n    const minutes = Math.floor(ms / 60000);\n    const seconds = Math.floor((ms % 60000) / 1000);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const getMetricColor = (value: number): string => {\n    if (value >= 80) return '#10B981'; // Green\n    if (value >= 60) return '#F59E0B'; // Yellow\n    if (value >= 40) return '#EF4444'; // Red\n    return '#6B7280'; // Gray\n  };\n\n  const getConnectionLevel = (score: number): string => {\n    if (score >= 85) return 'Explosive Chemistry! üî•';\n    if (score >= 70) return 'Strong Connection üí´';\n    if (score >= 55) return 'Good Vibes ‚ú®';\n    if (score >= 40) return 'Warming Up üå±';\n    return 'Getting Started üëã';\n  };\n\n  if (!analytics) {\n    return (\n      <div className=\"analytics-dashboard\">\n        <div className=\"session-controls\">\n          <button \n            onClick={startSession}\n            className=\"start-session-btn\"\n            disabled={isSessionActive}\n          >\n            {isSessionActive ? 'Session Active...' : 'Start Date Analytics'}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const metrics = analytics.currentMetrics;\n\n  return (\n    <div className={`analytics-dashboard ${showForAudience ? 'audience-view' : ''}`}>\n      {/* Header */}\n      <div className=\"dashboard-header\">\n        <h2 className=\"dashboard-title\">\n          {showForAudience ? 'üíï XRCupid Live Date Analytics' : 'Performance Analytics'}\n        </h2>\n        <div className=\"session-info\">\n          <span className=\"duration\">‚è±Ô∏è {formatDuration(analytics.duration)}</span>\n          <span className=\"compatibility\">\n            üéØ {analytics.compatibilityScore}% {getConnectionLevel(analytics.compatibilityScore)}\n          </span>\n        </div>\n      </div>\n\n      {/* Main Metrics Grid */}\n      <div className=\"metrics-grid\">\n        {/* Engagement Section */}\n        <div className=\"metric-section\">\n          <h3>üí´ Engagement</h3>\n          <div className=\"metric-cards\">\n            <MetricCard \n              title=\"Eye Contact\" \n              value={metrics.eyeContact} \n              icon=\"üëÅÔ∏è\"\n              description=\"Direct gaze and attention\"\n            />\n            <MetricCard \n              title=\"Facial Expression\" \n              value={metrics.facialEngagement} \n              icon=\"üòä\"\n              description=\"Smiles and reactions\"\n            />\n            <MetricCard \n              title=\"Body Language\" \n              value={metrics.bodyLanguage} \n              icon=\"ü§ù\"\n              description=\"Open and welcoming posture\"\n            />\n          </div>\n        </div>\n\n        {/* Emotional Section */}\n        <div className=\"metric-section\">\n          <h3>‚ù§Ô∏è Emotional Connection</h3>\n          <div className=\"metric-cards\">\n            <MetricCard \n              title=\"Emotional Range\" \n              value={metrics.emotionalRange} \n              icon=\"üé≠\"\n              description=\"Variety of emotions expressed\"\n            />\n            <MetricCard \n              title=\"Positivity\" \n              value={metrics.positivity} \n              icon=\"‚òÄÔ∏è\"\n              description=\"Positive vs negative energy\"\n            />\n            <MetricCard \n              title=\"Authenticity\" \n              value={metrics.authenticity} \n              icon=\"üíé\"\n              description=\"Natural and genuine expressions\"\n            />\n          </div>\n        </div>\n\n        {/* Chemistry Section */}\n        <div className=\"metric-section\">\n          <h3>‚ö° Chemistry Indicators</h3>\n          <div className=\"metric-cards\">\n            <MetricCard \n              title=\"Voice Energy\" \n              value={metrics.voiceEnergy} \n              icon=\"üé§\"\n              description=\"Enthusiasm and vocal variety\"\n            />\n            <MetricCard \n              title=\"Attentiveness\" \n              value={metrics.attentiveness} \n              icon=\"üéØ\"\n              description=\"Focus on partner\"\n            />\n            <MetricCard \n              title=\"Rapport\" \n              value={metrics.rapport} \n              icon=\"üåä\"\n              description=\"Overall connection flow\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Live Trends */}\n      {analytics.trends.length > 0 && (\n        <div className=\"trends-section\">\n          <h3>üìà Live Performance Trends</h3>\n          <div className=\"trend-chart\">\n            <TrendChart trends={analytics.trends} />\n          </div>\n        </div>\n      )}\n\n      {/* Peak Moments */}\n      {analytics.peakMoments.length > 0 && (\n        <div className=\"peak-moments\">\n          <h3>üåü Peak Moments</h3>\n          <div className=\"moments-list\">\n            {analytics.peakMoments.slice(-3).map((moment, index) => (\n              <div key={index} className=\"moment-card\">\n                <span className=\"moment-time\">\n                  {formatDuration(moment.timestamp - analytics.startTime)}\n                </span>\n                <span className=\"moment-metric\">{moment.metric}</span>\n                <span className=\"moment-value\">{Math.round(moment.value)}%</span>\n                <span className=\"moment-context\">{moment.context}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Improvement Suggestions */}\n      {analytics.improvementSuggestions.length > 0 && !showForAudience && (\n        <div className=\"suggestions\">\n          <h3>üí° Live Coaching Tips</h3>\n          <ul className=\"suggestions-list\">\n            {analytics.improvementSuggestions.map((suggestion, index) => (\n              <li key={index} className=\"suggestion-item\">{suggestion}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Session Controls */}\n      <div className=\"session-controls\">\n        {isSessionActive ? (\n          <button onClick={endSession} className=\"end-session-btn\">\n            End Session & Generate Report\n          </button>\n        ) : (\n          <button onClick={startSession} className=\"start-session-btn\">\n            Start New Session\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface MetricCardProps {\n  title: string;\n  value: number;\n  icon: string;\n  description: string;\n}\n\nconst MetricCard: React.FC<MetricCardProps> = ({ title, value, icon, description }) => {\n  const getMetricColor = (val: number): string => {\n    if (val >= 80) return '#10B981';\n    if (val >= 60) return '#F59E0B';\n    if (val >= 40) return '#EF4444';\n    return '#6B7280';\n  };\n\n  return (\n    <div className=\"metric-card\">\n      <div className=\"metric-header\">\n        <span className=\"metric-icon\">{icon}</span>\n        <span className=\"metric-title\">{title}</span>\n      </div>\n      <div className=\"metric-value\" style={{ color: getMetricColor(value) }}>\n        {Math.round(value)}%\n      </div>\n      <div className=\"metric-bar\">\n        <div \n          className=\"metric-fill\" \n          style={{ \n            width: `${value}%`,\n            backgroundColor: getMetricColor(value)\n          }}\n        />\n      </div>\n      <div className=\"metric-description\">{description}</div>\n    </div>\n  );\n};\n\ninterface TrendChartProps {\n  trends: Array<{ timestamp: number; metrics: PerformanceMetrics; contextEvent?: string }>;\n}\n\nconst TrendChart: React.FC<TrendChartProps> = ({ trends }) => {\n  const latestTrends = trends.slice(-20); // Show last 20 data points\n  \n  const chartWidth = 400;\n  const chartHeight = 200;\n  \n  const maxValue = 100;\n  const minValue = 0;\n  \n  const getChartPath = (metricKey: keyof PerformanceMetrics, color: string) => {\n    if (latestTrends.length < 2) return '';\n    \n    const points = latestTrends.map((trend, index) => {\n      const x = (index / (latestTrends.length - 1)) * chartWidth;\n      const y = chartHeight - ((trend.metrics[metricKey] - minValue) / (maxValue - minValue)) * chartHeight;\n      return `${x},${y}`;\n    }).join(' ');\n    \n    return `M ${points.replace(/,/g, ' L ')}`;\n  };\n\n  return (\n    <div className=\"trend-chart-container\">\n      <svg width={chartWidth} height={chartHeight} className=\"trend-svg\">\n        {/* Grid lines */}\n        {[0, 25, 50, 75, 100].map(value => {\n          const y = chartHeight - ((value - minValue) / (maxValue - minValue)) * chartHeight;\n          return (\n            <g key={value}>\n              <line \n                x1={0} \n                y1={y} \n                x2={chartWidth} \n                y2={y} \n                stroke=\"#374151\" \n                strokeWidth={0.5}\n                opacity={0.3}\n              />\n              <text \n                x={-5} \n                y={y + 4} \n                fontSize=\"10\" \n                fill=\"#6B7280\" \n                textAnchor=\"end\"\n              >\n                {value}%\n              </text>\n            </g>\n          );\n        })}\n        \n        {/* Trend lines */}\n        <path \n          d={getChartPath('eyeContact', '#3B82F6')} \n          fill=\"none\" \n          stroke=\"#3B82F6\" \n          strokeWidth={2}\n        />\n        <path \n          d={getChartPath('facialEngagement', '#10B981')} \n          fill=\"none\" \n          stroke=\"#10B981\" \n          strokeWidth={2}\n        />\n        <path \n          d={getChartPath('rapport', '#F59E0B')} \n          fill=\"none\" \n          stroke=\"#F59E0B\" \n          strokeWidth={2}\n        />\n      </svg>\n      \n      <div className=\"chart-legend\">\n        <span className=\"legend-item\">\n          <div className=\"legend-color\" style={{ backgroundColor: '#3B82F6' }} />\n          Eye Contact\n        </span>\n        <span className=\"legend-item\">\n          <div className=\"legend-color\" style={{ backgroundColor: '#10B981' }} />\n          Facial Engagement\n        </span>\n        <span className=\"legend-item\">\n          <div className=\"legend-color\" style={{ backgroundColor: '#F59E0B' }} />\n          Rapport\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default DaterAnalyticsDashboard;\n"],"names":["MetricCard","_ref2","title","value","icon","description","getMetricColor","val","_jsxs","className","children","_jsx","style","color","Math","round","width","concat","backgroundColor","TrendChart","_ref3","trends","latestTrends","slice","chartHeight","getChartPath","metricKey","length","points","map","trend","index","x","y","metrics","join","replace","height","x1","y1","x2","y2","stroke","strokeWidth","opacity","fontSize","fill","textAnchor","d","_ref","showForAudience","participantNames","analytics","setAnalytics","useState","isSessionActive","setIsSessionActive","useEffect","daterPerformanceAnalytics","onUpdate","newAnalytics","startSession","formatDuration","ms","minutes","floor","seconds","toString","padStart","onClick","disabled","currentMetrics","duration","compatibilityScore","score","eyeContact","facialEngagement","bodyLanguage","emotionalRange","positivity","authenticity","voiceEnergy","attentiveness","rapport","peakMoments","moment","timestamp","startTime","metric","context","improvementSuggestions","suggestion","endSession","finalAnalytics"],"sourceRoot":""}