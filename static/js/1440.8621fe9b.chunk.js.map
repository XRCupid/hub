{"version":3,"file":"static/js/1440.8621fe9b.chunk.js","mappings":"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","sources":["components/InteractiveNPCDate.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface DateScenario {\n  id: string;\n  npcName: string;\n  setting: string;\n  personality: string;\n  background: string;\n}\n\ninterface DateMessage {\n  speaker: 'user' | 'npc';\n  text: string;\n  emotion?: string;\n  timestamp: Date;\n}\n\ninterface ScenarioOutcome {\n  score: number;\n  feedback: string;\n  tips: string[];\n}\n\nconst InteractiveNPCDate: React.FC = () => {\n  const [selectedScenario, setSelectedScenario] = useState<string>('cafe_date');\n  const [messages, setMessages] = useState<DateMessage[]>([]);\n  const [userInput, setUserInput] = useState('');\n  const [isNPCTyping, setIsNPCTyping] = useState(false);\n  const [dateScore, setDateScore] = useState(50);\n  const [scenarioComplete, setScenarioComplete] = useState(false);\n  const [outcome, setOutcome] = useState<ScenarioOutcome | null>(null);\n\n  const scenarios: Record<string, DateScenario> = {\n    cafe_date: {\n      id: 'cafe_date',\n      npcName: 'Emma',\n      setting: 'Cozy coffee shop',\n      personality: 'Creative, slightly introverted, loves books and art',\n      background: 'Works as a graphic designer, enjoys indie music and weekend art galleries'\n    },\n    dinner_date: {\n      id: 'dinner_date', \n      npcName: 'Alex',\n      setting: 'Upscale restaurant',\n      personality: 'Outgoing, ambitious, enjoys good food and travel',\n      background: 'Marketing professional who travels frequently for work, foodie who loves trying new cuisines'\n    },\n    park_walk: {\n      id: 'park_walk',\n      npcName: 'Jordan',\n      setting: 'Scenic park trail',\n      personality: 'Active, outdoorsy, environmentally conscious',\n      background: 'Environmental scientist who loves hiking, rock climbing, and sustainable living'\n    }\n  };\n\n  const currentScenario = scenarios[selectedScenario];\n\n  // NPC response logic based on user input\n  const getNPCResponse = (userMessage: string, messageCount: number): { text: string; emotion: string; scoreChange: number } => {\n    const message = userMessage.toLowerCase();\n    const npcName = currentScenario.npcName;\n    \n    // General positive responses\n    if (message.includes('how are you') || message.includes('how\\'s your day')) {\n      return {\n        text: `I'm doing great, thanks for asking! This ${currentScenario.setting.toLowerCase()} is really nice. How about you?`,\n        emotion: 'happy',\n        scoreChange: 5\n      };\n    }\n\n    // Scenario-specific responses\n    if (selectedScenario === 'cafe_date') {\n      if (message.includes('coffee') || message.includes('drink')) {\n        return {\n          text: \"I love this place! They have the best lavender latte. I'm kind of a coffee snob though - do you have a favorite coffee shop?\",\n          emotion: 'interested',\n          scoreChange: 8\n        };\n      }\n      if (message.includes('art') || message.includes('design') || message.includes('creative')) {\n        return {\n          text: \"Oh wow, you're interested in art too? I actually work as a graphic designer! There's this amazing gallery opening next weekend - would you be interested in checking it out sometime?\",\n          emotion: 'excited',\n          scoreChange: 15\n        };\n      }\n      if (message.includes('work') || message.includes('job')) {\n        return {\n          text: \"I'm a graphic designer, which I absolutely love! Every project is different. What do you do for work? Do you enjoy it?\",\n          emotion: 'curious',\n          scoreChange: 7\n        };\n      }\n    }\n\n    if (selectedScenario === 'dinner_date') {\n      if (message.includes('food') || message.includes('restaurant') || message.includes('delicious')) {\n        return {\n          text: \"The food here is incredible! I've been wanting to try this place forever. Have you been here before? I love discovering new restaurants when I travel for work.\",\n          emotion: 'enthusiastic',\n          scoreChange: 10\n        };\n      }\n      if (message.includes('travel') || message.includes('trip') || message.includes('vacation')) {\n        return {\n          text: \"I travel quite a bit for work in marketing! Last month I was in Barcelona - the food scene there is unreal. Where's the most interesting place you've traveled to?\",\n          emotion: 'excited',\n          scoreChange: 12\n        };\n      }\n    }\n\n    if (selectedScenario === 'park_walk') {\n      if (message.includes('nature') || message.includes('outdoors') || message.includes('hiking')) {\n        return {\n          text: \"I'm so glad you appreciate nature too! I'm actually an environmental scientist, so being outdoors is both my work and my passion. Do you have any favorite hiking spots?\",\n          emotion: 'passionate',\n          scoreChange: 15\n        };\n      }\n      if (message.includes('environment') || message.includes('sustainable') || message.includes('climate')) {\n        return {\n          text: \"Yes! It's so refreshing to meet someone who cares about the environment. My work focuses on conservation, and I try to live as sustainably as possible. What got you interested in environmental issues?\",\n          emotion: 'impressed',\n          scoreChange: 18\n        };\n      }\n    }\n\n    // Generic responses based on conversation quality\n    if (message.length < 10) {\n      return {\n        text: \"Hmm, okay... *looks around awkwardly* So, um, tell me something interesting about yourself?\",\n        emotion: 'confused',\n        scoreChange: -5\n      };\n    }\n\n    if (message.includes('?')) {\n      return {\n        text: `That's a great question! *smiles* You seem really thoughtful. I like that about you.`,\n        emotion: 'pleased',\n        scoreChange: 8\n      };\n    }\n\n    // Default responses\n    const defaultResponses = [\n      { text: \"That's really interesting! Tell me more about that.\", emotion: 'interested', scoreChange: 5 },\n      { text: \"I never thought about it that way. You have a unique perspective!\", emotion: 'intrigued', scoreChange: 7 },\n      { text: \"You're really easy to talk to. I'm having a great time!\", emotion: 'happy', scoreChange: 10 }\n    ];\n\n    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n  };\n\n  const sendMessage = () => {\n    if (!userInput.trim()) return;\n\n    const userMessage: DateMessage = {\n      speaker: 'user',\n      text: userInput,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    const messageCount = messages.filter(m => m.speaker === 'user').length + 1;\n    setUserInput('');\n    setIsNPCTyping(true);\n\n    // Get NPC response\n    setTimeout(() => {\n      const response = getNPCResponse(userInput, messageCount);\n      const npcMessage: DateMessage = {\n        speaker: 'npc',\n        text: response.text,\n        emotion: response.emotion,\n        timestamp: new Date()\n      };\n      \n      setMessages(prev => [...prev, npcMessage]);\n      setDateScore(prev => Math.max(0, Math.min(100, prev + response.scoreChange)));\n      setIsNPCTyping(false);\n\n      // End scenario after 8-10 exchanges\n      if (messageCount >= 8) {\n        setTimeout(() => finishDate(), 2000);\n      }\n    }, 1000 + Math.random() * 1500);\n  };\n\n  const finishDate = () => {\n    setScenarioComplete(true);\n    let feedback = '';\n    let tips: string[] = [];\n\n    if (dateScore >= 80) {\n      feedback = \"Amazing! You had fantastic chemistry and really connected. They're definitely interested in seeing you again!\";\n      tips = [\"Keep being your authentic self\", \"You showed great conversation skills\", \"Your questions were engaging and thoughtful\"];\n    } else if (dateScore >= 60) {\n      feedback = \"Great job! You had a good connection and the conversation flowed well. There's potential for a second date!\";\n      tips = [\"Try asking more follow-up questions\", \"Share more personal stories\", \"Show more enthusiasm about shared interests\"];\n    } else if (dateScore >= 40) {\n      feedback = \"Not bad! You had some good moments but there were a few awkward pauses. With practice, you'll improve!\";\n      tips = [\"Work on active listening\", \"Ask more open-ended questions\", \"Try to find common ground more quickly\"];\n    } else {\n      feedback = \"This one was challenging! Don't worry - every date is practice. Focus on being more engaged and curious.\";\n      tips = [\"Practice conversation starters\", \"Work on showing genuine interest\", \"Avoid one-word responses\"];\n    }\n\n    setOutcome({ score: dateScore, feedback, tips });\n  };\n\n  const resetScenario = () => {\n    setMessages([]);\n    setDateScore(50);\n    setScenarioComplete(false);\n    setOutcome(null);\n    setIsNPCTyping(false);\n  };\n\n  useEffect(() => {\n    // Opening message\n    if (messages.length === 0 && !scenarioComplete) {\n      const openingMessage: DateMessage = {\n        speaker: 'npc',\n        text: `Hi! I'm ${currentScenario.npcName}. Thanks for meeting me here at the ${currentScenario.setting.toLowerCase()}. I'm excited to get to know you!`,\n        emotion: 'friendly',\n        timestamp: new Date()\n      };\n      setMessages([openingMessage]);\n    }\n  }, [selectedScenario, currentScenario, messages.length, scenarioComplete]);\n\n  return (\n    <div style={{ padding: '2rem', maxWidth: '1200px', margin: '0 auto' }}>\n      <h1>💕 Interactive NPC Dating Practice</h1>\n      \n      {/* Scenario Selection */}\n      <div style={{ marginBottom: '2rem' }}>\n        <h3>Choose Your Date Scenario:</h3>\n        <div style={{ display: 'flex', gap: '1rem', marginBottom: '1rem' }}>\n          {Object.values(scenarios).map(scenario => (\n            <button\n              key={scenario.id}\n              onClick={() => {\n                setSelectedScenario(scenario.id);\n                resetScenario();\n              }}\n              style={{\n                padding: '0.5rem 1rem',\n                backgroundColor: selectedScenario === scenario.id ? '#FF6B9D' : '#f0f0f0',\n                color: selectedScenario === scenario.id ? 'white' : 'black',\n                border: 'none',\n                borderRadius: '8px',\n                cursor: 'pointer'\n              }}\n            >\n              {scenario.npcName} - {scenario.setting}\n            </button>\n          ))}\n        </div>\n        <div style={{ backgroundColor: '#f8f9fa', padding: '1rem', borderRadius: '8px' }}>\n          <h4>{currentScenario.npcName}</h4>\n          <p><strong>Setting:</strong> {currentScenario.setting}</p>\n          <p><strong>Personality:</strong> {currentScenario.personality}</p>\n          <p><strong>Background:</strong> {currentScenario.background}</p>\n        </div>\n      </div>\n\n      {!scenarioComplete ? (\n        <div style={{ display: 'flex', gap: '2rem' }}>\n          {/* Chat Interface */}\n          <div style={{ flex: '2' }}>\n            <div style={{\n              border: '1px solid #ddd',\n              borderRadius: '8px',\n              height: '400px',\n              overflowY: 'auto',\n              padding: '1rem',\n              backgroundColor: '#f9f9f9'\n            }}>\n              {messages.map((message, index) => (\n                <div\n                  key={index}\n                  style={{\n                    marginBottom: '1rem',\n                    textAlign: message.speaker === 'user' ? 'right' : 'left'\n                  }}\n                >\n                  <div style={{\n                    display: 'inline-block',\n                    padding: '0.5rem 1rem',\n                    borderRadius: '12px',\n                    backgroundColor: message.speaker === 'user' ? '#007bff' : '#e9ecef',\n                    color: message.speaker === 'user' ? 'white' : 'black',\n                    maxWidth: '70%'\n                  }}>\n                    <strong>{message.speaker === 'user' ? 'You' : currentScenario.npcName}:</strong> {message.text}\n                    {message.emotion && (\n                      <div style={{ fontSize: '0.8rem', fontStyle: 'italic', opacity: 0.7 }}>\n                        *{message.emotion}*\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n              {isNPCTyping && (\n                <div style={{ fontStyle: 'italic', color: '#666' }}>\n                  {currentScenario.npcName} is typing...\n                </div>\n              )}\n            </div>\n\n            <div style={{ marginTop: '1rem', display: 'flex', gap: '0.5rem' }}>\n              <input\n                type=\"text\"\n                value={userInput}\n                onChange={(e) => setUserInput(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n                placeholder=\"What do you want to say?\"\n                style={{\n                  flex: '1',\n                  padding: '0.5rem',\n                  border: '1px solid #ddd',\n                  borderRadius: '4px'\n                }}\n              />\n              <button\n                onClick={sendMessage}\n                style={{\n                  padding: '0.5rem 1rem',\n                  backgroundColor: '#007bff',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer'\n                }}\n              >\n                Send\n              </button>\n            </div>\n          </div>\n\n          {/* Date Progress */}\n          <div style={{ flex: '1' }}>\n            <div style={{ padding: '1rem', backgroundColor: '#f0f8ff', borderRadius: '8px' }}>\n              <h3>📊 Date Score</h3>\n              <div style={{ marginBottom: '1rem' }}>\n                <div style={{\n                  width: '100%',\n                  height: '20px',\n                  backgroundColor: '#e0e0e0',\n                  borderRadius: '10px',\n                  overflow: 'hidden'\n                }}>\n                  <div style={{\n                    width: `${dateScore}%`,\n                    height: '100%',\n                    backgroundColor: dateScore > 70 ? '#28a745' : dateScore > 40 ? '#ffc107' : '#dc3545',\n                    transition: 'width 0.3s ease'\n                  }} />\n                </div>\n                <p style={{ textAlign: 'center', margin: '0.5rem 0' }}>\n                  {dateScore}/100\n                </p>\n              </div>\n              \n              <h4>💡 Live Tips:</h4>\n              <ul style={{ fontSize: '0.9rem' }}>\n                <li>Ask about their interests and background</li>\n                <li>Share relevant personal stories</li>\n                <li>Show genuine curiosity with follow-up questions</li>\n                <li>Find common ground to build connection</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      ) : (\n        // Results Screen\n        <div style={{ textAlign: 'center', padding: '2rem' }}>\n          <h2>🎉 Date Complete!</h2>\n          {outcome && (\n            <div>\n              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>\n                {outcome.score >= 80 ? '🔥' : outcome.score >= 60 ? '😊' : outcome.score >= 40 ? '😐' : '😔'}\n              </div>\n              <h3>Final Score: {outcome.score}/100</h3>\n              <p style={{ fontSize: '1.1rem', marginBottom: '2rem' }}>{outcome.feedback}</p>\n              \n              <div style={{ backgroundColor: '#f8f9fa', padding: '1.5rem', borderRadius: '8px', marginBottom: '2rem' }}>\n                <h4>💡 Tips for Next Time:</h4>\n                <ul style={{ textAlign: 'left', display: 'inline-block' }}>\n                  {outcome.tips.map((tip, index) => (\n                    <li key={index}>{tip}</li>\n                  ))}\n                </ul>\n              </div>\n              \n              <button\n                onClick={resetScenario}\n                style={{\n                  padding: '1rem 2rem',\n                  backgroundColor: '#007bff',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '8px',\n                  cursor: 'pointer',\n                  fontSize: '1.1rem'\n                }}\n              >\n                Try Another Date\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InteractiveNPCDate;\n"],"names":["InteractiveNPCDate","selectedScenario","setSelectedScenario","useState","messages","setMessages","userInput","setUserInput","isNPCTyping","setIsNPCTyping","dateScore","setDateScore","scenarioComplete","setScenarioComplete","outcome","setOutcome","scenarios","cafe_date","id","npcName","setting","personality","background","dinner_date","park_walk","currentScenario","sendMessage","trim","userMessage","speaker","text","timestamp","Date","prev","messageCount","filter","m","length","setTimeout","response","getNPCResponse","message","toLowerCase","includes","concat","emotion","scoreChange","defaultResponses","Math","floor","random","npcMessage","max","min","finishDate","feedback","tips","score","resetScenario","useEffect","openingMessage","_jsxs","style","padding","maxWidth","margin","children","_jsx","marginBottom","display","gap","Object","values","map","scenario","onClick","backgroundColor","color","border","borderRadius","cursor","textAlign","fontSize","tip","index","flex","height","overflowY","fontStyle","opacity","marginTop","type","value","onChange","e","target","onKeyPress","key","placeholder","width","overflow","transition"],"sourceRoot":""}