{"version":3,"file":"static/js/655.fe2f09cb.chunk.js","mappings":"6LAYA,MA4DA,EA5DwDA,IAKjD,IALkD,UACvDC,EAAS,SACTC,EAAW,CAAC,EAAG,EAAG,GAAE,MACpBC,EAAQ,EAAC,WACTC,GAAa,GACdJ,EACC,MAAMK,GAAQC,EAAAA,EAAAA,QAAoB,OAC5B,MAAEC,EAAK,WAAEC,IAAeC,EAAAA,EAAAA,GAAQR,IAChC,QAAES,EAAO,MAAEC,IAAUC,EAAAA,EAAAA,GAAcJ,EAAYH,GAG/CQ,EAAcC,EAAAA,SAAc,KAChC,MAAMC,EAAQR,EAAMQ,QAMpB,OALAA,EAAMC,UAAUC,IACVA,aAAiBC,EAAAA,cACnBD,EAAME,eAAgB,MAGnBJ,IACN,CAACR,IAkCJ,OA/BAa,EAAAA,EAAAA,YAAU,KACRC,QAAQC,IAAI,mCACZD,QAAQC,IAAI,cAAerB,GAC3BoB,QAAQC,IAAI,6BAA8Bd,EAAWe,QACrDF,QAAQC,IAAI,mBAAoBd,EAAWgB,KAAIC,GAAKA,EAAEC,QACtDL,QAAQC,IAAI,qBAAsBK,OAAOC,KAAKlB,MAC7C,CAACT,EAAWO,EAAYE,KAG3BU,EAAAA,EAAAA,YAAU,KACR,GAAIO,OAAOC,KAAKlB,GAASa,OAAS,EAAG,CACnC,MAAMM,EAAiBF,OAAOC,KAAKlB,GAAS,GACtCoB,EAAcpB,EAAQmB,GAExBC,IACFT,QAAQC,IAAI,qBAAsBO,GAClCC,EAAYC,QACZD,EAAYE,OAEhB,MACEX,QAAQY,KAAK,wCAEd,CAACvB,KAGJwB,EAAAA,EAAAA,IAAS,CAACC,EAAOC,KACXzB,GACFA,EAAM0B,OAAOD,OAKfE,EAAAA,EAAAA,KAAA,SAAOC,IAAKlC,EAAOH,SAAUA,EAAUC,MAAOA,EAAMqC,UAClDF,EAAAA,EAAAA,KAAA,aAAWG,OAAQ5B,M","sources":["components/SimpleRPMAvatar.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useGLTF, useAnimations } from '@react-three/drei';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\ninterface SimpleRPMAvatarProps {\n  avatarUrl: string;\n  position?: [number, number, number];\n  scale?: number;\n  isSpeaking?: boolean;\n}\n\nconst SimpleRPMAvatar: React.FC<SimpleRPMAvatarProps> = ({\n  avatarUrl,\n  position = [0, 0, 0],\n  scale = 1,\n  isSpeaking = false\n}) => {\n  const group = useRef<THREE.Group>(null);\n  const { scene, animations } = useGLTF(avatarUrl);\n  const { actions, mixer } = useAnimations(animations, group);\n  \n  // Clone scene\n  const clonedScene = React.useMemo(() => {\n    const clone = scene.clone();\n    clone.traverse((child) => {\n      if (child instanceof THREE.SkinnedMesh) {\n        child.frustumCulled = false;\n      }\n    });\n    return clone;\n  }, [scene]);\n  \n  // Log what we have\n  useEffect(() => {\n    console.log('=== SIMPLE RPM AVATAR DEBUG ===');\n    console.log('Avatar URL:', avatarUrl);\n    console.log('Embedded animations count:', animations.length);\n    console.log('Animation names:', animations.map(a => a.name));\n    console.log('Actions available:', Object.keys(actions));\n  }, [avatarUrl, animations, actions]);\n  \n  // Play first animation if available\n  useEffect(() => {\n    if (Object.keys(actions).length > 0) {\n      const firstActionKey = Object.keys(actions)[0];\n      const firstAction = actions[firstActionKey];\n      \n      if (firstAction) {\n        console.log('Playing animation:', firstActionKey);\n        firstAction.reset();\n        firstAction.play();\n      }\n    } else {\n      console.warn('No animations found in avatar file');\n    }\n  }, [actions]);\n  \n  // Update mixer\n  useFrame((state, delta) => {\n    if (mixer) {\n      mixer.update(delta);\n    }\n  });\n  \n  return (\n    <group ref={group} position={position} scale={scale}>\n      <primitive object={clonedScene} />\n    </group>\n  );\n};\n\nexport default SimpleRPMAvatar;\n"],"names":["_ref","avatarUrl","position","scale","isSpeaking","group","useRef","scene","animations","useGLTF","actions","mixer","useAnimations","clonedScene","React","clone","traverse","child","THREE","frustumCulled","useEffect","console","log","length","map","a","name","Object","keys","firstActionKey","firstAction","reset","play","warn","useFrame","state","delta","update","_jsx","ref","children","object"],"sourceRoot":""}