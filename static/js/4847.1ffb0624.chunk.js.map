{"version":3,"file":"static/js/4847.1ffb0624.chunk.js","mappings":"8HACA,SAAiB,C,6FCMV,MAAMA,EAAkDC,IAAoB,IAAnB,UAAEC,GAAWD,EAC3E,MAAOE,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,KACpCG,EAAUC,IAAeJ,EAAAA,EAAAA,WAAS,IAClCK,EAAYC,IAAiBN,EAAAA,EAAAA,WAAS,IAE7CO,EAAAA,EAAAA,YAAU,KAER,MAAMC,EAAeC,aAAaC,QAAQ,cACpCC,EAAkBF,aAAaC,QAAQ,iBAEzCF,GAAgBG,IAClBL,GAAc,GACdP,EAAUS,GACVN,EAAaS,MAEd,IAkCH,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,UACjCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,0BAEHT,GACCU,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,kBAAiBC,SAAC,oCAC/BF,EAAAA,EAAAA,KAAA,UAAQI,QAhBMC,KACtBR,aAAaS,WAAW,cACxBT,aAAaS,WAAW,iBACxBnB,EAAU,IACVG,EAAa,IACbI,GAAc,IAW4BO,UAAU,eAAcC,SAAC,mBAK7DC,EAAAA,EAAAA,MAAAI,EAAAA,SAAA,CAAAL,SAAA,EACEC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,eAAcC,SAAA,CAAC,sFAEZF,EAAAA,EAAAA,KAAA,KAAGQ,KAAK,4BAA4BC,OAAO,SAASC,IAAI,sBAAqBR,SAAC,yBAG9FC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,SAAQT,SAAC,cACxBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAA,SACEY,GAAG,SACHC,KAAMtB,EAAW,OAAS,WAC1BuB,MAAO5B,EACP6B,SAAWC,GAAM7B,EAAU6B,EAAEP,OAAOK,OACpCG,YAAY,kCAKlBd,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,YAAWT,SAAC,iBAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAAA,SACEY,GAAG,YACHC,KAAMtB,EAAW,OAAS,WAC1BuB,MAAOzB,EACP0B,SAAWC,GAAM1B,EAAa0B,EAAEP,OAAOK,OACvCG,YAAY,qCAKlBd,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,SACEa,KAAK,WACLD,GAAG,WACHM,QAAS3B,EACTwB,SAAWC,GAAMxB,EAAYwB,EAAEP,OAAOS,YAExClB,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,WAAUT,SAAC,kBAG5BF,EAAAA,EAAAA,KAAA,UACEI,QAxFWe,KACjBjC,GAAUG,IAEZQ,aAAauB,QAAQ,aAAclC,GACnCW,aAAauB,QAAQ,gBAAiB/B,GAGrCgC,OAAeC,uBAAyBpC,EACxCmC,OAAeE,0BAA4BlC,EAE5CK,GAAc,GAGVT,GACFA,IAIFuC,YAAW,KACTH,OAAOI,SAASC,WACf,OAqEKC,UAAWzC,IAAWG,EACtBY,UAAU,cAAaC,SACxB,eAIDF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAC,qG","sources":["webpack://hub/./src/components/HumeApiKeyInput.css?ebe3","components/HumeApiKeyInput.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, { useState, useEffect } from 'react';\nimport './HumeApiKeyInput.css';\n\ninterface HumeApiKeyInputProps {\n  onKeysSet?: () => void;\n}\n\nexport const HumeApiKeyInput: React.FC<HumeApiKeyInputProps> = ({ onKeysSet }) => {\n  const [apiKey, setApiKey] = useState('');\n  const [secretKey, setSecretKey] = useState('');\n  const [showKeys, setShowKeys] = useState(false);\n  const [keysStored, setKeysStored] = useState(false);\n\n  useEffect(() => {\n    // Check if keys are already stored\n    const storedApiKey = localStorage.getItem('humeApiKey');\n    const storedSecretKey = localStorage.getItem('humeSecretKey');\n    \n    if (storedApiKey && storedSecretKey) {\n      setKeysStored(true);\n      setApiKey(storedApiKey);\n      setSecretKey(storedSecretKey);\n    }\n  }, []);\n\n  const handleSaveKeys = () => {\n    if (apiKey && secretKey) {\n      // Store in localStorage\n      localStorage.setItem('humeApiKey', apiKey);\n      localStorage.setItem('humeSecretKey', secretKey);\n      \n      // Also set in window object for immediate use\n      (window as any).REACT_APP_HUME_API_KEY = apiKey;\n      (window as any).REACT_APP_HUME_SECRET_KEY = secretKey;\n      \n      setKeysStored(true);\n      \n      // Notify parent component\n      if (onKeysSet) {\n        onKeysSet();\n      }\n      \n      // Reload the page to reinitialize services with new keys\n      setTimeout(() => {\n        window.location.reload();\n      }, 500);\n    }\n  };\n\n  const handleClearKeys = () => {\n    localStorage.removeItem('humeApiKey');\n    localStorage.removeItem('humeSecretKey');\n    setApiKey('');\n    setSecretKey('');\n    setKeysStored(false);\n  };\n\n  return (\n    <div className=\"hume-api-key-input\">\n      <div className=\"api-key-card\">\n        <h3>Hume AI Configuration</h3>\n        \n        {keysStored ? (\n          <div className=\"keys-stored\">\n            <p className=\"success-message\">âœ… API keys are configured</p>\n            <button onClick={handleClearKeys} className=\"clear-button\">\n              Clear Keys\n            </button>\n          </div>\n        ) : (\n          <>\n            <p className=\"info-message\">\n              To use the AI coach, you need to provide your Hume API credentials.\n              Get them from <a href=\"https://platform.hume.ai/\" target=\"_blank\" rel=\"noopener noreferrer\">platform.hume.ai</a>\n            </p>\n            \n            <div className=\"input-group\">\n              <label htmlFor=\"apiKey\">API Key:</label>\n              <div className=\"input-wrapper\">\n                <input\n                  id=\"apiKey\"\n                  type={showKeys ? \"text\" : \"password\"}\n                  value={apiKey}\n                  onChange={(e) => setApiKey(e.target.value)}\n                  placeholder=\"Enter your Hume API key\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"input-group\">\n              <label htmlFor=\"secretKey\">Secret Key:</label>\n              <div className=\"input-wrapper\">\n                <input\n                  id=\"secretKey\"\n                  type={showKeys ? \"text\" : \"password\"}\n                  value={secretKey}\n                  onChange={(e) => setSecretKey(e.target.value)}\n                  placeholder=\"Enter your Hume secret key\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"checkbox-group\">\n              <input\n                type=\"checkbox\"\n                id=\"showKeys\"\n                checked={showKeys}\n                onChange={(e) => setShowKeys(e.target.checked)}\n              />\n              <label htmlFor=\"showKeys\">Show keys</label>\n            </div>\n            \n            <button \n              onClick={handleSaveKeys}\n              disabled={!apiKey || !secretKey}\n              className=\"save-button\"\n            >\n              Save Keys\n            </button>\n            \n            <p className=\"security-note\">\n              ðŸ”’ Your keys are stored locally in your browser and never sent to our servers.\n            </p>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n"],"names":["HumeApiKeyInput","_ref","onKeysSet","apiKey","setApiKey","useState","secretKey","setSecretKey","showKeys","setShowKeys","keysStored","setKeysStored","useEffect","storedApiKey","localStorage","getItem","storedSecretKey","_jsx","className","children","_jsxs","onClick","handleClearKeys","removeItem","_Fragment","href","target","rel","htmlFor","id","type","value","onChange","e","placeholder","checked","handleSaveKeys","setItem","window","REACT_APP_HUME_API_KEY","REACT_APP_HUME_SECRET_KEY","setTimeout","location","reload","disabled"],"sourceRoot":""}