{"version":3,"file":"static/js/9340.dde0c093.chunk.js","mappings":"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","sources":["hooks/useAvatarBlendShapes.ts","components/RPMHumeIntegration.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\ninterface EmotionScores {\n  happy?: number;\n  sad?: number;\n  angry?: number;\n  surprised?: number;\n  neutral?: number;\n  phoneme?: string;\n  [key: string]: number | string | undefined;\n}\n\ninterface BlendShapes {\n  // Mouth\n  mouthClose: number;\n  mouthSmileLeft: number;\n  mouthSmileRight: number;\n  mouthFrownLeft: number;\n  mouthFrownRight: number;\n  mouthPressLeft: number;\n  mouthPressRight: number;\n  mouthLowerDownLeft: number;\n  mouthLowerDownRight: number;\n  mouthUpperUpLeft: number;\n  mouthUpperUpRight: number;\n  mouthOpen: number;\n  mouthPucker: number;\n  mouthFunnel: number;\n  mouthRollLower: number;\n  mouthRollUpper: number;\n  mouthShrugLower: number;\n  mouthShrugUpper: number;\n  \n  // Eyes\n  eyeBlinkLeft: number;\n  eyeBlinkRight: number;\n  eyeSquintLeft: number;\n  eyeSquintRight: number;\n  eyeWideLeft: number;\n  eyeWideRight: number;\n  eyeLookInLeft: number;\n  eyeLookInRight: number;\n  eyeLookOutLeft: number;\n  eyeLookOutRight: number;\n  eyeLookUpLeft: number;\n  eyeLookUpRight: number;\n  eyeLookDownLeft: number;\n  eyeLookDownRight: number;\n  \n  // Brows\n  browDownLeft: number;\n  browDownRight: number;\n  browInnerUp: number;\n  browOuterUpLeft: number;\n  browOuterUpRight: number;\n  \n  // Other\n  cheekPuff: number;\n  cheekSquintLeft: number;\n  cheekSquintRight: number;\n  noseSneerLeft: number;\n  noseSneerRight: number;\n  tongueOut: number;\n  jawOpen: number;\n  jawForward: number;\n  jawLeft: number;\n  jawRight: number;\n  \n  // Additional blendshapes\n  [key: string]: number;\n}\n\ninterface EmotionPrediction {\n  name: string;\n  score: number;\n}\n\ninterface Prediction {\n  emotions?: EmotionPrediction[];\n}\n\ninterface FaceData {\n  predictions?: Prediction[];\n  emotions?: EmotionScores;\n}\n\nexport interface HumeResponse {\n  face?: FaceData;\n  predictions?: Prediction[];\n  emotions?: EmotionScores;\n}\n\ninterface UseAvatarBlendShapesReturn {\n  blendShapes: Partial<BlendShapes>;\n  applyPhoneme: (phoneme: string) => void;\n  resetBlendShapes: () => void;\n}\n\n/**\n * Maps Hume AI emotion scores to avatar blendshapes\n */\nconst mapEmotionsToBlendShapes = (emotions: EmotionScores): Partial<BlendShapes> => {\n  const {\n    happy = 0,\n    sad = 0,\n    angry = 0,\n    surprised = 0,\n    neutral = 0,\n    ...otherEmotions\n  } = emotions;\n\n  // Default neutral expression\n  const blendShapes: Partial<BlendShapes> = {\n    // Mouth\n    mouthClose: 0.5, // Slightly open for neutral\n    mouthSmileLeft: 0,\n    mouthSmileRight: 0,\n    mouthFrownLeft: 0,\n    mouthFrownRight: 0,\n    mouthPressLeft: 0,\n    mouthPressRight: 0,\n    mouthLowerDownLeft: 0,\n    mouthLowerDownRight: 0,\n    mouthUpperUpLeft: 0,\n    mouthUpperUpRight: 0,\n    mouthOpen: 0,\n    mouthPucker: 0,\n    mouthFunnel: 0,\n    mouthRollLower: 0,\n    mouthRollUpper: 0,\n    mouthShrugLower: 0,\n    mouthShrugUpper: 0,\n    \n    // Eyes\n    eyeBlinkLeft: 0,\n    eyeBlinkRight: 0,\n    eyeSquintLeft: 0,\n    eyeSquintRight: 0,\n    eyeWideLeft: 0,\n    eyeWideRight: 0,\n    eyeLookInLeft: 0,\n    eyeLookInRight: 0,\n    eyeLookOutLeft: 0,\n    eyeLookOutRight: 0,\n    eyeLookUpLeft: 0,\n    eyeLookUpRight: 0,\n    eyeLookDownLeft: 0,\n    eyeLookDownRight: 0,\n    \n    // Brows\n    browDownLeft: 0,\n    browDownRight: 0,\n    browInnerUp: 0,\n    browOuterUpLeft: 0,\n    browOuterUpRight: 0,\n    \n    // Other\n    cheekPuff: 0,\n    cheekSquintLeft: 0,\n    cheekSquintRight: 0,\n    noseSneerLeft: 0,\n    noseSneerRight: 0,\n    tongueOut: 0,\n    jawOpen: 0,\n    jawForward: 0,\n    jawLeft: 0,\n    jawRight: 0,\n  };\n\n  // Apply emotion-based blendshapes\n  if (happy > 0.3) {\n    blendShapes.mouthSmileLeft = happy;\n    blendShapes.mouthSmileRight = happy;\n    blendShapes.cheekSquintLeft = happy * 0.8;\n    blendShapes.cheekSquintRight = happy * 0.8;\n    blendShapes.eyeSquintLeft = happy * 0.5;\n    blendShapes.eyeSquintRight = happy * 0.5;\n  }\n\n  if (sad > 0.3) {\n    blendShapes.mouthFrownLeft = sad * 0.7;\n    blendShapes.mouthFrownRight = sad * 0.7;\n    blendShapes.browInnerUp = sad * 0.5;\n    blendShapes.browOuterUpLeft = sad * 0.3;\n    blendShapes.browOuterUpRight = sad * 0.3;\n  }\n\n  if (angry > 0.3) {\n    blendShapes.browDownLeft = angry * 0.8;\n    blendShapes.browDownRight = angry * 0.8;\n    blendShapes.noseSneerLeft = angry * 0.5;\n    blendShapes.noseSneerRight = angry * 0.5;\n    blendShapes.mouthPressLeft = angry * 0.6;\n    blendShapes.mouthPressRight = angry * 0.6;\n  }\n\n  if (surprised > 0.3) {\n    blendShapes.browInnerUp = Math.max(blendShapes.browInnerUp || 0, surprised * 0.8);\n    blendShapes.browOuterUpLeft = Math.max(blendShapes.browOuterUpLeft || 0, surprised * 0.8);\n    blendShapes.browOuterUpRight = Math.max(blendShapes.browOuterUpRight || 0, surprised * 0.8);\n    blendShapes.eyeWideLeft = surprised * 0.9;\n    blendShapes.eyeWideRight = surprised * 0.9;\n    blendShapes.jawOpen = surprised * 0.5;\n  }\n\n  // Handle phonemes if present\n  if (emotions.phoneme) {\n    const phoneme = emotions.phoneme.toString().toUpperCase();\n    \n    // Reset mouth shapes when phoneme is present\n    blendShapes.mouthClose = 0;\n    blendShapes.mouthOpen = 0;\n    blendShapes.mouthPucker = 0;\n    blendShapes.mouthFunnel = 0;\n    \n    // Map phonemes to mouth shapes\n    if (['AA', 'AE', 'AH', 'AY', 'AW'].includes(phoneme)) {\n      // Open mouth for wide vowel sounds\n      blendShapes.jawOpen = 0.7;\n      blendShapes.mouthFunnel = 0.3;\n    } else if (['EE', 'IH', 'IY'].includes(phoneme)) {\n      // Smile for E and I sounds\n      blendShapes.mouthSmileLeft = 0.8;\n      blendShapes.mouthSmileRight = 0.8;\n      blendShapes.jawOpen = 0.3;\n    } else if (['OO', 'UW', 'UH'].includes(phoneme)) {\n      // Pucker for O and U sounds\n      blendShapes.mouthPucker = 0.7;\n      blendShapes.jawOpen = 0.4;\n    } else if (['M', 'B', 'P'].includes(phoneme)) {\n      // Closed mouth for M, B, P sounds\n      blendShapes.mouthClose = 1.0;\n      blendShapes.jawOpen = 0.1;\n    } else if (['F', 'V'].includes(phoneme)) {\n      // Bite lower lip for F, V sounds\n      blendShapes.mouthPressLeft = 0.5;\n      blendShapes.mouthPressRight = 0.5;\n    } else if (['TH', 'DH'].includes(phoneme)) {\n      // Tongue between teeth for TH, DH sounds\n      blendShapes.tongueOut = 0.5;\n      blendShapes.jawOpen = 0.4;\n    }\n  }\n\n  return blendShapes;\n};\n\n/**\n * Hook to manage avatar blendshapes based on emotion data\n */\nconst useAvatarBlendShapes = (emotionData: HumeResponse | null): UseAvatarBlendShapesReturn => {\n  const [blendShapes, setBlendShapes] = useState<Partial<BlendShapes>>({});\n\n  const extractEmotions = useCallback((data: HumeResponse): EmotionScores => {\n    const emotions: EmotionScores = {};\n    \n    try {\n      // Check different possible response formats from Hume AI\n      if (data.face?.predictions?.[0]?.emotions) {\n        // Format: { face: { predictions: [{ emotions: [...] }] } }\n        data.face.predictions[0].emotions.forEach((e) => {\n          emotions[e.name] = e.score;\n        });\n      } else if (data.face?.emotions) {\n        // Format: { face: { emotions: { ... } } }\n        Object.assign(emotions, data.face.emotions);\n      } else if (data.predictions?.[0]?.emotions) {\n        // Format: { predictions: [{ emotions: [...] }] }\n        data.predictions[0].emotions.forEach((e) => {\n          emotions[e.name] = e.score;\n        });\n      } else if (data.emotions) {\n        // Format: { emotions: { ... } }\n        Object.assign(emotions, data.emotions);\n      }\n    } catch (error) {\n      console.error('Error extracting emotions:', error);\n    }\n    \n    return emotions;\n  }, []);\n\n  const applyPhoneme = useCallback((phoneme: string) => {\n    setBlendShapes(prev => ({\n      ...prev,\n      // Reset mouth shapes\n      mouthClose: 0,\n      mouthOpen: 0,\n      mouthPucker: 0,\n      mouthFunnel: 0,\n      // Add phoneme-specific shapes\n      ...(phoneme === 'AA' && { jawOpen: 0.7, mouthFunnel: 0.3 }),\n      ...(phoneme === 'M' && { mouthClose: 1.0, jawOpen: 0.1 }),\n      // Add more phoneme mappings as needed\n    }));\n  }, []);\n\n  const resetBlendShapes = useCallback(() => {\n    setBlendShapes({\n      // Default neutral expression\n      mouthClose: 0.5,\n      mouthSmileLeft: 0,\n      mouthSmileRight: 0,\n      // ... other default values\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!emotionData) return;\n\n    try {\n      const emotions = extractEmotions(emotionData);\n      const newBlendShapes = mapEmotionsToBlendShapes(emotions);\n      setBlendShapes(prev => ({\n        ...prev,\n        ...newBlendShapes\n      }));\n    } catch (error) {\n      console.error('Error processing emotion data:', error);\n    }\n  }, [emotionData, extractEmotions]);\n\n  return {\n    blendShapes,\n    applyPhoneme,\n    resetBlendShapes,\n  };\n};\n\nexport default useAvatarBlendShapes;\n","import React, { useState, useEffect, useRef, Suspense, useCallback, useMemo, lazy } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport { Group, Vector3, Vector3Tuple } from 'three';\nimport useAvatarBlendShapes from '../hooks/useAvatarBlendShapes';\nimport { Html } from '@react-three/drei';\n\n// Define the props interface for SimulationAvatar3D\ninterface SimulationAvatar3DProps {\n  avatarUrl: string;\n  blendShapes?: Record<string, number>;\n  position?: Vector3Tuple;\n  scale?: Vector3Tuple;\n  ref?: React.Ref<Group>;\n  onLoaded?: () => void;\n  onModelLoaded?: (model: Group) => void;\n}\n\n// Lazy load the SimulationAvatar3D component with proper typing\nconst SimulationAvatar3D = lazy(() => import('./SimulationAvatar3D')) as any;\n\n// Loading fallback component\nconst AvatarLoadingFallback = () => (\n  <mesh>\n    <boxGeometry args={[1, 1, 1]} />\n    <meshStandardMaterial color=\"gray\" />\n  </mesh>\n);\n\n// Define the BlendShape type\ntype BlendShape = {\n  // Mouth\n  mouthClose: number;\n  mouthFunnel: number;\n  mouthPucker: number;\n  mouthLeft: number;\n  mouthRight: number;\n  mouthSmileLeft: number;\n  mouthSmileRight: number;\n  mouthFrownLeft: number;\n  mouthFrownRight: number;\n  mouthStretchLeft: number;\n  mouthStretchRight: number;\n  mouthDimpleLeft: number;\n  mouthDimpleRight: number;\n  mouthRollLower: number;\n  mouthRollUpper: number;\n  mouthShrugLower: number;\n  mouthShrugUpper: number;\n  mouthPressLeft: number;\n  mouthPressRight: number;\n  mouthLowerDownLeft: number;\n  mouthLowerDownRight: number;\n  mouthUpperUpLeft: number;\n  mouthUpperUpRight: number;\n  mouthOpen: number;\n  // Jaw\n  jawOpen: number;\n  jawForward: number;\n  jawLeft: number;\n  jawRight: number;\n  // Eyes\n  eyeBlinkLeft: number;\n  eyeBlinkRight: number;\n  eyeSquintLeft: number;\n  eyeSquintRight: number;\n  eyeWideLeft: number;\n  eyeWideRight: number;\n  eyeLookInLeft: number;\n  eyeLookInRight: number;\n  eyeLookOutLeft: number;\n  eyeLookOutRight: number;\n  eyeLookUpLeft: number;\n  eyeLookUpRight: number;\n  eyeLookDownLeft: number;\n  eyeLookDownRight: number;\n  // Brows\n  browDownLeft: number;\n  browDownRight: number;\n  browInnerUp: number;\n  browOuterUpLeft: number;\n  browOuterUpRight: number;\n  // Cheeks\n  cheekPuff: number;\n  cheekSquintLeft: number;\n  cheekSquintRight: number;\n  // Nose\n  noseSneerLeft: number;\n  noseSneerRight: number;\n  // Tongue\n  tongueOut: number;\n  chestBreathing: number;\n};\n\n// Default blendshape values for the avatar\nconst defaultBlendShapes: BlendShape = {\n  // Mouth\n  mouthClose: 0.5, // Slightly open for neutral\n  mouthFunnel: 0,\n  mouthPucker: 0,\n  mouthLeft: 0,\n  mouthRight: 0,\n  mouthSmileLeft: 0,\n  mouthSmileRight: 0,\n  mouthFrownLeft: 0,\n  mouthFrownRight: 0,\n  mouthStretchLeft: 0,\n  mouthStretchRight: 0,\n  mouthDimpleLeft: 0,\n  mouthDimpleRight: 0,\n  mouthRollLower: 0,\n  mouthRollUpper: 0,\n  mouthShrugLower: 0,\n  mouthShrugUpper: 0,\n  mouthPressLeft: 0,\n  mouthPressRight: 0,\n  mouthLowerDownLeft: 0,\n  mouthLowerDownRight: 0,\n  mouthUpperUpLeft: 0,\n  mouthUpperUpRight: 0,\n  mouthOpen: 0,\n  // Jaw\n  jawOpen: 0,\n  jawForward: 0,\n  jawLeft: 0,\n  jawRight: 0,\n  // Eyes\n  eyeBlinkLeft: 0,\n  eyeBlinkRight: 0,\n  eyeSquintLeft: 0,\n  eyeSquintRight: 0,\n  eyeWideLeft: 0,\n  eyeWideRight: 0,\n  eyeLookInLeft: 0,\n  eyeLookInRight: 0,\n  eyeLookOutLeft: 0,\n  eyeLookOutRight: 0,\n  eyeLookUpLeft: 0,\n  eyeLookUpRight: 0,\n  eyeLookDownLeft: 0,\n  eyeLookDownRight: 0,\n  // Brows\n  browDownLeft: 0,\n  browDownRight: 0,\n  browInnerUp: 0,\n  browOuterUpLeft: 0,\n  browOuterUpRight: 0,\n  // Cheeks\n  cheekPuff: 0,\n  cheekSquintLeft: 0,\n  cheekSquintRight: 0,\n  // Nose\n  noseSneerLeft: 0,\n  noseSneerRight: 0,\n  // Tongue\n  tongueOut: 0,\n  chestBreathing: 0\n};\n\n// Define the EmotionData type\ninterface EmotionData {\n  predictions?: Array<{\n    emotions?: {\n      happy: number;\n      sad: number;\n      surprise: number;\n      fear: number;\n      anger: number;\n      disgust: number;\n      neutral: number;\n      [key: string]: number;\n    };\n  }>;\n}\n\n// Map Hume emotions to blendshape values\nconst emotionToBlendShape = (emotionData: EmotionData | null): BlendShape => {\n  const blendshapes = { ...defaultBlendShapes };\n  \n  if (!emotionData) return blendshapes;\n  \n  try {\n    const { predictions } = emotionData;\n    if (!predictions || !predictions[0]?.emotions) return blendshapes;\n    \n    const defaultEmotions = {\n      happy: 0,\n      sad: 0,\n      surprise: 0,\n      fear: 0,\n      anger: 0,\n      disgust: 0,\n      neutral: 1\n    };\n    \n    const emotions = predictions[0].emotions || defaultEmotions;\n    \n    // Map emotions to facial expressions\n    if (emotions.happy > 0.3) {\n      blendshapes.mouthSmileLeft = Math.min(1, emotions.happy * 1.5);\n      blendshapes.mouthSmileRight = Math.min(1, emotions.happy * 1.5);\n      blendshapes.eyeSquintLeft = Math.min(0.5, emotions.happy * 0.7);\n      blendshapes.eyeSquintRight = Math.min(0.5, emotions.happy * 0.7);\n    }\n    \n    if (emotions.sad > 0.3) {\n      blendshapes.mouthFrownLeft = Math.min(1, emotions.sad * 1.5);\n      blendshapes.mouthFrownRight = Math.min(1, emotions.sad * 1.5);\n      blendshapes.browInnerUp = Math.min(1, emotions.sad * 1.2);\n    }\n    \n    if (emotions.anger > 0.3) {\n      blendshapes.browDownLeft = Math.min(1, emotions.anger * 1.2);\n      blendshapes.browDownRight = Math.min(1, emotions.anger * 1.2);\n      blendshapes.mouthFrownLeft = Math.min(1, emotions.anger * 1.5);\n      blendshapes.mouthFrownRight = Math.min(1, emotions.anger * 1.5);\n      blendshapes.noseSneerLeft = Math.min(1, emotions.anger * 1.2);\n      blendshapes.noseSneerRight = Math.min(1, emotions.anger * 1.2);\n    }\n    \n    if (emotions.surprise > 0.3) {\n      blendshapes.eyeWideLeft = Math.min(1, emotions.surprise * 1.5);\n      blendshapes.eyeWideRight = Math.min(1, emotions.surprise * 1.5);\n      blendshapes.browInnerUp = Math.min(1, emotions.surprise * 1.2);\n      blendshapes.jawOpen = Math.min(0.7, emotions.surprise * 0.7);\n    }\n    \n    // Error handling is already done in the catch block above\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Error processing emotion data';\n    console.error('Error processing emotion data:', errorMessage);\n    // Return default blendshapes on error\n    return { ...defaultBlendShapes };\n  }\n  \n  return blendshapes;\n};\n\ninterface RPMHumeIntegrationProps {\n  emotionData?: any; // Hume AI response data\n  onAvatarLoaded?: (avatar: any) => void;\n  onEmotionDataProcessed?: (blendShapes: any) => void;\n  avatar?: any;\n}\n\nconst RPMHumeIntegration: React.FC<RPMHumeIntegrationProps> = ({\n  emotionData,\n  onAvatarLoaded,\n  onEmotionDataProcessed,\n  avatar,\n}) => {\n  const [currentPhoneme, setCurrentPhoneme] = useState<string | null>(null);\n  const [currentBlendShapes, setCurrentBlendShapes] = useState<BlendShape>({\n    // Initialize with some default values to prevent T-pose\n    eyeBlinkLeft: 0,\n    eyeBlinkRight: 0,\n    mouthSmileLeft: 0.1,\n    browInnerUp: 0.05,\n    chestBreathing: 0,\n  } as BlendShape);\n  const [idleAnimation, setIdleAnimation] = useState({ \n    breathing: 0,\n    blinkTimer: 0,\n    nextBlink: 3\n  });\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  \n  // Use the useAvatarBlendShapes hook\n  const { applyPhoneme, resetBlendShapes } = useAvatarBlendShapes(emotionData);\n  \n  const humeBlendShapes = emotionToBlendShape(emotionData);\n  \n  // Merge default blendshapes with the ones from the hook\n  const mergedBlendShapes = useMemo(() => {\n    return {\n      ...humeBlendShapes,\n      ...currentBlendShapes,\n      // Ensure Hume emotions override idle blinks when expressing\n      eyeBlinkLeft: humeBlendShapes.eyeBlinkLeft || currentBlendShapes.eyeBlinkLeft || 0,\n      eyeBlinkRight: humeBlendShapes.eyeBlinkRight || currentBlendShapes.eyeBlinkRight || 0\n    };\n  }, [humeBlendShapes, currentBlendShapes]);\n  \n  // Notify parent when blend shapes are updated\n  useEffect(() => {\n    if (onEmotionDataProcessed) {\n      onEmotionDataProcessed(mergedBlendShapes);\n    }\n  }, [mergedBlendShapes, onEmotionDataProcessed]);\n  \n  // Handle phoneme changes\n  useEffect(() => {\n    if (emotionData?.phoneme) {\n      applyPhoneme(emotionData.phoneme);\n    } else {\n      resetBlendShapes();\n    }\n  }, [emotionData?.phoneme, applyPhoneme, resetBlendShapes]);\n  \n  // Create a ref to store the avatar instance\n  const avatarRef = useRef<Group | null>(null);\n  \n  // Handle ref callback\n  const handleAvatarRef = useCallback((node: Group | null) => {\n    if (node) {\n      avatarRef.current = node;\n      if (onAvatarLoaded) {\n        onAvatarLoaded(node);\n      }\n    }\n  }, [onAvatarLoaded]);\n  const wsRef = useRef<WebSocket | null>(null);\n  const errorRef = useRef<string>('');\n  \n  // Update error ref when error state changes\n  useEffect(() => {\n    errorRef.current = error;\n  }, [error]);\n  const animationFrameRef = useRef<number>();\n  const lastUpdateTime = useRef(0);\n  \n  // Update idle animation\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setIdleAnimation(prev => {\n        const time = Date.now() / 1000;\n        const breathing = Math.sin(time * 0.5) * 0.02; // Subtle breathing\n        \n        // Blinking\n        let blinkTimer = prev.blinkTimer + 0.016; // ~60fps\n        let nextBlink = prev.nextBlink;\n        let blinkValue = 0;\n        \n        if (blinkTimer >= nextBlink) {\n          blinkValue = 1;\n          blinkTimer = 0;\n          nextBlink = 2 + Math.random() * 4; // Next blink in 2-6 seconds\n        } else if (blinkTimer < 0.15) {\n          blinkValue = Math.sin((blinkTimer / 0.15) * Math.PI);\n        }\n        \n        // Apply idle animations to blend shapes\n        setCurrentBlendShapes(shapes => ({\n          ...shapes,\n          eyeBlinkLeft: blinkValue,\n          eyeBlinkRight: blinkValue,\n          chestBreathing: breathing\n        }));\n        \n        return { breathing, blinkTimer, nextBlink };\n      });\n    }, 16); // ~60fps\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Connect to Hume WebSocket\n  useEffect(() => {\n    const connectWebSocket = () => {\n      try {\n        // Get API key from environment or localStorage\n        const apiKey = process.env.REACT_APP_HUME_API_KEY || \n                      localStorage.getItem('humeApiKey') || \n                      '';\n        \n        if (!apiKey) {\n          console.error('No Hume API key found. Please set REACT_APP_HUME_API_KEY or save it in settings.');\n          setError('No Hume API key configured');\n          return;\n        }\n        \n        const wsUrl = `wss://api.hume.ai/v0/stream/models?apiKey=${apiKey}`;\n        \n        wsRef.current = new WebSocket(wsUrl);\n        \n        wsRef.current.onopen = () => {\n          console.log('Connected to Hume WebSocket');\n          setIsConnected(true);\n          setError('');\n          \n          // Send configuration\n          const config = {\n            data: {\n              models: {\n                face: {}\n              },\n              data: \"\" // Will be replaced with actual image data\n            }\n          };\n          \n          wsRef.current?.send(JSON.stringify(config));\n        };\n        \n        wsRef.current.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            if (data.face) {\n              const newBlendShapes = emotionToBlendShape(data.face);\n              setCurrentBlendShapes(newBlendShapes);\n            }\n          } catch (e) {\n            console.error('Error processing WebSocket message:', e);\n          }\n        };\n        \n        wsRef.current.onerror = (event) => {\n          const errorMessage = 'WebSocket connection error';\n          console.error('WebSocket error:', event);\n          setError(errorMessage);\n          setIsConnected(false);\n        };\n        \n        wsRef.current.onclose = (event) => {\n          console.log('WebSocket connection closed', event.code, event.reason);\n          setIsConnected(false);\n          if (event.code !== 1000) { // 1000 is normal closure\n            const errorMessage = `WebSocket closed with code ${event.code}: ${event.reason || 'Unknown reason'}`;\n            setError(errorMessage);\n          }\n          // Attempt to reconnect after a delay\n          setTimeout(connectWebSocket, 3000);\n        };\n        \n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to connect to Hume EVI';\n        console.error('Error setting up WebSocket:', errorMessage);\n        setError(errorMessage);\n        setIsConnected(false);\n      }\n    };\n    \n    connectWebSocket();\n    \n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n  \n  // Simple animation loop for lip-sync (placeholder)\n  useEffect(() => {\n    let frameCount = 0;\n    \n    const animate = (time: number) => {\n      // Throttle updates to ~30fps\n      if (time - lastUpdateTime.current > 33) {\n        lastUpdateTime.current = time;\n        \n        // Simple mouth movement based on time\n        frameCount++;\n        const sinValue = Math.sin(frameCount * 0.1) * 0.5 + 0.5;\n        \n        setCurrentBlendShapes(prev => ({\n          ...prev,\n          jawOpen: Math.max(0.1, sinValue * 0.5), // Keep some jaw open\n          mouthClose: 1 - sinValue * 0.8, // Opposite of jawOpen for more natural look\n        }));\n      }\n      \n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    \n    animationFrameRef.current = requestAnimationFrame(animate);\n    \n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n  \n  // Use avatar from props or get from localStorage\n  const getAvatarUrl = () => {\n    if (avatar?.modelUrl) {\n      return avatar.modelUrl;\n    }\n    \n    // Try to get from localStorage\n    const storedAvatars = localStorage.getItem('rpm_avatars');\n    if (storedAvatars) {\n      const avatars = JSON.parse(storedAvatars);\n      if (avatars.length > 0) {\n        return avatars[0].url;\n      }\n    }\n    \n    // Fallback to a working demo avatar\n    return 'https://models.readyplayer.me/64c3f39b6db681b862c7e479.glb';\n  };\n  \n  const avatarUrl = getAvatarUrl();\n  \n  return (\n    <div style={{ width: '100%', height: '100vh', display: 'flex', flexDirection: 'column' }}>\n      <div style={{ padding: '1rem', background: '#f0f0f0' }}>\n        <h2>RPM Avatar with Hume Integration</h2>\n        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>\n          <span>Status: </span>\n          <span style={{ \n            color: isConnected ? 'green' : 'red',\n            fontWeight: 'bold'\n          }}>\n            {isConnected ? '🟢 Connected to Hume' : '🔴 Not Connected'}\n          </span>\n          {error && <span style={{ color: 'red', marginLeft: '1rem' }}>{error}</span>}\n        </div>\n        <div style={{ marginTop: '0.5rem', fontSize: '0.9rem', color: '#666' }}>\n          {!isConnected && 'Avatar will show idle animations only. Connect to Hume for full emotion support.'}\n        </div>\n      </div>\n      \n      <div style={{ flex: 1, position: 'relative' }}>\n        <Canvas\n          camera={{ \n            position: [0, 1.6, 2.5],  // Position camera at eye level, facing the avatar\n            fov: 45,                  // Field of view for natural perspective\n            near: 0.1,\n            far: 100\n          }}\n          style={{ background: '#f0f0f0' }}\n        >\n          <ambientLight intensity={0.5} />\n          <directionalLight position={[0, 5, 5]} intensity={0.5} />\n          <Suspense fallback={<AvatarLoadingFallback />}>\n            <SimulationAvatar3D \n              ref={handleAvatarRef}\n              avatarUrl={avatarUrl}\n              blendShapes={mergedBlendShapes}\n              position={[0, -0.5, 0]}  // Center the avatar\n              scale={[1, 1, 1]}\n              onLoaded={() => {\n                console.log('Avatar loaded');\n                if (onAvatarLoaded) {\n                  onAvatarLoaded(avatarRef.current);\n                }\n              }}\n              onModelLoaded={(model: Group) => {\n                console.log('Avatar model loaded:', model);\n                console.log('Current blend shapes:', mergedBlendShapes);\n              }}\n            />\n          </Suspense>\n          <Html position={[0, 2.5, 0]}>\n            <div style={{ \n              background: 'rgba(0,0,0,0.7)', \n              color: 'white', \n              padding: '10px',\n              borderRadius: '5px',\n              fontSize: '12px',\n              whiteSpace: 'pre'\n            }}>\n              Avatar URL: {avatarUrl.split('/').pop()}\n              {'\\n'}Breathing: {idleAnimation.breathing.toFixed(2)}\n              {'\\n'}Blink Timer: {idleAnimation.blinkTimer.toFixed(2)}\n              {'\\n'}Eye Blink: {(mergedBlendShapes.eyeBlinkLeft || 0).toFixed(2)}\n            </div>\n          </Html>\n          <OrbitControls \n            enablePan={false}\n            enableZoom={false}\n            enableRotate={false}  // Disable rotation for chat view\n            autoRotate={false}    // Explicitly disable auto-rotation\n            target={[0, 1.2, 0]}  // Look at chest/face area\n          />\n        </Canvas>\n      </div>\n    </div>\n  );\n};\n\nexport default RPMHumeIntegration;\n"],"names":["emotionData","blendShapes","setBlendShapes","useState","extractEmotions","useCallback","data","emotions","_data$face","_data$face$prediction","_data$face$prediction2","_data$face2","_data$predictions","_data$predictions$","face","predictions","forEach","e","name","score","Object","assign","error","console","applyPhoneme","phoneme","prev","_objectSpread","mouthClose","mouthOpen","mouthPucker","mouthFunnel","jawOpen","resetBlendShapes","mouthSmileLeft","mouthSmileRight","useEffect","newBlendShapes","happy","sad","angry","surprised","neutral","_objectWithoutProperties","_excluded","mouthFrownLeft","mouthFrownRight","mouthPressLeft","mouthPressRight","mouthLowerDownLeft","mouthLowerDownRight","mouthUpperUpLeft","mouthUpperUpRight","mouthRollLower","mouthRollUpper","mouthShrugLower","mouthShrugUpper","eyeBlinkLeft","eyeBlinkRight","eyeSquintLeft","eyeSquintRight","eyeWideLeft","eyeWideRight","eyeLookInLeft","eyeLookInRight","eyeLookOutLeft","eyeLookOutRight","eyeLookUpLeft","eyeLookUpRight","eyeLookDownLeft","eyeLookDownRight","browDownLeft","browDownRight","browInnerUp","browOuterUpLeft","browOuterUpRight","cheekPuff","cheekSquintLeft","cheekSquintRight","noseSneerLeft","noseSneerRight","tongueOut","jawForward","jawLeft","jawRight","Math","max","toString","toUpperCase","includes","mapEmotionsToBlendShapes","SimulationAvatar3D","lazy","AvatarLoadingFallback","_jsxs","children","_jsx","args","color","defaultBlendShapes","mouthLeft","mouthRight","mouthStretchLeft","mouthStretchRight","mouthDimpleLeft","mouthDimpleRight","chestBreathing","emotionToBlendShape","blendshapes","_predictions$","defaultEmotions","surprise","fear","anger","disgust","min","errorMessage","Error","message","_ref","onAvatarLoaded","onEmotionDataProcessed","avatar","currentPhoneme","setCurrentPhoneme","currentBlendShapes","setCurrentBlendShapes","idleAnimation","setIdleAnimation","breathing","blinkTimer","nextBlink","isConnected","setIsConnected","setError","useAvatarBlendShapes","humeBlendShapes","mergedBlendShapes","useMemo","avatarRef","useRef","handleAvatarRef","node","current","wsRef","errorRef","animationFrameRef","lastUpdateTime","interval","setInterval","time","Date","now","sin","blinkValue","random","PI","shapes","clearInterval","connectWebSocket","apiKey","process","wsUrl","concat","WebSocket","onopen","_wsRef$current","log","send","JSON","stringify","models","onmessage","event","parse","onerror","onclose","code","reason","setTimeout","close","cancelAnimationFrame","frameCount","animate","sinValue","requestAnimationFrame","avatarUrl","getAvatarUrl","modelUrl","storedAvatars","localStorage","getItem","avatars","length","url","style","width","height","display","flexDirection","padding","background","gap","alignItems","fontWeight","marginLeft","marginTop","fontSize","flex","position","Canvas","camera","fov","near","far","intensity","Suspense","fallback","ref","scale","onLoaded","onModelLoaded","model","Html","borderRadius","whiteSpace","split","pop","toFixed","OrbitControls","enablePan","enableZoom","enableRotate","autoRotate","target"],"sourceRoot":""}