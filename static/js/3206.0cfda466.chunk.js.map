{"version":3,"file":"static/js/3206.0cfda466.chunk.js","mappings":"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","sources":["config/animationConfig.ts","components/AvatarView.js","webpack://hub/./src/components/CoachCallTab.css?e356","components/CoachCallTab.tsx"],"sourcesContent":["// Animation configuration for different avatar types\nexport interface AnimationSet {\n  idle: string[];\n  talk: string[];\n  flirt?: string[];\n  laugh?: string[];\n  think?: string[];\n}\n\nexport const AVATAR_ANIMATIONS: Record<string, AnimationSet> = {\n  male: {\n    idle: [\n      '/animations/M_Standing_Idle_001.glb',\n      '/animations/M_Standing_Idle_002.glb',\n      '/animations/M_Standing_Idle_Variations_001.glb',\n      '/animations/M_Standing_Idle_Variations_002.glb',\n      '/animations/M_Standing_Idle_Variations_003.glb',\n    ],\n    talk: [\n      '/animations/M_Talking_Variations_001.glb',\n      '/animations/M_Talking_Variations_002.glb',\n      '/animations/M_Talking_Variations_003.glb',\n      '/animations/M_Talking_Variations_004.glb',\n      '/animations/M_Talking_Variations_005.glb',\n    ]\n  },\n  female: {\n    idle: [\n      '/animations/feminine/idle/F_Standing_Idle_001.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_001.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_002.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_003.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_004.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_005.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_006.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_007.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_008.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_009.glb',\n    ],\n    talk: [\n      '/animations/feminine/talk/F_Talking_Variations_001.glb',\n      '/animations/feminine/talk/F_Talking_Variations_002.glb',\n      '/animations/feminine/talk/F_Talking_Variations_003.glb',\n      '/animations/feminine/talk/F_Talking_Variations_004.glb',\n      '/animations/feminine/talk/F_Talking_Variations_005.glb',\n      '/animations/feminine/talk/F_Talking_Variations_006.glb',\n    ]\n  },\n  neutral: {\n    // Fallback to male animations for neutral/undefined types\n    idle: [\n      '/animations/M_Standing_Idle_001.glb',\n      '/animations/M_Standing_Idle_Variations_001.glb',\n    ],\n    talk: [\n      '/animations/M_Talking_Variations_001.glb',\n      '/animations/M_Talking_Variations_002.glb',\n    ]\n  }\n};\n\n// Helper function to get random animation from a set\nexport function getRandomAnimation(type: 'male' | 'female' | 'neutral', category: keyof AnimationSet): string {\n  const animations = AVATAR_ANIMATIONS[type][category];\n  if (!animations || animations.length === 0) {\n    // Fallback to first idle animation if category doesn't exist\n    return AVATAR_ANIMATIONS[type].idle[0];\n  }\n  return animations[Math.floor(Math.random() * animations.length)];\n}\n\n// Helper to get animation set for avatar\nexport function getAnimationsForAvatar(avatarType: 'male' | 'female' | 'neutral' | undefined): AnimationSet {\n  return AVATAR_ANIMATIONS[avatarType || 'neutral'];\n}\n","import React, { Suspense, useRef, useEffect } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { useGLTF, OrbitControls, Stage, useAnimations } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { AVATAR_ANIMATIONS } from '../config/animationConfig';\n\nfunction Model(props) {\n  const group = useRef();\n  const { scene, animations } = useGLTF('/avatars/AngelChick.glb');\n  const { actions, mixer } = useAnimations(animations, group);\n  \n  // Load and play idle animation\n  useEffect(() => {\n    const loadIdleAnimation = async () => {\n      try {\n        // Get feminine idle animations from config\n        const idleAnimations = AVATAR_ANIMATIONS.female.idle;\n        if (idleAnimations && idleAnimations.length > 0) {\n          // Pick a random idle animation\n          const randomIdle = idleAnimations[Math.floor(Math.random() * idleAnimations.length)];\n          \n          // Load the animation\n          const loader = new GLTFLoader();\n          const animData = await loader.loadAsync(randomIdle);\n          \n          if (animData.animations && animData.animations.length > 0) {\n            // Add animation to mixer\n            const clip = animData.animations[0];\n            const action = mixer.clipAction(clip);\n            action.play();\n            \n            // Make it loop\n            action.setLoop(THREE.LoopRepeat, Infinity);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading idle animation:', error);\n      }\n    };\n    \n    loadIdleAnimation();\n    \n    return () => {\n      // Cleanup animations\n      mixer.stopAllAction();\n    };\n  }, [mixer]);\n  \n  useFrame((state, delta) => {\n    mixer.update(delta);\n  });\n  \n  return <group ref={group}><primitive object={scene} {...props} /></group>;\n}\n\n// Preload the model\nuseGLTF.preload('/avatars/AngelChick.glb');\n\nexport default function AvatarView() {\n  return (\n    <Canvas dpr={[1, 2]} camera={{ fov: 45, position: [0, 1.5, 4] }} style={{ width: '100%', height: '100vh' }}>\n      <color attach=\"background\" args={['#1a1a1a']} />\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[5, 5, 5]} />\n      <Suspense fallback={null}>\n        <Stage environment=\"city\" intensity={0.6}>\n          <Model scale={1.5} position={[0, -1, 0]} />\n        </Stage>\n      </Suspense>\n      <OrbitControls \n        enablePan={false}\n        minDistance={2}\n        maxDistance={6}\n        target={[0, 0.5, 0]}\n      />\n    </Canvas>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {};","import React, { useState, useEffect, useRef } from 'react';\nimport AvatarView from './AvatarView';\nimport './CoachCallTab.css';\nimport { useVoice } from \"@humeai/voice-react\"; // Import useVoice\n\nconst CoachCallTab: React.FC = () => {\n  const [isVideoVisible, setIsVideoVisible] = useState(true);\n  const [userStream, setUserStream] = useState<MediaStream | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  \n  const { connect, disconnect, status, messages } = useVoice(); // Initialize useVoice\n\n  const toggleUserVideo = async () => {\n    if (isVideoVisible && userStream) {\n      userStream.getTracks().forEach(track => track.stop());\n      setUserStream(null);\n      setIsVideoVisible(false);\n    } else {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });\n        setUserStream(stream);\n        setIsVideoVisible(true);\n      } catch (err) {\n        console.error(\"Error accessing webcam:\", err);\n        setIsVideoVisible(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (isVideoVisible && userStream && videoRef.current) {\n      videoRef.current.srcObject = userStream;\n    }\n  }, [isVideoVisible, userStream]);\n\n  useEffect(() => {\n    let active = true;\n    if (isVideoVisible) {\n        const initVideo = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });\n                if (active) {\n                  setUserStream(stream);\n                }\n            } catch (err) {\n                console.error(\"Error accessing webcam on initial load:\", err);\n                if (active) {\n                  setIsVideoVisible(false);\n                }\n            }\n        };\n        initVideo();\n    }\n    return () => {\n      active = false;\n      if (userStream) {\n        userStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Log Hume EVI messages and update UI\n  useEffect(() => {\n    if (messages.length > 0) {\n      console.log(\"Hume EVI Messages:\", messages);\n      // This effect will run when messages array updates\n    }\n  }, [messages]);\n\n  const handleMicToggle = () => {\n    if (status.value === 'connected') {\n      disconnect();\n    } else if (status.value === 'disconnected' || status.value === 'error') {\n      connect().catch(e => console.error(\"Hume EVI Connection Error:\", e));\n    }\n  };\n\n  const getMicButtonText = () => {\n    switch (status.value) {\n      case 'disconnected':\n        return 'Connect Mic';\n      case 'connecting':\n        return 'Connecting...';\n      case 'connected':\n        return 'Disconnect Mic';\n      case 'error':\n        return 'Mic Error (Retry)';\n      default:\n        return 'Mic';\n    }\n  };\n\n  return (\n    <div className=\"coach-call-container\">\n      <div className=\"main-panel\">\n        <div className=\"npc-panel\">\n          <h2>Coach NPC</h2>\n          <div className=\"avatar-container\">\n            <AvatarView />\n          </div>\n        </div>\n        <div className=\"user-panel\">\n          <div className=\"user-video-controls\">\n            <h3>You</h3>\n            <button onClick={toggleUserVideo} type=\"button\">\n              {isVideoVisible && userStream ? 'Turn Off Video' : 'Turn On Video'}\n            </button>\n          </div>\n          {isVideoVisible && userStream && (\n            <div className=\"user-video-container\">\n              <video ref={videoRef} autoPlay playsInline muted style={{ width: '100%', transform: 'scaleX(-1)' }} />\n            </div>\n          )}\n          {(!isVideoVisible || !userStream) && (\n            <div className=\"user-video-placeholder\">\n              Your video is off.\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"communication-panel\">\n        <button onClick={handleMicToggle} type=\"button\" disabled={status.value === 'connecting'}>\n          {getMicButtonText()}\n        </button>\n        <input type=\"text\" placeholder=\"Type your message (text input coming soon)...\" readOnly />\n        <button type=\"button\">Send (TBD)</button>\n      </div>\n      <div className=\"chat-history-panel\">\n        {messages.map((msg, index) => {\n          // User's finalized chat message\n          if (msg.type === 'user_message' && msg.message && typeof msg.message.content === 'string') {\n            return <p key={`user-${index}`}><strong>You:</strong> {msg.message.content}</p>;\n          }\n          // Assistant's chat message\n          if (msg.type === 'assistant_message' && msg.message && typeof msg.message.content === 'string') {\n            return <p key={`assistant-${index}`}><strong>NPC:</strong> {msg.message.content}</p>;\n          }\n          // Interim user transcript\n          /*\n          if (msg.type === 'transcript_chunk' && msg.message?.text) {\n            // console.log('User transcript chunk:', msg.message.text); // Log if needed\n            // Example: Display interim transcript if desired for live feedback:\n            // return <p key={`transcript-${index}`} style={{ fontStyle: 'italic', color: 'grey' }}>{msg.message.text}</p>;\n            return null; // Not displaying chunks in the main chat UI for now\n          }\n          */\n          \n          // Fallback for any other message types you might want to log or handle\n          // console.log('Other EVI message type:', msg.type, msg); \n          return null; \n        })}\n        {messages.length === 0 && <p>Chat history will appear here...</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default CoachCallTab;\n"],"names":["AVATAR_ANIMATIONS","male","idle","talk","female","neutral","Model","props","group","useRef","scene","animations","useGLTF","actions","mixer","useAnimations","useEffect","async","idleAnimations","length","randomIdle","Math","floor","random","loader","GLTFLoader","animData","loadAsync","clip","action","clipAction","play","setLoop","THREE","Infinity","error","console","loadIdleAnimation","stopAllAction","useFrame","state","delta","update","_jsx","ref","children","_objectSpread","object","AvatarView","_jsxs","Canvas","dpr","camera","fov","position","style","width","height","attach","args","intensity","Suspense","fallback","Stage","environment","scale","OrbitControls","enablePan","minDistance","maxDistance","target","preload","CoachCallTab","isVideoVisible","setIsVideoVisible","useState","userStream","setUserStream","videoRef","connect","disconnect","status","messages","useVoice","current","srcObject","active","stream","navigator","mediaDevices","getUserMedia","video","audio","err","initVideo","getTracks","forEach","track","stop","log","className","onClick","type","autoPlay","playsInline","muted","transform","handleMicToggle","value","catch","e","disabled","getMicButtonText","placeholder","readOnly","map","msg","index","message","content","concat"],"sourceRoot":""}