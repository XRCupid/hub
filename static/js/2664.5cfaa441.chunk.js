"use strict";(self.webpackChunkhub=self.webpackChunkhub||[]).push([[2664,6814,7798],{7798:(e,n,t)=>{t.r(n),t.d(n,{LightweightPostProcessing:()=>s});t(65043);var o=t(23019),i=t(57047),r=t(70579);const s=e=>{let{enabled:n=!0,quality:t="medium"}=e;const s={low:{bloom:{intensity:.5,kernelSize:i.h_.SMALL},chromatic:2e-4,noise:.02,vignette:.3,smaa:!1},medium:{bloom:{intensity:.8,kernelSize:i.h_.MEDIUM},chromatic:3e-4,noise:.03,vignette:.4,smaa:!0},high:{bloom:{intensity:1,kernelSize:i.h_.LARGE},chromatic:4e-4,noise:.04,vignette:.5,smaa:!0}}[t];if(!n)return(0,r.jsx)(r.Fragment,{});const a=(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.mK,{intensity:s.bloom.intensity,kernelSize:s.bloom.kernelSize,luminanceThreshold:.9,luminanceSmoothing:.025}),(0,r.jsx)(o.E8,{offset:[s.chromatic,s.chromatic],radialModulation:!1,modulationOffset:0}),(0,r.jsx)(o.fL,{premultiply:!0,blendFunction:i.cf.ADD,opacity:s.noise}),(0,r.jsx)(o.fE,{darkness:s.vignette,offset:.2})]});return s.smaa?(0,r.jsxs)(o.s0,{multisampling:0,children:[(0,r.jsx)(o.Jp,{}),a]}):(0,r.jsx)(o.s0,{multisampling:0,children:a})}},22664:(e,n,t)=>{t.r(n),t.d(n,{StylizedAvatarScene:()=>f});var o=t(65043),i=t(71985),r=t(34226),s=t(97376),a=t(50007),l=t(39581),c=t(7798),u=t(66814),m=t(29408),d=t(70579);const f=e=>{let{avatarUrl:n,trackingData:t,postProcessingStyle:f="lightweight",quality:v="medium"}=e;const[h,p]=(0,o.useState)(.5);return(0,d.jsxs)("div",{style:{width:"100%",height:"100%",position:"relative"},children:[(0,d.jsxs)(i.Hl,{camera:{position:[0,0,2.5],fov:45},gl:{antialias:!1,toneMapping:m.ACESFilmicToneMapping,toneMappingExposure:1.2},shadows:!0,children:[(0,d.jsx)("ambientLight",{intensity:.4,color:"#FFE4E1"}),(0,d.jsx)("directionalLight",{position:[5,5,5],intensity:.8,color:"#FFF0F5",castShadow:!0,"shadow-mapSize":[1024,1024]}),(0,d.jsx)("directionalLight",{position:[-3,3,-3],intensity:.4,color:"#E0FFFF"}),(0,d.jsx)("spotLight",{position:[0,5,-5],intensity:.5,color:"#FFB6C1",angle:.6,penumbra:1}),(0,d.jsx)(o.Suspense,{fallback:null,children:(0,d.jsx)("group",{position:[0,-1,0],children:(0,d.jsx)(l.PresenceAvatar,{avatarUrl:n,trackingData:t,scale:1.2})})}),(0,d.jsx)(r._,{position:[0,-1,0],opacity:.3,scale:3,blur:2,far:3,color:"#8B7D7B"}),(0,d.jsx)(s.OH,{preset:"studio"}),(0,d.jsx)(a.N,{enablePan:!1,enableZoom:!0,minDistance:1.5,maxDistance:5,target:[0,0,0]}),"lightweight"===f&&(0,d.jsx)(c.LightweightPostProcessing,{quality:v}),"risograph"===f&&(0,d.jsx)(u.RisographPostProcessing,{intensity:h,preset:"low"===v?"subtle":"high"===v?"intense":"medium"})]}),(0,d.jsxs)("div",{style:{position:"absolute",bottom:20,left:20,background:"rgba(255, 255, 255, 0.9)",padding:"15px",borderRadius:"10px",boxShadow:"0 2px 10px rgba(0,0,0,0.1)"},children:[(0,d.jsx)("h4",{style:{margin:"0 0 10px 0"},children:"Post-Processing Style"}),(0,d.jsxs)("select",{value:f,onChange:e=>window.location.reload(),style:{marginBottom:"10px",width:"100%"},children:[(0,d.jsx)("option",{value:"none",children:"None"}),(0,d.jsx)("option",{value:"lightweight",children:"Lightweight Effects"}),(0,d.jsx)("option",{value:"risograph",children:"Risograph Style"})]}),"risograph"===f&&(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("h4",{style:{margin:"10px 0 5px 0"},children:"Intensity"}),(0,d.jsx)("input",{type:"range",min:"0",max:"1",step:"0.1",value:h,onChange:e=>p(parseFloat(e.target.value)),style:{width:"100%"}})]})]})]})}},66814:(e,n,t)=>{t.r(n),t.d(n,{Bloom:()=>r.mK,BrightnessContrast:()=>r.UN,ChromaticAberration:()=>r.E8,DotScreen:()=>r.m4,HueSaturation:()=>r.Tl,Noise:()=>r.fL,RisographPostProcessing:()=>d,Vignette:()=>r.fE});var o=t(65043),i=t(79183),r=t(23019),s=t(57047),a=t(29408),l=t(23521);class c extends l.o{constructor(e,n){super(),this.textureID=void 0!==n?n:"tDiffuse",e instanceof a.ShaderMaterial?(this.uniforms=e.uniforms,this.material=e):e&&(this.uniforms=a.UniformsUtils.clone(e.uniforms),this.material=new a.ShaderMaterial({name:void 0!==e.name?e.name:"unspecified",defines:Object.assign({},e.defines),uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})),this.fsQuad=new l.F(this.material)}render(e,n,t){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=t.texture),this.fsQuad.material=this.material,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(n),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),this.fsQuad.render(e))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}var u=t(70579);const m={uniforms:{tDiffuse:{value:null},time:{value:0},paperTexture:{value:.15},inkBleed:{value:.02},registration:{value:new a.Vector2(.001,.001)},colorSeparation:{value:.003},grainAmount:{value:.08}},vertexShader:"\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform float time;\n    uniform float paperTexture;\n    uniform float inkBleed;\n    uniform vec2 registration;\n    uniform float colorSeparation;\n    uniform float grainAmount;\n    \n    varying vec2 vUv;\n    \n    // Simple noise function\n    float random(vec2 st) {\n      return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n    }\n    \n    // Paper texture simulation\n    float paperNoise(vec2 uv) {\n      vec2 i = floor(uv * 300.0);\n      vec2 f = fract(uv * 300.0);\n      float a = random(i);\n      float b = random(i + vec2(1.0, 0.0));\n      float c = random(i + vec2(0.0, 1.0));\n      float d = random(i + vec2(1.0, 1.0));\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n    }\n    \n    // Halftone pattern\n    float halftone(vec2 uv, float size) {\n      vec2 p = mod(uv * size, 1.0);\n      float d = distance(p, vec2(0.5));\n      return smoothstep(0.3, 0.32, d);\n    }\n    \n    void main() {\n      // Misregistration effect\n      vec2 uvR = vUv + registration * sin(time * 0.5);\n      vec2 uvG = vUv;\n      vec2 uvB = vUv - registration * cos(time * 0.3);\n      \n      // Color separation\n      vec3 colorR = texture2D(tDiffuse, uvR + vec2(colorSeparation, 0.0)).rgb;\n      vec3 colorG = texture2D(tDiffuse, uvG).rgb;\n      vec3 colorB = texture2D(tDiffuse, uvB - vec2(colorSeparation, 0.0)).rgb;\n      \n      vec3 color = vec3(colorR.r, colorG.g, colorB.b);\n      \n      // Convert to limited color palette (risograph style)\n      vec3 risoColors[5];\n      risoColors[0] = vec3(1.0, 0.4, 0.6);  // Fluorescent Pink\n      risoColors[1] = vec3(0.0, 0.7, 0.9);  // Blue\n      risoColors[2] = vec3(1.0, 0.9, 0.0);  // Yellow\n      risoColors[3] = vec3(0.0, 0.6, 0.4);  // Green\n      risoColors[4] = vec3(1.0, 0.3, 0.0);  // Orange\n      \n      // Find closest riso color\n      float minDist = 999.0;\n      vec3 closestColor = risoColors[0];\n      for (int i = 0; i < 5; i++) {\n        float dist = distance(color, risoColors[i]);\n        if (dist < minDist) {\n          minDist = dist;\n          closestColor = risoColors[i];\n        }\n      }\n      \n      // Mix original with riso color\n      color = mix(color, closestColor, 0.3);\n      \n      // Add halftone effect\n      float lum = dot(color, vec3(0.299, 0.587, 0.114));\n      float pattern = halftone(vUv, 120.0);\n      color *= mix(0.8, 1.0, pattern * lum);\n      \n      // Ink bleeding simulation\n      vec2 bleedOffset = vec2(\n        sin(vUv.y * 200.0 + time) * inkBleed,\n        cos(vUv.x * 200.0 + time) * inkBleed\n      );\n      vec3 bleedColor = texture2D(tDiffuse, vUv + bleedOffset).rgb;\n      color = mix(color, bleedColor, 0.1);\n      \n      // Paper texture\n      float paper = paperNoise(vUv + time * 0.01);\n      color = mix(color, vec3(0.95, 0.93, 0.88), paper * paperTexture);\n      \n      // Film grain\n      float grain = random(vUv + time) * grainAmount;\n      color += vec3(grain) - grainAmount * 0.5;\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  "},d=e=>{let{intensity:n=.5,preset:t="medium"}=e;const{gl:a,size:l}=(0,i.D)(),d=(0,o.useRef)(),f={subtle:{chromaticAberration:2e-4,bloom:.3,noise:.02,vignette:.3,dotScreen:0,saturation:-.1,contrast:.1,colorA:"#FF69B4",colorB:"#34A85A",colorC:"#FFC107",halftoneScale:120,inkBleed:.02,paperTexture:.15,noiseAmount:.08},medium:{chromaticAberration:5e-4,bloom:.5,noise:.05,vignette:.5,dotScreen:.3,saturation:-.2,contrast:.2,colorA:"#FF69B4",colorB:"#34A85A",colorC:"#FFC107",halftoneScale:120,inkBleed:.02,paperTexture:.15,noiseAmount:.08},intense:{chromaticAberration:.001,bloom:.7,noise:.08,vignette:.7,dotScreen:.5,saturation:-.3,contrast:.3,colorA:"#FF69B4",colorB:"#34A85A",colorC:"#FFC107",halftoneScale:120,inkBleed:.02,paperTexture:.15,noiseAmount:.08}}[t],v=(0,o.useMemo)((()=>{const e=new c(m);return e.uniforms.resolution.value.set(l.width,l.height),e.uniforms.colorSeparation.value=.002*n,e.uniforms.grainAmount.value=.05*n,e.uniforms.paperTexture.value=f.paperTexture*n,e.uniforms.inkBleed.value=f.inkBleed*n,e}),[l,n,f]);return(0,i.F)((e=>{v&&(v.uniforms.time.value=e.clock.elapsedTime)})),(0,u.jsxs)(r.s0,{ref:d,children:[(0,u.jsx)(r.mK,{intensity:f.bloom,kernelSize:s.h_.LARGE,luminanceThreshold:.9,luminanceSmoothing:.025,mipmapBlur:!0}),(0,u.jsx)(r.E8,{offset:[f.chromaticAberration,.5*f.chromaticAberration],radialModulation:!0,modulationOffset:.15}),(0,u.jsx)(r.Tl,{hue:0,saturation:f.saturation,blendFunction:s.cf.NORMAL}),(0,u.jsx)(r.UN,{brightness:0,contrast:f.contrast,blendFunction:s.cf.NORMAL}),(0,u.jsx)(r.fL,{premultiply:!0,blendFunction:s.cf.ADD,opacity:f.noise}),(0,u.jsx)(r.fE,{darkness:f.vignette,offset:.3,blendFunction:s.cf.NORMAL}),(0,u.jsx)(r.bt,{mode:s.se.ACES_FILMIC,resolution:256,whitePoint:4,middleGrey:.6,minLuminance:.01,averageLuminance:1,adaptationRate:1,blendFunction:s.cf.NORMAL})]})}}}]);
//# sourceMappingURL=2664.5cfaa441.chunk.js.map