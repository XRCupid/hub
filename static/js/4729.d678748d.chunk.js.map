{"version":3,"file":"static/js/4729.d678748d.chunk.js","mappings":"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","sources":["webpack://hub/./src/components/DatingSimulationFlow.css?1962","utils/avatarGenerator.ts","components/RPMVideoCall.tsx","components/UserPreferences.tsx","components/DatingSimulationFlow.tsx","webpack://hub/./src/components/AvatarGeneration.css?2b8c","components/RPMAvatarCreatorModal.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// Avatar Generator - Creates diverse RPM avatars based on user preferences\nimport { RPMAvatarConfig } from './rpmAvatars';\nimport { rpmService } from '../services/readyPlayerMeService';\nimport { ReadyPlayerMeService } from '../services/readyPlayerMeService';\n\nexport type Gender = 'male' | 'female' | 'nonbinary';\nexport type PersonalityType = 'outgoing' | 'shy' | 'intellectual' | 'artistic' | 'adventurous' | 'romantic';\nexport type Ethnicity = 'asian' | 'black' | 'hispanic' | 'white' | 'mixed' | 'other';\nexport type BodyType = 'halfbody' | 'fullbody';\nexport type AvatarStyle = 'realistic' | 'cartoon' | 'stylized';\nexport type ConversationStyle = 'flirty' | 'intellectual' | 'casual' | 'romantic' | 'humorous';\n\nexport interface UserPreferences {\n  interestedIn: Gender | 'all';\n  ageRange: [number, number];\n  styles: AvatarStyle[];\n  ethnicities: string[];\n  bodyTypes: BodyType[];\n  personalityTypes: PersonalityType[];\n}\n\nexport interface GeneratedProfile {\n  id: string;\n  name: string;\n  age: number;\n  gender: Gender;\n  pronouns: string;\n  ethnicity: string;\n  bodyType: BodyType;\n  personalityType: PersonalityType;\n  bio: string;\n  interests: string[];\n  photos: string[];\n  avatar: RPMAvatarConfig;\n  conversationStyle: ConversationStyle;\n  difficulty: 'easy' | 'medium' | 'hard';\n}\n\n// Name pools for different genders and ethnicities\nconst NAME_POOLS = {\n  male: {\n    western: ['Alex', 'James', 'Michael', 'David', 'Chris', 'Ryan', 'Matt', 'Josh', 'Tyler', 'Brandon'],\n    latino: ['Diego', 'Carlos', 'Miguel', 'Luis', 'Jose', 'Antonio', 'Rafael', 'Gabriel', 'Adrian', 'Fernando'],\n    asian: ['Kai', 'Hiroshi', 'Jin', 'Ravi', 'Arjun', 'Wei', 'Takeshi', 'Kenji', 'Yuki', 'Satoshi'],\n    african: ['Malik', 'Jamal', 'Kwame', 'Kofi', 'Amari', 'Zion', 'Jabari', 'Khari', 'Omari', 'Tariq'],\n    middle_eastern: ['Omar', 'Hassan', 'Amir', 'Samir', 'Karim', 'Tariq', 'Yusuf', 'Rashid', 'Farid', 'Nabil']\n  },\n  female: {\n    western: ['Emma', 'Olivia', 'Sophia', 'Isabella', 'Mia', 'Charlotte', 'Amelia', 'Harper', 'Evelyn', 'Abigail'],\n    latino: ['Sofia', 'Isabella', 'Camila', 'Valentina', 'Natalia', 'Gabriela', 'Lucia', 'Elena', 'Victoria', 'Adriana'],\n    asian: ['Sakura', 'Yuki', 'Mei', 'Priya', 'Ananya', 'Li', 'Akiko', 'Hana', 'Suki', 'Rina'],\n    african: ['Zara', 'Amara', 'Nia', 'Kaia', 'Zuri', 'Amina', 'Aaliyah', 'Imani', 'Sanaa', 'Kira'],\n    middle_eastern: ['Layla', 'Amira', 'Yasmin', 'Nour', 'Zara', 'Leila', 'Fatima', 'Soraya', 'Dina', 'Rania']\n  },\n  nonbinary: {\n    universal: ['River', 'Sage', 'Quinn', 'Rowan', 'Phoenix', 'Avery', 'Jordan', 'Casey', 'Taylor', 'Morgan', 'Blake', 'Cameron', 'Drew', 'Emery', 'Finley']\n  }\n};\n\n// Personality-based bio templates\nconst BIO_TEMPLATES = {\n  outgoing: [\n    \"Life's too short to stay inside! I love meeting new people and trying new adventures. Always up for spontaneous plans!\",\n    \"Social butterfly who loves parties, concerts, and making new friends. Let's explore the city together!\",\n    \"Extrovert who gets energy from being around people. I love hosting dinner parties and game nights!\"\n  ],\n  shy: [\n    \"I'm a bit introverted but love deep conversations over coffee. Quality time means everything to me.\",\n    \"Quiet soul who enjoys cozy nights in, good books, and meaningful connections. Slow and steady wins my heart.\",\n    \"I may be shy at first, but I'm incredibly loyal and caring once you get to know me.\"\n  ],\n  intellectual: [\n    \"PhD student who loves discussing philosophy, science, and the mysteries of the universe. Sapiosexual vibes.\",\n    \"Bookworm and podcast enthusiast. I find intelligence incredibly attractive. Let's debate ideas!\",\n    \"Always learning something new. Currently reading about quantum physics and ancient history.\"\n  ],\n  artistic: [\n    \"Creative soul who paints, writes, and sees beauty in everyday moments. Art is my love language.\",\n    \"Musician and visual artist. I believe creativity is the highest form of human expression.\",\n    \"I express myself through art, music, and dance. Looking for someone who appreciates creativity.\"\n  ],\n  adventurous: [\n    \"Adrenaline junkie who loves hiking, rock climbing, and traveling to new places. Adventure awaits!\",\n    \"Passport full of stamps and bucket list full of dreams. Let's explore the world together!\",\n    \"Outdoor enthusiast who finds peace in nature. Camping, hiking, and stargazing are my therapy.\"\n  ],\n  romantic: [\n    \"Old soul who believes in handwritten letters, surprise dates, and true love. Romance isn't dead!\",\n    \"I love candlelit dinners, sunset walks, and creating magical moments together.\",\n    \"Hopeless romantic looking for my person. I believe in soulmates and fairy tale endings.\"\n  ]\n};\n\n// Interest pools based on personality types\nconst INTEREST_POOLS = {\n  outgoing: ['dancing', 'parties', 'networking', 'social media', 'concerts', 'festivals', 'sports events', 'meetups'],\n  shy: ['reading', 'coffee shops', 'museums', 'quiet walks', 'home cooking', 'board games', 'documentaries', 'gardening'],\n  intellectual: ['philosophy', 'science', 'podcasts', 'debates', 'research', 'lectures', 'chess', 'documentaries'],\n  artistic: ['painting', 'music', 'theater', 'poetry', 'photography', 'design', 'crafts', 'galleries'],\n  adventurous: ['hiking', 'travel', 'rock climbing', 'camping', 'skiing', 'surfing', 'backpacking', 'photography'],\n  romantic: ['wine tasting', 'sunset walks', 'poetry', 'classical music', 'fine dining', 'dancing', 'flowers', 'stargazing']\n};\n\nexport class AvatarGenerator {\n  private static getRandomElement<T>(array: T[]): T {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  private static getRandomElements<T>(array: T[], count: number): T[] {\n    const shuffled = [...array].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, count);\n  }\n\n  private static generateName(gender: Gender, ethnicity?: string): string {\n    if (gender === 'nonbinary') {\n      return this.getRandomElement(NAME_POOLS.nonbinary.universal);\n    }\n    \n    // Safety check for ethnicity\n    if (!ethnicity) {\n      ethnicity = 'western'; // Default fallback\n    }\n    \n    const ethnicityKey = ethnicity.toLowerCase().replace(' ', '_') as keyof typeof NAME_POOLS.male;\n    const namePool = NAME_POOLS[gender][ethnicityKey] || NAME_POOLS[gender].western;\n    return this.getRandomElement(namePool);\n  }\n\n  private static generatePronouns(gender: Gender): string {\n    switch (gender) {\n      case 'male': return 'he/him';\n      case 'female': return 'she/her';\n      case 'nonbinary': \n        return this.getRandomElement(['they/them', 'she/they', 'he/they', 'xe/xir']);\n      default: return 'they/them';\n    }\n  }\n\n  private static generateBio(personalityType: PersonalityType, name: string, age: number): string {\n    const templates = BIO_TEMPLATES[personalityType] || BIO_TEMPLATES.outgoing;\n    const template = this.getRandomElement(templates);\n    \n    // Add age context for some bios\n    const ageContext = age < 25 ? \" Just starting my journey!\" : \n                      age > 35 ? \" Life experience has taught me what I want.\" : \"\";\n    \n    return template + ageContext;\n  }\n\n  private static generateInterests(personalityType: PersonalityType): string[] {\n    const baseInterests = INTEREST_POOLS[personalityType] || INTEREST_POOLS.outgoing;\n    const commonInterests = ['movies', 'music', 'food', 'travel', 'fitness', 'technology'];\n    \n    // Get 3-4 personality-based interests + 1-2 common interests\n    const personalityInterests = this.getRandomElements(baseInterests, 3);\n    const generalInterests = this.getRandomElements(commonInterests, 2);\n    \n    return [...personalityInterests, ...generalInterests];\n  }\n\n  /**\n   * Generate avatar URL using RPM API\n   * Uses the Ready Player Me service to create real 3D avatars\n   */\n  private static async generateAvatarUrl(gender: Gender, bodyType: 'halfbody' | 'fullbody' = 'halfbody'): Promise<string> {\n    try {\n      const rpmService = new ReadyPlayerMeService({\n        subdomain: process.env.REACT_APP_RPM_SUBDOMAIN || 'xr-cupid',\n        appId: process.env.REACT_APP_RPM_APP_ID,\n        apiKey: process.env.REACT_APP_RPM_API_KEY\n      });\n\n      // Map nonbinary to random binary gender for RPM API\n      const rpmGender = gender === 'nonbinary' \n        ? (Math.random() > 0.5 ? 'male' : 'female')\n        : gender as 'male' | 'female';\n\n      const avatarData = await rpmService.generateRandomAvatar({\n        gender: rpmGender,\n        bodyType\n      });\n\n      return avatarData.modelUrl;\n    } catch (error) {\n      console.warn('Failed to generate RPM avatar:', error);\n      return ''; // Will trigger geometric fallback\n    }\n  }\n\n  private static generatePhotos(avatarUrl: string): string[] {\n    // Convert .glb avatar URL to .png photo URL\n    const photoUrl = avatarUrl.replace('.glb', '.png');\n    \n    // Generate multiple photos by using different angles/poses\n    // For now, we'll use the same photo multiple times\n    // In production, RPM can generate different poses/angles\n    return [\n      photoUrl,\n      photoUrl, // Could be different angle\n      photoUrl  // Could be different pose\n    ];\n  }\n\n  private static getConversationStyle(personalityType: PersonalityType): ConversationStyle {\n    const styleMap: Record<string, ConversationStyle[]> = {\n      outgoing: ['flirty', 'casual', 'humorous'],\n      shy: ['romantic', 'casual'],\n      intellectual: ['intellectual', 'casual'],\n      artistic: ['romantic', 'intellectual'],\n      adventurous: ['casual', 'flirty'],\n      romantic: ['romantic', 'flirty']\n    };\n    \n    const options = styleMap[personalityType] || ['casual'];\n    return this.getRandomElement(options);\n  }\n\n  private static getDifficulty(personalityType: PersonalityType): 'easy' | 'medium' | 'hard' {\n    const difficultyMap: Record<string, 'easy' | 'medium' | 'hard'> = {\n      outgoing: 'easy',\n      shy: 'medium',\n      intellectual: 'hard',\n      artistic: 'medium',\n      adventurous: 'easy',\n      romantic: 'medium'\n    };\n    \n    return difficultyMap[personalityType] || 'medium';\n  }\n\n  /**\n   * Generate a diverse set of dating profiles based on user preferences\n   */\n  static async generateProfiles(preferences: UserPreferences, count: number = 6): Promise<GeneratedProfile[]> {\n    const profiles: GeneratedProfile[] = [];\n    \n    // Determine which genders to generate\n    const gendersToGenerate: Gender[] = [];\n    if (preferences.interestedIn === 'all') {\n      gendersToGenerate.push('male', 'female', 'nonbinary');\n    } else if (preferences.interestedIn === 'nonbinary') {\n      gendersToGenerate.push('nonbinary');\n    } else {\n      // Map 'men'/'women' to 'male'/'female'\n      const genderMap: Record<string, Gender> = {\n        'men': 'male',\n        'women': 'female',\n        'male': 'male',\n        'female': 'female'\n      };\n      const mappedGender = genderMap[preferences.interestedIn as string];\n      if (mappedGender) {\n        gendersToGenerate.push(mappedGender);\n      }\n    }\n\n    for (let i = 0; i < count; i++) {\n      const gender = this.getRandomElement(gendersToGenerate);\n      const ethnicity = preferences.ethnicities.length > 0 \n        ? this.getRandomElement(preferences.ethnicities)\n        : 'western'; // Default fallback\n      const bodyType = this.getRandomElement(preferences.bodyTypes);\n      const personalityType = this.getRandomElement(preferences.personalityTypes);\n      const style = this.getRandomElement(preferences.styles);\n      \n      const name = this.generateName(gender, ethnicity);\n      const age = Math.floor(Math.random() * (preferences.ageRange[1] - preferences.ageRange[0] + 1)) + preferences.ageRange[0];\n      \n      const avatarUrl = await this.generateAvatarUrl(gender, bodyType);\n      const photos = this.generatePhotos(avatarUrl);\n      \n      const profile: GeneratedProfile = {\n        id: `generated-${i}-${Date.now()}`,\n        name,\n        age,\n        gender,\n        pronouns: this.generatePronouns(gender),\n        ethnicity,\n        bodyType,\n        personalityType,\n        bio: this.generateBio(personalityType, name, age),\n        interests: this.generateInterests(personalityType),\n        photos,\n        avatar: {\n          id: `avatar-${i}`,\n          name,\n          gender: gender === 'nonbinary' ? 'male' : gender, // RPM fallback\n          style: style === 'stylized' ? 'realistic' : style, // RPM fallback\n          avatarUrl\n        },\n        conversationStyle: this.getConversationStyle(personalityType),\n        difficulty: this.getDifficulty(personalityType)\n      };\n      \n      profiles.push(profile);\n    }\n    \n    return profiles;\n  }\n\n  /**\n   * Generate a single profile for quick testing\n   */\n  static async generateSingleProfile(gender?: Gender): Promise<GeneratedProfile> {\n    const defaultPreferences: UserPreferences = {\n      interestedIn: 'all',\n      ageRange: [22, 35],\n      styles: ['realistic', 'cartoon'],\n      ethnicities: ['caucasian', 'hispanic', 'african', 'asian'],\n      bodyTypes: ['halfbody', 'fullbody'],\n      personalityTypes: ['outgoing', 'intellectual', 'artistic']\n    };\n\n    const profiles = await this.generateProfiles(defaultPreferences, 1);\n    return profiles[0];\n  }\n}\n\nexport default AvatarGenerator;\n","import React, { useState, useEffect, useRef } from 'react';\nimport RPMAvatar from './RPMAvatar';\nimport { VoiceProvider, useVoice } from \"@humeai/voice-react\";\n\ninterface RPMVideoCallProps {\n  npcProfile: {\n    id: string;\n    name: string;\n    avatar: {\n      id: string;\n      name: string;\n      gender: 'male' | 'female';\n      style: 'realistic' | 'cartoon';\n      avatarUrl: string;\n    };\n    personality: {\n      traits: string[];\n      responseStyle: string;\n    };\n  };\n  onCallEnd?: () => void;\n  scenario?: string;\n}\n\ninterface CallState {\n  isConnected: boolean;\n  isUserSpeaking: boolean;\n  isNpcSpeaking: boolean;\n  callDuration: number;\n  currentEmotion: string;\n  emotionIntensity: number;\n  isMuted: boolean;\n  isVideoOff: boolean;\n}\n\ninterface EmotionState {\n  joy: number;\n  sadness: number;\n  anger: number;\n  fear: number;\n  surprise: number;\n  disgust: number;\n  neutral: number;\n  concentration: number;\n  [key: string]: number;\n}\n\ninterface ChatMessage {\n  type: 'user' | 'npc';\n  content: string;\n  timestamp: string;\n}\n\ninterface ConversationAnalytics {\n  engagement: number;\n  chemistry: number;\n  conversationFlow: number;\n  eyeContact: number;\n  responseTime: number;\n}\n\nconst RPMVideoCallContent: React.FC<RPMVideoCallProps> = ({\n  npcProfile,\n  onCallEnd,\n  scenario = 'video-date'\n}) => {\n  const [callState, setCallState] = useState<CallState>({\n    isConnected: false,\n    isUserSpeaking: false,\n    isNpcSpeaking: false,\n    callDuration: 0,\n    currentEmotion: 'neutral',\n    emotionIntensity: 0.3,\n    isMuted: false,\n    isVideoOff: false\n  });\n\n  const [npcEmotions, setNpcEmotions] = useState<EmotionState>({\n    joy: 0.2,\n    sadness: 0.1,\n    anger: 0.1,\n    fear: 0.1,\n    surprise: 0.1,\n    disgust: 0.1,\n    neutral: 0.5,\n    concentration: 0.1\n  });\n\n  const [conversationAnalytics, setConversationAnalytics] = useState<ConversationAnalytics>({\n    engagement: 75,\n    chemistry: 68,\n    conversationFlow: 82,\n    eyeContact: 70,\n    responseTime: 85\n  });\n\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n\n  // Mock Hume AI connection for testing\n  const mockVoiceState = {\n    connect: async () => {\n      console.log('🎭 Mock: Starting video call...');\n      setCallState(prev => ({ ...prev, isConnected: true }));\n    },\n    disconnect: () => {\n      console.log('🎭 Mock: Ending video call...');\n      setCallState(prev => ({ ...prev, isConnected: false }));\n    },\n    status: 'disconnected',\n    messages: []\n  };\n  \n  // Use mock for now - replace with useVoice() when Hume AI is properly configured\n  const { connect, disconnect, status } = mockVoiceState;\n  const callTimerRef = useRef<NodeJS.Timeout>();\n\n  // Debug logging\n  useEffect(() => {\n    console.log('🎭 NPC Profile:', npcProfile);\n    console.log('🎭 Avatar URL:', npcProfile.avatar?.avatarUrl);\n    console.log('🎭 Avatar Object:', npcProfile.avatar);\n  }, [npcProfile]);\n\n  // Start call timer\n  useEffect(() => {\n    if (callState.isConnected) {\n      callTimerRef.current = setInterval(() => {\n        setCallState(prev => ({\n          ...prev,\n          callDuration: prev.callDuration + 1\n        }));\n      }, 1000);\n    } else {\n      if (callTimerRef.current) {\n        clearInterval(callTimerRef.current);\n      }\n    }\n\n    return () => {\n      if (callTimerRef.current) {\n        clearInterval(callTimerRef.current);\n      }\n    };\n  }, [callState.isConnected]);\n\n  // Process Hume AI messages for emotion analysis (simplified for mock)\n  useEffect(() => {\n    // For now, skip complex message processing since we're using mock\n    // This will be re-enabled when proper Hume AI integration is added\n    console.log('📝 Messages updated:', messages.length);\n  }, [messages]);\n\n  // Simulate emotions for testing (remove when Hume AI is connected)\n  useEffect(() => {\n    if (callState.isConnected) {\n      const emotionInterval = setInterval(() => {\n        const emotions = ['joy', 'sadness', 'anger', 'fear', 'surprise', 'disgust', 'neutral', 'concentration'];\n        const randomEmotion = emotions[Math.floor(Math.random() * emotions.length)];\n        \n        setNpcEmotions(prev => ({\n          ...prev,\n          [randomEmotion]: Math.random() * 0.8 + 0.2,\n          neutral: 0.2\n        }));\n        \n        console.log(`🎭 Mock emotion: ${randomEmotion}`);\n      }, 3000); // Change emotion every 3 seconds\n      \n      return () => clearInterval(emotionInterval);\n    }\n  }, [callState.isConnected]);\n\n  const startCall = async () => {\n    try {\n      await connect();\n      setCallState(prev => ({ ...prev, isConnected: true }));\n    } catch (error) {\n      console.error('Failed to start call:', error);\n    }\n  };\n\n  const endCall = () => {\n    disconnect();\n    setCallState(prev => ({ ...prev, isConnected: false }));\n    onCallEnd?.();\n  };\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getScenarioContext = () => {\n    const contexts = {\n      'video-date': {\n        title: 'Video Date',\n        description: 'First video call to check chemistry and vibe',\n        tips: ['Make eye contact', 'Show genuine interest', 'Ask engaging questions', 'Be yourself']\n      },\n      'follow-up': {\n        title: 'Follow-up Call',\n        description: 'Building on your previous conversation',\n        tips: ['Reference previous topics', 'Share something personal', 'Plan future activities']\n      },\n      'casual-chat': {\n        title: 'Casual Chat',\n        description: 'Relaxed conversation to get to know each other',\n        tips: ['Keep it light', 'Share stories', 'Find common interests']\n      }\n    };\n    return contexts[scenario as keyof typeof contexts] || contexts['video-date'];\n  };\n\n  const scenarioInfo = getScenarioContext();\n\n  return (\n    <div className=\"video-call-container\">\n      <style>{`\n        .video-call-container {\n          background: #1a1a1a;\n          border-radius: 12px;\n          overflow: hidden;\n          color: white;\n          width: 100%;\n          height: 100vh;\n          display: flex;\n          flex-direction: column;\n        }\n\n        .video-call-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 20px;\n          background: rgba(0,0,0,0.5);\n          border-bottom: 1px solid rgba(255,255,255,0.1);\n        }\n\n        .call-info h3 {\n          margin: 0 0 8px 0;\n          font-size: 24px;\n          font-weight: 600;\n        }\n\n        .call-status {\n          font-size: 14px;\n          opacity: 0.8;\n        }\n\n        .header-btn {\n          background: #ff4757;\n          color: white;\n          border: none;\n          padding: 12px 24px;\n          border-radius: 8px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: background 0.2s;\n        }\n\n        .header-btn:hover {\n          background: #ff3742;\n        }\n\n        .video-content {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          padding: 40px;\n        }\n\n        .npc-video-container {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          max-width: 1200px;\n          width: 100%;\n        }\n\n        .avatar-display {\n          width: 80vw;\n          max-width: 1000px;\n          height: 60vh;\n          min-height: 400px;\n          background: #2a2a2a;\n          border-radius: 16px;\n          overflow: hidden;\n          border: 2px solid #4A90E2;\n          margin-bottom: 20px;\n        }\n\n        .video-avatar {\n          width: 100%;\n          height: 100%;\n        }\n\n        .npc-info {\n          text-align: center;\n          margin-bottom: 30px;\n        }\n\n        .npc-info h4 {\n          margin: 0 0 8px 0;\n          font-size: 20px;\n          font-weight: 600;\n        }\n\n        .emotion-status {\n          font-size: 14px;\n          opacity: 0.7;\n          color: #4A90E2;\n        }\n\n        .simple-controls {\n          display: flex;\n          gap: 20px;\n          align-items: center;\n        }\n\n        .control-btn {\n          background: #2a2a2a;\n          color: white;\n          border: 2px solid #4A90E2;\n          padding: 12px 24px;\n          border-radius: 8px;\n          font-size: 16px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n\n        .control-btn:hover {\n          background: #4A90E2;\n          transform: translateY(-2px);\n        }\n\n        .control-btn.muted {\n          background: #ff4757;\n          border-color: #ff4757;\n        }\n\n        .end-call-btn {\n          background: #ff4757;\n          border-color: #ff4757;\n        }\n\n        .end-call-btn:hover {\n          background: #ff3742;\n          border-color: #ff3742;\n        }\n\n        @media (max-width: 768px) {\n          .video-content {\n            padding: 20px;\n          }\n          \n          .avatar-display {\n            width: 100%;\n            max-width: 400px;\n            height: 300px;\n          }\n          \n          .simple-controls {\n            flex-direction: column;\n            gap: 12px;\n          }\n          \n          .control-btn {\n            width: 200px;\n          }\n        }\n      `}</style>\n      <div className=\"video-call-header\">\n        <div className=\"call-info\">\n          <h3>Video Date with {npcProfile.name}</h3>\n          <span className=\"call-status\">\n            {callState.isConnected ? '🟢 Connected' : '🔴 Connecting...'}\n          </span>\n        </div>\n        <div className=\"call-controls-header\">\n          <button className=\"header-btn\" onClick={endCall}>\n            End Call\n          </button>\n        </div>\n      </div>\n\n      <div className=\"video-content\">\n        {/* Main NPC Avatar */}\n        <div className=\"npc-video-container\">\n          <div className=\"avatar-display\">\n            <RPMAvatar\n              avatarUrl={npcProfile.avatar?.avatarUrl || ''} \n              emotions={npcEmotions}\n              isAnimating={true}\n              className=\"video-avatar\"\n            />\n          </div>\n          <div className=\"npc-info\">\n            <h4>{npcProfile.name}</h4>\n            <div className=\"emotion-status\">\n              Current mood: {callState.currentEmotion}\n            </div>\n          </div>\n        </div>\n\n        {/* Simple Controls */}\n        <div className=\"simple-controls\">\n          <button className={`control-btn ${callState.isMuted ? 'muted' : ''}`}>\n            {callState.isMuted ? '🔇 Unmute' : '🎤 Mute'}\n          </button>\n          <button className=\"control-btn end-call-btn\" onClick={endCall}>\n            📞 End Call\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const RPMVideoCall: React.FC<RPMVideoCallProps> = (props) => {\n  return (\n    <VoiceProvider \n      auth={{ type: \"apiKey\", value: process.env.REACT_APP_HUME_API_KEY || \"\" }}\n      hostname={process.env.REACT_APP_HUME_HOSTNAME}\n    >\n      <RPMVideoCallContent {...props} />\n    </VoiceProvider>\n  );\n};\n\nexport default RPMVideoCall;\n","import React, { useState, useEffect } from 'react';\nimport { UserPreferences, AvatarGenerator, GeneratedProfile, PersonalityType, BodyType, AvatarStyle, Gender } from '../utils/avatarGenerator';\n\ninterface UserPreferencesProps {\n  onPreferencesChange: (preferences: UserPreferences) => void;\n  onProfilesGenerated: (profiles: GeneratedProfile[]) => void;\n  className?: string;\n}\n\nexport const UserPreferencesComponent: React.FC<UserPreferencesProps> = ({\n  onPreferencesChange,\n  onProfilesGenerated,\n  className = ''\n}) => {\n  const [preferences, setPreferences] = useState<UserPreferences>({\n    interestedIn: 'all',\n    ageRange: [22, 35],\n    styles: ['realistic'],\n    ethnicities: [],\n    bodyTypes: [],\n    personalityTypes: []\n  });\n\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  // Update parent when preferences change\n  useEffect(() => {\n    onPreferencesChange(preferences);\n  }, [preferences, onPreferencesChange]);\n\n  const updatePreference = <K extends keyof UserPreferences>(\n    key: K,\n    value: UserPreferences[K]\n  ) => {\n    setPreferences(prev => ({ ...prev, [key]: value }));\n  };\n\n  const toggleArrayValue = <T extends string>(\n    array: T[],\n    value: T,\n    setter: (newArray: T[]) => void\n  ) => {\n    if (array.includes(value)) {\n      setter(array.filter(item => item !== value));\n    } else {\n      setter([...array, value]);\n    }\n  };\n\n  const handlePersonalityToggle = (personality: string) => {\n    const typedPersonality = personality as PersonalityType;\n    if (preferences.personalityTypes.includes(typedPersonality)) {\n      setPreferences(prev => ({\n        ...prev,\n        personalityTypes: prev.personalityTypes.filter(p => p !== typedPersonality)\n      }));\n    } else {\n      setPreferences(prev => ({\n        ...prev,\n        personalityTypes: [...prev.personalityTypes, typedPersonality]\n      }));\n    }\n  };\n\n  const handleBodyTypeToggle = (bodyType: string) => {\n    const typedBodyType = bodyType as BodyType;\n    if (preferences.bodyTypes.includes(typedBodyType)) {\n      setPreferences(prev => ({\n        ...prev,\n        bodyTypes: prev.bodyTypes.filter(bt => bt !== typedBodyType)\n      }));\n    } else {\n      setPreferences(prev => ({\n        ...prev,\n        bodyTypes: [...prev.bodyTypes, typedBodyType]\n      }));\n    }\n  };\n\n  const handleStyleToggle = (style: string) => {\n    const typedStyle = style as AvatarStyle;\n    if (preferences.styles.includes(typedStyle)) {\n      setPreferences(prev => ({\n        ...prev,\n        styles: prev.styles.filter(s => s !== typedStyle)\n      }));\n    } else {\n      setPreferences(prev => ({\n        ...prev,\n        styles: [...prev.styles, typedStyle]\n      }));\n    }\n  };\n\n  const generateProfiles = async () => {\n    setIsGenerating(true);\n    \n    try {\n      // Generate diverse profiles based on preferences\n      const profiles = await AvatarGenerator.generateProfiles(preferences, 12);\n      onProfilesGenerated(profiles);\n      \n      console.log(`🎭 Generated ${profiles.length} diverse profiles based on your preferences:`, {\n        interestedIn: preferences.interestedIn,\n        ageRange: preferences.ageRange,\n        diversityMetrics: {\n          genders: [...new Set(profiles.map((p: any) => p.gender))],\n          ethnicities: [...new Set(profiles.map((p: any) => p.ethnicity))],\n          personalities: [...new Set(profiles.map((p: any) => p.personalityType))]\n        }\n      });\n      \n    } catch (error) {\n      console.error('Failed to generate profiles:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <div className={`user-preferences ${className}`}>\n      <div className=\"preferences-header\">\n        <h3>🎯 Dating Preferences</h3>\n        <p>Customize your dating simulation experience</p>\n      </div>\n\n      {/* Primary Preferences */}\n      <div className=\"preference-section\">\n        <label className=\"preference-label\">\n          <span>I'm interested in:</span>\n          <select \n            value={preferences.interestedIn}\n            onChange={(e) => updatePreference('interestedIn', e.target.value as any)}\n            className=\"preference-select\"\n          >\n            <option value=\"all\">Everyone</option>\n            <option value=\"men\">Men</option>\n            <option value=\"women\">Women</option>\n            <option value=\"nonbinary\">Non-binary people</option>\n          </select>\n        </label>\n\n        <label className=\"preference-label\">\n          <span>Age range:</span>\n          <div className=\"age-range\">\n            <input\n              type=\"number\"\n              min=\"18\"\n              max=\"65\"\n              value={preferences.ageRange[0]}\n              onChange={(e) => updatePreference('ageRange', [parseInt(e.target.value), preferences.ageRange[1]])}\n              className=\"age-input\"\n            />\n            <span>to</span>\n            <input\n              type=\"number\"\n              min=\"18\"\n              max=\"65\"\n              value={preferences.ageRange[1]}\n              onChange={(e) => updatePreference('ageRange', [preferences.ageRange[0], parseInt(e.target.value)])}\n              className=\"age-input\"\n            />\n          </div>\n        </label>\n      </div>\n\n      {/* Advanced Preferences Toggle */}\n      <button \n        className=\"advanced-toggle\"\n        onClick={() => setShowAdvanced(!showAdvanced)}\n      >\n        {showAdvanced ? '▼' : '▶'} Advanced Preferences\n      </button>\n\n      {showAdvanced && (\n        <div className=\"advanced-preferences\">\n          {/* Personality Types */}\n          <div className=\"preference-group\">\n            <h4>Personality Types</h4>\n            <div className=\"checkbox-grid\">\n              {['outgoing', 'shy', 'intellectual', 'artistic', 'adventurous', 'romantic'].map(type => (\n                <label key={type} className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={preferences.personalityTypes.includes(type as PersonalityType)}\n                    onChange={() => handlePersonalityToggle(type)}\n                  />\n                  <span className=\"checkbox-text\">{type.charAt(0).toUpperCase() + type.slice(1)}</span>\n                </label>\n              ))}\n            </div>\n            {preferences.personalityTypes.length === 0 && (\n              <p className=\"preference-hint\">Leave empty for all personality types</p>\n            )}\n          </div>\n\n          {/* Ethnicities */}\n          <div className=\"preference-group\">\n            <h4>Cultural Backgrounds</h4>\n            <div className=\"checkbox-grid\">\n              {['Western', 'Latino', 'Asian', 'African', 'Middle Eastern'].map(ethnicity => (\n                <label key={ethnicity} className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={preferences.ethnicities.includes(ethnicity)}\n                    onChange={() => toggleArrayValue(\n                      preferences.ethnicities,\n                      ethnicity,\n                      (newArray) => updatePreference('ethnicities', newArray)\n                    )}\n                  />\n                  <span className=\"checkbox-text\">{ethnicity}</span>\n                </label>\n              ))}\n            </div>\n            {preferences.ethnicities.length === 0 && (\n              <p className=\"preference-hint\">Leave empty for all backgrounds</p>\n            )}\n          </div>\n\n          {/* Body Types */}\n          <div className=\"preference-group\">\n            <h4>Body Types</h4>\n            <div className=\"checkbox-grid\">\n              {['slim', 'average', 'athletic', 'curvy'].map(bodyType => (\n                <label key={bodyType} className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={preferences.bodyTypes.includes(bodyType as BodyType)}\n                    onChange={() => handleBodyTypeToggle(bodyType)}\n                  />\n                  <span className=\"checkbox-text\">{bodyType.charAt(0).toUpperCase() + bodyType.slice(1)}</span>\n                </label>\n              ))}\n            </div>\n            {preferences.bodyTypes.length === 0 && (\n              <p className=\"preference-hint\">Leave empty for all body types</p>\n            )}\n          </div>\n\n          {/* Avatar Styles */}\n          <div className=\"preference-group\">\n            <h4>Avatar Styles</h4>\n            <div className=\"checkbox-grid\">\n              {['realistic', 'cartoon', 'stylized'].map(style => (\n                <label key={style} className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={preferences.styles.includes(style as AvatarStyle)}\n                    onChange={() => handleStyleToggle(style)}\n                  />\n                  <span className=\"checkbox-text\">{style.charAt(0).toUpperCase() + style.slice(1)}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Generate Button */}\n      <div className=\"generate-section\">\n        <button \n          className=\"generate-btn\"\n          onClick={generateProfiles}\n          disabled={isGenerating}\n        >\n          {isGenerating ? '🎭 Generating Profiles...' : '✨ Generate Dating Profiles'}\n        </button>\n        <p className=\"generate-hint\">\n          Creates 12 diverse profiles based on your preferences\n        </p>\n      </div>\n\n      <style>{`\n        .user-preferences {\n          background: white;\n          border-radius: 16px;\n          padding: 24px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n          max-width: 600px;\n          margin: 0 auto;\n        }\n\n        .preferences-header {\n          text-align: center;\n          margin-bottom: 24px;\n        }\n\n        .preferences-header h3 {\n          margin: 0 0 8px 0;\n          color: #333;\n          font-size: 24px;\n        }\n\n        .preferences-header p {\n          margin: 0;\n          color: #666;\n          font-size: 14px;\n        }\n\n        .preference-section {\n          margin-bottom: 20px;\n        }\n\n        .preference-label {\n          display: block;\n          margin-bottom: 16px;\n        }\n\n        .preference-label span {\n          display: block;\n          margin-bottom: 8px;\n          font-weight: 600;\n          color: #333;\n        }\n\n        .preference-select {\n          width: 100%;\n          padding: 12px;\n          border: 1px solid #ddd;\n          border-radius: 8px;\n          font-size: 16px;\n          background: white;\n        }\n\n        .age-range {\n          display: flex;\n          align-items: center;\n          gap: 12px;\n        }\n\n        .age-input {\n          width: 80px;\n          padding: 12px;\n          border: 1px solid #ddd;\n          border-radius: 8px;\n          font-size: 16px;\n          text-align: center;\n        }\n\n        .advanced-toggle {\n          width: 100%;\n          padding: 12px;\n          border: 1px solid #ddd;\n          border-radius: 8px;\n          background: #f8f9fa;\n          cursor: pointer;\n          font-weight: 500;\n          color: #333;\n          margin-bottom: 16px;\n          text-align: left;\n        }\n\n        .advanced-toggle:hover {\n          background: #e9ecef;\n        }\n\n        .advanced-preferences {\n          border: 1px solid #eee;\n          border-radius: 8px;\n          padding: 20px;\n          margin-bottom: 20px;\n          background: #fafafa;\n        }\n\n        .preference-group {\n          margin-bottom: 24px;\n        }\n\n        .preference-group h4 {\n          margin: 0 0 12px 0;\n          color: #333;\n          font-size: 16px;\n        }\n\n        .checkbox-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n          gap: 8px;\n        }\n\n        .checkbox-label {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          cursor: pointer;\n          padding: 8px;\n          border-radius: 6px;\n          transition: background 0.2s;\n        }\n\n        .checkbox-label:hover {\n          background: rgba(74, 144, 226, 0.1);\n        }\n\n        .checkbox-text {\n          font-size: 14px;\n          color: #333;\n        }\n\n        .preference-hint {\n          margin: 8px 0 0 0;\n          font-size: 12px;\n          color: #666;\n          font-style: italic;\n        }\n\n        .generate-section {\n          text-align: center;\n          margin-top: 24px;\n          padding-top: 24px;\n          border-top: 1px solid #eee;\n        }\n\n        .generate-btn {\n          background: linear-gradient(135deg, #4A90E2 0%, #357ABD 100%);\n          color: white;\n          border: none;\n          padding: 16px 32px;\n          border-radius: 12px;\n          font-size: 18px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: all 0.3s;\n          box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);\n        }\n\n        .generate-btn:hover:not(:disabled) {\n          transform: translateY(-2px);\n          box-shadow: 0 6px 16px rgba(74, 144, 226, 0.4);\n        }\n\n        .generate-btn:disabled {\n          opacity: 0.7;\n          cursor: not-allowed;\n          transform: none;\n        }\n\n        .generate-hint {\n          margin: 12px 0 0 0;\n          font-size: 14px;\n          color: #666;\n        }\n\n        @media (max-width: 768px) {\n          .user-preferences {\n            padding: 16px;\n            margin: 16px;\n          }\n\n          .checkbox-grid {\n            grid-template-columns: 1fr;\n          }\n\n          .age-range {\n            flex-direction: column;\n            align-items: stretch;\n            gap: 8px;\n          }\n\n          .age-input {\n            width: 100%;\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default UserPreferencesComponent;\n","import React, { useState, useEffect } from 'react';\nimport ChatSimulation from './ChatSimulation';\nimport RPMVideoCall from './RPMVideoCall';\nimport RPMAvatarCreatorModal from './RPMAvatarCreatorModal';\nimport { DEMO_RPM_AVATARS, RPMAvatarGenerator } from '../utils/rpmAvatars';\nimport { UserPreferences, AvatarGenerator, GeneratedProfile, ConversationStyle } from '../utils/avatarGenerator';\nimport UserPreferencesComponent from './UserPreferences';\nimport ProfileGallery from './ProfileGallery';\nimport './DatingSimulationFlow.css';\nimport './AvatarGeneration.css';\nimport { rpmService } from '../services/readyPlayerMeService';\n\ninterface Profile {\n  id: string;\n  name: string;\n  age: number;\n  photos: string[];\n  avatar: {\n    id: string;\n    name: string;\n    gender: 'male' | 'female';\n    style: 'realistic' | 'cartoon';\n    avatarUrl: string;\n  };\n  bio: string;\n  interests: string[];\n  occupation: string;\n  education: string;\n  distance: number;\n  personality: {\n    traits: string[];\n    responseStyle: ConversationStyle;\n    rizzLevel: number;\n    interests: string[];\n    dealBreakers: string[];\n  };\n}\n\ninterface Match {\n  id: string;\n  profile: Profile;\n  matchedAt: Date;\n  chatStarted: boolean;\n  videoCallUnlocked: boolean;\n  completed: boolean;\n  userScore: {\n    firstMessage: number;\n    conversationFlow: number;\n    rizzScore: number;\n    videoChemistry: number;\n  };\n}\n\ntype FlowStage = 'preferences' | 'profile-generation' | 'swiping' | 'matched' | 'chatting' | 'video-date' | 'completed';\n\n// Sample profiles with RPM avatars\nconst SAMPLE_PROFILES: Profile[] = [\n  {\n    id: 'alex',\n    name: 'Alex',\n    age: 28,\n    photos: ['https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5d.png'], // RPM avatar photo\n    avatar: DEMO_RPM_AVATARS.find(a => a.name === 'Alex') || { \n      id: 'alex-avatar', \n      name: 'Alex', \n      gender: 'male' as const, \n      style: 'realistic' as const, \n      avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5d.glb'\n    },\n    bio: \"Adventure seeker who loves hiking and trying new cuisines. Looking for someone to explore the world with! 🌍✈️\",\n    interests: ['Hiking', 'Travel', 'Photography', 'Cooking'],\n    occupation: 'Software Engineer',\n    education: 'BS Computer Science',\n    distance: 2.1,\n    personality: {\n      traits: ['adventurous', 'curious', 'optimistic'],\n      responseStyle: 'casual',\n      rizzLevel: 7,\n      interests: ['outdoor activities', 'travel stories'],\n      dealBreakers: ['negativity', 'couch potato']\n    }\n  },\n  {\n    id: 'jordan',\n    name: 'Jordan',\n    age: 26,\n    photos: ['https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5e.png'], // RPM avatar photo\n    avatar: DEMO_RPM_AVATARS.find(a => a.name === 'Jordan') || { \n      id: 'jordan-avatar', \n      name: 'Jordan', \n      gender: 'female' as const, \n      style: 'realistic' as const, \n      avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5e.glb'\n    },\n    bio: \"Artist by day, bookworm by night. I paint emotions and read souls. Seeking deep conversations and creative sparks. 🎨📚\",\n    interests: ['Art', 'Reading', 'Museums', 'Coffee'],\n    occupation: 'Graphic Designer',\n    education: 'BFA Visual Arts',\n    distance: 1.8,\n    personality: {\n      traits: ['creative', 'thoughtful', 'passionate'],\n      responseStyle: 'intellectual',\n      rizzLevel: 8,\n      interests: ['creative projects', 'cultural experiences'],\n      dealBreakers: ['boring', 'negative attitude']\n    }\n  },\n  {\n    id: 'sam',\n    name: 'Sam',\n    age: 30,\n    photos: ['https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5f.png'], // RPM avatar photo\n    avatar: DEMO_RPM_AVATARS.find(a => a.name === 'Sam') || { \n      id: 'sam-avatar', \n      name: 'Sam', \n      gender: 'female' as const, \n      style: 'realistic' as const, \n      avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d5f.glb'\n    },\n    bio: \"Startup founder who codes by day and cooks by night. Looking for someone who appreciates both innovation and a good homemade meal. 👩‍💻🍳\",\n    interests: ['Technology', 'Cooking', 'Entrepreneurship', 'Yoga'],\n    occupation: 'Startup Founder',\n    education: 'MS Computer Science',\n    distance: 3.2,\n    personality: {\n      traits: ['ambitious', 'innovative', 'nurturing'],\n      responseStyle: 'casual',\n      rizzLevel: 9,\n      interests: ['tech trends', 'business strategy'],\n      dealBreakers: ['laziness', 'lack of ambition']\n    }\n  },\n  {\n    id: 'river',\n    name: 'River',\n    age: 27,\n    photos: ['https://models.readyplayer.me/6409c2e6d4bb6b0001b84d60.png'], // RPM avatar photo\n    avatar: DEMO_RPM_AVATARS.find(a => a.name === 'River') || { \n      id: 'river-avatar', \n      name: 'River', \n      gender: 'male' as const, \n      style: 'realistic' as const, \n      avatarUrl: 'https://models.readyplayer.me/6409c2e6d4bb6b0001b84d60.glb'\n    },\n    bio: \"Artist and musician who finds beauty in unexpected places. Seeking someone who appreciates mystery and isn't afraid of deep waters. 🎨🎵🌊\",\n    interests: ['Art', 'Music', 'Photography', 'Nature'],\n    occupation: 'Artist/Musician',\n    education: 'BFA Fine Arts',\n    distance: 4.1,\n    personality: {\n      traits: ['mysterious', 'artistic', 'deep'],\n      responseStyle: 'romantic',\n      rizzLevel: 6,\n      interests: ['artistic expression', 'philosophical discussions'],\n      dealBreakers: ['superficiality', 'materialism']\n    }\n  }\n];\n\nexport const DatingSimulationFlow: React.FC = () => {\n  const [stage, setStage] = useState<FlowStage>('preferences');\n  const [userPreferences, setUserPreferences] = useState<UserPreferences | null>(null);\n  const [generatedProfiles, setGeneratedProfiles] = useState<GeneratedProfile[]>([]);\n  const [availableProfiles, setAvailableProfiles] = useState<Profile[]>(SAMPLE_PROFILES);\n  const [matches, setMatches] = useState<Match[]>([]);\n  const [currentMatch, setCurrentMatch] = useState<Match | null>(null);\n  const [swipeIndex, setSwipeIndex] = useState(0);\n  const [showAvatarCreator, setShowAvatarCreator] = useState(false);\n\n  // Handle preference changes\n  const handlePreferencesChange = (preferences: UserPreferences) => {\n    setUserPreferences(preferences);\n  };\n\n  // Handle profile generation\n  const handleProfilesGenerated = async (profiles: GeneratedProfile[]) => {\n    setGeneratedProfiles(profiles);\n    \n    // Convert generated profiles to the format used by the dating simulation\n    const convertedProfiles: Profile[] = profiles.map((profile) => {\n      return {\n        id: profile.id,\n        name: profile.name,\n        age: profile.age,\n        photos: profile.photos,\n        avatar: {\n          ...profile.avatar,\n          avatarUrl: profile.avatar.avatarUrl\n        },\n        bio: profile.bio,\n        interests: profile.interests,\n        occupation: getRandomOccupation(),\n        education: getRandomEducation(),\n        distance: Math.floor(Math.random() * 25) + 1,\n        personality: {\n          traits: [profile.personalityType, profile.ethnicity.toLowerCase()],\n          responseStyle: profile.conversationStyle,\n          rizzLevel: profile.difficulty === 'easy' ? 3 : profile.difficulty === 'medium' ? 5 : 8,\n          interests: profile.interests,\n          dealBreakers: getRandomDealBreakers()\n        }\n      };\n    });\n    \n    setAvailableProfiles(convertedProfiles);\n    setStage('swiping');\n  };\n\n  // Handle profile selection from gallery\n  const handleProfileSelect = (profile: GeneratedProfile) => {\n    console.log('Selected profile:', profile);\n  };\n\n  // Handle starting chat with a profile\n  const handleStartChat = (profile: GeneratedProfile) => {\n    // Find the converted profile and create a match\n    const convertedProfile = availableProfiles.find(p => p.id === profile.id);\n    if (convertedProfile) {\n      const newMatch: Match = {\n        id: `match-${Date.now()}`,\n        profile: convertedProfile,\n        matchedAt: new Date(),\n        chatStarted: true,\n        videoCallUnlocked: false,\n        completed: false,\n        userScore: {\n          firstMessage: 0,\n          conversationFlow: 0,\n          rizzScore: 0,\n          videoChemistry: 0\n        }\n      };\n      \n      setMatches(prev => [...prev, newMatch]);\n      setCurrentMatch(newMatch);\n      setStage('chatting');\n    }\n  };\n\n  const handleSwipe = (direction: 'left' | 'right') => {\n    if (direction === 'right') {\n      // Create a match\n      const newMatch: Match = {\n        id: `match-${availableProfiles[swipeIndex].id}-${Date.now()}`,\n        profile: availableProfiles[swipeIndex],\n        matchedAt: new Date(),\n        chatStarted: false,\n        videoCallUnlocked: false,\n        completed: false,\n        userScore: {\n          firstMessage: 0,\n          conversationFlow: 0,\n          rizzScore: 0,\n          videoChemistry: 0\n        }\n      };\n      \n      setMatches(prev => [...prev, newMatch]);\n      setCurrentMatch(newMatch);\n      setStage('matched');\n    } else {\n      // Move to next profile\n      if (swipeIndex < availableProfiles.length - 1) {\n        setSwipeIndex(prev => prev + 1);\n      } else {\n        setSwipeIndex(0); // Loop back\n      }\n    }\n  };\n\n  const startChat = () => {\n    if (currentMatch) {\n      setCurrentMatch({\n        ...currentMatch,\n        chatStarted: true\n      });\n      setStage('chatting');\n    }\n  };\n\n  const unlockVideoCall = () => {\n    if (currentMatch) {\n      setCurrentMatch({\n        ...currentMatch,\n        videoCallUnlocked: true\n      });\n      setStage('video-date');\n    }\n  };\n\n  const completeSimulation = () => {\n    if (currentMatch) {\n      setCurrentMatch({\n        ...currentMatch,\n        completed: true\n      });\n      setStage('completed');\n    }\n  };\n\n  const resetToSwiping = () => {\n    setStage('swiping');\n    setCurrentMatch(null);\n  };\n\n  const renderSwipingStage = () => (\n    <div className=\"swiping-stage\">\n      <div className=\"app-header\">\n        <h1>🔥 XRCupid</h1>\n        <div className=\"location-info\">\n          <span>📍 San Francisco, CA</span>\n        </div>\n      </div>\n\n      <div className=\"card-stack\">\n        <div className=\"profile-card\">\n          <div className=\"profile-photos\">\n            <img src={availableProfiles[swipeIndex].photos[0]} alt={availableProfiles[swipeIndex].name} />\n            <div className=\"photo-indicators\">\n              <div className=\"indicator active\"></div>\n            </div>\n          </div>\n          \n          <div className=\"profile-info\">\n            <div className=\"name-age\">\n              <h2>{availableProfiles[swipeIndex].name}, {availableProfiles[swipeIndex].age}</h2>\n              <span className=\"distance\">{availableProfiles[swipeIndex].distance} miles away</span>\n            </div>\n            \n            <div className=\"occupation\">\n              <span>💼 {availableProfiles[swipeIndex].occupation}</span>\n            </div>\n            \n            <div className=\"bio\">\n              <p>{availableProfiles[swipeIndex].bio}</p>\n            </div>\n            \n            <div className=\"interests\">\n              {availableProfiles[swipeIndex].interests.slice(0, 4).map((interest, index) => (\n                <span key={index} className=\"interest-tag\">{interest}</span>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"swipe-actions\">\n        <button \n          className=\"action-btn pass\"\n          onClick={() => handleSwipe('left')}\n        >\n          ❌\n        </button>\n        \n        <button \n          className=\"action-btn super-like\"\n          onClick={() => handleSwipe('right')}\n        >\n          ⭐\n        </button>\n        \n        <button \n          className=\"action-btn like\"\n          onClick={() => handleSwipe('right')}\n        >\n          💚\n        </button>\n      </div>\n\n      <div className=\"swipe-tutorial\">\n        <p>👆 Tap ❌ to pass, 💚 to like, or ⭐ for super like</p>\n      </div>\n    </div>\n  );\n\n  const renderMatchedStage = () => (\n    <div className=\"matched-stage\">\n      <div className=\"match-celebration\">\n        <div className=\"celebration-header\">\n          <h1>🎉 IT'S A MATCH! 🎉</h1>\n          <p>You and {currentMatch?.profile.name} liked each other</p>\n        </div>\n        \n        <div className=\"match-photos\">\n          <div className=\"photo-container\">\n            <img src=\"https://randomuser.me/api/portraits/men/1.jpg\" alt=\"You\" />\n            <span>You</span>\n          </div>\n          <div className=\"heart-icon\">💖</div>\n          <div className=\"photo-container\">\n            <img src={currentMatch?.profile.photos[0]} alt={currentMatch?.profile.name} />\n            <span>{currentMatch?.profile.name}</span>\n          </div>\n        </div>\n        \n        <div className=\"match-actions\">\n          <button className=\"start-chat-btn\" onClick={startChat}>\n            💬 Start Chatting\n          </button>\n          <button className=\"keep-swiping-btn\" onClick={resetToSwiping}>\n            🔥 Keep Swiping\n          </button>\n        </div>\n        \n        <div className=\"match-tips\">\n          <h3>💡 First Message Tips:</h3>\n          <ul>\n            <li>Reference something from their profile</li>\n            <li>Ask an engaging question</li>\n            <li>Be authentic and show personality</li>\n            <li>Avoid generic \"hey\" messages</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderChattingStage = () => (\n    <div className=\"chatting-stage\">\n      <div className=\"chat-header\">\n        <button className=\"back-btn\" onClick={() => setStage('matched')}>\n          ← Back\n        </button>\n        <div className=\"match-info\">\n          <img src={currentMatch?.profile.photos[0]} alt={currentMatch?.profile.name} />\n          <div>\n            <h3>{currentMatch?.profile.name}</h3>\n            <span className=\"online-status\">🟢 Online</span>\n          </div>\n        </div>\n        <button className=\"video-call-btn\" onClick={unlockVideoCall}>\n          📹 Video Date\n        </button>\n      </div>\n      \n      <ChatSimulation \n        npcId={currentMatch?.profile.id || 'alex'}\n        onVideoCallUnlock={unlockVideoCall}\n      />\n    </div>\n  );\n\n  const renderVideoDateStage = () => (\n    <div className=\"video-date-stage\">\n      <div className=\"video-header\">\n        <button className=\"back-btn\" onClick={() => setStage('chatting')}>\n          ← Back to Chat\n        </button>\n        <h3>📹 Video Date with {currentMatch?.profile.name}</h3>\n      </div>\n      \n      <RPMVideoCall \n        npcProfile={{\n          id: currentMatch?.profile.id || 'alex',\n          name: currentMatch?.profile.name || 'Alex',\n          avatar: currentMatch?.profile.avatar || {\n            id: 'fallback-avatar',\n            name: 'Alex',\n            gender: 'male' as const,\n            style: 'realistic' as const,\n            avatarUrl: ''\n          },\n          personality: currentMatch?.profile.personality || {\n            traits: ['friendly'],\n            responseStyle: 'casual'\n          }\n        }}\n        scenario=\"video-date\"\n        onCallEnd={completeSimulation}\n      />\n    </div>\n  );\n\n  const renderCompletedStage = () => (\n    <div className=\"completed-stage\">\n      <div className=\"completion-celebration\">\n        <h1>🎊 Simulation Complete! 🎊</h1>\n        <p>Great job practicing with {currentMatch?.profile.name}!</p>\n        \n        <div className=\"final-scores\">\n          <h3>📊 Your Performance:</h3>\n          <div className=\"score-grid\">\n            <div className=\"score-item\">\n              <span className=\"score-label\">First Message</span>\n              <span className=\"score-value\">85%</span>\n            </div>\n            <div className=\"score-item\">\n              <span className=\"score-label\">Conversation Flow</span>\n              <span className=\"score-value\">78%</span>\n            </div>\n            <div className=\"score-item\">\n              <span className=\"score-label\">Rizz Score</span>\n              <span className=\"score-value\">82%</span>\n            </div>\n            <div className=\"score-item\">\n              <span className=\"score-label\">Video Chemistry</span>\n              <span className=\"score-value\">76%</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"completion-actions\">\n          <button className=\"new-match-btn\" onClick={resetToSwiping}>\n            🔥 Find New Match\n          </button>\n          <button className=\"dashboard-btn\" onClick={() => window.location.href = '/skills-dashboard'}>\n            📊 View Dashboard\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPreferencesStage = () => (\n    <div className=\"preferences-stage\">\n      <div className=\"stage-header\">\n        <h2>🎯 Set Your Dating Preferences</h2>\n        <p>Customize your ideal matches for realistic practice scenarios</p>\n      </div>\n      \n      <div className=\"avatar-creation-section\">\n        <div className=\"avatar-creator-card\">\n          <h3>🎨 Create Your Avatar First</h3>\n          <p>Want to create your own avatar before starting? Use Ready Player Me!</p>\n          <button \n            className=\"create-avatar-btn\"\n            onClick={() => setShowAvatarCreator(true)}\n          >\n            🎭 Create Custom Avatar\n          </button>\n        </div>\n        \n        <div className=\"avatar-creator-card\">\n          <h3>🔄 Refresh Profiles</h3>\n          <p>Generate new profiles with fresh RPM avatars</p>\n          <button \n            className=\"create-avatar-btn\"\n            onClick={async () => {\n              if (userPreferences) {\n                const newProfiles = await AvatarGenerator.generateProfiles(userPreferences, 6);\n                await handleProfilesGenerated(newProfiles);\n              }\n            }}\n          >\n            🔄 Regenerate Profiles\n          </button>\n        </div>\n      </div>\n      \n      <UserPreferencesComponent \n        onPreferencesChange={handlePreferencesChange}\n        onProfilesGenerated={handleProfilesGenerated}\n      />\n      \n      <div className=\"stage-actions\">\n        <button \n          className=\"skip-btn\"\n          onClick={async () => {\n            const demoPreferences: UserPreferences = {\n              interestedIn: 'all',\n              ageRange: [22, 35],\n              styles: ['realistic'],\n              ethnicities: ['caucasian', 'asian', 'hispanic'],\n              bodyTypes: ['halfbody', 'fullbody'],\n              personalityTypes: ['outgoing', 'intellectual']\n            };\n            const demoProfiles = await AvatarGenerator.generateProfiles(demoPreferences, 6);\n            await handleProfilesGenerated(demoProfiles);\n            setStage('profile-generation');\n          }}\n        >\n          🚀 Quick Demo (Skip to Avatars)\n        </button>\n        <button \n          className=\"continue-btn\"\n          onClick={() => setStage('swiping')}\n          disabled={!userPreferences}\n        >\n          Continue to Swiping →\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderProfileGenerationStage = () => (\n    <div className=\"profile-generation-stage\">\n      <div className=\"stage-header\">\n        <h2>🎭 Your Generated Profiles</h2>\n        <p>AI-generated diverse profiles based on your preferences</p>\n      </div>\n      \n      <div className=\"avatar-creation-section\">\n        <div className=\"avatar-creator-card\">\n          <h3>🎨 Create Your Own Avatar</h3>\n          <p>Want to practice with a custom avatar? Create your own using Ready Player Me!</p>\n          <button \n            className=\"create-avatar-btn\"\n            onClick={() => setShowAvatarCreator(true)}\n          >\n            🎭 Create Custom Avatar\n          </button>\n        </div>\n        \n        <div className=\"avatar-creator-card\">\n          <h3>🔄 Refresh Profiles</h3>\n          <p>Generate new profiles with fresh RPM avatars</p>\n          <button \n            className=\"create-avatar-btn\"\n            onClick={async () => {\n              if (userPreferences) {\n                const newProfiles = await AvatarGenerator.generateProfiles(userPreferences, 6);\n                await handleProfilesGenerated(newProfiles);\n              }\n            }}\n          >\n            🔄 Regenerate Profiles\n          </button>\n        </div>\n      </div>\n      \n      <ProfileGallery\n        profiles={generatedProfiles}\n        onProfileSelect={handleProfileSelect}\n        onStartChat={handleStartChat}\n      />\n      \n      <div className=\"stage-actions\">\n        <button \n          className=\"back-btn\"\n          onClick={() => setStage('preferences')}\n        >\n          ← Back to Preferences\n        </button>\n        <button \n          className=\"continue-btn\"\n          onClick={() => setStage('swiping')}\n        >\n          Continue to Swiping →\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderStage = () => {\n    switch (stage) {\n      case 'preferences':\n        return renderPreferencesStage();\n      case 'profile-generation':\n        return renderProfileGenerationStage();\n      case 'swiping':\n        return renderSwipingStage();\n      case 'matched':\n        return renderMatchedStage();\n      case 'chatting':\n        return renderChattingStage();\n      case 'video-date':\n        return renderVideoDateStage();\n      case 'completed':\n        return renderCompletedStage();\n      default:\n        return null;\n    }\n  };\n\n  // Helper functions for profile generation\n  const getRandomOccupation = () => {\n    const occupations = [\n      'Software Engineer', 'Teacher', 'Designer', 'Marketing Manager', 'Nurse',\n      'Photographer', 'Writer', 'Consultant', 'Artist', 'Entrepreneur',\n      'Doctor', 'Lawyer', 'Chef', 'Musician', 'Therapist'\n    ];\n    return occupations[Math.floor(Math.random() * occupations.length)];\n  };\n\n  const getRandomEducation = () => {\n    const educations = [\n      'Bachelor\\'s Degree', 'Master\\'s Degree', 'PhD', 'High School',\n      'Associate Degree', 'Trade School', 'Some College'\n    ];\n    return educations[Math.floor(Math.random() * educations.length)];\n  };\n\n  const getRandomDealBreakers = () => {\n    const dealBreakers = [\n      'smoking', 'no ambition', 'rudeness', 'dishonesty', 'poor hygiene',\n      'excessive drinking', 'no sense of humor', 'close-mindedness'\n    ];\n    return dealBreakers.slice(0, Math.floor(Math.random() * 3) + 1);\n  };\n\n  return (\n    <div className=\"dating-simulation-flow\">\n      {renderStage()}\n      \n      <div className=\"progress-indicator\">\n        <div className={`step ${stage === 'swiping' ? 'active' : ['matched', 'chatting', 'video-date', 'completed'].includes(stage) ? 'completed' : ''}`}>\n          🔥 Match\n        </div>\n        <div className={`step ${stage === 'chatting' ? 'active' : ['video-date', 'completed'].includes(stage) ? 'completed' : ''}`}>\n          💬 Chat\n        </div>\n        <div className={`step ${stage === 'video-date' ? 'active' : stage === 'completed' ? 'completed' : ''}`}>\n          📹 Video Date\n        </div>\n        <div className={`step ${stage === 'completed' ? 'active' : ''}`}>\n          🎊 Complete\n        </div>\n      </div>\n      {showAvatarCreator && (\n        <RPMAvatarCreatorModal\n          isOpen={showAvatarCreator}\n          onClose={() => setShowAvatarCreator(false)}\n          onAvatarCreated={(avatarUrl: string) => {\n            console.log('New avatar created:', avatarUrl);\n            // You can add logic here to save the avatar or add it to profiles\n            setShowAvatarCreator(false);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default DatingSimulationFlow;\n","// extracted by mini-css-extract-plugin\nexport default {};","import React, { useEffect, useRef, useState } from 'react';\nimport { rpmService } from '../services/readyPlayerMeService';\n\ninterface RPMAvatarCreatorModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onAvatarCreated: (avatarUrl: string) => void;\n  title?: string;\n}\n\nconst RPMAvatarCreatorModal: React.FC<RPMAvatarCreatorModalProps> = ({\n  isOpen,\n  onClose,\n  onAvatarCreated,\n  title = \"Create Your Avatar\"\n}) => {\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    // Setup message listener for avatar creation\n    const cleanup = rpmService.setupAvatarCreatorListener(\n      (avatarUrl: string) => {\n        console.log('Avatar created successfully:', avatarUrl);\n        onAvatarCreated(avatarUrl);\n        onClose();\n      },\n      (error: string) => {\n        console.error('Avatar creation error:', error);\n        setError(error);\n      }\n    );\n\n    return cleanup;\n  }, [isOpen, onAvatarCreated, onClose]);\n\n  const handleIframeLoad = () => {\n    setIsLoading(false);\n  };\n\n  const handleIframeError = () => {\n    setIsLoading(false);\n    setError('Failed to load avatar creator. Please check your RPM configuration.');\n  };\n\n  if (!isOpen) return null;\n\n  const avatarCreatorUrl = rpmService.getAvatarCreatorUrl({\n    bodyType: 'halfbody',\n    quickStart: false,\n    clearCache: true\n  });\n\n  return (\n    <div className=\"rpm-modal-overlay\">\n      <div className=\"rpm-modal\">\n        <div className=\"rpm-modal-header\">\n          <h2>{title}</h2>\n          <button className=\"rpm-close-btn\" onClick={onClose}>\n            ✕\n          </button>\n        </div>\n        \n        <div className=\"rpm-modal-content\">\n          {isLoading && (\n            <div className=\"rpm-loading\">\n              <div className=\"rpm-spinner\"></div>\n              <p>Loading avatar creator...</p>\n            </div>\n          )}\n          \n          {error && (\n            <div className=\"rpm-error\">\n              <h3>Configuration Required</h3>\n              <p>{error}</p>\n              <div className=\"rpm-setup-instructions\">\n                <h4>Setup Instructions:</h4>\n                <ol>\n                  <li>Go to <a href=\"https://studio.readyplayer.me\" target=\"_blank\" rel=\"noopener noreferrer\">studio.readyplayer.me</a></li>\n                  <li>Create a free developer account</li>\n                  <li>Create a new Application</li>\n                  <li>Copy your subdomain and App ID</li>\n                  <li>Update the configuration in <code>src/services/readyPlayerMeService.ts</code></li>\n                </ol>\n              </div>\n            </div>\n          )}\n          \n          <iframe\n            ref={iframeRef}\n            src={avatarCreatorUrl}\n            className=\"rpm-iframe\"\n            onLoad={handleIframeLoad}\n            onError={handleIframeError}\n            allow=\"camera; microphone\"\n          />\n        </div>\n      </div>\n\n      <style>{`\n        .rpm-modal-overlay {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(0, 0, 0, 0.8);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          z-index: 1000;\n        }\n\n        .rpm-modal {\n          background: white;\n          border-radius: 12px;\n          width: 90vw;\n          height: 90vh;\n          max-width: 800px;\n          max-height: 600px;\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n        }\n\n        .rpm-modal-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 20px;\n          border-bottom: 1px solid #eee;\n          background: #f8f9fa;\n        }\n\n        .rpm-modal-header h2 {\n          margin: 0;\n          color: #333;\n        }\n\n        .rpm-close-btn {\n          background: none;\n          border: none;\n          font-size: 24px;\n          cursor: pointer;\n          color: #666;\n          padding: 0;\n          width: 30px;\n          height: 30px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .rpm-close-btn:hover {\n          color: #333;\n        }\n\n        .rpm-modal-content {\n          flex: 1;\n          position: relative;\n          display: flex;\n          flex-direction: column;\n        }\n\n        .rpm-iframe {\n          width: 100%;\n          height: 100%;\n          border: none;\n          flex: 1;\n        }\n\n        .rpm-loading {\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          background: white;\n          z-index: 10;\n        }\n\n        .rpm-spinner {\n          width: 40px;\n          height: 40px;\n          border: 4px solid #f3f3f3;\n          border-top: 4px solid #007bff;\n          border-radius: 50%;\n          animation: rpm-spin 1s linear infinite;\n          margin-bottom: 16px;\n        }\n\n        @keyframes rpm-spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n\n        .rpm-error {\n          padding: 40px;\n          text-align: center;\n          color: #666;\n        }\n\n        .rpm-error h3 {\n          color: #dc3545;\n          margin-bottom: 16px;\n        }\n\n        .rpm-setup-instructions {\n          background: #f8f9fa;\n          padding: 20px;\n          border-radius: 8px;\n          margin-top: 20px;\n          text-align: left;\n        }\n\n        .rpm-setup-instructions h4 {\n          margin-top: 0;\n          color: #333;\n        }\n\n        .rpm-setup-instructions ol {\n          margin: 16px 0;\n          padding-left: 20px;\n        }\n\n        .rpm-setup-instructions li {\n          margin-bottom: 8px;\n        }\n\n        .rpm-setup-instructions a {\n          color: #007bff;\n          text-decoration: none;\n        }\n\n        .rpm-setup-instructions a:hover {\n          text-decoration: underline;\n        }\n\n        .rpm-setup-instructions code {\n          background: #e9ecef;\n          padding: 2px 6px;\n          border-radius: 4px;\n          font-family: 'Monaco', 'Consolas', monospace;\n          font-size: 14px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default RPMAvatarCreatorModal;\n"],"names":["NAME_POOLS","male","western","latino","asian","african","middle_eastern","female","nonbinary","universal","BIO_TEMPLATES","outgoing","shy","intellectual","artistic","adventurous","romantic","INTEREST_POOLS","AvatarGenerator","getRandomElement","array","Math","floor","random","length","getRandomElements","count","sort","slice","generateName","gender","ethnicity","this","ethnicityKey","toLowerCase","replace","namePool","generatePronouns","generateBio","personalityType","name","age","templates","generateInterests","baseInterests","generateAvatarUrl","bodyType","arguments","undefined","rpmService","ReadyPlayerMeService","subdomain","process","appId","apiKey","rpmGender","generateRandomAvatar","modelUrl","error","console","warn","generatePhotos","avatarUrl","photoUrl","getConversationStyle","options","getDifficulty","generateProfiles","preferences","profiles","gendersToGenerate","interestedIn","push","mappedGender","i","ethnicities","bodyTypes","personalityTypes","style","styles","ageRange","photos","profile","id","concat","Date","now","pronouns","bio","interests","avatar","conversationStyle","difficulty","generateSingleProfile","RPMVideoCallContent","_ref","_npcProfile$avatar2","npcProfile","onCallEnd","scenario","callState","setCallState","useState","isConnected","isUserSpeaking","isNpcSpeaking","callDuration","currentEmotion","emotionIntensity","isMuted","isVideoOff","npcEmotions","setNpcEmotions","joy","sadness","anger","fear","surprise","disgust","neutral","concentration","conversationAnalytics","setConversationAnalytics","engagement","chemistry","conversationFlow","eyeContact","responseTime","messages","setMessages","mockVoiceState","connect","async","log","prev","_objectSpread","disconnect","status","callTimerRef","useRef","useEffect","_npcProfile$avatar","current","setInterval","clearInterval","emotionInterval","emotions","randomEmotion","endCall","getScenarioContext","contexts","title","description","tips","_jsxs","className","children","_jsx","onClick","RPMAvatar","isAnimating","RPMVideoCall","props","VoiceProvider","auth","type","value","hostname","REACT_APP_HUME_HOSTNAME","UserPreferencesComponent","onPreferencesChange","onProfilesGenerated","setPreferences","isGenerating","setIsGenerating","showAdvanced","setShowAdvanced","updatePreference","key","onChange","e","target","min","max","parseInt","map","checked","includes","personality","typedPersonality","filter","p","handlePersonalityToggle","charAt","toUpperCase","toggleArrayValue","setter","newArray","item","typedBodyType","bt","handleBodyTypeToggle","typedStyle","s","handleStyleToggle","diversityMetrics","genders","Set","personalities","disabled","SAMPLE_PROFILES","DEMO_RPM_AVATARS","find","a","occupation","education","distance","traits","responseStyle","rizzLevel","dealBreakers","DatingSimulationFlow","stage","setStage","userPreferences","setUserPreferences","generatedProfiles","setGeneratedProfiles","availableProfiles","setAvailableProfiles","matches","setMatches","currentMatch","setCurrentMatch","swipeIndex","setSwipeIndex","showAvatarCreator","setShowAvatarCreator","handlePreferencesChange","handleProfilesGenerated","convertedProfiles","getRandomOccupation","getRandomEducation","getRandomDealBreakers","handleProfileSelect","handleStartChat","convertedProfile","newMatch","matchedAt","chatStarted","videoCallUnlocked","completed","userScore","firstMessage","rizzScore","videoChemistry","handleSwipe","direction","startChat","unlockVideoCall","completeSimulation","resetToSwiping","occupations","educations","renderStage","newProfiles","demoProfiles","ProfileGallery","onProfileSelect","onStartChat","src","alt","interest","index","ChatSimulation","npcId","onVideoCallUnlock","window","location","href","RPMAvatarCreatorModal","isOpen","onClose","onAvatarCreated","iframeRef","isLoading","setIsLoading","setError","cleanup","setupAvatarCreatorListener","avatarCreatorUrl","getAvatarCreatorUrl","quickStart","clearCache","rel","ref","onLoad","handleIframeLoad","onError","handleIframeError","allow"],"sourceRoot":""}