{"version":3,"file":"static/js/1492.92b3ab83.chunk.js","mappings":"oLAOA,MAAMA,EAAsB,CAC1BC,QAAS,CACPC,eAAgB,EAChBC,gBAAiB,EACjBC,eAAgB,EAChBC,gBAAiB,EACjBC,aAAc,GACdC,cAAe,IAEjBC,MAAO,CACLN,eAAgB,GAChBC,gBAAiB,GACjBG,aAAc,GACdC,cAAe,IAEjBE,IAAK,CACHL,eAAgB,GAChBC,gBAAiB,GACjBC,aAAc,GACdC,cAAe,IAEjBG,UAAW,CACTC,QAAS,GACTC,YAAa,GACbC,aAAc,IAEhBC,MAAO,CACLC,aAAc,GACdC,cAAe,GACfC,eAAgB,GAChBC,gBAAiB,KA4FrB,EAxF0BC,IAInB,IAJoB,cACzBC,EAAgB,QAAO,UACvBC,EAAY,6DAA4D,gBACxEC,GACDH,EACC,MAAOI,EAASC,IAAcC,EAAAA,EAAAA,UAAS,YAChCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,CAAC,IACzCG,EAAYC,IAAiBJ,EAAAA,EAAAA,WAAS,GACvCK,GAAkBC,EAAAA,EAAAA,QAAO,MACzBC,GAAcD,EAAAA,EAAAA,QAAO,OAE3BE,EAAAA,EAAAA,YAAU,KACkBC,WACxB,IACE,MAAMC,QAAeC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAC5DC,EAAe,IAAIC,aACnBC,EAAWF,EAAaG,iBACfH,EAAaI,wBAAwBT,GAC7CU,QAAQH,GAEfZ,EAAgBgB,QAAUN,EAC1BR,EAAYc,QAAUJ,EAEtB,MAAMK,EAAsBA,KAC1B,MAAMC,EAAeN,EAASO,kBACxBC,EAAY,IAAIC,WAAWH,GACjCN,EAASU,qBAAqBF,GAE9B,MAAMG,EAASH,EAAUI,QAAO,CAACC,EAAGC,IAAMD,EAAIC,IAAKR,EAEnDnB,EAAcwB,EAAS,IAEvBI,sBAAsBV,IAGxBA,GACF,CAAE,MAAOW,GACPC,QAAQD,MAAM,uBAAwBA,EACxC,GAGFE,KACC,KAEH3B,EAAAA,EAAAA,YAAU,KAGRN,EAD2B3B,EAAoBuB,IAAYvB,EAAoBC,SAG3EqB,GACFA,EAAgBC,KAEjB,CAACA,EAASD,IAMb,OACEuC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,MAACG,EAAAA,GAAM,CAACC,OAAQ,CAAEC,SAAU,CAAC,EAAG,IAAK,GAAIC,IAAK,IAAKJ,SAAA,EACjDK,EAAAA,EAAAA,KAAA,gBAAcC,UAAW,MACzBD,EAAAA,EAAAA,KAAA,cAAYF,SAAU,CAAC,GAAI,GAAI,OAC/BE,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLC,SAAUlD,EACVK,YAAaA,EACb8C,YAAY,YAEdJ,EAAAA,EAAAA,KAACK,EAAAA,EAAa,QAGhBZ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BK,EAAAA,EAAAA,KAAA,UAAQM,MAAOnD,EAASoD,SAlBDC,IAC3BpD,EAAWoD,EAAEC,OAAOH,QAiBsCX,SACnDe,OAAOC,KAAK/E,GAAqBgF,KAAIC,IACpCb,EAAAA,EAAAA,KAAA,UAAiBM,MAAOO,EAAGlB,SAAEkB,GAAhBA,QAIjBpB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,mBAAiB3C,MACpByC,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,aAAWnC,EAAa,MAAQ,SACnCiC,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,oBAAkBxC,c","sources":["components/InteractiveAvatar.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Avatar } from '@readyplayerme/visage';\nimport * as THREE from 'three';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\n\n// Emotion mapping for Ready Player Me blendshapes\nconst EMOTION_BLENDSHAPES = {\n  neutral: {\n    mouthSmileLeft: 0,\n    mouthSmileRight: 0,\n    mouthFrownLeft: 0,\n    mouthFrownRight: 0,\n    eyeBlinkLeft: 0.2,\n    eyeBlinkRight: 0.2\n  },\n  happy: {\n    mouthSmileLeft: 0.7,\n    mouthSmileRight: 0.7,\n    eyeBlinkLeft: 0.1,\n    eyeBlinkRight: 0.1\n  },\n  sad: {\n    mouthFrownLeft: 0.5,\n    mouthFrownRight: 0.5,\n    eyeBlinkLeft: 0.4,\n    eyeBlinkRight: 0.4\n  },\n  surprised: {\n    jawOpen: 0.3,\n    eyeWideLeft: 0.5,\n    eyeWideRight: 0.5\n  },\n  angry: {\n    browDownLeft: 0.6,\n    browDownRight: 0.6,\n    mouthPressLeft: 0.4,\n    mouthPressRight: 0.4\n  }\n};\n\nconst InteractiveAvatar = ({ \n  characterType = 'coach', \n  avatarUrl = 'https://models.readyplayer.me/681d6cd903879b2f11528470.glb',\n  onEmotionChange \n}) => {\n  const [emotion, setEmotion] = useState('neutral');\n  const [blendShapes, setBlendShapes] = useState({});\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n\n  useEffect(() => {\n    const initAudioAnalysis = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const audioContext = new AudioContext();\n        const analyser = audioContext.createAnalyser();\n        const source = audioContext.createMediaStreamSource(stream);\n        source.connect(analyser);\n\n        audioContextRef.current = audioContext;\n        analyserRef.current = analyser;\n\n        const checkAudioIntensity = () => {\n          const bufferLength = analyser.frequencyBinCount;\n          const dataArray = new Uint8Array(bufferLength);\n          analyser.getByteFrequencyData(dataArray);\n          \n          const volume = dataArray.reduce((a, b) => a + b) / bufferLength;\n          \n          setIsSpeaking(volume > 10);\n\n          requestAnimationFrame(checkAudioIntensity);\n        };\n\n        checkAudioIntensity();\n      } catch (error) {\n        console.error('Audio capture error:', error);\n      }\n    };\n\n    initAudioAnalysis();\n  }, []);\n\n  useEffect(() => {\n    // Apply emotion-based blendshapes\n    const emotionBlendShapes = EMOTION_BLENDSHAPES[emotion] || EMOTION_BLENDSHAPES.neutral;\n    setBlendShapes(emotionBlendShapes);\n\n    if (onEmotionChange) {\n      onEmotionChange(emotion);\n    }\n  }, [emotion, onEmotionChange]);\n\n  const handleEmotionChange = (e) => {\n    setEmotion(e.target.value);\n  };\n\n  return (\n    <div className=\"interactive-avatar\">\n      <Canvas camera={{ position: [0, 1.6, 3], fov: 45 }}>\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <Avatar \n          modelSrc={avatarUrl}\n          blendShapes={blendShapes}\n          environment=\"sunset\"\n        />\n        <OrbitControls />\n      </Canvas>\n      \n      <div className=\"avatar-controls\">\n        <select value={emotion} onChange={handleEmotionChange}>\n          {Object.keys(EMOTION_BLENDSHAPES).map(em => (\n            <option key={em} value={em}>{em}</option>\n          ))}\n        </select>\n        \n        <div className=\"avatar-info\">\n          <p>Character Type: {characterType}</p>\n          <p>Speaking: {isSpeaking ? 'Yes' : 'No'}</p>\n          <p>Current Emotion: {emotion}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InteractiveAvatar;\n"],"names":["EMOTION_BLENDSHAPES","neutral","mouthSmileLeft","mouthSmileRight","mouthFrownLeft","mouthFrownRight","eyeBlinkLeft","eyeBlinkRight","happy","sad","surprised","jawOpen","eyeWideLeft","eyeWideRight","angry","browDownLeft","browDownRight","mouthPressLeft","mouthPressRight","_ref","characterType","avatarUrl","onEmotionChange","emotion","setEmotion","useState","blendShapes","setBlendShapes","isSpeaking","setIsSpeaking","audioContextRef","useRef","analyserRef","useEffect","async","stream","navigator","mediaDevices","getUserMedia","audio","audioContext","AudioContext","analyser","createAnalyser","createMediaStreamSource","connect","current","checkAudioIntensity","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteFrequencyData","volume","reduce","a","b","requestAnimationFrame","error","console","initAudioAnalysis","_jsxs","className","children","Canvas","camera","position","fov","_jsx","intensity","Avatar","modelSrc","environment","OrbitControls","value","onChange","e","target","Object","keys","map","em"],"sourceRoot":""}