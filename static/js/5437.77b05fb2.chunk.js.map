{"version":3,"file":"static/js/5437.77b05fb2.chunk.js","mappings":"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","sources":["components/CoachTrackingDemo.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { UnifiedTrackingCoordinator, CoachTrackingProfile } from '../services/UnifiedTrackingCoordinator';\nimport { getCoachById } from '../config/coachConfig';\n\ninterface CoachTrackingDemoProps {\n  onClose?: () => void;\n}\n\nconst CoachTrackingDemo: React.FC<CoachTrackingDemoProps> = ({ onClose }) => {\n  const [selectedCoachId, setSelectedCoachId] = useState<string>('posie');\n  const [trackingCoordinator] = useState(() => new UnifiedTrackingCoordinator());\n  \n  // Demo coach profiles\n  const demoCoaches = [\n    {\n      id: 'posie',\n      name: 'Posie',\n      specialty: 'Physical Presence',\n      description: 'Focuses on body language, posture, and physical confidence',\n      trackingNeeds: ['posture', 'body-language', 'presence'],\n      primaryModel: 'mediapipe-pose',\n      icon: '🧍‍♀️'\n    },\n    {\n      id: 'aria',\n      name: 'Aria',\n      specialty: 'Conversation Skills',\n      description: 'Emphasizes eye contact, facial expressions, and engagement',\n      trackingNeeds: ['eye-contact', 'facial-expressions', 'engagement'],\n      primaryModel: 'mediapipe-face + gazecloud',\n      icon: '👁️'\n    },\n    {\n      id: 'zara',\n      name: 'Zara',\n      specialty: 'Confidence & Charisma',\n      description: 'Analyzes full multimodal presence and authenticity',\n      trackingNeeds: ['micro-expressions', 'body-language', 'gestures', 'voice'],\n      primaryModel: 'full-stack',\n      icon: '✨'\n    },\n    {\n      id: 'kai',\n      name: 'Kai',\n      specialty: 'Authenticity',\n      description: 'Detects emotional authenticity and micro-expressions',\n      trackingNeeds: ['micro-expressions', 'emotional-range', 'authenticity'],\n      primaryModel: 'mediapipe-face + emotional-analysis',\n      icon: '💚'\n    }\n  ];\n\n  const selectedCoach = demoCoaches.find(c => c.id === selectedCoachId);\n\n  const getTrackingRequirements = (coachId: string) => {\n    const coach = demoCoaches.find(c => c.id === coachId);\n    if (!coach) return [];\n\n    return coach.trackingNeeds.map(need => ({\n      need,\n      description: getTrackingDescription(need),\n      model: getRequiredModel(need),\n      processingLoad: getProcessingLoad(need),\n      batteryImpact: getBatteryImpact(need)\n    }));\n  };\n\n  const getTrackingDescription = (need: string): string => {\n    const descriptions: Record<string, string> = {\n      'posture': 'Analyzes shoulder alignment, spine posture, and overall body positioning',\n      'body-language': 'Tracks openness, confidence signals, and physical presence',\n      'presence': 'Measures overall physical confidence and space occupation',\n      'eye-contact': 'Monitors gaze patterns, eye contact duration, and attention focus',\n      'facial-expressions': 'Detects basic emotions and engagement levels',\n      'engagement': 'Measures facial responsiveness and active listening cues',\n      'micro-expressions': 'Analyzes subtle facial movements and emotional authenticity',\n      'gestures': 'Tracks hand movements and expressive gestures',\n      'voice': 'Analyzes vocal prosody and emotional authenticity',\n      'emotional-range': 'Measures variety and authenticity of emotional expressions',\n      'authenticity': 'Detects genuine vs. masked emotional responses'\n    };\n    return descriptions[need] || 'Advanced tracking capability';\n  };\n\n  const getRequiredModel = (need: string): string => {\n    const models: Record<string, string> = {\n      'posture': 'MediaPipe Pose',\n      'body-language': 'MediaPipe Pose',\n      'presence': 'MediaPipe Pose',\n      'eye-contact': 'GazeCloud API',\n      'facial-expressions': 'ML5 FaceMesh',\n      'engagement': 'MediaPipe Face',\n      'micro-expressions': 'MediaPipe Face (High Res)',\n      'gestures': 'MediaPipe Hands',\n      'voice': 'Hume Voice API',\n      'emotional-range': 'MediaPipe Face + Hume',\n      'authenticity': 'MediaPipe Face + ML Analysis'\n    };\n    return models[need] || 'Advanced Model';\n  };\n\n  const getProcessingLoad = (need: string): number => {\n    const loads: Record<string, number> = {\n      'posture': 7,\n      'body-language': 8,\n      'presence': 6,\n      'eye-contact': 5,\n      'facial-expressions': 5,\n      'engagement': 6,\n      'micro-expressions': 9,\n      'gestures': 4,\n      'voice': 3,\n      'emotional-range': 8,\n      'authenticity': 9\n    };\n    return loads[need] || 5;\n  };\n\n  const getBatteryImpact = (need: string): 'low' | 'medium' | 'high' => {\n    const impacts: Record<string, 'low' | 'medium' | 'high'> = {\n      'posture': 'high',\n      'body-language': 'high',\n      'presence': 'medium',\n      'eye-contact': 'medium',\n      'facial-expressions': 'medium',\n      'engagement': 'medium',\n      'micro-expressions': 'high',\n      'gestures': 'low',\n      'voice': 'low',\n      'emotional-range': 'high',\n      'authenticity': 'high'\n    };\n    return impacts[need] || 'medium';\n  };\n\n  const requirements = getTrackingRequirements(selectedCoachId);\n  const totalProcessingLoad = requirements.reduce((sum, req) => sum + req.processingLoad, 0);\n  const avgBatteryImpact = requirements.length > 0 ? \n    requirements.filter(r => r.batteryImpact === 'high').length > requirements.length / 2 ? 'high' :\n    requirements.filter(r => r.batteryImpact === 'medium').length > 0 ? 'medium' : 'low'\n    : 'low';\n\n  return (\n    <div className=\"coach-tracking-demo\">\n      <div className=\"demo-header\">\n        <h2>Coach-Specific Tracking Requirements</h2>\n        <p>Each coach specializes in different aspects of dating skills and requires different tracking models</p>\n        {onClose && (\n          <button className=\"close-btn\" onClick={onClose}>×</button>\n        )}\n      </div>\n\n      <div className=\"coach-selector\">\n        {demoCoaches.map(coach => (\n          <div \n            key={coach.id}\n            className={`coach-card ${selectedCoachId === coach.id ? 'selected' : ''}`}\n            onClick={() => setSelectedCoachId(coach.id)}\n          >\n            <div className=\"coach-icon\">{coach.icon}</div>\n            <h3>{coach.name}</h3>\n            <p className=\"specialty\">{coach.specialty}</p>\n            <p className=\"description\">{coach.description}</p>\n          </div>\n        ))}\n      </div>\n\n      {selectedCoach && (\n        <div className=\"tracking-requirements\">\n          <div className=\"requirements-header\">\n            <h3>Tracking Requirements for {selectedCoach.name}</h3>\n            <div className=\"requirements-summary\">\n              <div className=\"summary-item\">\n                <span className=\"label\">Processing Load:</span>\n                <span className={`value load-${totalProcessingLoad > 20 ? 'high' : totalProcessingLoad > 10 ? 'medium' : 'low'}`}>\n                  {totalProcessingLoad}/40\n                </span>\n              </div>\n              <div className=\"summary-item\">\n                <span className=\"label\">Battery Impact:</span>\n                <span className={`value impact-${avgBatteryImpact}`}>\n                  {avgBatteryImpact.toUpperCase()}\n                </span>\n              </div>\n              <div className=\"summary-item\">\n                <span className=\"label\">Models Needed:</span>\n                <span className=\"value\">{requirements.length}</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"requirements-list\">\n            {requirements.map(req => (\n              <div key={req.need} className=\"requirement-item\">\n                <div className=\"requirement-header\">\n                  <h4>{req.need.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</h4>\n                  <div className=\"requirement-badges\">\n                    <span className={`processing-badge load-${req.processingLoad > 7 ? 'high' : req.processingLoad > 4 ? 'medium' : 'low'}`}>\n                      {req.processingLoad}/10\n                    </span>\n                    <span className={`battery-badge impact-${req.batteryImpact}`}>\n                      {req.batteryImpact}\n                    </span>\n                  </div>\n                </div>\n                <p className=\"requirement-description\">{req.description}</p>\n                <div className=\"model-info\">\n                  <span className=\"model-label\">Model:</span>\n                  <span className=\"model-name\">{req.model}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"demo-actions\">\n            <button className=\"action-btn primary\">\n              Start {selectedCoach.name} Session\n            </button>\n            <button className=\"action-btn secondary\">\n              View Tracking Configuration\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CoachTrackingDemo;\n"],"names":["_ref","onClose","selectedCoachId","setSelectedCoachId","useState","trackingCoordinator","UnifiedTrackingCoordinator","demoCoaches","id","name","specialty","description","trackingNeeds","primaryModel","icon","selectedCoach","find","c","getTrackingDescription","need","getRequiredModel","getProcessingLoad","getBatteryImpact","requirements","coachId","coach","map","model","processingLoad","batteryImpact","getTrackingRequirements","totalProcessingLoad","reduce","sum","req","avgBatteryImpact","length","filter","r","_jsxs","className","children","_jsx","onClick","concat","toUpperCase","replace","l"],"sourceRoot":""}