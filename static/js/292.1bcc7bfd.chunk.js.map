{"version":3,"file":"static/js/292.1bcc7bfd.chunk.js","mappings":"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","sources":["hooks/useAvatarBlendShapes.ts","../node_modules/@react-three/drei/web/Html.js","components/RPMHumeIntegration.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\ninterface EmotionScores {\n  happy?: number;\n  sad?: number;\n  angry?: number;\n  surprised?: number;\n  neutral?: number;\n  phoneme?: string;\n  [key: string]: number | string | undefined;\n}\n\ninterface BlendShapes {\n  // Mouth\n  mouthClose: number;\n  mouthSmileLeft: number;\n  mouthSmileRight: number;\n  mouthFrownLeft: number;\n  mouthFrownRight: number;\n  mouthPressLeft: number;\n  mouthPressRight: number;\n  mouthLowerDownLeft: number;\n  mouthLowerDownRight: number;\n  mouthUpperUpLeft: number;\n  mouthUpperUpRight: number;\n  mouthOpen: number;\n  mouthPucker: number;\n  mouthFunnel: number;\n  mouthRollLower: number;\n  mouthRollUpper: number;\n  mouthShrugLower: number;\n  mouthShrugUpper: number;\n  \n  // Eyes\n  eyeBlinkLeft: number;\n  eyeBlinkRight: number;\n  eyeSquintLeft: number;\n  eyeSquintRight: number;\n  eyeWideLeft: number;\n  eyeWideRight: number;\n  eyeLookInLeft: number;\n  eyeLookInRight: number;\n  eyeLookOutLeft: number;\n  eyeLookOutRight: number;\n  eyeLookUpLeft: number;\n  eyeLookUpRight: number;\n  eyeLookDownLeft: number;\n  eyeLookDownRight: number;\n  \n  // Brows\n  browDownLeft: number;\n  browDownRight: number;\n  browInnerUp: number;\n  browOuterUpLeft: number;\n  browOuterUpRight: number;\n  \n  // Other\n  cheekPuff: number;\n  cheekSquintLeft: number;\n  cheekSquintRight: number;\n  noseSneerLeft: number;\n  noseSneerRight: number;\n  tongueOut: number;\n  jawOpen: number;\n  jawForward: number;\n  jawLeft: number;\n  jawRight: number;\n  \n  // Additional blendshapes\n  [key: string]: number;\n}\n\ninterface EmotionPrediction {\n  name: string;\n  score: number;\n}\n\ninterface Prediction {\n  emotions?: EmotionPrediction[];\n}\n\ninterface FaceData {\n  predictions?: Prediction[];\n  emotions?: EmotionScores;\n}\n\nexport interface HumeResponse {\n  face?: FaceData;\n  predictions?: Prediction[];\n  emotions?: EmotionScores;\n}\n\ninterface UseAvatarBlendShapesReturn {\n  blendShapes: Partial<BlendShapes>;\n  applyPhoneme: (phoneme: string) => void;\n  resetBlendShapes: () => void;\n}\n\n/**\n * Maps Hume AI emotion scores to avatar blendshapes\n */\nconst mapEmotionsToBlendShapes = (emotions: EmotionScores): Partial<BlendShapes> => {\n  const {\n    happy = 0,\n    sad = 0,\n    angry = 0,\n    surprised = 0,\n    neutral = 0,\n    ...otherEmotions\n  } = emotions;\n\n  // Default neutral expression\n  const blendShapes: Partial<BlendShapes> = {\n    // Mouth\n    mouthClose: 0.5, // Slightly open for neutral\n    mouthSmileLeft: 0,\n    mouthSmileRight: 0,\n    mouthFrownLeft: 0,\n    mouthFrownRight: 0,\n    mouthPressLeft: 0,\n    mouthPressRight: 0,\n    mouthLowerDownLeft: 0,\n    mouthLowerDownRight: 0,\n    mouthUpperUpLeft: 0,\n    mouthUpperUpRight: 0,\n    mouthOpen: 0,\n    mouthPucker: 0,\n    mouthFunnel: 0,\n    mouthRollLower: 0,\n    mouthRollUpper: 0,\n    mouthShrugLower: 0,\n    mouthShrugUpper: 0,\n    \n    // Eyes\n    eyeBlinkLeft: 0,\n    eyeBlinkRight: 0,\n    eyeSquintLeft: 0,\n    eyeSquintRight: 0,\n    eyeWideLeft: 0,\n    eyeWideRight: 0,\n    eyeLookInLeft: 0,\n    eyeLookInRight: 0,\n    eyeLookOutLeft: 0,\n    eyeLookOutRight: 0,\n    eyeLookUpLeft: 0,\n    eyeLookUpRight: 0,\n    eyeLookDownLeft: 0,\n    eyeLookDownRight: 0,\n    \n    // Brows\n    browDownLeft: 0,\n    browDownRight: 0,\n    browInnerUp: 0,\n    browOuterUpLeft: 0,\n    browOuterUpRight: 0,\n    \n    // Other\n    cheekPuff: 0,\n    cheekSquintLeft: 0,\n    cheekSquintRight: 0,\n    noseSneerLeft: 0,\n    noseSneerRight: 0,\n    tongueOut: 0,\n    jawOpen: 0,\n    jawForward: 0,\n    jawLeft: 0,\n    jawRight: 0,\n  };\n\n  // Apply emotion-based blendshapes\n  if (happy > 0.3) {\n    blendShapes.mouthSmileLeft = happy;\n    blendShapes.mouthSmileRight = happy;\n    blendShapes.cheekSquintLeft = happy * 0.8;\n    blendShapes.cheekSquintRight = happy * 0.8;\n    blendShapes.eyeSquintLeft = happy * 0.5;\n    blendShapes.eyeSquintRight = happy * 0.5;\n  }\n\n  if (sad > 0.3) {\n    blendShapes.mouthFrownLeft = sad * 0.7;\n    blendShapes.mouthFrownRight = sad * 0.7;\n    blendShapes.browInnerUp = sad * 0.5;\n    blendShapes.browOuterUpLeft = sad * 0.3;\n    blendShapes.browOuterUpRight = sad * 0.3;\n  }\n\n  if (angry > 0.3) {\n    blendShapes.browDownLeft = angry * 0.8;\n    blendShapes.browDownRight = angry * 0.8;\n    blendShapes.noseSneerLeft = angry * 0.5;\n    blendShapes.noseSneerRight = angry * 0.5;\n    blendShapes.mouthPressLeft = angry * 0.6;\n    blendShapes.mouthPressRight = angry * 0.6;\n  }\n\n  if (surprised > 0.3) {\n    blendShapes.browInnerUp = Math.max(blendShapes.browInnerUp || 0, surprised * 0.8);\n    blendShapes.browOuterUpLeft = Math.max(blendShapes.browOuterUpLeft || 0, surprised * 0.8);\n    blendShapes.browOuterUpRight = Math.max(blendShapes.browOuterUpRight || 0, surprised * 0.8);\n    blendShapes.eyeWideLeft = surprised * 0.9;\n    blendShapes.eyeWideRight = surprised * 0.9;\n    blendShapes.jawOpen = surprised * 0.5;\n  }\n\n  // Handle phonemes if present\n  if (emotions.phoneme) {\n    const phoneme = emotions.phoneme.toString().toUpperCase();\n    \n    // Reset mouth shapes when phoneme is present\n    blendShapes.mouthClose = 0;\n    blendShapes.mouthOpen = 0;\n    blendShapes.mouthPucker = 0;\n    blendShapes.mouthFunnel = 0;\n    \n    // Map phonemes to mouth shapes\n    if (['AA', 'AE', 'AH', 'AY', 'AW'].includes(phoneme)) {\n      // Open mouth for wide vowel sounds\n      blendShapes.jawOpen = 0.7;\n      blendShapes.mouthFunnel = 0.3;\n    } else if (['EE', 'IH', 'IY'].includes(phoneme)) {\n      // Smile for E and I sounds\n      blendShapes.mouthSmileLeft = 0.8;\n      blendShapes.mouthSmileRight = 0.8;\n      blendShapes.jawOpen = 0.3;\n    } else if (['OO', 'UW', 'UH'].includes(phoneme)) {\n      // Pucker for O and U sounds\n      blendShapes.mouthPucker = 0.7;\n      blendShapes.jawOpen = 0.4;\n    } else if (['M', 'B', 'P'].includes(phoneme)) {\n      // Closed mouth for M, B, P sounds\n      blendShapes.mouthClose = 1.0;\n      blendShapes.jawOpen = 0.1;\n    } else if (['F', 'V'].includes(phoneme)) {\n      // Bite lower lip for F, V sounds\n      blendShapes.mouthPressLeft = 0.5;\n      blendShapes.mouthPressRight = 0.5;\n    } else if (['TH', 'DH'].includes(phoneme)) {\n      // Tongue between teeth for TH, DH sounds\n      blendShapes.tongueOut = 0.5;\n      blendShapes.jawOpen = 0.4;\n    }\n  }\n\n  return blendShapes;\n};\n\n/**\n * Hook to manage avatar blendshapes based on emotion data\n */\nconst useAvatarBlendShapes = (emotionData: HumeResponse | null): UseAvatarBlendShapesReturn => {\n  const [blendShapes, setBlendShapes] = useState<Partial<BlendShapes>>({});\n\n  const extractEmotions = useCallback((data: HumeResponse): EmotionScores => {\n    const emotions: EmotionScores = {};\n    \n    try {\n      // Check different possible response formats from Hume AI\n      if (data.face?.predictions?.[0]?.emotions) {\n        // Format: { face: { predictions: [{ emotions: [...] }] } }\n        data.face.predictions[0].emotions.forEach((e) => {\n          emotions[e.name] = e.score;\n        });\n      } else if (data.face?.emotions) {\n        // Format: { face: { emotions: { ... } } }\n        Object.assign(emotions, data.face.emotions);\n      } else if (data.predictions?.[0]?.emotions) {\n        // Format: { predictions: [{ emotions: [...] }] }\n        data.predictions[0].emotions.forEach((e) => {\n          emotions[e.name] = e.score;\n        });\n      } else if (data.emotions) {\n        // Format: { emotions: { ... } }\n        Object.assign(emotions, data.emotions);\n      }\n    } catch (error) {\n      console.error('Error extracting emotions:', error);\n    }\n    \n    return emotions;\n  }, []);\n\n  const applyPhoneme = useCallback((phoneme: string) => {\n    setBlendShapes(prev => ({\n      ...prev,\n      // Reset mouth shapes\n      mouthClose: 0,\n      mouthOpen: 0,\n      mouthPucker: 0,\n      mouthFunnel: 0,\n      // Add phoneme-specific shapes\n      ...(phoneme === 'AA' && { jawOpen: 0.7, mouthFunnel: 0.3 }),\n      ...(phoneme === 'M' && { mouthClose: 1.0, jawOpen: 0.1 }),\n      // Add more phoneme mappings as needed\n    }));\n  }, []);\n\n  const resetBlendShapes = useCallback(() => {\n    setBlendShapes({\n      // Default neutral expression\n      mouthClose: 0.5,\n      mouthSmileLeft: 0,\n      mouthSmileRight: 0,\n      // ... other default values\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!emotionData) return;\n\n    try {\n      const emotions = extractEmotions(emotionData);\n      const newBlendShapes = mapEmotionsToBlendShapes(emotions);\n      setBlendShapes(prev => ({\n        ...prev,\n        ...newBlendShapes\n      }));\n    } catch (error) {\n      console.error('Error processing emotion data:', error);\n    }\n  }, [emotionData, extractEmotions]);\n\n  return {\n    blendShapes,\n    applyPhoneme,\n    resetBlendShapes,\n  };\n};\n\nexport default useAvatarBlendShapes;\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { Vector3, DoubleSide, OrthographicCamera, PerspectiveCamera, Vector2 } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst v1 = /* @__PURE__ */new Vector3();\nconst v2 = /* @__PURE__ */new Vector3();\nconst v3 = /* @__PURE__ */new Vector3();\nconst v4 = /* @__PURE__ */new Vector2();\nfunction defaultCalculatePosition(el, camera, size) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  objectPos.project(camera);\n  const widthHalf = size.width / 2;\n  const heightHalf = size.height / 2;\n  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];\n}\nfunction isObjectBehindCamera(el, camera) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n  const deltaCamObj = objectPos.sub(cameraPos);\n  const camDir = camera.getWorldDirection(v3);\n  return deltaCamObj.angleTo(camDir) > Math.PI / 2;\n}\nfunction isObjectVisible(el, camera, raycaster, occlude) {\n  const elPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const screenPos = elPos.clone();\n  screenPos.project(camera);\n  v4.set(screenPos.x, screenPos.y);\n  raycaster.setFromCamera(v4, camera);\n  const intersects = raycaster.intersectObjects(occlude, true);\n  if (intersects.length) {\n    const intersectionDistance = intersects[0].distance;\n    const pointDistance = elPos.distanceTo(raycaster.ray.origin);\n    return pointDistance < intersectionDistance;\n  }\n  return true;\n}\nfunction objectScale(el, camera) {\n  if (camera instanceof OrthographicCamera) {\n    return camera.zoom;\n  } else if (camera instanceof PerspectiveCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const vFOV = camera.fov * Math.PI / 180;\n    const dist = objectPos.distanceTo(cameraPos);\n    const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;\n    return 1 / scaleFOV;\n  } else {\n    return 1;\n  }\n}\nfunction objectZIndex(el, camera, zIndexRange) {\n  if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const dist = objectPos.distanceTo(cameraPos);\n    const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);\n    const B = zIndexRange[1] - A * camera.far;\n    return Math.round(A * dist + B);\n  }\n  return undefined;\n}\nconst epsilon = value => Math.abs(value) < 1e-10 ? 0 : value;\nfunction getCSSMatrix(matrix, multipliers, prepend = '') {\n  let matrix3d = 'matrix3d(';\n  for (let i = 0; i !== 16; i++) {\n    matrix3d += epsilon(multipliers[i] * matrix.elements[i]) + (i !== 15 ? ',' : ')');\n  }\n  return prepend + matrix3d;\n}\nconst getCameraCSSMatrix = (multipliers => {\n  return matrix => getCSSMatrix(matrix, multipliers);\n})([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);\nconst getObjectCSSMatrix = (scaleMultipliers => {\n  return (matrix, factor) => getCSSMatrix(matrix, scaleMultipliers(factor), 'translate(-50%,-50%)');\n})(f => [1 / f, 1 / f, 1 / f, 1, -1 / f, -1 / f, -1 / f, -1, 1 / f, 1 / f, 1 / f, 1, 1, 1, 1, 1]);\nfunction isRefObject(ref) {\n  return ref && typeof ref === 'object' && 'current' in ref;\n}\nconst Html = /* @__PURE__ */React.forwardRef(({\n  children,\n  eps = 0.001,\n  style,\n  className,\n  prepend,\n  center,\n  fullscreen,\n  portal,\n  distanceFactor,\n  sprite = false,\n  transform = false,\n  occlude,\n  onOcclude,\n  castShadow,\n  receiveShadow,\n  material,\n  geometry,\n  zIndexRange = [16777271, 0],\n  calculatePosition = defaultCalculatePosition,\n  as = 'div',\n  wrapperClass,\n  pointerEvents = 'auto',\n  ...props\n}, ref) => {\n  const {\n    gl,\n    camera,\n    scene,\n    size,\n    raycaster,\n    events,\n    viewport\n  } = useThree();\n  const [el] = React.useState(() => document.createElement(as));\n  const root = React.useRef();\n  const group = React.useRef(null);\n  const oldZoom = React.useRef(0);\n  const oldPosition = React.useRef([0, 0]);\n  const transformOuterRef = React.useRef(null);\n  const transformInnerRef = React.useRef(null);\n  // Append to the connected element, which makes HTML work with views\n  const target = (portal == null ? void 0 : portal.current) || events.connected || gl.domElement.parentNode;\n  const occlusionMeshRef = React.useRef(null);\n  const isMeshSizeSet = React.useRef(false);\n  const isRayCastOcclusion = React.useMemo(() => {\n    return occlude && occlude !== 'blending' || Array.isArray(occlude) && occlude.length && isRefObject(occlude[0]);\n  }, [occlude]);\n  React.useLayoutEffect(() => {\n    const el = gl.domElement;\n    if (occlude && occlude === 'blending') {\n      el.style.zIndex = `${Math.floor(zIndexRange[0] / 2)}`;\n      el.style.position = 'absolute';\n      el.style.pointerEvents = 'none';\n    } else {\n      el.style.zIndex = null;\n      el.style.position = null;\n      el.style.pointerEvents = null;\n    }\n  }, [occlude]);\n  React.useLayoutEffect(() => {\n    if (group.current) {\n      const currentRoot = root.current = ReactDOM.createRoot(el);\n      scene.updateMatrixWorld();\n      if (transform) {\n        el.style.cssText = `position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;`;\n      } else {\n        const vec = calculatePosition(group.current, camera, size);\n        el.style.cssText = `position:absolute;top:0;left:0;transform:translate3d(${vec[0]}px,${vec[1]}px,0);transform-origin:0 0;`;\n      }\n      if (target) {\n        if (prepend) target.prepend(el);else target.appendChild(el);\n      }\n      return () => {\n        if (target) target.removeChild(el);\n        currentRoot.unmount();\n      };\n    }\n  }, [target, transform]);\n  React.useLayoutEffect(() => {\n    if (wrapperClass) el.className = wrapperClass;\n  }, [wrapperClass]);\n  const styles = React.useMemo(() => {\n    if (transform) {\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: size.width,\n        height: size.height,\n        transformStyle: 'preserve-3d',\n        pointerEvents: 'none'\n      };\n    } else {\n      return {\n        position: 'absolute',\n        transform: center ? 'translate3d(-50%,-50%,0)' : 'none',\n        ...(fullscreen && {\n          top: -size.height / 2,\n          left: -size.width / 2,\n          width: size.width,\n          height: size.height\n        }),\n        ...style\n      };\n    }\n  }, [style, center, fullscreen, size, transform]);\n  const transformInnerStyles = React.useMemo(() => ({\n    position: 'absolute',\n    pointerEvents\n  }), [pointerEvents]);\n  React.useLayoutEffect(() => {\n    isMeshSizeSet.current = false;\n    if (transform) {\n      var _root$current;\n      (_root$current = root.current) == null || _root$current.render(/*#__PURE__*/React.createElement(\"div\", {\n        ref: transformOuterRef,\n        style: styles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: transformInnerRef,\n        style: transformInnerStyles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        className: className,\n        style: style,\n        children: children\n      }))));\n    } else {\n      var _root$current2;\n      (_root$current2 = root.current) == null || _root$current2.render(/*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        style: styles,\n        className: className,\n        children: children\n      }));\n    }\n  });\n  const visible = React.useRef(true);\n  useFrame(gl => {\n    if (group.current) {\n      camera.updateMatrixWorld();\n      group.current.updateWorldMatrix(true, false);\n      const vec = transform ? oldPosition.current : calculatePosition(group.current, camera, size);\n      if (transform || Math.abs(oldZoom.current - camera.zoom) > eps || Math.abs(oldPosition.current[0] - vec[0]) > eps || Math.abs(oldPosition.current[1] - vec[1]) > eps) {\n        const isBehindCamera = isObjectBehindCamera(group.current, camera);\n        let raytraceTarget = false;\n        if (isRayCastOcclusion) {\n          if (Array.isArray(occlude)) {\n            raytraceTarget = occlude.map(item => item.current);\n          } else if (occlude !== 'blending') {\n            raytraceTarget = [scene];\n          }\n        }\n        const previouslyVisible = visible.current;\n        if (raytraceTarget) {\n          const isvisible = isObjectVisible(group.current, camera, raycaster, raytraceTarget);\n          visible.current = isvisible && !isBehindCamera;\n        } else {\n          visible.current = !isBehindCamera;\n        }\n        if (previouslyVisible !== visible.current) {\n          if (onOcclude) onOcclude(!visible.current);else el.style.display = visible.current ? 'block' : 'none';\n        }\n        const halfRange = Math.floor(zIndexRange[0] / 2);\n        const zRange = occlude ? isRayCastOcclusion //\n        ? [zIndexRange[0], halfRange] : [halfRange - 1, 0] : zIndexRange;\n        el.style.zIndex = `${objectZIndex(group.current, camera, zRange)}`;\n        if (transform) {\n          const [widthHalf, heightHalf] = [size.width / 2, size.height / 2];\n          const fov = camera.projectionMatrix.elements[5] * heightHalf;\n          const {\n            isOrthographicCamera,\n            top,\n            left,\n            bottom,\n            right\n          } = camera;\n          const cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);\n          const cameraTransform = isOrthographicCamera ? `scale(${fov})translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)` : `translateZ(${fov}px)`;\n          let matrix = group.current.matrixWorld;\n          if (sprite) {\n            matrix = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix).scale(group.current.scale);\n            matrix.elements[3] = matrix.elements[7] = matrix.elements[11] = 0;\n            matrix.elements[15] = 1;\n          }\n          el.style.width = size.width + 'px';\n          el.style.height = size.height + 'px';\n          el.style.perspective = isOrthographicCamera ? '' : `${fov}px`;\n          if (transformOuterRef.current && transformInnerRef.current) {\n            transformOuterRef.current.style.transform = `${cameraTransform}${cameraMatrix}translate(${widthHalf}px,${heightHalf}px)`;\n            transformInnerRef.current.style.transform = getObjectCSSMatrix(matrix, 1 / ((distanceFactor || 10) / 400));\n          }\n        } else {\n          const scale = distanceFactor === undefined ? 1 : objectScale(group.current, camera) * distanceFactor;\n          el.style.transform = `translate3d(${vec[0]}px,${vec[1]}px,0) scale(${scale})`;\n        }\n        oldPosition.current = vec;\n        oldZoom.current = camera.zoom;\n      }\n    }\n    if (!isRayCastOcclusion && occlusionMeshRef.current && !isMeshSizeSet.current) {\n      if (transform) {\n        if (transformOuterRef.current) {\n          const el = transformOuterRef.current.children[0];\n          if (el != null && el.clientWidth && el != null && el.clientHeight) {\n            const {\n              isOrthographicCamera\n            } = camera;\n            if (isOrthographicCamera || geometry) {\n              if (props.scale) {\n                if (!Array.isArray(props.scale)) {\n                  occlusionMeshRef.current.scale.setScalar(1 / props.scale);\n                } else if (props.scale instanceof Vector3) {\n                  occlusionMeshRef.current.scale.copy(props.scale.clone().divideScalar(1));\n                } else {\n                  occlusionMeshRef.current.scale.set(1 / props.scale[0], 1 / props.scale[1], 1 / props.scale[2]);\n                }\n              }\n            } else {\n              const ratio = (distanceFactor || 10) / 400;\n              const w = el.clientWidth * ratio;\n              const h = el.clientHeight * ratio;\n              occlusionMeshRef.current.scale.set(w, h, 1);\n            }\n            isMeshSizeSet.current = true;\n          }\n        }\n      } else {\n        const ele = el.children[0];\n        if (ele != null && ele.clientWidth && ele != null && ele.clientHeight) {\n          const ratio = 1 / viewport.factor;\n          const w = ele.clientWidth * ratio;\n          const h = ele.clientHeight * ratio;\n          occlusionMeshRef.current.scale.set(w, h, 1);\n          isMeshSizeSet.current = true;\n        }\n        occlusionMeshRef.current.lookAt(gl.camera.position);\n      }\n    }\n  });\n  const shaders = React.useMemo(() => ({\n    vertexShader: !transform ? /* glsl */`\n          /*\n            This shader is from the THREE's SpriteMaterial.\n            We need to turn the backing plane into a Sprite\n            (make it always face the camera) if \"transfrom\"\n            is false.\n          */\n          #include <common>\n\n          void main() {\n            vec2 center = vec2(0., 1.);\n            float rotation = 0.0;\n\n            // This is somewhat arbitrary, but it seems to work well\n            // Need to figure out how to derive this dynamically if it even matters\n            float size = 0.03;\n\n            vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n            vec2 scale;\n            scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n            scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n            bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n            if ( isPerspective ) scale *= - mvPosition.z;\n\n            vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale * size;\n            vec2 rotatedPosition;\n            rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n            rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n            mvPosition.xy += rotatedPosition;\n\n            gl_Position = projectionMatrix * mvPosition;\n          }\n      ` : undefined,\n    fragmentShader: /* glsl */`\n        void main() {\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n      `\n  }), [transform]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: group\n  }), occlude && !isRayCastOcclusion && /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: castShadow,\n    receiveShadow: receiveShadow,\n    ref: occlusionMeshRef\n  }, geometry || /*#__PURE__*/React.createElement(\"planeGeometry\", null), material || /*#__PURE__*/React.createElement(\"shaderMaterial\", {\n    side: DoubleSide,\n    vertexShader: shaders.vertexShader,\n    fragmentShader: shaders.fragmentShader\n  })));\n});\n\nexport { Html };\n","import React, { useState, useEffect, useRef, Suspense, useCallback, useMemo, lazy } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport { Group, Vector3, Vector3Tuple } from 'three';\nimport useAvatarBlendShapes from '../hooks/useAvatarBlendShapes';\nimport { Html } from '@react-three/drei';\n\n// Define the props interface for SimulationAvatar3D\ninterface SimulationAvatar3DProps {\n  avatarUrl: string;\n  blendShapes?: Record<string, number>;\n  position?: Vector3Tuple;\n  scale?: Vector3Tuple;\n  ref?: React.Ref<Group>;\n  onLoaded?: () => void;\n  onModelLoaded?: (model: Group) => void;\n}\n\n// Lazy load the SimulationAvatar3D component with proper typing\nconst SimulationAvatar3D = lazy(() => import('./SimulationAvatar3D')) as any;\n\n// Loading fallback component\nconst AvatarLoadingFallback = () => (\n  <mesh>\n    <boxGeometry args={[1, 1, 1]} />\n    <meshStandardMaterial color=\"gray\" />\n  </mesh>\n);\n\n// Define the BlendShape type\ntype BlendShape = {\n  // Mouth\n  mouthClose: number;\n  mouthFunnel: number;\n  mouthPucker: number;\n  mouthLeft: number;\n  mouthRight: number;\n  mouthSmileLeft: number;\n  mouthSmileRight: number;\n  mouthFrownLeft: number;\n  mouthFrownRight: number;\n  mouthStretchLeft: number;\n  mouthStretchRight: number;\n  mouthDimpleLeft: number;\n  mouthDimpleRight: number;\n  mouthRollLower: number;\n  mouthRollUpper: number;\n  mouthShrugLower: number;\n  mouthShrugUpper: number;\n  mouthPressLeft: number;\n  mouthPressRight: number;\n  mouthLowerDownLeft: number;\n  mouthLowerDownRight: number;\n  mouthUpperUpLeft: number;\n  mouthUpperUpRight: number;\n  mouthOpen: number;\n  // Jaw\n  jawOpen: number;\n  jawForward: number;\n  jawLeft: number;\n  jawRight: number;\n  // Eyes\n  eyeBlinkLeft: number;\n  eyeBlinkRight: number;\n  eyeSquintLeft: number;\n  eyeSquintRight: number;\n  eyeWideLeft: number;\n  eyeWideRight: number;\n  eyeLookInLeft: number;\n  eyeLookInRight: number;\n  eyeLookOutLeft: number;\n  eyeLookOutRight: number;\n  eyeLookUpLeft: number;\n  eyeLookUpRight: number;\n  eyeLookDownLeft: number;\n  eyeLookDownRight: number;\n  // Brows\n  browDownLeft: number;\n  browDownRight: number;\n  browInnerUp: number;\n  browOuterUpLeft: number;\n  browOuterUpRight: number;\n  // Cheeks\n  cheekPuff: number;\n  cheekSquintLeft: number;\n  cheekSquintRight: number;\n  // Nose\n  noseSneerLeft: number;\n  noseSneerRight: number;\n  // Tongue\n  tongueOut: number;\n  chestBreathing: number;\n};\n\n// Default blendshape values for the avatar\nconst defaultBlendShapes: BlendShape = {\n  // Mouth\n  mouthClose: 0.5, // Slightly open for neutral\n  mouthFunnel: 0,\n  mouthPucker: 0,\n  mouthLeft: 0,\n  mouthRight: 0,\n  mouthSmileLeft: 0,\n  mouthSmileRight: 0,\n  mouthFrownLeft: 0,\n  mouthFrownRight: 0,\n  mouthStretchLeft: 0,\n  mouthStretchRight: 0,\n  mouthDimpleLeft: 0,\n  mouthDimpleRight: 0,\n  mouthRollLower: 0,\n  mouthRollUpper: 0,\n  mouthShrugLower: 0,\n  mouthShrugUpper: 0,\n  mouthPressLeft: 0,\n  mouthPressRight: 0,\n  mouthLowerDownLeft: 0,\n  mouthLowerDownRight: 0,\n  mouthUpperUpLeft: 0,\n  mouthUpperUpRight: 0,\n  mouthOpen: 0,\n  // Jaw\n  jawOpen: 0,\n  jawForward: 0,\n  jawLeft: 0,\n  jawRight: 0,\n  // Eyes\n  eyeBlinkLeft: 0,\n  eyeBlinkRight: 0,\n  eyeSquintLeft: 0,\n  eyeSquintRight: 0,\n  eyeWideLeft: 0,\n  eyeWideRight: 0,\n  eyeLookInLeft: 0,\n  eyeLookInRight: 0,\n  eyeLookOutLeft: 0,\n  eyeLookOutRight: 0,\n  eyeLookUpLeft: 0,\n  eyeLookUpRight: 0,\n  eyeLookDownLeft: 0,\n  eyeLookDownRight: 0,\n  // Brows\n  browDownLeft: 0,\n  browDownRight: 0,\n  browInnerUp: 0,\n  browOuterUpLeft: 0,\n  browOuterUpRight: 0,\n  // Cheeks\n  cheekPuff: 0,\n  cheekSquintLeft: 0,\n  cheekSquintRight: 0,\n  // Nose\n  noseSneerLeft: 0,\n  noseSneerRight: 0,\n  // Tongue\n  tongueOut: 0,\n  chestBreathing: 0\n};\n\n// Define the EmotionData type\ninterface EmotionData {\n  predictions?: Array<{\n    emotions?: {\n      happy: number;\n      sad: number;\n      surprise: number;\n      fear: number;\n      anger: number;\n      disgust: number;\n      neutral: number;\n      [key: string]: number;\n    };\n  }>;\n}\n\n// Map Hume emotions to blendshape values\nconst emotionToBlendShape = (emotionData: EmotionData | null): BlendShape => {\n  const blendshapes = { ...defaultBlendShapes };\n  \n  if (!emotionData) return blendshapes;\n  \n  try {\n    const { predictions } = emotionData;\n    if (!predictions || !predictions[0]?.emotions) return blendshapes;\n    \n    const defaultEmotions = {\n      happy: 0,\n      sad: 0,\n      surprise: 0,\n      fear: 0,\n      anger: 0,\n      disgust: 0,\n      neutral: 1\n    };\n    \n    const emotions = predictions[0].emotions || defaultEmotions;\n    \n    // Map emotions to facial expressions\n    if (emotions.happy > 0.3) {\n      blendshapes.mouthSmileLeft = Math.min(1, emotions.happy * 1.5);\n      blendshapes.mouthSmileRight = Math.min(1, emotions.happy * 1.5);\n      blendshapes.eyeSquintLeft = Math.min(0.5, emotions.happy * 0.7);\n      blendshapes.eyeSquintRight = Math.min(0.5, emotions.happy * 0.7);\n    }\n    \n    if (emotions.sad > 0.3) {\n      blendshapes.mouthFrownLeft = Math.min(1, emotions.sad * 1.5);\n      blendshapes.mouthFrownRight = Math.min(1, emotions.sad * 1.5);\n      blendshapes.browInnerUp = Math.min(1, emotions.sad * 1.2);\n    }\n    \n    if (emotions.anger > 0.3) {\n      blendshapes.browDownLeft = Math.min(1, emotions.anger * 1.2);\n      blendshapes.browDownRight = Math.min(1, emotions.anger * 1.2);\n      blendshapes.mouthFrownLeft = Math.min(1, emotions.anger * 1.5);\n      blendshapes.mouthFrownRight = Math.min(1, emotions.anger * 1.5);\n      blendshapes.noseSneerLeft = Math.min(1, emotions.anger * 1.2);\n      blendshapes.noseSneerRight = Math.min(1, emotions.anger * 1.2);\n    }\n    \n    if (emotions.surprise > 0.3) {\n      blendshapes.eyeWideLeft = Math.min(1, emotions.surprise * 1.5);\n      blendshapes.eyeWideRight = Math.min(1, emotions.surprise * 1.5);\n      blendshapes.browInnerUp = Math.min(1, emotions.surprise * 1.2);\n      blendshapes.jawOpen = Math.min(0.7, emotions.surprise * 0.7);\n    }\n    \n    // Error handling is already done in the catch block above\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Error processing emotion data';\n    console.error('Error processing emotion data:', errorMessage);\n    // Return default blendshapes on error\n    return { ...defaultBlendShapes };\n  }\n  \n  return blendshapes;\n};\n\ninterface RPMHumeIntegrationProps {\n  emotionData?: any; // Hume AI response data\n  onAvatarLoaded?: (avatar: any) => void;\n  onEmotionDataProcessed?: (blendShapes: any) => void;\n  avatar?: any;\n}\n\nconst RPMHumeIntegration: React.FC<RPMHumeIntegrationProps> = ({\n  emotionData,\n  onAvatarLoaded,\n  onEmotionDataProcessed,\n  avatar,\n}) => {\n  const [currentPhoneme, setCurrentPhoneme] = useState<string | null>(null);\n  const [currentBlendShapes, setCurrentBlendShapes] = useState<BlendShape>({\n    // Initialize with some default values to prevent T-pose\n    eyeBlinkLeft: 0,\n    eyeBlinkRight: 0,\n    mouthSmileLeft: 0.1,\n    browInnerUp: 0.05,\n    chestBreathing: 0,\n  } as BlendShape);\n  const [idleAnimation, setIdleAnimation] = useState({ \n    breathing: 0,\n    blinkTimer: 0,\n    nextBlink: 3\n  });\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  \n  // Use the useAvatarBlendShapes hook\n  const { applyPhoneme, resetBlendShapes } = useAvatarBlendShapes(emotionData);\n  \n  const humeBlendShapes = emotionToBlendShape(emotionData);\n  \n  // Merge default blendshapes with the ones from the hook\n  const mergedBlendShapes = useMemo(() => {\n    return {\n      ...humeBlendShapes,\n      ...currentBlendShapes,\n      // Ensure Hume emotions override idle blinks when expressing\n      eyeBlinkLeft: humeBlendShapes.eyeBlinkLeft || currentBlendShapes.eyeBlinkLeft || 0,\n      eyeBlinkRight: humeBlendShapes.eyeBlinkRight || currentBlendShapes.eyeBlinkRight || 0\n    };\n  }, [humeBlendShapes, currentBlendShapes]);\n  \n  // Notify parent when blend shapes are updated\n  useEffect(() => {\n    if (onEmotionDataProcessed) {\n      onEmotionDataProcessed(mergedBlendShapes);\n    }\n  }, [mergedBlendShapes, onEmotionDataProcessed]);\n  \n  // Handle phoneme changes\n  useEffect(() => {\n    if (emotionData?.phoneme) {\n      applyPhoneme(emotionData.phoneme);\n    } else {\n      resetBlendShapes();\n    }\n  }, [emotionData?.phoneme, applyPhoneme, resetBlendShapes]);\n  \n  // Create a ref to store the avatar instance\n  const avatarRef = useRef<Group | null>(null);\n  \n  // Handle ref callback\n  const handleAvatarRef = useCallback((node: Group | null) => {\n    if (node) {\n      avatarRef.current = node;\n      if (onAvatarLoaded) {\n        onAvatarLoaded(node);\n      }\n    }\n  }, [onAvatarLoaded]);\n  const wsRef = useRef<WebSocket | null>(null);\n  const errorRef = useRef<string>('');\n  \n  // Update error ref when error state changes\n  useEffect(() => {\n    errorRef.current = error;\n  }, [error]);\n  const animationFrameRef = useRef<number>();\n  const lastUpdateTime = useRef(0);\n  \n  // Update idle animation\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setIdleAnimation(prev => {\n        const time = Date.now() / 1000;\n        const breathing = Math.sin(time * 0.5) * 0.02; // Subtle breathing\n        \n        // Blinking\n        let blinkTimer = prev.blinkTimer + 0.016; // ~60fps\n        let nextBlink = prev.nextBlink;\n        let blinkValue = 0;\n        \n        if (blinkTimer >= nextBlink) {\n          blinkValue = 1;\n          blinkTimer = 0;\n          nextBlink = 2 + Math.random() * 4; // Next blink in 2-6 seconds\n        } else if (blinkTimer < 0.15) {\n          blinkValue = Math.sin((blinkTimer / 0.15) * Math.PI);\n        }\n        \n        // Apply idle animations to blend shapes\n        setCurrentBlendShapes(shapes => ({\n          ...shapes,\n          eyeBlinkLeft: blinkValue,\n          eyeBlinkRight: blinkValue,\n          chestBreathing: breathing\n        }));\n        \n        return { breathing, blinkTimer, nextBlink };\n      });\n    }, 16); // ~60fps\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Connect to Hume WebSocket\n  useEffect(() => {\n    const connectWebSocket = () => {\n      try {\n        // Get API key from environment or localStorage\n        const apiKey = process.env.REACT_APP_HUME_API_KEY || \n                      localStorage.getItem('humeApiKey') || \n                      '';\n        \n        if (!apiKey) {\n          console.error('No Hume API key found. Please set REACT_APP_HUME_API_KEY or save it in settings.');\n          setError('No Hume API key configured');\n          return;\n        }\n        \n        const wsUrl = `wss://api.hume.ai/v0/stream/models?apiKey=${apiKey}`;\n        \n        wsRef.current = new WebSocket(wsUrl);\n        \n        wsRef.current.onopen = () => {\n          console.log('Connected to Hume WebSocket');\n          setIsConnected(true);\n          setError('');\n          \n          // Send configuration\n          const config = {\n            data: {\n              models: {\n                face: {}\n              },\n              data: \"\" // Will be replaced with actual image data\n            }\n          };\n          \n          wsRef.current?.send(JSON.stringify(config));\n        };\n        \n        wsRef.current.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            if (data.face) {\n              const newBlendShapes = emotionToBlendShape(data.face);\n              setCurrentBlendShapes(newBlendShapes);\n            }\n          } catch (e) {\n            console.error('Error processing WebSocket message:', e);\n          }\n        };\n        \n        wsRef.current.onerror = (event) => {\n          const errorMessage = 'WebSocket connection error';\n          console.error('WebSocket error:', event);\n          setError(errorMessage);\n          setIsConnected(false);\n        };\n        \n        wsRef.current.onclose = (event) => {\n          console.log('WebSocket connection closed', event.code, event.reason);\n          setIsConnected(false);\n          if (event.code !== 1000) { // 1000 is normal closure\n            const errorMessage = `WebSocket closed with code ${event.code}: ${event.reason || 'Unknown reason'}`;\n            setError(errorMessage);\n          }\n          // Attempt to reconnect after a delay\n          setTimeout(connectWebSocket, 3000);\n        };\n        \n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to connect to Hume EVI';\n        console.error('Error setting up WebSocket:', errorMessage);\n        setError(errorMessage);\n        setIsConnected(false);\n      }\n    };\n    \n    connectWebSocket();\n    \n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n  \n  // Simple animation loop for lip-sync (placeholder)\n  useEffect(() => {\n    let frameCount = 0;\n    \n    const animate = (time: number) => {\n      // Throttle updates to ~30fps\n      if (time - lastUpdateTime.current > 33) {\n        lastUpdateTime.current = time;\n        \n        // Simple mouth movement based on time\n        frameCount++;\n        const sinValue = Math.sin(frameCount * 0.1) * 0.5 + 0.5;\n        \n        setCurrentBlendShapes(prev => ({\n          ...prev,\n          jawOpen: Math.max(0.1, sinValue * 0.5), // Keep some jaw open\n          mouthClose: 1 - sinValue * 0.8, // Opposite of jawOpen for more natural look\n        }));\n      }\n      \n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    \n    animationFrameRef.current = requestAnimationFrame(animate);\n    \n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n  \n  // Use avatar from props or get from localStorage\n  const getAvatarUrl = () => {\n    if (avatar?.modelUrl) {\n      return avatar.modelUrl;\n    }\n    \n    // Try to get from localStorage\n    const storedAvatars = localStorage.getItem('rpm_avatars');\n    if (storedAvatars) {\n      const avatars = JSON.parse(storedAvatars);\n      if (avatars.length > 0) {\n        return avatars[0].url;\n      }\n    }\n    \n    // Fallback to a working demo avatar\n    return 'https://models.readyplayer.me/64c3f39b6db681b862c7e479.glb';\n  };\n  \n  const avatarUrl = getAvatarUrl();\n  \n  return (\n    <div style={{ width: '100%', height: '100vh', display: 'flex', flexDirection: 'column' }}>\n      <div style={{ padding: '1rem', background: '#f0f0f0' }}>\n        <h2>RPM Avatar with Hume Integration</h2>\n        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>\n          <span>Status: </span>\n          <span style={{ \n            color: isConnected ? 'green' : 'red',\n            fontWeight: 'bold'\n          }}>\n            {isConnected ? '🟢 Connected to Hume' : '🔴 Not Connected'}\n          </span>\n          {error && <span style={{ color: 'red', marginLeft: '1rem' }}>{error}</span>}\n        </div>\n        <div style={{ marginTop: '0.5rem', fontSize: '0.9rem', color: '#666' }}>\n          {!isConnected && 'Avatar will show idle animations only. Connect to Hume for full emotion support.'}\n        </div>\n      </div>\n      \n      <div style={{ flex: 1, position: 'relative' }}>\n        <Canvas\n          camera={{ \n            position: [0, 1.6, 2.5],  // Position camera at eye level, facing the avatar\n            fov: 45,                  // Field of view for natural perspective\n            near: 0.1,\n            far: 100\n          }}\n          style={{ background: '#f0f0f0' }}\n        >\n          <ambientLight intensity={0.5} />\n          <directionalLight position={[0, 5, 5]} intensity={0.5} />\n          <Suspense fallback={<AvatarLoadingFallback />}>\n            <SimulationAvatar3D \n              ref={handleAvatarRef}\n              avatarUrl={avatarUrl}\n              blendShapes={mergedBlendShapes}\n              position={[0, -0.5, 0]}  // Center the avatar\n              scale={[1, 1, 1]}\n              onLoaded={() => {\n                console.log('Avatar loaded');\n                if (onAvatarLoaded) {\n                  onAvatarLoaded(avatarRef.current);\n                }\n              }}\n              onModelLoaded={(model: Group) => {\n                console.log('Avatar model loaded:', model);\n                console.log('Current blend shapes:', mergedBlendShapes);\n              }}\n            />\n          </Suspense>\n          <Html position={[0, 2.5, 0]}>\n            <div style={{ \n              background: 'rgba(0,0,0,0.7)', \n              color: 'white', \n              padding: '10px',\n              borderRadius: '5px',\n              fontSize: '12px',\n              whiteSpace: 'pre'\n            }}>\n              Avatar URL: {avatarUrl.split('/').pop()}\n              {'\\n'}Breathing: {idleAnimation.breathing.toFixed(2)}\n              {'\\n'}Blink Timer: {idleAnimation.blinkTimer.toFixed(2)}\n              {'\\n'}Eye Blink: {(mergedBlendShapes.eyeBlinkLeft || 0).toFixed(2)}\n            </div>\n          </Html>\n          <OrbitControls \n            enablePan={false}\n            enableZoom={false}\n            enableRotate={false}  // Disable rotation for chat view\n            autoRotate={false}    // Explicitly disable auto-rotation\n            target={[0, 1.2, 0]}  // Look at chest/face area\n          />\n        </Canvas>\n      </div>\n    </div>\n  );\n};\n\nexport default RPMHumeIntegration;\n"],"names":["emotionData","blendShapes","setBlendShapes","useState","extractEmotions","useCallback","data","emotions","_data$face","_data$face$prediction","_data$face$prediction2","_data$face2","_data$predictions","_data$predictions$","face","predictions","forEach","e","name","score","Object","assign","error","console","applyPhoneme","phoneme","prev","_objectSpread","mouthClose","mouthOpen","mouthPucker","mouthFunnel","jawOpen","resetBlendShapes","mouthSmileLeft","mouthSmileRight","useEffect","newBlendShapes","happy","sad","angry","surprised","neutral","_objectWithoutProperties","_excluded","mouthFrownLeft","mouthFrownRight","mouthPressLeft","mouthPressRight","mouthLowerDownLeft","mouthLowerDownRight","mouthUpperUpLeft","mouthUpperUpRight","mouthRollLower","mouthRollUpper","mouthShrugLower","mouthShrugUpper","eyeBlinkLeft","eyeBlinkRight","eyeSquintLeft","eyeSquintRight","eyeWideLeft","eyeWideRight","eyeLookInLeft","eyeLookInRight","eyeLookOutLeft","eyeLookOutRight","eyeLookUpLeft","eyeLookUpRight","eyeLookDownLeft","eyeLookDownRight","browDownLeft","browDownRight","browInnerUp","browOuterUpLeft","browOuterUpRight","cheekPuff","cheekSquintLeft","cheekSquintRight","noseSneerLeft","noseSneerRight","tongueOut","jawForward","jawLeft","jawRight","Math","max","toString","toUpperCase","includes","mapEmotionsToBlendShapes","v1","Vector3","v2","v3","v4","Vector2","defaultCalculatePosition","el","camera","size","objectPos","setFromMatrixPosition","matrixWorld","project","widthHalf","width","heightHalf","height","x","y","epsilon","value","abs","getCSSMatrix","matrix","multipliers","prepend","arguments","length","undefined","matrix3d","i","elements","getCameraCSSMatrix","getObjectCSSMatrix","factor","f","Html","React","_ref","ref","children","eps","style","className","center","fullscreen","portal","distanceFactor","sprite","transform","occlude","onOcclude","castShadow","receiveShadow","material","geometry","zIndexRange","calculatePosition","as","wrapperClass","pointerEvents","props","gl","scene","raycaster","events","viewport","useThree","document","createElement","root","group","oldZoom","oldPosition","transformOuterRef","transformInnerRef","target","current","connected","domElement","parentNode","occlusionMeshRef","isMeshSizeSet","isRayCastOcclusion","Array","isArray","isRefObject","zIndex","concat","floor","position","currentRoot","ReactDOM","updateMatrixWorld","cssText","vec","appendChild","removeChild","unmount","styles","top","left","transformStyle","transformInnerStyles","_root$current","_root$current2","render","visible","useFrame","updateWorldMatrix","zoom","isBehindCamera","cameraPos","deltaCamObj","sub","camDir","getWorldDirection","angleTo","PI","isObjectBehindCamera","raytraceTarget","map","item","previouslyVisible","isvisible","elPos","screenPos","clone","set","setFromCamera","intersects","intersectObjects","intersectionDistance","distance","distanceTo","ray","origin","isObjectVisible","display","halfRange","zRange","PerspectiveCamera","OrthographicCamera","dist","A","far","near","B","round","objectZIndex","fov","projectionMatrix","isOrthographicCamera","bottom","right","cameraMatrix","matrixWorldInverse","cameraTransform","transpose","copyPosition","scale","perspective","vFOV","tan","objectScale","clientWidth","clientHeight","copy","divideScalar","setScalar","ratio","w","h","ele","lookAt","shaders","vertexShader","fragmentShader","_extends","side","DoubleSide","SimulationAvatar3D","lazy","AvatarLoadingFallback","_jsxs","_jsx","args","color","defaultBlendShapes","mouthLeft","mouthRight","mouthStretchLeft","mouthStretchRight","mouthDimpleLeft","mouthDimpleRight","chestBreathing","emotionToBlendShape","blendshapes","_predictions$","defaultEmotions","surprise","fear","anger","disgust","min","errorMessage","Error","message","onAvatarLoaded","onEmotionDataProcessed","avatar","currentPhoneme","setCurrentPhoneme","currentBlendShapes","setCurrentBlendShapes","idleAnimation","setIdleAnimation","breathing","blinkTimer","nextBlink","isConnected","setIsConnected","setError","useAvatarBlendShapes","humeBlendShapes","mergedBlendShapes","useMemo","avatarRef","useRef","handleAvatarRef","node","wsRef","errorRef","animationFrameRef","lastUpdateTime","interval","setInterval","time","Date","now","sin","blinkValue","random","shapes","clearInterval","connectWebSocket","apiKey","process","wsUrl","WebSocket","onopen","_wsRef$current","log","send","JSON","stringify","models","onmessage","event","parse","onerror","onclose","code","reason","setTimeout","close","cancelAnimationFrame","frameCount","animate","sinValue","requestAnimationFrame","avatarUrl","getAvatarUrl","modelUrl","storedAvatars","localStorage","getItem","avatars","url","flexDirection","padding","background","gap","alignItems","fontWeight","marginLeft","marginTop","fontSize","flex","Canvas","intensity","Suspense","fallback","onLoaded","onModelLoaded","model","borderRadius","whiteSpace","split","pop","toFixed","OrbitControls","enablePan","enableZoom","enableRotate","autoRotate"],"sourceRoot":""}