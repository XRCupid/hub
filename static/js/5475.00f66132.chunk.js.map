{"version":3,"file":"static/js/5475.00f66132.chunk.js","mappings":"yOASO,MAAMA,EAAkD,CAC7DC,KAAM,CACJC,KAAM,CACJ,sCACA,sCACA,iDACA,iDACA,kDAEFC,KAAM,CACJ,2CACA,2CACA,2CACA,2CACA,6CAGJC,OAAQ,CACNF,KAAM,CACJ,oDACA,+DACA,+DACA,+DACA,+DACA,+DACA,+DACA,+DACA,+DACA,gEAEFC,KAAM,CACJ,yDACA,yDACA,yDACA,yDACA,yDACA,2DAGJE,QAAS,CAEPH,KAAM,CACJ,sCACA,kDAEFC,KAAM,CACJ,2CACA,8C,eCjDN,SAASG,EAAMC,GACb,MAAMC,GAAQC,EAAAA,EAAAA,WACR,MAAEC,EAAK,WAAEC,IAAeC,EAAAA,EAAAA,GAAQ,4BAChC,QAAEC,EAAO,MAAEC,IAAUC,EAAAA,EAAAA,GAAcJ,EAAYH,GA2CrD,OAxCAQ,EAAAA,EAAAA,YAAU,KACkBC,WACxB,IAEE,MAAMC,EAAiBlB,EAAkBI,OAAOF,KAChD,GAAIgB,GAAkBA,EAAeC,OAAS,EAAG,CAE/C,MAAMC,EAAaF,EAAeG,KAAKC,MAAMD,KAAKE,SAAWL,EAAeC,SAGtEK,EAAS,IAAIC,EAAAA,EACbC,QAAiBF,EAAOG,UAAUP,GAExC,GAAIM,EAASf,YAAce,EAASf,WAAWQ,OAAS,EAAG,CAEzD,MAAMS,EAAOF,EAASf,WAAW,GAC3BkB,EAASf,EAAMgB,WAAWF,GAChCC,EAAOE,OAGPF,EAAOG,QAAQC,EAAAA,WAAkBC,IACnC,CACF,CACF,CAAE,MAAOC,GACPC,QAAQD,MAAM,gCAAiCA,EACjD,GAGFE,GAEO,KAELvB,EAAMwB,mBAEP,CAACxB,KAEJyB,EAAAA,EAAAA,IAAS,CAACC,EAAOC,KACf3B,EAAM4B,OAAOD,OAGRE,EAAAA,EAAAA,KAAA,SAAOC,IAAKpC,EAAMqC,UAACF,EAAAA,EAAAA,KAAA,aAAAG,EAAAA,EAAAA,GAAA,CAAWC,OAAQrC,GAAWH,KAC1D,CAKe,SAASyC,IACtB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CAACC,IAAK,CAAC,EAAG,GAAIC,OAAQ,CAAEC,IAAK,GAAIC,SAAU,CAAC,EAAG,IAAK,IAAMC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAAUZ,SAAA,EACzGF,EAAAA,EAAAA,KAAA,SAAOe,OAAO,aAAaC,KAAM,CAAC,cAClChB,EAAAA,EAAAA,KAAA,gBAAciB,UAAW,MACzBjB,EAAAA,EAAAA,KAAA,oBAAkBiB,UAAW,EAAGN,SAAU,CAAC,EAAG,EAAG,MACjDX,EAAAA,EAAAA,KAACkB,EAAAA,SAAQ,CAACC,SAAU,KAAKjB,UACvBF,EAAAA,EAAAA,KAACoB,EAAAA,EAAK,CAACC,YAAY,OAAOJ,UAAW,GAAIf,UACvCF,EAAAA,EAAAA,KAACrC,EAAK,CAAC2D,MAAO,IAAKX,SAAU,CAAC,GAAI,EAAG,UAGzCX,EAAAA,EAAAA,KAACuB,EAAAA,EAAa,CACZC,WAAW,EACXC,YAAa,EACbC,YAAa,EACbC,OAAQ,CAAC,EAAG,GAAK,OAIzB,CArBA1D,EAAAA,EAAQ2D,QAAQ,0B","sources":["config/animationConfig.ts","components/AvatarView.js"],"sourcesContent":["// Animation configuration for different avatar types\nexport interface AnimationSet {\n  idle: string[];\n  talk: string[];\n  flirt?: string[];\n  laugh?: string[];\n  think?: string[];\n}\n\nexport const AVATAR_ANIMATIONS: Record<string, AnimationSet> = {\n  male: {\n    idle: [\n      '/animations/M_Standing_Idle_001.glb',\n      '/animations/M_Standing_Idle_002.glb',\n      '/animations/M_Standing_Idle_Variations_001.glb',\n      '/animations/M_Standing_Idle_Variations_002.glb',\n      '/animations/M_Standing_Idle_Variations_003.glb',\n    ],\n    talk: [\n      '/animations/M_Talking_Variations_001.glb',\n      '/animations/M_Talking_Variations_002.glb',\n      '/animations/M_Talking_Variations_003.glb',\n      '/animations/M_Talking_Variations_004.glb',\n      '/animations/M_Talking_Variations_005.glb',\n    ]\n  },\n  female: {\n    idle: [\n      '/animations/feminine/idle/F_Standing_Idle_001.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_001.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_002.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_003.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_004.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_005.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_006.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_007.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_008.glb',\n      '/animations/feminine/idle/F_Standing_Idle_Variations_009.glb',\n    ],\n    talk: [\n      '/animations/feminine/talk/F_Talking_Variations_001.glb',\n      '/animations/feminine/talk/F_Talking_Variations_002.glb',\n      '/animations/feminine/talk/F_Talking_Variations_003.glb',\n      '/animations/feminine/talk/F_Talking_Variations_004.glb',\n      '/animations/feminine/talk/F_Talking_Variations_005.glb',\n      '/animations/feminine/talk/F_Talking_Variations_006.glb',\n    ]\n  },\n  neutral: {\n    // Fallback to male animations for neutral/undefined types\n    idle: [\n      '/animations/M_Standing_Idle_001.glb',\n      '/animations/M_Standing_Idle_Variations_001.glb',\n    ],\n    talk: [\n      '/animations/M_Talking_Variations_001.glb',\n      '/animations/M_Talking_Variations_002.glb',\n    ]\n  }\n};\n\n// Helper function to get random animation from a set\nexport function getRandomAnimation(type: 'male' | 'female' | 'neutral', category: keyof AnimationSet): string {\n  const animations = AVATAR_ANIMATIONS[type][category];\n  if (!animations || animations.length === 0) {\n    // Fallback to first idle animation if category doesn't exist\n    return AVATAR_ANIMATIONS[type].idle[0];\n  }\n  return animations[Math.floor(Math.random() * animations.length)];\n}\n\n// Helper to get animation set for avatar\nexport function getAnimationsForAvatar(avatarType: 'male' | 'female' | 'neutral' | undefined): AnimationSet {\n  return AVATAR_ANIMATIONS[avatarType || 'neutral'];\n}\n","import React, { Suspense, useRef, useEffect } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { useGLTF, OrbitControls, Stage, useAnimations } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { AVATAR_ANIMATIONS } from '../config/animationConfig';\n\nfunction Model(props) {\n  const group = useRef();\n  const { scene, animations } = useGLTF('/avatars/AngelChick.glb');\n  const { actions, mixer } = useAnimations(animations, group);\n  \n  // Load and play idle animation\n  useEffect(() => {\n    const loadIdleAnimation = async () => {\n      try {\n        // Get feminine idle animations from config\n        const idleAnimations = AVATAR_ANIMATIONS.female.idle;\n        if (idleAnimations && idleAnimations.length > 0) {\n          // Pick a random idle animation\n          const randomIdle = idleAnimations[Math.floor(Math.random() * idleAnimations.length)];\n          \n          // Load the animation\n          const loader = new GLTFLoader();\n          const animData = await loader.loadAsync(randomIdle);\n          \n          if (animData.animations && animData.animations.length > 0) {\n            // Add animation to mixer\n            const clip = animData.animations[0];\n            const action = mixer.clipAction(clip);\n            action.play();\n            \n            // Make it loop\n            action.setLoop(THREE.LoopRepeat, Infinity);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading idle animation:', error);\n      }\n    };\n    \n    loadIdleAnimation();\n    \n    return () => {\n      // Cleanup animations\n      mixer.stopAllAction();\n    };\n  }, [mixer]);\n  \n  useFrame((state, delta) => {\n    mixer.update(delta);\n  });\n  \n  return <group ref={group}><primitive object={scene} {...props} /></group>;\n}\n\n// Preload the model\nuseGLTF.preload('/avatars/AngelChick.glb');\n\nexport default function AvatarView() {\n  return (\n    <Canvas dpr={[1, 2]} camera={{ fov: 45, position: [0, 1.5, 4] }} style={{ width: '100%', height: '100vh' }}>\n      <color attach=\"background\" args={['#1a1a1a']} />\n      <ambientLight intensity={0.5} />\n      <directionalLight intensity={1} position={[5, 5, 5]} />\n      <Suspense fallback={null}>\n        <Stage environment=\"city\" intensity={0.6}>\n          <Model scale={1.5} position={[0, -1, 0]} />\n        </Stage>\n      </Suspense>\n      <OrbitControls \n        enablePan={false}\n        minDistance={2}\n        maxDistance={6}\n        target={[0, 0.5, 0]}\n      />\n    </Canvas>\n  );\n}\n"],"names":["AVATAR_ANIMATIONS","male","idle","talk","female","neutral","Model","props","group","useRef","scene","animations","useGLTF","actions","mixer","useAnimations","useEffect","async","idleAnimations","length","randomIdle","Math","floor","random","loader","GLTFLoader","animData","loadAsync","clip","action","clipAction","play","setLoop","THREE","Infinity","error","console","loadIdleAnimation","stopAllAction","useFrame","state","delta","update","_jsx","ref","children","_objectSpread","object","AvatarView","_jsxs","Canvas","dpr","camera","fov","position","style","width","height","attach","args","intensity","Suspense","fallback","Stage","environment","scale","OrbitControls","enablePan","minDistance","maxDistance","target","preload"],"sourceRoot":""}