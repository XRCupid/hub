{"version":3,"file":"static/js/9688.97daa012.chunk.js","mappings":"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","sources":["components/TestModeToggle.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { MockHumeEVI, mockHumeProsodyData, mockEmotionSets } from '../utils/mockHumeData';\n\ninterface TestModeToggleProps {\n  onMockMessage?: (message: any) => void;\n  onMockProsody?: (emotions: any[]) => void;\n  onMockVisemes?: (visemes: any) => void;\n}\n\nexport const TestModeToggle: React.FC<TestModeToggleProps> = ({\n  onMockMessage,\n  onMockProsody,\n  onMockVisemes\n}) => {\n  const [isTestMode, setIsTestMode] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [mockEVI, setMockEVI] = useState<MockHumeEVI | null>(null);\n\n  const handleTestModeToggle = useCallback(() => {\n    if (!isTestMode) {\n      // Start test mode\n      console.log('üß™ Enabling Test Mode - Using Mock Hume Data');\n      \n      const evi = new MockHumeEVI((message) => {\n        console.log('üé≠ Mock message received:', message);\n        if (onMockMessage) {\n          onMockMessage(message);\n        }\n        \n        // Extract prosody for emotions\n        if (message.prosody && onMockProsody) {\n          onMockProsody(message.prosody);\n        }\n        \n        // Extract timeline for visemes\n        if (message.timeline && onMockVisemes) {\n          // Convert timeline to viseme format\n          const visemes = message.timeline.reduce((acc: any, item: any) => {\n            if (item.type === 'phoneme') {\n              // Map phonemes to basic visemes\n              switch (item.value) {\n                case 'eh':\n                case 'ae':\n                  acc.jawOpen = 0.6;\n                  break;\n                case 'ow':\n                case 'aw':\n                  acc.mouthFunnel = 0.7;\n                  break;\n                case 'iy':\n                case 'ih':\n                  acc.mouthSmileLeft = 0.3;\n                  acc.mouthSmileRight = 0.3;\n                  break;\n                default:\n                  acc.jawOpen = Math.max(acc.jawOpen || 0, 0.2);\n              }\n            }\n            return acc;\n          }, {});\n          \n          onMockVisemes(visemes);\n        }\n      });\n      \n      setMockEVI(evi);\n      evi.start();\n      setIsTestMode(true);\n      setIsExpanded(true); // Auto-expand when starting test mode\n    } else {\n      // Stop test mode\n      console.log('üß™ Disabling Test Mode');\n      if (mockEVI) {\n        mockEVI.stop();\n      }\n      setMockEVI(null);\n      setIsTestMode(false);\n      setIsExpanded(false);\n    }\n  }, [isTestMode, mockEVI, onMockMessage, onMockProsody, onMockVisemes]);\n\n  const handleTestEmotion = useCallback((emotionSetKey: string) => {\n    if (onMockProsody) {\n      const emotionSet = mockEmotionSets[emotionSetKey as keyof typeof mockEmotionSets];\n      if (emotionSet) {\n        console.log(`üß™ Testing emotion set: ${emotionSetKey}`, emotionSet);\n        onMockProsody(emotionSet);\n      }\n    }\n  }, [onMockProsody]);\n\n  return (\n    <div style={{\n      position: 'fixed',\n      top: '10px',\n      left: '10px', // Moved to left side\n      background: 'rgba(0,0,0,0.9)',\n      color: 'white',\n      padding: '10px',\n      borderRadius: '8px',\n      zIndex: 1000,\n      fontSize: '12px',\n      width: isExpanded ? '280px' : '160px',\n      maxHeight: isExpanded ? '70vh' : 'auto',\n      overflowY: isExpanded ? 'auto' : 'hidden',\n      transition: 'all 0.3s ease',\n      border: '1px solid rgba(255,255,255,0.2)'\n    }}>\n      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '8px' }}>\n        <h4 style={{ margin: '0', fontSize: '13px' }}>üß™ Test Mode</h4>\n        {isTestMode && (\n          <button\n            onClick={() => setIsExpanded(!isExpanded)}\n            style={{\n              background: 'transparent',\n              border: '1px solid rgba(255,255,255,0.3)',\n              color: 'white',\n              padding: '2px 6px',\n              borderRadius: '3px',\n              cursor: 'pointer',\n              fontSize: '10px'\n            }}\n          >\n            {isExpanded ? '‚ñ≤' : '‚ñº'}\n          </button>\n        )}\n      </div>\n      \n      <button\n        onClick={handleTestModeToggle}\n        style={{\n          background: isTestMode ? '#ff4444' : '#44ff44',\n          color: 'white',\n          border: 'none',\n          padding: '6px 10px',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          width: '100%',\n          fontSize: '11px',\n          marginBottom: isTestMode && isExpanded ? '10px' : '0'\n        }}\n      >\n        {isTestMode ? 'üõë Stop' : '‚ñ∂Ô∏è Start Test'}\n      </button>\n\n      {isTestMode && isExpanded && (\n        <div>\n          <p style={{ margin: '5px 0', fontSize: '11px', fontWeight: 'bold' }}>\n            üé≠ Test Emotions:\n          </p>\n          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '4px', marginBottom: '8px' }}>\n            {Object.keys(mockEmotionSets).map(emotionKey => (\n              <button\n                key={emotionKey}\n                onClick={() => handleTestEmotion(emotionKey)}\n                style={{\n                  background: '#555',\n                  color: 'white',\n                  border: '1px solid rgba(255,255,255,0.2)',\n                  padding: '4px 6px',\n                  borderRadius: '3px',\n                  cursor: 'pointer',\n                  fontSize: '10px',\n                  textTransform: 'capitalize',\n                  transition: 'background 0.2s'\n                }}\n                onMouseEnter={(e) => e.currentTarget.style.background = '#777'}\n                onMouseLeave={(e) => e.currentTarget.style.background = '#555'}\n              >\n                {getEmotionEmoji(emotionKey)} {emotionKey}\n              </button>\n            ))}\n          </div>\n          \n          <div style={{ fontSize: '9px', opacity: 0.7, lineHeight: '1.2', borderTop: '1px solid rgba(255,255,255,0.1)', paddingTop: '6px' }}>\n            <strong>üéØ Look for:</strong><br/>\n            ‚Ä¢ <strong>Joy:</strong> Big smile + raised brows<br/>\n            ‚Ä¢ <strong>Anger:</strong> Furrowed brows + flared nostrils<br/>\n            ‚Ä¢ <strong>Sad:</strong> Frown + puppy dog eyes<br/>\n            ‚Ä¢ <strong>Surprise:</strong> Wide eyes + dramatic brows<br/>\n            ‚Ä¢ <strong>Fear:</strong> Wide eyes + worried brows<br/>\n            ‚Ä¢ <strong>Disgust:</strong> Nose sneer + lip curl\n          </div>\n        </div>\n      )}\n      \n      {isTestMode && !isExpanded && (\n        <div style={{ fontSize: '10px', opacity: 0.8, marginTop: '5px' }}>\n          Click ‚ñº to expand controls\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getEmotionEmoji(emotion: string): string {\n  const emojiMap: Record<string, string> = {\n    happy: 'üòä',\n    sad: 'üò¢', \n    angry: 'üò†',\n    surprised: 'üò≤',\n    scared: 'üò®',\n    disgusted: 'ü§¢',\n    confused: 'üòï',\n    content: 'üòå'\n  };\n  return emojiMap[emotion] || 'üòê';\n}\n"],"names":["TestModeToggle","_ref","onMockMessage","onMockProsody","onMockVisemes","isTestMode","setIsTestMode","useState","isExpanded","setIsExpanded","mockEVI","setMockEVI","handleTestModeToggle","useCallback","console","log","stop","evi","MockHumeEVI","message","prosody","timeline","visemes","reduce","acc","item","type","value","jawOpen","mouthFunnel","mouthSmileLeft","mouthSmileRight","Math","max","start","handleTestEmotion","emotionSetKey","emotionSet","mockEmotionSets","concat","_jsxs","style","position","top","left","background","color","padding","borderRadius","zIndex","fontSize","width","maxHeight","overflowY","transition","border","children","display","alignItems","justifyContent","marginBottom","_jsx","margin","onClick","cursor","fontWeight","gridTemplateColumns","gap","Object","keys","map","emotionKey","textTransform","onMouseEnter","e","currentTarget","onMouseLeave","getEmotionEmoji","opacity","lineHeight","borderTop","paddingTop","marginTop","emotion","happy","sad","angry","surprised","scared","disgusted","confused","content"],"sourceRoot":""}