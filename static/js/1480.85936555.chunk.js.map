{"version":3,"file":"static/js/1480.85936555.chunk.js","mappings":"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","sources":["components/ConversationSummary.js","webpack://hub/./src/components/ConversationSummary.css?cbb3"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer,\r\n  BarChart, Bar, PieChart, Pie, Cell, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar\r\n} from 'recharts';\r\nimport './ConversationSummary.css';\r\n\r\n// Emotion config\r\nconst emotionConfig = [\r\n  { name: 'Joy', color: '#5cb85c' },\r\n  { name: 'Interest', color: '#5bc0de' },\r\n  { name: 'Concentration', color: '#428bca' },\r\n  { name: 'Boredom', color: '#777777' },\r\n  { name: 'Confusion', color: '#ff7f0e' },\r\n  { name: 'Doubt', color: '#d9534f' },\r\n  { name: 'Sadness', color: '#5253a3' },\r\n  { name: 'Disgust', color: '#a94442' },\r\n  { name: 'Anxiety', color: '#d62728' },\r\n];\r\n\r\n// Emoji mapping for emotions\r\nconst emotionEmojis = {\r\n  Joy: '😊',\r\n  Interest: '🙂',\r\n  Concentration: '😐',\r\n  Boredom: '😒',\r\n  Confusion: '😕',\r\n  Doubt: '🤔',\r\n  Sadness: '😢',\r\n  Disgust: '😖',\r\n  Anxiety: '😨',\r\n};\r\n\r\nconst ConversationSummary = ({ summaryData, userId, roomId, onClose }) => {\r\n  const [aiAnalysis, setAiAnalysis] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [downloadUrl, setDownloadUrl] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (summaryData) {\r\n      generateAISummary(summaryData);\r\n    }\r\n  }, [summaryData]);\r\n\r\n  // Call OpenAI API to generate text summary\r\n  const generateAISummary = async (data) => {\r\n    setLoading(true);\r\n    try {\r\n      // Get OpenAI API key from environment variable\r\n      const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\r\n\r\n\r\n\r\n      // Analyze the emotion data\r\n      const user1DominantEmotions = getTopEmotions(data.user1.dominantEmotions, 3);\r\n      const user2DominantEmotions = getTopEmotions(data.user2.dominantEmotions, 3);\r\n      \r\n      // Calculate conversation duration\r\n      const durationMs = Date.now() - data.startTime;\r\n      const minutes = Math.floor(durationMs / 60000);\r\n      const seconds = Math.floor((durationMs % 60000) / 1000);\r\n      \r\n      // Prepare emotion trends data\r\n      const user1EmotionTrends = prepareEmotionTrends(data.user1.emotionTrends);\r\n      const user2EmotionTrends = prepareEmotionTrends(data.user2.emotionTrends);\r\n      \r\n      // Create prompt for GPT\r\n      const prompt = {\r\n        model: \"gpt-4\",\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content: \"You are an expert in analyzing emotional data from conversations. Your task is to generate an insightful, helpful, and positive summary of a video chat conversation based on the emotional data provided. Format your response in Markdown.\"\r\n          },\r\n          {\r\n            role: \"user\",\r\n            content: `Please analyze this video chat conversation data and provide a personalized summary:\r\n\r\nConversation duration: ${minutes} minutes and ${seconds} seconds\r\n\r\nUser emotions:\r\n${user1DominantEmotions.map(e => `- ${e.name}: ${e.count} occurrences (${e.emoji})`).join('\\n')}\r\n\r\nPartner emotions:\r\n${user2DominantEmotions.map(e => `- ${e.name}: ${e.count} occurrences (${e.emoji})`).join('\\n')}\r\n\r\nEmotion trends for user:\r\n${JSON.stringify(user1EmotionTrends)}\r\n\r\nEmotion trends for partner:\r\n${JSON.stringify(user2EmotionTrends)}\r\n\r\nTopics discussed:\r\n${data.topics.length > 0 ? data.topics.join(', ') : 'General conversation'}\r\n\r\nPlease generate a friendly, personalized summary with the following sections:\r\n1. Conversation Overview (duration and general tone)\r\n2. Emotional Dynamics (how emotions changed, patterns noticed)\r\n3. Connection Analysis (compatibility based on emotional responses)\r\n4. Conversation Highlights (what went well, interesting moments)\r\n5. Tips for Future Conversations (based on the emotional patterns)\r\n\r\nFormat as Markdown with appropriate headers and sections. Keep the tone positive and supportive, but honest.`\r\n          }\r\n        ]\r\n      };\r\n      \r\n      // Call OpenAI API\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`\r\n        },\r\n        body: JSON.stringify(prompt)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);\r\n      }\r\n      \r\n      const responseData = await response.json();\r\n      const summaryText = responseData.choices[0].message.content;\r\n      \r\n      setAiAnalysis(summaryText);\r\n      \r\n      // Generate a downloadable file\r\n      const blob = new Blob([summaryText], { type: 'text/markdown' });\r\n      const url = URL.createObjectURL(blob);\r\n      setDownloadUrl(url);\r\n      \r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error generating AI summary:', error);\r\n      setError(error.message);\r\n      \r\n      // Fallback to a basic summary if API fails\r\n      const fallbackSummary = generateFallbackSummary(data);\r\n      setAiAnalysis(fallbackSummary);\r\n      \r\n      // Create downloadable file for fallback summary\r\n      const blob = new Blob([fallbackSummary], { type: 'text/markdown' });\r\n      const url = URL.createObjectURL(blob);\r\n      setDownloadUrl(url);\r\n      \r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Helper function to prepare emotion trends for the API\r\n  const prepareEmotionTrends = (emotionTrends) => {\r\n    if (!emotionTrends || emotionTrends.length < 2) {\r\n      return [];\r\n    }\r\n    \r\n    // Find timestamps at regular intervals\r\n    const startTime = emotionTrends[0].timestamp;\r\n    const endTime = emotionTrends[emotionTrends.length - 1].timestamp;\r\n    const duration = endTime - startTime;\r\n    const intervals = Math.min(5, emotionTrends.length);\r\n    \r\n    const result = [];\r\n    for (let i = 0; i < intervals; i++) {\r\n      const targetTime = startTime + (duration * i / (intervals - 1));\r\n      \r\n      // Find closest data point\r\n      const closestPoint = emotionTrends.reduce((prev, curr) => {\r\n        return (Math.abs(curr.timestamp - targetTime) < Math.abs(prev.timestamp - targetTime))\r\n          ? curr : prev;\r\n      });\r\n      \r\n      const topEmotions = Object.entries(closestPoint.emotions)\r\n        .sort((a, b) => b[1] - a[1])\r\n        .slice(0, 2)\r\n        .map(([name, value]) => ({ name, value: Math.round(value * 100) }));\r\n      \r\n      result.push({\r\n        timeIndex: i,\r\n        relativeTime: i === 0 ? \"Start\" : i === intervals - 1 ? \"End\" : `${Math.round((i / (intervals - 1)) * 100)}%`,\r\n        topEmotions\r\n      });\r\n    }\r\n    \r\n    return result;\r\n  };\r\n\r\n  // Generate fallback summary if API call fails\r\n  const generateFallbackSummary = (data) => {\r\n    const user1DominantEmotions = getTopEmotions(data.user1.dominantEmotions, 2);\r\n    const user2DominantEmotions = getTopEmotions(data.user2.dominantEmotions, 2);\r\n    \r\n    const durationMs = Date.now() - data.startTime;\r\n    const minutes = Math.floor(durationMs / 60000);\r\n    const seconds = Math.floor((durationMs % 60000) / 1000);\r\n    \r\n    return `\r\n# Conversation Summary\r\n\r\nYour conversation lasted ${minutes} minutes and ${seconds} seconds.\r\n\r\n## Emotional Overview\r\n\r\nDuring this conversation, your dominant emotions were ${user1DominantEmotions.map(e => `${e.name} (${e.emoji})`).join(' and ')}.\r\nYour partner primarily expressed ${user2DominantEmotions.map(e => `${e.name} (${e.emoji})`).join(' and ')}.\r\n\r\n## Conversation Highlights\r\n\r\nYou both showed genuine interest in each other's perspectives. The emotional tone was generally positive, with moments of curiosity and thoughtful consideration. \r\n\r\nTopics that stood out in your conversation:\r\n${data.topics.length > 0 ? data.topics.map(topic => `- ${topic}`).join('\\n') : '- General conversation and getting to know each other'}\r\n\r\n## Compatibility Analysis\r\n\r\nBased on your emotional responses, you appear to have good conversational chemistry. The balance of interest and joy suggests a positive foundation for continued interaction.\r\n\r\nThank you for using XRCupid! We hope this analysis helps you reflect on your conversation experience.\r\n    `;\r\n  };\r\n\r\n  // Helper to get top emotions\r\n  const getTopEmotions = (emotionsObj, count = 2) => {\r\n    if (!emotionsObj || Object.keys(emotionsObj).length === 0) {\r\n      return [{ name: 'Neutral', count: 1, emoji: '😐' }];\r\n    }\r\n    \r\n    const emotionsList = Object.entries(emotionsObj).map(([name, count]) => ({\r\n      name,\r\n      count,\r\n      emoji: emotionEmojis[name] || ''\r\n    }));\r\n    \r\n    return emotionsList\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, count);\r\n  };\r\n\r\n  // Prepare emotion trend data\r\n  const prepareEmotionTrendData = (emotionTrends) => {\r\n    if (!emotionTrends || emotionTrends.length < 2) {\r\n      return [];\r\n    }\r\n    \r\n    // Get top emotions to track\r\n    const emotionCounts = {};\r\n    emotionTrends.forEach(point => {\r\n      Object.entries(point.emotions).forEach(([emotion, value]) => {\r\n        if (value > 0.2) { // Only count significant emotions\r\n          emotionCounts[emotion] = (emotionCounts[emotion] || 0) + value;\r\n        }\r\n      });\r\n    });\r\n    \r\n    const topEmotions = Object.entries(emotionCounts)\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, 3)\r\n      .map(([name]) => name);\r\n    \r\n    // Create chart data with regular intervals\r\n    const firstTimestamp = emotionTrends[0].timestamp;\r\n    const lastTimestamp = emotionTrends[emotionTrends.length - 1].timestamp;\r\n    const duration = lastTimestamp - firstTimestamp;\r\n    const points = Math.min(10, emotionTrends.length);\r\n    const interval = duration / (points - 1);\r\n    \r\n    const chartData = [];\r\n    for (let i = 0; i < points; i++) {\r\n      const targetTime = firstTimestamp + (i * interval);\r\n      \r\n      // Find closest data point\r\n      const closestPoint = emotionTrends.reduce((prev, curr) => {\r\n        return (Math.abs(curr.timestamp - targetTime) < Math.abs(prev.timestamp - targetTime))\r\n          ? curr : prev;\r\n      });\r\n      \r\n      const dataPoint = {\r\n        time: new Date(targetTime).toLocaleTimeString([], {\r\n          hour: '2-digit',\r\n          minute: '2-digit'\r\n        })\r\n      };\r\n      \r\n      // Add top emotions\r\n      topEmotions.forEach(emotion => {\r\n        dataPoint[emotion] = closestPoint.emotions[emotion] \r\n          ? Math.round(closestPoint.emotions[emotion] * 100) \r\n          : 0;\r\n      });\r\n      \r\n      chartData.push(dataPoint);\r\n    }\r\n    \r\n    return { chartData, topEmotions };\r\n  };\r\n\r\n  // Process dominant emotions for pie chart\r\n  const prepareDominantEmotionsData = (dominantEmotions) => {\r\n    if (!dominantEmotions || Object.keys(dominantEmotions).length === 0) {\r\n      return [{ name: 'Neutral', value: 1 }];\r\n    }\r\n    \r\n    return Object.entries(dominantEmotions)\r\n      .map(([name, count]) => ({\r\n        name,\r\n        value: count\r\n      }))\r\n      .sort((a, b) => b.value - a.value)\r\n      .slice(0, 5); // Show top 5 emotions\r\n  };\r\n\r\n  // Handle download summary\r\n  const downloadSummary = () => {\r\n    if (downloadUrl) {\r\n      const link = document.createElement('a');\r\n      link.href = downloadUrl;\r\n      link.download = `XRCupid-Summary-${new Date().toISOString().split('T')[0]}.md`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  };\r\n\r\n  // Conditional rendering - must be INSIDE the component function\r\n  if (!summaryData) {\r\n    return (\r\n      <div className=\"conversation-summary-container\">\r\n        <div className=\"summary-header\">\r\n          <h2>No conversation data available</h2>\r\n          <button className=\"close-button\" onClick={onClose}>Close</button>\r\n        </div>\r\n        <p>There is no data available to generate a summary.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Prepare chart data\r\n  const user1TrendData = prepareEmotionTrendData(summaryData.user1.emotionTrends);\r\n  const user2TrendData = prepareEmotionTrendData(summaryData.user2.emotionTrends);\r\n  const user1PieData = prepareDominantEmotionsData(summaryData.user1.dominantEmotions);\r\n  const user2PieData = prepareDominantEmotionsData(summaryData.user2.dominantEmotions);\r\n\r\n  return (\r\n    <div className=\"conversation-summary-container\">\r\n      <div className=\"summary-header\">\r\n        <h2>Conversation Summary</h2>\r\n        <div className=\"header-buttons\">\r\n          <button className=\"download-button\" onClick={downloadSummary}>\r\n            Download Summary\r\n          </button>\r\n          <button className=\"close-button\" onClick={onClose}>\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <div className=\"loading-container\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <p>Analyzing your conversation data...</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"summary-content\">\r\n          {error && (\r\n            <div className=\"error-message\">\r\n              <p>There was an error generating the AI analysis: {error}</p>\r\n              <p>Showing a basic summary instead.</p>\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"text-summary\">\r\n            <div className=\"markdown-content\">\r\n              {aiAnalysis.split('\\n').map((line, index) => {\r\n                if (line.startsWith('# ')) {\r\n                  return <h1 key={index}>{line.substring(2)}</h1>;\r\n                } else if (line.startsWith('## ')) {\r\n                  return <h2 key={index}>{line.substring(3)}</h2>;\r\n                } else if (line.startsWith('### ')) {\r\n                  return <h3 key={index}>{line.substring(4)}</h3>;\r\n                } else if (line.startsWith('- ')) {\r\n                  return <div className=\"list-item\" key={index}>{line}</div>;\r\n                } else if (line === '') {\r\n                  return <br key={index} />;\r\n                } else {\r\n                  return <p key={index}>{line}</p>;\r\n                }\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"charts-container\">\r\n            <div className=\"chart-section\">\r\n              <h3>Your Emotional Journey</h3>\r\n              <div className=\"chart-wrapper\">\r\n                {user1TrendData.chartData && user1TrendData.chartData.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <LineChart data={user1TrendData.chartData}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"time\" />\r\n                      <YAxis domain={[0, 100]} />\r\n                      <Tooltip formatter={(value) => [`${value}%`]} />\r\n                      <Legend />\r\n                      {user1TrendData.topEmotions.map((emotion) => {\r\n                        const config = emotionConfig.find(e => e.name === emotion) || { color: '#999' };\r\n                        return (\r\n                          <Line\r\n                            key={emotion}\r\n                            type=\"monotone\"\r\n                            dataKey={emotion}\r\n                            stroke={config.color}\r\n                            name={`${emotion} ${emotionEmojis[emotion] || ''}`}\r\n                          />\r\n                        );\r\n                      })}\r\n                    </LineChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"no-data-message\">Not enough data to visualize emotion trends</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"chart-section\">\r\n              <h3>Your Dominant Emotions</h3>\r\n              <div className=\"chart-wrapper\">\r\n                {user1PieData.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={user1PieData}\r\n                        dataKey=\"value\"\r\n                        nameKey=\"name\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={80}\r\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\r\n                      >\r\n                        {user1PieData.map((entry, index) => {\r\n                          const emotion = emotionConfig.find(e => e.name === entry.name);\r\n                          return (\r\n                            <Cell \r\n                              key={`cell-${index}`} \r\n                              fill={emotion ? emotion.color : `hsl(${index * 45}, 70%, 60%)`} \r\n                            />\r\n                          );\r\n                        })}\r\n                      </Pie>\r\n                      <Tooltip formatter={(value, name) => [`${value} occurrences`, name]} />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"no-data-message\">No dominant emotions detected</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"chart-section\">\r\n              <h3>Partner's Emotional Journey</h3>\r\n              <div className=\"chart-wrapper\">\r\n                {user2TrendData.chartData && user2TrendData.chartData.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <LineChart data={user2TrendData.chartData}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"time\" />\r\n                      <YAxis domain={[0, 100]} />\r\n                      <Tooltip formatter={(value) => [`${value}%`]} />\r\n                      <Legend />\r\n                      {user2TrendData.topEmotions.map((emotion) => {\r\n                        const config = emotionConfig.find(e => e.name === emotion) || { color: '#999' };\r\n                        return (\r\n                          <Line\r\n                            key={emotion}\r\n                            type=\"monotone\"\r\n                            dataKey={emotion}\r\n                            stroke={config.color}\r\n                            name={`${emotion} ${emotionEmojis[emotion] || ''}`}\r\n                          />\r\n                        );\r\n                      })}\r\n                    </LineChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"no-data-message\">Not enough data to visualize emotion trends</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"chart-section\">\r\n              <h3>Partner's Dominant Emotions</h3>\r\n              <div className=\"chart-wrapper\">\r\n                {user2PieData.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={200}>\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={user2PieData}\r\n                        dataKey=\"value\"\r\n                        nameKey=\"name\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={80}\r\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\r\n                      >\r\n                        {user2PieData.map((entry, index) => {\r\n                          const emotion = emotionConfig.find(e => e.name === entry.name);\r\n                          return (\r\n                            <Cell \r\n                              key={`cell-${index}`} \r\n                              fill={emotion ? emotion.color : `hsl(${index * 45}, 70%, 60%)`} \r\n                            />\r\n                          );\r\n                        })}\r\n                      </Pie>\r\n                      <Tooltip formatter={(value, name) => [`${value} occurrences`, name]} />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"no-data-message\">No dominant emotions detected</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"chart-section full-width\">\r\n              <h3>Emotional Compatibility</h3>\r\n              <div className=\"chart-wrapper\">\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <RadarChart outerRadius={90} data={emotionConfig}>\r\n                    <PolarGrid />\r\n                    <PolarAngleAxis dataKey=\"name\" />\r\n                    <PolarRadiusAxis angle={30} domain={[0, 100]} />\r\n                    <Radar\r\n                      name=\"You\"\r\n                      dataKey={(entry) => {\r\n                        const emotion = summaryData.user1.dominantEmotions[entry.name];\r\n                        return emotion ? Math.min(emotion * 10, 100) : 0;\r\n                      }}\r\n                      stroke=\"#8884d8\"\r\n                      fill=\"#8884d8\"\r\n                      fillOpacity={0.5}\r\n                    />\r\n                    <Radar\r\n                      name=\"Partner\"\r\n                      dataKey={(entry) => {\r\n                        const emotion = summaryData.user2.dominantEmotions[entry.name];\r\n                        return emotion ? Math.min(emotion * 10, 100) : 0;\r\n                      }}\r\n                      stroke=\"#82ca9d\"\r\n                      fill=\"#82ca9d\"\r\n                      fillOpacity={0.5}\r\n                    />\r\n                    <Legend />\r\n                  </RadarChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConversationSummary;","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["emotionConfig","name","color","emotionEmojis","Joy","Interest","Concentration","Boredom","Confusion","Doubt","Sadness","Disgust","Anxiety","_ref","summaryData","userId","roomId","onClose","aiAnalysis","setAiAnalysis","useState","loading","setLoading","downloadUrl","setDownloadUrl","error","setError","useEffect","generateAISummary","async","apiKey","process","user1DominantEmotions","getTopEmotions","data","user1","dominantEmotions","user2DominantEmotions","user2","durationMs","Date","now","startTime","minutes","Math","floor","seconds","user1EmotionTrends","prepareEmotionTrends","emotionTrends","user2EmotionTrends","prompt","model","messages","role","content","concat","map","e","count","emoji","join","JSON","stringify","topics","length","response","fetch","method","headers","body","ok","_errorData$error","errorData","json","Error","message","statusText","summaryText","choices","blob","Blob","type","url","URL","createObjectURL","console","fallbackSummary","generateFallbackSummary","timestamp","duration","intervals","min","result","i","targetTime","closestPoint","reduce","prev","curr","abs","topEmotions","Object","entries","emotions","sort","a","b","slice","_ref2","value","round","push","timeIndex","relativeTime","topic","emotionsObj","arguments","undefined","keys","emotionsList","_ref3","prepareEmotionTrendData","emotionCounts","forEach","point","_ref4","emotion","_ref5","firstTimestamp","points","interval","chartData","dataPoint","time","toLocaleTimeString","hour","minute","prepareDominantEmotionsData","_ref6","_jsxs","className","children","_jsx","onClick","user1TrendData","user2TrendData","user1PieData","user2PieData","downloadSummary","link","document","createElement","href","download","toISOString","split","appendChild","click","removeChild","line","index","startsWith","substring","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","Tooltip","formatter","Legend","config","find","Line","stroke","PieChart","Pie","nameKey","cx","cy","outerRadius","label","_ref7","percent","toFixed","entry","Cell","fill","_ref8","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","angle","Radar","fillOpacity"],"sourceRoot":""}