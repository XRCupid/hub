{"version":3,"file":"static/js/4299.44ccf8b9.chunk.js","mappings":"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","sources":["components/HumeTestEnvironment.tsx","webpack://hub/./src/components/HumeTestEnvironment.css?6564"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { COACHES } from '../config/coachConfig';\nimport { UserAvatarPiP } from './UserAvatarPiP';\nimport './HumeTestEnvironment.css';\n\nexport const HumeTestEnvironment: React.FC = () => {\n  const navigate = useNavigate();\n  const [selectedCoach, setSelectedCoach] = useState<string>('');\n  const [pipPosition, setPipPosition] = useState<'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'>('bottom-right');\n  const [pipSize, setPipSize] = useState<'small' | 'medium' | 'large'>('medium');\n  const [showPiP, setShowPiP] = useState(true);\n  const [testMode, setTestMode] = useState<'coaches' | 'pip' | 'both'>('both');\n\n  const handleCoachSelect = (coachId: string) => {\n    setSelectedCoach(coachId);\n    navigate(`/hume-coach/${coachId}`);\n  };\n\n  return (\n    <div className=\"hume-test-environment\">\n      <header className=\"test-header\">\n        <button className=\"back-button\" onClick={() => navigate('/training-hub')}>\n          ← Back to Hub\n        </button>\n        <h1>Hume AI Integration Test Environment</h1>\n        <div className=\"test-mode-selector\">\n          <button \n            className={`mode-btn ${testMode === 'coaches' ? 'active' : ''}`}\n            onClick={() => setTestMode('coaches')}\n          >\n            Coaches Only\n          </button>\n          <button \n            className={`mode-btn ${testMode === 'pip' ? 'active' : ''}`}\n            onClick={() => setTestMode('pip')}\n          >\n            PiP Only\n          </button>\n          <button \n            className={`mode-btn ${testMode === 'both' ? 'active' : ''}`}\n            onClick={() => setTestMode('both')}\n          >\n            Both\n          </button>\n        </div>\n      </header>\n\n      <div className=\"test-content\">\n        {/* PiP Test Section */}\n        {(testMode === 'pip' || testMode === 'both') && (\n          <section className=\"pip-test-section\">\n            <h2>User Avatar PiP Testing</h2>\n            <div className=\"pip-controls\">\n              <div className=\"control-group\">\n                <label>PiP Visibility</label>\n                <button \n                  className={`toggle-btn ${showPiP ? 'active' : ''}`}\n                  onClick={() => setShowPiP(!showPiP)}\n                >\n                  {showPiP ? 'Hide PiP' : 'Show PiP'}\n                </button>\n              </div>\n\n              <div className=\"control-group\">\n                <label>Position</label>\n                <div className=\"position-grid\">\n                  <button \n                    className={`pos-btn ${pipPosition === 'top-left' ? 'active' : ''}`}\n                    onClick={() => setPipPosition('top-left')}\n                  >\n                    ↖\n                  </button>\n                  <button \n                    className={`pos-btn ${pipPosition === 'top-right' ? 'active' : ''}`}\n                    onClick={() => setPipPosition('top-right')}\n                  >\n                    ↗\n                  </button>\n                  <button \n                    className={`pos-btn ${pipPosition === 'bottom-left' ? 'active' : ''}`}\n                    onClick={() => setPipPosition('bottom-left')}\n                  >\n                    ↙\n                  </button>\n                  <button \n                    className={`pos-btn ${pipPosition === 'bottom-right' ? 'active' : ''}`}\n                    onClick={() => setPipPosition('bottom-right')}\n                  >\n                    ↘\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"control-group\">\n                <label>Size</label>\n                <div className=\"size-options\">\n                  <button \n                    className={`size-btn ${pipSize === 'small' ? 'active' : ''}`}\n                    onClick={() => setPipSize('small')}\n                  >\n                    Small\n                  </button>\n                  <button \n                    className={`size-btn ${pipSize === 'medium' ? 'active' : ''}`}\n                    onClick={() => setPipSize('medium')}\n                  >\n                    Medium\n                  </button>\n                  <button \n                    className={`size-btn ${pipSize === 'large' ? 'active' : ''}`}\n                    onClick={() => setPipSize('large')}\n                  >\n                    Large\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"pip-info\">\n              <h3>Features Being Tested:</h3>\n              <ul>\n                <li>✓ Hume emotion detection from camera</li>\n                <li>✓ Real-time blendshape mapping</li>\n                <li>✓ Lip sync from facial tracking</li>\n                <li>✓ Head pose tracking</li>\n                <li>✓ Expression visualization</li>\n              </ul>\n            </div>\n          </section>\n        )}\n\n        {/* Coach Test Section */}\n        {(testMode === 'coaches' || testMode === 'both') && (\n          <section className=\"coach-test-section\">\n            <h2>Hume AI Coach Testing</h2>\n            <div className=\"coach-grid\">\n              {Object.values(COACHES).map((coach) => (\n                <div \n                  key={coach.id}\n                  className=\"coach-card\"\n                  onClick={() => handleCoachSelect(coach.id)}\n                  style={{ borderColor: coach.color }}\n                >\n                  <div className=\"coach-avatar\" style={{ backgroundColor: coach.color + '20' }}>\n                    <div className=\"avatar-placeholder\">\n                      {coach.name[0]}\n                    </div>\n                  </div>\n                  <h3>{coach.name}</h3>\n                  <p className=\"coach-personality\">{coach.personality}</p>\n                  <p className=\"coach-description\">{coach.description}</p>\n                  <div className=\"coach-voice-info\">\n                    <span className=\"voice-label\">Voice:</span>\n                    <span className=\"voice-style\">{coach.voice.style}</span>\n                  </div>\n                  <button className=\"test-coach-btn\">\n                    Test with Hume AI\n                  </button>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"coach-features\">\n              <h3>Coach Features:</h3>\n              <ul>\n                <li>✓ Emotional voice responses</li>\n                <li>✓ Real-time emotion detection</li>\n                <li>✓ Dynamic lighting based on emotions</li>\n                <li>✓ ElevenLabs voice synthesis</li>\n                <li>✓ Avatar lip sync and expressions</li>\n              </ul>\n            </div>\n          </section>\n        )}\n      </div>\n\n      {/* Show PiP if enabled */}\n      {showPiP && (testMode === 'pip' || testMode === 'both') && (\n        <UserAvatarPiP\n          position={pipPosition}\n          size={pipSize}\n          onClose={() => setShowPiP(false)}\n        />\n      )}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["HumeTestEnvironment","navigate","useNavigate","selectedCoach","setSelectedCoach","useState","pipPosition","setPipPosition","pipSize","setPipSize","showPiP","setShowPiP","testMode","setTestMode","_jsxs","className","children","_jsx","onClick","concat","Object","values","COACHES","map","coach","handleCoachSelect","coachId","id","style","borderColor","color","backgroundColor","name","personality","description","voice","UserAvatarPiP","position","size","onClose"],"sourceRoot":""}