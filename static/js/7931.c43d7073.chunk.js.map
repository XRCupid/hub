{"version":3,"file":"static/js/7931.c43d7073.chunk.js","mappings":"0KAGO,MAAMA,EAAiCA,KAC5C,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAA+B,OAClEC,EAAeC,IAAoBF,EAAAA,EAAAA,UAA+B,MAmEzE,OAjEAG,EAAAA,EAAAA,YAAU,KAERC,EAAAA,EAAmBC,eAAc,CAACC,EAAsBC,KACtDR,EAAiBO,GACjBJ,EAAiBK,GACjBC,QAAQC,IAAI,kBAAmBH,GAC/BE,QAAQC,IAAI,kBAAmBF,MAIjCH,EAAAA,EAAmBM,gBAGnBC,YAAW,KACTP,EAAAA,EAAmBQ,mBAAmB,CACpCC,QAAS,CACPC,QAAQ,EACRC,WAAW,EACXC,gBAAiB,IAEnBC,WAAY,CACVC,WAAW,EACXC,SAAU,EACVC,QAAS,IAEXC,SAAU,CACRC,SAAS,EACTC,cAAc,EACdC,UAAW,GAEbC,OAAQ,CACNC,QAAS,QACTC,UAAW,GACXC,WAAW,OAGd,KAGHjB,YAAW,KACTP,EAAAA,EAAmByB,cAAc,CAC/BC,KAAM,uBACNC,KAAM,aACNZ,SAAU,GACVa,cAAe,CACbf,WAAY,CACVC,WAAW,EACXC,SAAU,EACVC,QAAS,GACTb,SAAU,KAGd0B,aAAc,CACZ,gCACA,qCACA,qCAGH,KAEI,KACL7B,EAAAA,EAAmB8B,kBAEpB,KAGDC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,gBAAiB,UAAWC,aAAc,QAASC,SAAA,EAChFC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4BAEJL,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEM,UAAW,QAASF,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJC,EAAAA,EAAAA,KAAA,OAAKL,MAAO,CAAEE,gBAAiB,QAASD,QAAS,OAAQE,aAAc,OAAQC,SAC5EG,KAAKC,UAAU9C,EAAe,KAAM,SAIzCqC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEM,UAAW,QAASF,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJC,EAAAA,EAAAA,KAAA,OAAKL,MAAO,CAAEE,gBAAiB,QAASD,QAAS,OAAQE,aAAc,OAAQC,SAC5EG,KAAKC,UAAU3C,EAAe,KAAM,W","sources":["components/TestPhysicalFeatures.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { coachAwareTracking, TrackingState, CoachFeedback } from '../services/CoachAwareTrackingSystem';\n\nexport const TestPhysicalFeatures: React.FC = () => {\n  const [trackingState, setTrackingState] = useState<TrackingState | null>(null);\n  const [coachFeedback, setCoachFeedback] = useState<CoachFeedback | null>(null);\n\n  useEffect(() => {\n    // Set up coach callback\n    coachAwareTracking.registerCoach((state: TrackingState, feedback: CoachFeedback) => {\n      setTrackingState(state);\n      setCoachFeedback(feedback);\n      console.log('Tracking State:', state);\n      console.log('Coach Feedback:', feedback);\n    });\n\n    // Start tracking\n    coachAwareTracking.startTracking();\n\n    // Simulate some tracking data after 2 seconds\n    setTimeout(() => {\n      coachAwareTracking.updateTrackingData({\n        posture: {\n          isOpen: true,\n          isLeaning: true,\n          shoulderTension: 0.3\n        },\n        eyeContact: {\n          isLooking: true,\n          duration: 3,\n          quality: 0.8\n        },\n        gestures: {\n          areOpen: true,\n          isExpressive: true,\n          frequency: 5\n        },\n        facial: {\n          emotion: 'happy',\n          intensity: 0.7,\n          mirroring: true\n        }\n      });\n    }, 2000);\n\n    // Start an exercise after 4 seconds\n    setTimeout(() => {\n      coachAwareTracking.startExercise({\n        name: 'Eye Contact Practice',\n        type: 'eyeContact',\n        duration: 30,\n        targetMetrics: {\n          eyeContact: {\n            isLooking: true,\n            duration: 5,\n            quality: 0.8,\n            feedback: ''\n          }\n        },\n        instructions: [\n          'Look directly at your partner',\n          'Maintain soft, natural eye contact',\n          'Blink naturally - don\\'t stare'\n        ]\n      });\n    }, 4000);\n\n    return () => {\n      coachAwareTracking.stopTracking();\n    };\n  }, []);\n\n  return (\n    <div style={{ padding: '20px', backgroundColor: '#f0f0f0', borderRadius: '10px' }}>\n      <h2>Physical Features Test</h2>\n      \n      <div style={{ marginTop: '20px' }}>\n        <h3>Tracking State:</h3>\n        <pre style={{ backgroundColor: 'white', padding: '10px', borderRadius: '5px' }}>\n          {JSON.stringify(trackingState, null, 2)}\n        </pre>\n      </div>\n\n      <div style={{ marginTop: '20px' }}>\n        <h3>Coach Feedback:</h3>\n        <pre style={{ backgroundColor: 'white', padding: '10px', borderRadius: '5px' }}>\n          {JSON.stringify(coachFeedback, null, 2)}\n        </pre>\n      </div>\n    </div>\n  );\n};\n"],"names":["TestPhysicalFeatures","trackingState","setTrackingState","useState","coachFeedback","setCoachFeedback","useEffect","coachAwareTracking","registerCoach","state","feedback","console","log","startTracking","setTimeout","updateTrackingData","posture","isOpen","isLeaning","shoulderTension","eyeContact","isLooking","duration","quality","gestures","areOpen","isExpressive","frequency","facial","emotion","intensity","mirroring","startExercise","name","type","targetMetrics","instructions","stopTracking","_jsxs","style","padding","backgroundColor","borderRadius","children","_jsx","marginTop","JSON","stringify"],"sourceRoot":""}